[{"data":1,"prerenderedAt":1197},["Reactive",2],{"navigation":3,"/endorsement/javascript/grammar-data-types":559,"/endorsement/javascript/grammar-data-types-surround":1194},[4,272,318,536,544],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":317},"八股文","/endorsement",[276,286,293,304],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"JavaScript","/endorsement/javascript",[290],{"title":291,"_path":292},"语法和数据类型","/endorsement/javascript/grammar-data-types",{"title":294,"_path":295,"children":296},"构建工具","/endorsement/build-tools",[297],{"title":298,"_path":299,"children":300},"Webpack","/endorsement/build-tools/webpack",[301],{"title":302,"_path":303},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":305,"_path":306,"children":307},"Html","/endorsement/html",[308,311,314],{"title":309,"_path":310},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":312,"_path":313},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":315,"_path":316},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":319,"_path":320,"children":321,"icon":535},"代码考核","/code-assessment",[322,427,528],{"title":323,"_path":324,"children":325},"源码实现","/code-assessment/source",[326,360,376,404,411,418,421,424],{"title":327,"_path":328,"children":329},"原生 api","/code-assessment/source/native-api",[330,333,336,339,342,345,348,351,354,357],{"title":331,"_path":332},"polyfill","/code-assessment/source/native-api/polyfill",{"title":334,"_path":335},"ajax","/code-assessment/source/native-api/ajax",{"title":337,"_path":338},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":340,"_path":341},"new 操作符","/code-assessment/source/native-api/new",{"title":343,"_path":344},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":346,"_path":347},"定时器","/code-assessment/source/native-api/timer",{"title":349,"_path":350},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":352,"_path":353},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":355,"_path":356},"extends","/code-assessment/source/native-api/extends",{"title":358,"_path":359},"Promise","/code-assessment/source/native-api/promise",{"title":361,"_path":362,"children":363},"函数 Function","/code-assessment/source/function",[364,367,370,373],{"title":365,"_path":366},"函数防抖","/code-assessment/source/function/debounce",{"title":368,"_path":369},"函数节流","/code-assessment/source/function/throttle",{"title":371,"_path":372},"函数柯理化","/code-assessment/source/function/curry",{"title":374,"_path":375},"函数睡眠","/code-assessment/source/function/sleep",{"title":377,"_path":378,"children":379},"数组 Array","/code-assessment/source/array",[380,383,386,389,392,395,398,401],{"title":381,"_path":382},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":384,"_path":385},"数组扁平化","/code-assessment/source/array/flat",{"title":387,"_path":388},"原型方法","/code-assessment/source/array/prototype-method",{"title":390,"_path":391},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":393,"_path":394},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":396,"_path":397},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":399,"_path":400},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":402,"_path":403},"二维数组","/code-assessment/source/array/2d-array",{"title":405,"_path":406,"children":407},"字符串 String","/code-assessment/source/string",[408],{"title":409,"_path":410},"repeat()","/code-assessment/source/string/repeat",{"title":412,"_path":413,"children":414},"集合 Set","/code-assessment/source/set",[415],{"title":416,"_path":417},"遍历集合","/code-assessment/source/set/traverse",{"title":419,"_path":420},"获取通用类型","/code-assessment/source/get-generic-type",{"title":422,"_path":423},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":425,"_path":426},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":428,"_path":429,"children":430},"业务场景","/code-assessment/scene",[431,461,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525],{"title":358,"_path":432,"children":433},"/code-assessment/scene/promise",[434,437,440,443,446,449,452,455,458],{"title":435,"_path":436},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":438,"_path":439},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":441,"_path":442},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":444,"_path":445},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":447,"_path":448},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":450,"_path":451},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":453,"_path":454},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":456,"_path":457},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":459,"_path":460},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":462,"_path":463,"children":464},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[465,468],{"title":466,"_path":467},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":469,"_path":470},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":472,"_path":473},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":475,"_path":476},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":478,"_path":479},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":481,"_path":482},"倒计时","/code-assessment/scene/countdown",{"title":484,"_path":485},"日期格式化","/code-assessment/scene/date-format",{"title":487,"_path":488},"实现前端路由","/code-assessment/scene/frontend-route",{"title":490,"_path":491},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":493,"_path":494},"lodash.get","/code-assessment/scene/lodash-get",{"title":496,"_path":497},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":499,"_path":500},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":502,"_path":503},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":505,"_path":506},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":508,"_path":509},"随机数","/code-assessment/scene/random-number",{"title":511,"_path":512},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":514,"_path":515},"sku 算法实现","/code-assessment/scene/sku",{"title":517,"_path":518},"整数分割","/code-assessment/scene/split-number",{"title":520,"_path":521},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":523,"_path":524},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":526,"_path":527},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":529,"_path":530,"children":531},"Ts 类型挑战","/code-assessment/type-challeges",[532],{"title":533,"_path":534},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":537,"_path":538,"children":539,"icon":543},"项目","/project",[540],{"title":541,"_path":542},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":545,"_path":546,"children":547,"icon":558},"后端语言","/backend-languages",[548],{"title":549,"_path":550,"children":551},"Python","/backend-languages/python",[552,555],{"title":553,"_path":554},"基础","/backend-languages/python/base",{"title":556,"_path":557},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":292,"_dir":560,"_draft":561,"_partial":561,"_locale":562,"title":291,"description":562,"body":563,"_type":1189,"_id":1190,"_source":1191,"_file":1192,"_extension":1193},"javascript",false,"",{"type":564,"children":565,"toc":1170},"root",[566,574,580,600,605,656,661,712,717,736,740,762,767,797,802,811,816,822,933,938,993,1014,1042,1076,1089,1102,1107],{"type":567,"tag":568,"props":569,"children":571},"element","h2",{"id":570},"声明",[572],{"type":573,"value":570},"text",{"type":567,"tag":575,"props":576,"children":578},"h3",{"id":577},"变量声明",[579],{"type":573,"value":577},{"type":567,"tag":581,"props":582,"children":583},"ul",{},[584,590,595],{"type":567,"tag":585,"props":586,"children":587},"li",{},[588],{"type":573,"value":589},"var：声明一个变量，可选初始化一个值。",{"type":567,"tag":585,"props":591,"children":592},{},[593],{"type":573,"value":594},"let：声明一个块作用域的局部变量，可选初始化一个值。",{"type":567,"tag":585,"props":596,"children":597},{},[598],{"type":573,"value":599},"const：声明一个块作用域的只读常量。",{"type":567,"tag":575,"props":601,"children":603},{"id":602},"作用域",[604],{"type":573,"value":602},{"type":567,"tag":581,"props":606,"children":607},{},[608,621,633],{"type":567,"tag":585,"props":609,"children":610},{},[611,613,619],{"type":573,"value":612},"在函数之外声明的变量，叫做",{"type":567,"tag":614,"props":615,"children":616},"strong",{},[617],{"type":573,"value":618},"全局变量",{"type":573,"value":620},"，因为它可被当前文档中的任何其他代码所访问。",{"type":567,"tag":585,"props":622,"children":623},{},[624,626,631],{"type":573,"value":625},"在函数内部声明的变量，叫做",{"type":567,"tag":614,"props":627,"children":628},{},[629],{"type":573,"value":630},"局部变量",{"type":573,"value":632},"，因为它只能在当前函数的内部访问。",{"type":567,"tag":585,"props":634,"children":635},{},[636,638,650,654],{"type":573,"value":637},"ES6 之前的 JavaScript 没有",{"type":567,"tag":639,"props":640,"children":644},"a",{"href":641,"rel":642},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#%E8%AF%AD%E5%8F%A5%E5%9D%97",[643],"nofollow",[645],{"type":567,"tag":614,"props":646,"children":647},{},[648],{"type":573,"value":649},"语句块",{"type":567,"tag":614,"props":651,"children":652},{},[653],{"type":573,"value":602},{"type":573,"value":655},"；相反，语句块中声明的变量将成为语句块所在函数（或全局作用域）的局部变量。",{"type":567,"tag":575,"props":657,"children":659},{"id":658},"变量提升",[660],{"type":573,"value":658},{"type":567,"tag":581,"props":662,"children":663},{},[664,683,694],{"type":567,"tag":585,"props":665,"children":666},{},[667,669,674,676,681],{"type":573,"value":668},"在 ES6 中，let 和 const 同样会被提升变量到",{"type":567,"tag":614,"props":670,"children":671},{},[672],{"type":573,"value":673},"代码块",{"type":573,"value":675},"的顶部但是",{"type":567,"tag":614,"props":677,"children":678},{},[679],{"type":573,"value":680},"不会被赋予初始值",{"type":573,"value":682},"。",{"type":567,"tag":585,"props":684,"children":685},{},[686,688,693],{"type":573,"value":687},"在变量声明之前引用这个变量，将抛出",{"type":567,"tag":614,"props":689,"children":690},{},[691],{"type":573,"value":692},"引用错误（ReferenceError）",{"type":573,"value":682},{"type":567,"tag":585,"props":695,"children":696},{},[697,699,704,706,711],{"type":573,"value":698},"这个变量将从代码块一开始的时候就处在一个“",{"type":567,"tag":614,"props":700,"children":701},{},[702],{"type":573,"value":703},"暂时性死区",{"type":573,"value":705},"”，",{"type":567,"tag":614,"props":707,"children":708},{},[709],{"type":573,"value":710},"直到这个变量被声明为止",{"type":573,"value":682},{"type":567,"tag":575,"props":713,"children":715},{"id":714},"函数提升",[716],{"type":573,"value":714},{"type":567,"tag":718,"props":719,"children":720},"p",{},[721,723,728,730,735],{"type":573,"value":722},"对于函数来说，",{"type":567,"tag":614,"props":724,"children":725},{},[726],{"type":573,"value":727},"只有函数声明会被提升",{"type":573,"value":729},"到顶部，而",{"type":567,"tag":614,"props":731,"children":732},{},[733],{"type":573,"value":734},"函数表达式不会被提升",{"type":573,"value":682},{"type":567,"tag":575,"props":737,"children":738},{"id":618},[739],{"type":573,"value":618},{"type":567,"tag":581,"props":741,"children":742},{},[743,757],{"type":567,"tag":585,"props":744,"children":745},{},[746,748,755],{"type":573,"value":747},"全局变量是全局对象的属性。在网页中，（译注：缺省的）全局对象是 ",{"type":567,"tag":639,"props":749,"children":752},{"href":750,"rel":751},"https://developer.mozilla.org/zh-CN/docs/Web/API/Window",[643],[753],{"type":573,"value":754},"window",{"type":573,"value":756}," ，所以可以用形如 window.variable 的语法来设置和访问全局变量。",{"type":567,"tag":585,"props":758,"children":759},{},[760],{"type":573,"value":761},"可以通过指定 window 或 frame 的名字，在当前 window 或 frame 访问另一个 window 或 frame 中声明的变量。例如，在文档里声明一个叫 phoneNumber 的变量，那么可以在子框架里使用 parent.phoneNumber 的方式来引用它。",{"type":567,"tag":575,"props":763,"children":765},{"id":764},"常量",[766],{"type":573,"value":764},{"type":567,"tag":581,"props":768,"children":769},{},[770,775,780,792],{"type":567,"tag":585,"props":771,"children":772},{},[773],{"type":573,"value":774},"可以用关键字 const 创建一个只读的常量。常量标识符的命名规则和变量相同：必须以字母、下划线（_）或美元符号（$）开头并可以包含有字母、数字或下划线。",{"type":567,"tag":585,"props":776,"children":777},{},[778],{"type":573,"value":779},"常量不可以通过重新赋值改变其值，也不可以在代码运行时重新声明。它必须被初始化为某个值。",{"type":567,"tag":585,"props":781,"children":782},{},[783,785,790],{"type":573,"value":784},"常量的",{"type":567,"tag":614,"props":786,"children":787},{},[788],{"type":573,"value":789},"作用域规则与 let 块级作用域变量相同",{"type":573,"value":791},"。若省略 const 关键字，则该标识符将被视为变量。",{"type":567,"tag":585,"props":793,"children":794},{},[795],{"type":573,"value":796},"在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量。",{"type":567,"tag":575,"props":798,"children":800},{"id":799},"总结",[801],{"type":573,"value":799},{"type":567,"tag":718,"props":803,"children":804},{},[805],{"type":567,"tag":806,"props":807,"children":810},"img",{"alt":808,"src":809},"1.png","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/endorsement/javascript/grammar-data-types/1.png",[],{"type":567,"tag":568,"props":812,"children":814},{"id":813},"数据结构和类型",[815],{"type":573,"value":813},{"type":567,"tag":575,"props":817,"children":819},{"id":818},"_8-种数据类型",[820],{"type":573,"value":821},"8 种数据类型",{"type":567,"tag":581,"props":823,"children":824},{},[825,913],{"type":567,"tag":585,"props":826,"children":827},{},[828,830],{"type":573,"value":829},"7 种基本数据类型：\n",{"type":567,"tag":581,"props":831,"children":832},{},[833,845,855,865,877,889,901],{"type":567,"tag":585,"props":834,"children":835},{},[836,838,843],{"type":573,"value":837},"布尔值（",{"type":567,"tag":614,"props":839,"children":840},{},[841],{"type":573,"value":842},"Boolean",{"type":573,"value":844},"）：有 2 个值分别是：true 和 false。",{"type":567,"tag":585,"props":846,"children":847},{},[848,853],{"type":567,"tag":614,"props":849,"children":850},{},[851],{"type":573,"value":852},"null",{"type":573,"value":854},"：一个表明 null 值的特殊关键字。JavaScript 是大小写敏感的，因此 null 与 Null、NULL或变体完全不同。",{"type":567,"tag":585,"props":856,"children":857},{},[858,863],{"type":567,"tag":614,"props":859,"children":860},{},[861],{"type":573,"value":862},"undefined",{"type":573,"value":864},"：和 null 一样是一个特殊的关键字，undefined 表示变量未赋值时的属性。",{"type":567,"tag":585,"props":866,"children":867},{},[868,870,875],{"type":573,"value":869},"数字（",{"type":567,"tag":614,"props":871,"children":872},{},[873],{"type":573,"value":874},"Number",{"type":573,"value":876},"）：整数或浮点数，例如： 42 或者 3.14159。",{"type":567,"tag":585,"props":878,"children":879},{},[880,882,887],{"type":573,"value":881},"任意精度的整数（",{"type":567,"tag":614,"props":883,"children":884},{},[885],{"type":573,"value":886},"BigInt",{"type":573,"value":888},"）：可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制。",{"type":567,"tag":585,"props":890,"children":891},{},[892,894,899],{"type":573,"value":893},"字符串（",{"type":567,"tag":614,"props":895,"children":896},{},[897],{"type":573,"value":898},"String",{"type":573,"value":900},"）：字符串是一串表示文本值的字符序列，例如：\"Howdy\"。",{"type":567,"tag":585,"props":902,"children":903},{},[904,906,911],{"type":573,"value":905},"代表（",{"type":567,"tag":614,"props":907,"children":908},{},[909],{"type":573,"value":910},"Symbol",{"type":573,"value":912},"，在 ES6 中新添加的类型）。一种实例是唯一且不可改变的数据类型。",{"type":567,"tag":585,"props":914,"children":915},{},[916,918],{"type":573,"value":917},"引用数据类型：\n",{"type":567,"tag":581,"props":919,"children":920},{},[921],{"type":567,"tag":585,"props":922,"children":923},{},[924,926,931],{"type":573,"value":925},"对象（",{"type":567,"tag":614,"props":927,"children":928},{},[929],{"type":573,"value":930},"Object",{"type":573,"value":932},"）。",{"type":567,"tag":575,"props":934,"children":936},{"id":935},"存储位置",[937],{"type":573,"value":935},{"type":567,"tag":581,"props":939,"children":940},{},[941],{"type":567,"tag":585,"props":942,"children":943},{},[944,946,953,955,961,962,967,968,973,974,979,980,985,986,991],{"type":573,"value":945},"栈：存放基本数据类型（",{"type":567,"tag":947,"props":948,"children":950},"code",{"className":949},[],[951],{"type":573,"value":952},"Undefined",{"type":573,"value":954},"、",{"type":567,"tag":947,"props":956,"children":958},{"className":957},[],[959],{"type":573,"value":960},"Null",{"type":573,"value":954},{"type":567,"tag":947,"props":963,"children":965},{"className":964},[],[966],{"type":573,"value":842},{"type":573,"value":954},{"type":567,"tag":947,"props":969,"children":971},{"className":970},[],[972],{"type":573,"value":874},{"type":573,"value":954},{"type":567,"tag":947,"props":975,"children":977},{"className":976},[],[978],{"type":573,"value":898},{"type":573,"value":954},{"type":567,"tag":947,"props":981,"children":983},{"className":982},[],[984],{"type":573,"value":910},{"type":573,"value":954},{"type":567,"tag":947,"props":987,"children":989},{"className":988},[],[990],{"type":573,"value":886},{"type":573,"value":992},"）",{"type":567,"tag":994,"props":995,"children":996},"blockquote",{},[997,1009],{"type":567,"tag":718,"props":998,"children":999},{},[1000,1002,1007],{"type":573,"value":1001},"基本数据类型是直接存储在栈 stack 中的简单数据段，",{"type":567,"tag":614,"props":1003,"children":1004},{},[1005],{"type":573,"value":1006},"占据空间小、大小固定",{"type":573,"value":1008},"，属于被频繁使用的数据，因此放入栈中存储（在数据结构中，栈中数据的存储方式为先进后出）",{"type":567,"tag":718,"props":1010,"children":1011},{},[1012],{"type":573,"value":1013},"栈是一个优先队列，是按优先级进行排序的，优先级可以按照大小来规定",{"type":567,"tag":581,"props":1015,"children":1016},{},[1017],{"type":567,"tag":585,"props":1018,"children":1019},{},[1020,1022,1028,1029,1035,1036,1041],{"type":573,"value":1021},"堆：存放引用数据类型（",{"type":567,"tag":947,"props":1023,"children":1025},{"className":1024},[],[1026],{"type":573,"value":1027},"对象",{"type":573,"value":954},{"type":567,"tag":947,"props":1030,"children":1032},{"className":1031},[],[1033],{"type":573,"value":1034},"数组",{"type":573,"value":954},{"type":567,"tag":947,"props":1037,"children":1039},{"className":1038},[],[1040],{"type":573,"value":556},{"type":573,"value":992},{"type":567,"tag":994,"props":1043,"children":1044},{},[1045,1057],{"type":567,"tag":718,"props":1046,"children":1047},{},[1048,1050,1055],{"type":573,"value":1049},"引用数据类型是存储在堆 heap 中的对象，",{"type":567,"tag":614,"props":1051,"children":1052},{},[1053],{"type":573,"value":1054},"占据空间大、大小不固定",{"type":573,"value":1056},"。如果存储在栈中，将会影响程序运行的性能；",{"type":567,"tag":718,"props":1058,"children":1059},{},[1060,1062,1067,1069,1074],{"type":573,"value":1061},"引用数据类型在栈中存储了",{"type":567,"tag":614,"props":1063,"children":1064},{},[1065],{"type":573,"value":1066},"指针",{"type":573,"value":1068},"，该",{"type":567,"tag":614,"props":1070,"children":1071},{},[1072],{"type":573,"value":1073},"指针指向堆中该实体的起始地址",{"type":573,"value":1075},"。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体",{"type":567,"tag":581,"props":1077,"children":1078},{},[1079],{"type":567,"tag":585,"props":1080,"children":1081},{},[1082,1084],{"type":573,"value":1083},"在操作系统中，内存被分为",{"type":567,"tag":614,"props":1085,"children":1086},{},[1087],{"type":573,"value":1088},"栈区和堆区",{"type":567,"tag":994,"props":1090,"children":1091},{},[1092,1097],{"type":567,"tag":718,"props":1093,"children":1094},{},[1095],{"type":573,"value":1096},"栈区：内存由编译器自动分配释放，存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈",{"type":567,"tag":718,"props":1098,"children":1099},{},[1100],{"type":573,"value":1101},"堆区：内存一般由开发者分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收",{"type":567,"tag":568,"props":1103,"children":1105},{"id":1104},"字面量",[1106],{"type":573,"value":1104},{"type":567,"tag":581,"props":1108,"children":1109},{},[1110,1120,1130,1140,1150,1160],{"type":567,"tag":585,"props":1111,"children":1112},{},[1113],{"type":567,"tag":639,"props":1114,"children":1117},{"href":1115,"rel":1116},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E6%95%B0%E7%BB%84%E5%AD%97%E9%9D%A2%E9%87%8F",[643],[1118],{"type":573,"value":1119},"数组字面量",{"type":567,"tag":585,"props":1121,"children":1122},{},[1123],{"type":567,"tag":639,"props":1124,"children":1127},{"href":1125,"rel":1126},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%B8%83%E5%B0%94%E5%AD%97%E9%9D%A2%E9%87%8F",[643],[1128],{"type":573,"value":1129},"布尔字面量",{"type":567,"tag":585,"props":1131,"children":1132},{},[1133],{"type":567,"tag":639,"props":1134,"children":1137},{"href":1135,"rel":1136},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E6%95%B0%E5%AD%97%E5%AD%97%E9%9D%A2%E9%87%8F",[643],[1138],{"type":573,"value":1139},"数字字面量",{"type":567,"tag":585,"props":1141,"children":1142},{},[1143],{"type":567,"tag":639,"props":1144,"children":1147},{"href":1145,"rel":1146},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F",[643],[1148],{"type":573,"value":1149},"对象字面量",{"type":567,"tag":585,"props":1151,"children":1152},{},[1153],{"type":567,"tag":639,"props":1154,"children":1157},{"href":1155,"rel":1156},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#regexp_%E5%AD%97%E9%9D%A2%E9%87%8F",[643],[1158],{"type":573,"value":1159},"RegExp 字面量",{"type":567,"tag":585,"props":1161,"children":1162},{},[1163],{"type":567,"tag":639,"props":1164,"children":1167},{"href":1165,"rel":1166},"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F",[643],[1168],{"type":573,"value":1169},"字符串字面量",{"title":562,"searchDepth":1171,"depth":1171,"links":1172},5,[1173,1184,1188],{"id":570,"depth":1174,"text":570,"children":1175},2,[1176,1178,1179,1180,1181,1182,1183],{"id":577,"depth":1177,"text":577},3,{"id":602,"depth":1177,"text":602},{"id":658,"depth":1177,"text":658},{"id":714,"depth":1177,"text":714},{"id":618,"depth":1177,"text":618},{"id":764,"depth":1177,"text":764},{"id":799,"depth":1177,"text":799},{"id":813,"depth":1174,"text":813,"children":1185},[1186,1187],{"id":818,"depth":1177,"text":821},{"id":935,"depth":1177,"text":935},{"id":1104,"depth":1174,"text":1104},"markdown","content:2.endorsement:2.javascript:1.grammar-data-types.md","content","2.endorsement/2.javascript/1.grammar-data-types.md","md",[1195,1196],{"_path":285,"title":284,"description":562},{"_path":303,"title":302,"description":562},1717735574091]