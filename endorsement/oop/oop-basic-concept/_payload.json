[{"data":1,"prerenderedAt":3191},["Reactive",2],{"navigation":3,"/endorsement/oop/oop-basic-concept":559,"/endorsement/oop/oop-basic-concept-surround":3187},[4,272,318,536,544],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":317},"八股文","/endorsement",[276,286,293,304],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"JavaScript","/endorsement/javascript",[290],{"title":291,"_path":292},"语法和数据类型","/endorsement/javascript/grammar-data-types",{"title":294,"_path":295,"children":296},"构建工具","/endorsement/build-tools",[297],{"title":298,"_path":299,"children":300},"Webpack","/endorsement/build-tools/webpack",[301],{"title":302,"_path":303},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":305,"_path":306,"children":307},"Html","/endorsement/html",[308,311,314],{"title":309,"_path":310},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":312,"_path":313},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":315,"_path":316},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":319,"_path":320,"children":321,"icon":535},"代码考核","/code-assessment",[322,427,528],{"title":323,"_path":324,"children":325},"源码实现","/code-assessment/source",[326,360,376,404,411,418,421,424],{"title":327,"_path":328,"children":329},"原生 api","/code-assessment/source/native-api",[330,333,336,339,342,345,348,351,354,357],{"title":331,"_path":332},"polyfill","/code-assessment/source/native-api/polyfill",{"title":334,"_path":335},"ajax","/code-assessment/source/native-api/ajax",{"title":337,"_path":338},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":340,"_path":341},"new 操作符","/code-assessment/source/native-api/new",{"title":343,"_path":344},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":346,"_path":347},"定时器","/code-assessment/source/native-api/timer",{"title":349,"_path":350},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":352,"_path":353},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":355,"_path":356},"extends","/code-assessment/source/native-api/extends",{"title":358,"_path":359},"Promise","/code-assessment/source/native-api/promise",{"title":361,"_path":362,"children":363},"函数 Function","/code-assessment/source/function",[364,367,370,373],{"title":365,"_path":366},"函数防抖","/code-assessment/source/function/debounce",{"title":368,"_path":369},"函数节流","/code-assessment/source/function/throttle",{"title":371,"_path":372},"函数柯理化","/code-assessment/source/function/curry",{"title":374,"_path":375},"函数睡眠","/code-assessment/source/function/sleep",{"title":377,"_path":378,"children":379},"数组 Array","/code-assessment/source/array",[380,383,386,389,392,395,398,401],{"title":381,"_path":382},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":384,"_path":385},"数组扁平化","/code-assessment/source/array/flat",{"title":387,"_path":388},"原型方法","/code-assessment/source/array/prototype-method",{"title":390,"_path":391},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":393,"_path":394},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":396,"_path":397},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":399,"_path":400},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":402,"_path":403},"二维数组","/code-assessment/source/array/2d-array",{"title":405,"_path":406,"children":407},"字符串 String","/code-assessment/source/string",[408],{"title":409,"_path":410},"repeat()","/code-assessment/source/string/repeat",{"title":412,"_path":413,"children":414},"集合 Set","/code-assessment/source/set",[415],{"title":416,"_path":417},"遍历集合","/code-assessment/source/set/traverse",{"title":419,"_path":420},"获取通用类型","/code-assessment/source/get-generic-type",{"title":422,"_path":423},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":425,"_path":426},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":428,"_path":429,"children":430},"业务场景","/code-assessment/scene",[431,461,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525],{"title":358,"_path":432,"children":433},"/code-assessment/scene/promise",[434,437,440,443,446,449,452,455,458],{"title":435,"_path":436},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":438,"_path":439},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":441,"_path":442},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":444,"_path":445},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":447,"_path":448},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":450,"_path":451},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":453,"_path":454},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":456,"_path":457},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":459,"_path":460},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":462,"_path":463,"children":464},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[465,468],{"title":466,"_path":467},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":469,"_path":470},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":472,"_path":473},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":475,"_path":476},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":478,"_path":479},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":481,"_path":482},"倒计时","/code-assessment/scene/countdown",{"title":484,"_path":485},"日期格式化","/code-assessment/scene/date-format",{"title":487,"_path":488},"实现前端路由","/code-assessment/scene/frontend-route",{"title":490,"_path":491},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":493,"_path":494},"lodash.get","/code-assessment/scene/lodash-get",{"title":496,"_path":497},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":499,"_path":500},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":502,"_path":503},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":505,"_path":506},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":508,"_path":509},"随机数","/code-assessment/scene/random-number",{"title":511,"_path":512},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":514,"_path":515},"sku 算法实现","/code-assessment/scene/sku",{"title":517,"_path":518},"整数分割","/code-assessment/scene/split-number",{"title":520,"_path":521},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":523,"_path":524},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":526,"_path":527},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":529,"_path":530,"children":531},"Ts 类型挑战","/code-assessment/type-challeges",[532],{"title":533,"_path":534},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":537,"_path":538,"children":539,"icon":543},"项目","/project",[540],{"title":541,"_path":542},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":545,"_path":546,"children":547,"icon":558},"后端语言","/backend-languages",[548],{"title":549,"_path":550,"children":551},"Python","/backend-languages/python",[552,555],{"title":553,"_path":554},"基础","/backend-languages/python/base",{"title":556,"_path":557},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":282,"_dir":560,"_draft":561,"_partial":561,"_locale":562,"title":281,"description":562,"body":563,"_type":3182,"_id":3183,"_source":3184,"_file":3185,"_extension":3186},"oop",false,"",{"type":564,"children":565,"toc":3168},"root",[566,574,589,594,600,605,610,615,628,633,668,674,679,687,696,704,712,720,728,736,744,752,760,765,771,776,914,919,932,937,1064,1069,1074,1079,1084,1463,1468,1473,1665,1670,1675,1680,1685,1690,1695,2025,2030,2246,2251,2256,2261,2266,2271,2276,2480,2485,2490,2614,2619,2624,2629,2634,2861,2866,2871,3157,3162],{"type":567,"tag":568,"props":569,"children":571},"element","h2",{"id":570},"类与对象",[572],{"type":573,"value":570},"text",{"type":567,"tag":575,"props":576,"children":577},"ul",{},[578,584],{"type":567,"tag":579,"props":580,"children":581},"li",{},[582],{"type":573,"value":583},"类（Class）：类是具有相同属性和行为的对象的蓝图或模板。在类中定义了数据成员（即属性或状态）和成员函数（即方法或操作），描述了该类所有对象共有的特征和功能。",{"type":567,"tag":579,"props":585,"children":586},{},[587],{"type":573,"value":588},"对象（Object）：对象是类的一个实例，每个对象有自己的属性值，并且可以执行类中定义的方法。例如，在现实世界中，一个“狗”是一个类，而“波比”是一只具体的狗，就是这个类的一个对象。",{"type":567,"tag":568,"props":590,"children":592},{"id":591},"抽象",[593],{"type":573,"value":591},{"type":567,"tag":595,"props":596,"children":597},"p",{},[598],{"type":573,"value":599},"抽象是指从具体实现中提取出共同特征的过程，通常通过接口（Interface）或抽象类（Abstract Class）实现。抽象类不能被实例化，但可以包含抽象方法（没有具体实现的方法），要求子类必须提供其实现。",{"type":567,"tag":568,"props":601,"children":603},{"id":602},"消息传递",[604],{"type":573,"value":602},{"type":567,"tag":595,"props":606,"children":607},{},[608],{"type":573,"value":609},"在面向对象系统中，对象之间通过消息传递进行交互。一个对象向另一个对象发送消息请求服务，实际上就是调用目标对象的方法。",{"type":567,"tag":568,"props":611,"children":613},{"id":612},"组合与聚合",[614],{"type":573,"value":612},{"type":567,"tag":575,"props":616,"children":617},{},[618,623],{"type":567,"tag":579,"props":619,"children":620},{},[621],{"type":573,"value":622},"组合（Composition）是强关联关系，表示一个对象包含其他对象作为其内部部分，当外部对象不存在时，内部对象也随之不存在。",{"type":567,"tag":579,"props":624,"children":625},{},[626],{"type":573,"value":627},"聚合（Aggregation）也是部分与整体的关系，但与组合相比，它是较弱的关联，代表整体拥有部分，但部分可以独立存在。",{"type":567,"tag":568,"props":629,"children":631},{"id":630},"三大特征",[632],{"type":573,"value":630},{"type":567,"tag":634,"props":635,"children":636},"ol",{},[637,648,658],{"type":567,"tag":579,"props":638,"children":639},{},[640,646],{"type":567,"tag":641,"props":642,"children":643},"strong",{},[644],{"type":573,"value":645},"封装",{"type":573,"value":647},"：封装是将数据和处理这些数据的函数绑定在一起，对外隐藏内部实现细节，仅通过公共接口（公有方法）访问和修改对象的状态。这样能够保护数据安全，防止外部代码直接篡改对象内部状态。",{"type":567,"tag":579,"props":649,"children":650},{},[651,656],{"type":567,"tag":641,"props":652,"children":653},{},[654],{"type":573,"value":655},"继承",{"type":573,"value":657},"：继承允许子类（Derived Class）继承父类（Base Class）的属性和方法，同时还可以添加新的属性、覆盖或扩展已有的方法。这有助于代码复用和层次化的设计结构。",{"type":567,"tag":579,"props":659,"children":660},{},[661,666],{"type":567,"tag":641,"props":662,"children":663},{},[664],{"type":573,"value":665},"多态",{"type":573,"value":667},"：多态是指同一种类型的引用可以指向不同类型的具体对象，或者不同类的对象对同一消息作出不同的响应。包括静态多态（编译时多态，如函数重载）和动态多态（运行时多态，如虚函数机制）。",{"type":567,"tag":568,"props":669,"children":671},{"id":670},"solid",[672],{"type":573,"value":673},"SOLID",{"type":567,"tag":595,"props":675,"children":676},{},[677],{"type":573,"value":678},"SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。这些原则由 Robert C. Martin 等人提出，它们包括以下五个原则：",{"type":567,"tag":575,"props":680,"children":681},{},[682],{"type":567,"tag":579,"props":683,"children":684},{},[685],{"type":573,"value":686},"单一职责原则（Single Responsibility Principle，SRP）",{"type":567,"tag":688,"props":689,"children":690},"blockquote",{},[691],{"type":567,"tag":595,"props":692,"children":693},{},[694],{"type":573,"value":695},"对一个类（对象、方法）来说，应该仅有一个引起它变化的原因，也就是说，一个对象只做一件事。",{"type":567,"tag":575,"props":697,"children":698},{},[699],{"type":567,"tag":579,"props":700,"children":701},{},[702],{"type":573,"value":703},"开放/封闭原则（Open/Closed Principle，OCP）",{"type":567,"tag":688,"props":705,"children":706},{},[707],{"type":567,"tag":595,"props":708,"children":709},{},[710],{"type":573,"value":711},"一个模块在扩展性方面应该是开放的，而在更改性方面应该是封闭的，也就是对扩展开放，对修改封闭。",{"type":567,"tag":575,"props":713,"children":714},{},[715],{"type":567,"tag":579,"props":716,"children":717},{},[718],{"type":573,"value":719},"里氏替换原则（Liskov Substitution Principle，LSP）",{"type":567,"tag":688,"props":721,"children":722},{},[723],{"type":567,"tag":595,"props":724,"children":725},{},[726],{"type":573,"value":727},"使用接口时，我们必须确保子类能够替换父类所出现的任何地方，也就是说，父类的接口必须确保所有子类都可以实现需求，而不是某一个子类。",{"type":567,"tag":575,"props":729,"children":730},{},[731],{"type":567,"tag":579,"props":732,"children":733},{},[734],{"type":573,"value":735},"接口隔离原则（Interface Segregation Principle，ISP）",{"type":567,"tag":688,"props":737,"children":738},{},[739],{"type":567,"tag":595,"props":740,"children":741},{},[742],{"type":573,"value":743},"让高层模块不要依赖低层模块。",{"type":567,"tag":575,"props":745,"children":746},{},[747],{"type":567,"tag":579,"props":748,"children":749},{},[750],{"type":573,"value":751},"依赖反转原则（Dependency Inversion Principle，DIP）",{"type":567,"tag":688,"props":753,"children":754},{},[755],{"type":567,"tag":595,"props":756,"children":757},{},[758],{"type":573,"value":759},"强调每个类继承的接口一定要保证最少，不能继承无用的接口，保证接口隔离原则的前提是要先保证职责单一原则。",{"type":567,"tag":595,"props":761,"children":762},{},[763],{"type":573,"value":764},"这些原则共同促使开发者创建具有高内聚、低耦合、易扩展和易维护性的软件系统。遵循这些原则有助于构建更健壮的面向对象系统，提高代码质量和可维护性。",{"type":567,"tag":766,"props":767,"children":769},"h3",{"id":768},"单一职责原则",[770],{"type":573,"value":768},{"type":567,"tag":595,"props":772,"children":773},{},[774],{"type":573,"value":775},"单一职责原则（Single Responsibility Principle，SRP）要求一个类或者模块只负责完成一个职责（或者功能）。 假设我们有一个简单的厨师类，它负责烹饪和洗碗两个职责：",{"type":567,"tag":777,"props":778,"children":782},"pre",{"className":779,"code":780,"language":781,"meta":562,"style":562},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n","js",[783],{"type":567,"tag":784,"props":785,"children":786},"code",{"__ignoreMap":562},[787,811,841,851,860,870,888,897,905],{"type":567,"tag":788,"props":789,"children":792},"span",{"class":790,"line":791},"line",1,[793,799,805],{"type":567,"tag":788,"props":794,"children":796},{"style":795},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[797],{"type":573,"value":798},"class",{"type":567,"tag":788,"props":800,"children":802},{"style":801},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[803],{"type":573,"value":804}," Chef",{"type":567,"tag":788,"props":806,"children":808},{"style":807},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[809],{"type":573,"value":810}," {\n",{"type":567,"tag":788,"props":812,"children":814},{"class":790,"line":813},2,[815,821,826,832,837],{"type":567,"tag":788,"props":816,"children":818},{"style":817},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[819],{"type":573,"value":820},"  cookDish",{"type":567,"tag":788,"props":822,"children":823},{"style":807},[824],{"type":573,"value":825},"(",{"type":567,"tag":788,"props":827,"children":829},{"style":828},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[830],{"type":573,"value":831},"dish",{"type":567,"tag":788,"props":833,"children":834},{"style":807},[835],{"type":573,"value":836},")",{"type":567,"tag":788,"props":838,"children":839},{"style":807},[840],{"type":573,"value":810},{"type":567,"tag":788,"props":842,"children":844},{"class":790,"line":843},3,[845],{"type":567,"tag":788,"props":846,"children":848},{"style":847},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[849],{"type":573,"value":850},"    // 烹饪菜品的具体实现\n",{"type":567,"tag":788,"props":852,"children":854},{"class":790,"line":853},4,[855],{"type":567,"tag":788,"props":856,"children":857},{"style":807},[858],{"type":573,"value":859},"  }\n",{"type":567,"tag":788,"props":861,"children":863},{"class":790,"line":862},5,[864],{"type":567,"tag":788,"props":865,"children":867},{"emptyLinePlaceholder":866},true,[868],{"type":573,"value":869},"\n",{"type":567,"tag":788,"props":871,"children":873},{"class":790,"line":872},6,[874,879,884],{"type":567,"tag":788,"props":875,"children":876},{"style":817},[877],{"type":573,"value":878},"  washDishes",{"type":567,"tag":788,"props":880,"children":881},{"style":807},[882],{"type":573,"value":883},"()",{"type":567,"tag":788,"props":885,"children":886},{"style":807},[887],{"type":573,"value":810},{"type":567,"tag":788,"props":889,"children":891},{"class":790,"line":890},7,[892],{"type":567,"tag":788,"props":893,"children":894},{"style":847},[895],{"type":573,"value":896},"    // 洗碗的具体实现\n",{"type":567,"tag":788,"props":898,"children":900},{"class":790,"line":899},8,[901],{"type":567,"tag":788,"props":902,"children":903},{"style":807},[904],{"type":573,"value":859},{"type":567,"tag":788,"props":906,"children":908},{"class":790,"line":907},9,[909],{"type":567,"tag":788,"props":910,"children":911},{"style":807},[912],{"type":573,"value":913},"}\n",{"type":567,"tag":595,"props":915,"children":916},{},[917],{"type":573,"value":918},"这个类违反了单一职责原则，因为它有两个职责：烹饪和洗碗。这样的设计可能导致以下问题：",{"type":567,"tag":634,"props":920,"children":921},{},[922,927],{"type":567,"tag":579,"props":923,"children":924},{},[925],{"type":573,"value":926},"如果厨师的烹饪逻辑变化，需要修改 cookDish 方法，这可能会影响洗碗的部分。",{"type":567,"tag":579,"props":928,"children":929},{},[930],{"type":573,"value":931},"如果洗碗的逻辑变化，需要修改 washDishes 方法，这可能会影响烹饪的部分。",{"type":567,"tag":595,"props":933,"children":934},{},[935],{"type":573,"value":936},"按照单一职责原则，我们应该将这两个职责分开，分别由不同的类负责：",{"type":567,"tag":777,"props":938,"children":940},{"className":779,"code":939,"language":781,"meta":562,"style":562},"class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n}\n\nclass Dishwasher {\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n",[941],{"type":567,"tag":784,"props":942,"children":943},{"__ignoreMap":562},[944,959,982,989,996,1003,1010,1026,1041,1048,1056],{"type":567,"tag":788,"props":945,"children":946},{"class":790,"line":791},[947,951,955],{"type":567,"tag":788,"props":948,"children":949},{"style":795},[950],{"type":573,"value":798},{"type":567,"tag":788,"props":952,"children":953},{"style":801},[954],{"type":573,"value":804},{"type":567,"tag":788,"props":956,"children":957},{"style":807},[958],{"type":573,"value":810},{"type":567,"tag":788,"props":960,"children":961},{"class":790,"line":813},[962,966,970,974,978],{"type":567,"tag":788,"props":963,"children":964},{"style":817},[965],{"type":573,"value":820},{"type":567,"tag":788,"props":967,"children":968},{"style":807},[969],{"type":573,"value":825},{"type":567,"tag":788,"props":971,"children":972},{"style":828},[973],{"type":573,"value":831},{"type":567,"tag":788,"props":975,"children":976},{"style":807},[977],{"type":573,"value":836},{"type":567,"tag":788,"props":979,"children":980},{"style":807},[981],{"type":573,"value":810},{"type":567,"tag":788,"props":983,"children":984},{"class":790,"line":843},[985],{"type":567,"tag":788,"props":986,"children":987},{"style":847},[988],{"type":573,"value":850},{"type":567,"tag":788,"props":990,"children":991},{"class":790,"line":853},[992],{"type":567,"tag":788,"props":993,"children":994},{"style":807},[995],{"type":573,"value":859},{"type":567,"tag":788,"props":997,"children":998},{"class":790,"line":862},[999],{"type":567,"tag":788,"props":1000,"children":1001},{"style":807},[1002],{"type":573,"value":913},{"type":567,"tag":788,"props":1004,"children":1005},{"class":790,"line":872},[1006],{"type":567,"tag":788,"props":1007,"children":1008},{"emptyLinePlaceholder":866},[1009],{"type":573,"value":869},{"type":567,"tag":788,"props":1011,"children":1012},{"class":790,"line":890},[1013,1017,1022],{"type":567,"tag":788,"props":1014,"children":1015},{"style":795},[1016],{"type":573,"value":798},{"type":567,"tag":788,"props":1018,"children":1019},{"style":801},[1020],{"type":573,"value":1021}," Dishwasher",{"type":567,"tag":788,"props":1023,"children":1024},{"style":807},[1025],{"type":573,"value":810},{"type":567,"tag":788,"props":1027,"children":1028},{"class":790,"line":899},[1029,1033,1037],{"type":567,"tag":788,"props":1030,"children":1031},{"style":817},[1032],{"type":573,"value":878},{"type":567,"tag":788,"props":1034,"children":1035},{"style":807},[1036],{"type":573,"value":883},{"type":567,"tag":788,"props":1038,"children":1039},{"style":807},[1040],{"type":573,"value":810},{"type":567,"tag":788,"props":1042,"children":1043},{"class":790,"line":907},[1044],{"type":567,"tag":788,"props":1045,"children":1046},{"style":847},[1047],{"type":573,"value":896},{"type":567,"tag":788,"props":1049,"children":1051},{"class":790,"line":1050},10,[1052],{"type":567,"tag":788,"props":1053,"children":1054},{"style":807},[1055],{"type":573,"value":859},{"type":567,"tag":788,"props":1057,"children":1059},{"class":790,"line":1058},11,[1060],{"type":567,"tag":788,"props":1061,"children":1062},{"style":807},[1063],{"type":573,"value":913},{"type":567,"tag":595,"props":1065,"children":1066},{},[1067],{"type":573,"value":1068},"这样，Chef 类专注于烹饪，而 Dishwasher 类专注于洗碗。每个类都有一个单一的职责，使得代码更清晰、易于理解，并且在未来的变更中更具弹性。",{"type":567,"tag":766,"props":1070,"children":1072},{"id":1071},"开放封闭原则",[1073],{"type":573,"value":1071},{"type":567,"tag":595,"props":1075,"children":1076},{},[1077],{"type":573,"value":1078},"开关封闭原则（Open/Closed Principle，OCP）要求软件实体（例如类、模块、函数等）应该对扩展开放，对修改关闭。简而言之，一个模块在扩展新功能时不应该修改原有的代码，而是通过添加新的代码来实现扩展。",{"type":567,"tag":595,"props":1080,"children":1081},{},[1082],{"type":573,"value":1083},"考虑一个动物园的场景。我们有一些动物，每个动物都会发出叫声。初始设计如下：",{"type":567,"tag":777,"props":1085,"children":1087},{"className":779,"code":1086,"language":781,"meta":562,"style":562},"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    // 默认的叫声\n    console.log(\"Some generic animal sound\");\n  }\n}\n\nclass Lion extends Animal {\n  makeSound() {\n    console.log(\"Roar!\");\n  }\n}\n\nclass Elephant extends Animal {\n  makeSound() {\n    console.log(\"Trumpet!\");\n  }\n}\n",[1088],{"type":567,"tag":784,"props":1089,"children":1090},{"__ignoreMap":562},[1091,1107,1132,1165,1172,1179,1195,1203,1245,1252,1259,1266,1292,1308,1345,1353,1361,1369,1394,1410,1447,1455],{"type":567,"tag":788,"props":1092,"children":1093},{"class":790,"line":791},[1094,1098,1103],{"type":567,"tag":788,"props":1095,"children":1096},{"style":795},[1097],{"type":573,"value":798},{"type":567,"tag":788,"props":1099,"children":1100},{"style":801},[1101],{"type":573,"value":1102}," Animal",{"type":567,"tag":788,"props":1104,"children":1105},{"style":807},[1106],{"type":573,"value":810},{"type":567,"tag":788,"props":1108,"children":1109},{"class":790,"line":813},[1110,1115,1119,1124,1128],{"type":567,"tag":788,"props":1111,"children":1112},{"style":795},[1113],{"type":573,"value":1114},"  constructor",{"type":567,"tag":788,"props":1116,"children":1117},{"style":807},[1118],{"type":573,"value":825},{"type":567,"tag":788,"props":1120,"children":1121},{"style":828},[1122],{"type":573,"value":1123},"name",{"type":567,"tag":788,"props":1125,"children":1126},{"style":807},[1127],{"type":573,"value":836},{"type":567,"tag":788,"props":1129,"children":1130},{"style":807},[1131],{"type":573,"value":810},{"type":567,"tag":788,"props":1133,"children":1134},{"class":790,"line":843},[1135,1141,1146,1150,1155,1160],{"type":567,"tag":788,"props":1136,"children":1138},{"style":1137},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[1139],{"type":573,"value":1140},"    this",{"type":567,"tag":788,"props":1142,"children":1143},{"style":807},[1144],{"type":573,"value":1145},".",{"type":567,"tag":788,"props":1147,"children":1148},{"style":828},[1149],{"type":573,"value":1123},{"type":567,"tag":788,"props":1151,"children":1152},{"style":807},[1153],{"type":573,"value":1154}," =",{"type":567,"tag":788,"props":1156,"children":1157},{"style":828},[1158],{"type":573,"value":1159}," name",{"type":567,"tag":788,"props":1161,"children":1162},{"style":807},[1163],{"type":573,"value":1164},";\n",{"type":567,"tag":788,"props":1166,"children":1167},{"class":790,"line":853},[1168],{"type":567,"tag":788,"props":1169,"children":1170},{"style":807},[1171],{"type":573,"value":859},{"type":567,"tag":788,"props":1173,"children":1174},{"class":790,"line":862},[1175],{"type":567,"tag":788,"props":1176,"children":1177},{"emptyLinePlaceholder":866},[1178],{"type":573,"value":869},{"type":567,"tag":788,"props":1180,"children":1181},{"class":790,"line":872},[1182,1187,1191],{"type":567,"tag":788,"props":1183,"children":1184},{"style":817},[1185],{"type":573,"value":1186},"  makeSound",{"type":567,"tag":788,"props":1188,"children":1189},{"style":807},[1190],{"type":573,"value":883},{"type":567,"tag":788,"props":1192,"children":1193},{"style":807},[1194],{"type":573,"value":810},{"type":567,"tag":788,"props":1196,"children":1197},{"class":790,"line":890},[1198],{"type":567,"tag":788,"props":1199,"children":1200},{"style":847},[1201],{"type":573,"value":1202},"    // 默认的叫声\n",{"type":567,"tag":788,"props":1204,"children":1205},{"class":790,"line":899},[1206,1211,1215,1220,1224,1230,1236,1240],{"type":567,"tag":788,"props":1207,"children":1208},{"style":828},[1209],{"type":573,"value":1210},"    console",{"type":567,"tag":788,"props":1212,"children":1213},{"style":807},[1214],{"type":573,"value":1145},{"type":567,"tag":788,"props":1216,"children":1217},{"style":817},[1218],{"type":573,"value":1219},"log",{"type":567,"tag":788,"props":1221,"children":1222},{"style":807},[1223],{"type":573,"value":825},{"type":567,"tag":788,"props":1225,"children":1227},{"style":1226},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1228],{"type":573,"value":1229},"\"",{"type":567,"tag":788,"props":1231,"children":1233},{"style":1232},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1234],{"type":573,"value":1235},"Some generic animal sound",{"type":567,"tag":788,"props":1237,"children":1238},{"style":1226},[1239],{"type":573,"value":1229},{"type":567,"tag":788,"props":1241,"children":1242},{"style":807},[1243],{"type":573,"value":1244},");\n",{"type":567,"tag":788,"props":1246,"children":1247},{"class":790,"line":907},[1248],{"type":567,"tag":788,"props":1249,"children":1250},{"style":807},[1251],{"type":573,"value":859},{"type":567,"tag":788,"props":1253,"children":1254},{"class":790,"line":1050},[1255],{"type":567,"tag":788,"props":1256,"children":1257},{"style":807},[1258],{"type":573,"value":913},{"type":567,"tag":788,"props":1260,"children":1261},{"class":790,"line":1058},[1262],{"type":567,"tag":788,"props":1263,"children":1264},{"emptyLinePlaceholder":866},[1265],{"type":573,"value":869},{"type":567,"tag":788,"props":1267,"children":1269},{"class":790,"line":1268},12,[1270,1274,1279,1284,1288],{"type":567,"tag":788,"props":1271,"children":1272},{"style":795},[1273],{"type":573,"value":798},{"type":567,"tag":788,"props":1275,"children":1276},{"style":801},[1277],{"type":573,"value":1278}," Lion",{"type":567,"tag":788,"props":1280,"children":1281},{"style":795},[1282],{"type":573,"value":1283}," extends",{"type":567,"tag":788,"props":1285,"children":1286},{"style":817},[1287],{"type":573,"value":1102},{"type":567,"tag":788,"props":1289,"children":1290},{"style":807},[1291],{"type":573,"value":810},{"type":567,"tag":788,"props":1293,"children":1295},{"class":790,"line":1294},13,[1296,1300,1304],{"type":567,"tag":788,"props":1297,"children":1298},{"style":817},[1299],{"type":573,"value":1186},{"type":567,"tag":788,"props":1301,"children":1302},{"style":807},[1303],{"type":573,"value":883},{"type":567,"tag":788,"props":1305,"children":1306},{"style":807},[1307],{"type":573,"value":810},{"type":567,"tag":788,"props":1309,"children":1311},{"class":790,"line":1310},14,[1312,1316,1320,1324,1328,1332,1337,1341],{"type":567,"tag":788,"props":1313,"children":1314},{"style":828},[1315],{"type":573,"value":1210},{"type":567,"tag":788,"props":1317,"children":1318},{"style":807},[1319],{"type":573,"value":1145},{"type":567,"tag":788,"props":1321,"children":1322},{"style":817},[1323],{"type":573,"value":1219},{"type":567,"tag":788,"props":1325,"children":1326},{"style":807},[1327],{"type":573,"value":825},{"type":567,"tag":788,"props":1329,"children":1330},{"style":1226},[1331],{"type":573,"value":1229},{"type":567,"tag":788,"props":1333,"children":1334},{"style":1232},[1335],{"type":573,"value":1336},"Roar!",{"type":567,"tag":788,"props":1338,"children":1339},{"style":1226},[1340],{"type":573,"value":1229},{"type":567,"tag":788,"props":1342,"children":1343},{"style":807},[1344],{"type":573,"value":1244},{"type":567,"tag":788,"props":1346,"children":1348},{"class":790,"line":1347},15,[1349],{"type":567,"tag":788,"props":1350,"children":1351},{"style":807},[1352],{"type":573,"value":859},{"type":567,"tag":788,"props":1354,"children":1356},{"class":790,"line":1355},16,[1357],{"type":567,"tag":788,"props":1358,"children":1359},{"style":807},[1360],{"type":573,"value":913},{"type":567,"tag":788,"props":1362,"children":1364},{"class":790,"line":1363},17,[1365],{"type":567,"tag":788,"props":1366,"children":1367},{"emptyLinePlaceholder":866},[1368],{"type":573,"value":869},{"type":567,"tag":788,"props":1370,"children":1372},{"class":790,"line":1371},18,[1373,1377,1382,1386,1390],{"type":567,"tag":788,"props":1374,"children":1375},{"style":795},[1376],{"type":573,"value":798},{"type":567,"tag":788,"props":1378,"children":1379},{"style":801},[1380],{"type":573,"value":1381}," Elephant",{"type":567,"tag":788,"props":1383,"children":1384},{"style":795},[1385],{"type":573,"value":1283},{"type":567,"tag":788,"props":1387,"children":1388},{"style":817},[1389],{"type":573,"value":1102},{"type":567,"tag":788,"props":1391,"children":1392},{"style":807},[1393],{"type":573,"value":810},{"type":567,"tag":788,"props":1395,"children":1397},{"class":790,"line":1396},19,[1398,1402,1406],{"type":567,"tag":788,"props":1399,"children":1400},{"style":817},[1401],{"type":573,"value":1186},{"type":567,"tag":788,"props":1403,"children":1404},{"style":807},[1405],{"type":573,"value":883},{"type":567,"tag":788,"props":1407,"children":1408},{"style":807},[1409],{"type":573,"value":810},{"type":567,"tag":788,"props":1411,"children":1413},{"class":790,"line":1412},20,[1414,1418,1422,1426,1430,1434,1439,1443],{"type":567,"tag":788,"props":1415,"children":1416},{"style":828},[1417],{"type":573,"value":1210},{"type":567,"tag":788,"props":1419,"children":1420},{"style":807},[1421],{"type":573,"value":1145},{"type":567,"tag":788,"props":1423,"children":1424},{"style":817},[1425],{"type":573,"value":1219},{"type":567,"tag":788,"props":1427,"children":1428},{"style":807},[1429],{"type":573,"value":825},{"type":567,"tag":788,"props":1431,"children":1432},{"style":1226},[1433],{"type":573,"value":1229},{"type":567,"tag":788,"props":1435,"children":1436},{"style":1232},[1437],{"type":573,"value":1438},"Trumpet!",{"type":567,"tag":788,"props":1440,"children":1441},{"style":1226},[1442],{"type":573,"value":1229},{"type":567,"tag":788,"props":1444,"children":1445},{"style":807},[1446],{"type":573,"value":1244},{"type":567,"tag":788,"props":1448,"children":1450},{"class":790,"line":1449},21,[1451],{"type":567,"tag":788,"props":1452,"children":1453},{"style":807},[1454],{"type":573,"value":859},{"type":567,"tag":788,"props":1456,"children":1458},{"class":790,"line":1457},22,[1459],{"type":567,"tag":788,"props":1460,"children":1461},{"style":807},[1462],{"type":573,"value":913},{"type":567,"tag":595,"props":1464,"children":1465},{},[1466],{"type":573,"value":1467},"在这个设计中，Animal 类是一个基类，而 Lion 和 Elephant 是它的子类。每个动物都有自己的叫声，通过重写 makeSound 方法来实现。",{"type":567,"tag":595,"props":1469,"children":1470},{},[1471],{"type":573,"value":1472},"现在，假设我们要添加一些新的动物，比如鹦鹉和狗，按照开放/封闭原则，我们应该扩展而不是修改现有的代码：",{"type":567,"tag":777,"props":1474,"children":1476},{"className":779,"code":1475,"language":781,"meta":562,"style":562},"class Parrot extends Animal {\n  makeSound() {\n    console.log(\"Squawk!\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Bark!\");\n  }\n}\n",[1477],{"type":567,"tag":784,"props":1478,"children":1479},{"__ignoreMap":562},[1480,1504,1519,1555,1562,1569,1576,1600,1615,1651,1658],{"type":567,"tag":788,"props":1481,"children":1482},{"class":790,"line":791},[1483,1487,1492,1496,1500],{"type":567,"tag":788,"props":1484,"children":1485},{"style":795},[1486],{"type":573,"value":798},{"type":567,"tag":788,"props":1488,"children":1489},{"style":801},[1490],{"type":573,"value":1491}," Parrot",{"type":567,"tag":788,"props":1493,"children":1494},{"style":795},[1495],{"type":573,"value":1283},{"type":567,"tag":788,"props":1497,"children":1498},{"style":817},[1499],{"type":573,"value":1102},{"type":567,"tag":788,"props":1501,"children":1502},{"style":807},[1503],{"type":573,"value":810},{"type":567,"tag":788,"props":1505,"children":1506},{"class":790,"line":813},[1507,1511,1515],{"type":567,"tag":788,"props":1508,"children":1509},{"style":817},[1510],{"type":573,"value":1186},{"type":567,"tag":788,"props":1512,"children":1513},{"style":807},[1514],{"type":573,"value":883},{"type":567,"tag":788,"props":1516,"children":1517},{"style":807},[1518],{"type":573,"value":810},{"type":567,"tag":788,"props":1520,"children":1521},{"class":790,"line":843},[1522,1526,1530,1534,1538,1542,1547,1551],{"type":567,"tag":788,"props":1523,"children":1524},{"style":828},[1525],{"type":573,"value":1210},{"type":567,"tag":788,"props":1527,"children":1528},{"style":807},[1529],{"type":573,"value":1145},{"type":567,"tag":788,"props":1531,"children":1532},{"style":817},[1533],{"type":573,"value":1219},{"type":567,"tag":788,"props":1535,"children":1536},{"style":807},[1537],{"type":573,"value":825},{"type":567,"tag":788,"props":1539,"children":1540},{"style":1226},[1541],{"type":573,"value":1229},{"type":567,"tag":788,"props":1543,"children":1544},{"style":1232},[1545],{"type":573,"value":1546},"Squawk!",{"type":567,"tag":788,"props":1548,"children":1549},{"style":1226},[1550],{"type":573,"value":1229},{"type":567,"tag":788,"props":1552,"children":1553},{"style":807},[1554],{"type":573,"value":1244},{"type":567,"tag":788,"props":1556,"children":1557},{"class":790,"line":853},[1558],{"type":567,"tag":788,"props":1559,"children":1560},{"style":807},[1561],{"type":573,"value":859},{"type":567,"tag":788,"props":1563,"children":1564},{"class":790,"line":862},[1565],{"type":567,"tag":788,"props":1566,"children":1567},{"style":807},[1568],{"type":573,"value":913},{"type":567,"tag":788,"props":1570,"children":1571},{"class":790,"line":872},[1572],{"type":567,"tag":788,"props":1573,"children":1574},{"emptyLinePlaceholder":866},[1575],{"type":573,"value":869},{"type":567,"tag":788,"props":1577,"children":1578},{"class":790,"line":890},[1579,1583,1588,1592,1596],{"type":567,"tag":788,"props":1580,"children":1581},{"style":795},[1582],{"type":573,"value":798},{"type":567,"tag":788,"props":1584,"children":1585},{"style":801},[1586],{"type":573,"value":1587}," Dog",{"type":567,"tag":788,"props":1589,"children":1590},{"style":795},[1591],{"type":573,"value":1283},{"type":567,"tag":788,"props":1593,"children":1594},{"style":817},[1595],{"type":573,"value":1102},{"type":567,"tag":788,"props":1597,"children":1598},{"style":807},[1599],{"type":573,"value":810},{"type":567,"tag":788,"props":1601,"children":1602},{"class":790,"line":899},[1603,1607,1611],{"type":567,"tag":788,"props":1604,"children":1605},{"style":817},[1606],{"type":573,"value":1186},{"type":567,"tag":788,"props":1608,"children":1609},{"style":807},[1610],{"type":573,"value":883},{"type":567,"tag":788,"props":1612,"children":1613},{"style":807},[1614],{"type":573,"value":810},{"type":567,"tag":788,"props":1616,"children":1617},{"class":790,"line":907},[1618,1622,1626,1630,1634,1638,1643,1647],{"type":567,"tag":788,"props":1619,"children":1620},{"style":828},[1621],{"type":573,"value":1210},{"type":567,"tag":788,"props":1623,"children":1624},{"style":807},[1625],{"type":573,"value":1145},{"type":567,"tag":788,"props":1627,"children":1628},{"style":817},[1629],{"type":573,"value":1219},{"type":567,"tag":788,"props":1631,"children":1632},{"style":807},[1633],{"type":573,"value":825},{"type":567,"tag":788,"props":1635,"children":1636},{"style":1226},[1637],{"type":573,"value":1229},{"type":567,"tag":788,"props":1639,"children":1640},{"style":1232},[1641],{"type":573,"value":1642},"Bark!",{"type":567,"tag":788,"props":1644,"children":1645},{"style":1226},[1646],{"type":573,"value":1229},{"type":567,"tag":788,"props":1648,"children":1649},{"style":807},[1650],{"type":573,"value":1244},{"type":567,"tag":788,"props":1652,"children":1653},{"class":790,"line":1050},[1654],{"type":567,"tag":788,"props":1655,"children":1656},{"style":807},[1657],{"type":573,"value":859},{"type":567,"tag":788,"props":1659,"children":1660},{"class":790,"line":1058},[1661],{"type":567,"tag":788,"props":1662,"children":1663},{"style":807},[1664],{"type":573,"value":913},{"type":567,"tag":595,"props":1666,"children":1667},{},[1668],{"type":573,"value":1669},"这样，我们通过扩展 Animal 类，而不是修改它，来添加新的功能（新的动物）。这符合开放/封闭原则，因为我们对于现有代码的修改是关闭的，我们只是通过扩展来引入新的功能。",{"type":567,"tag":595,"props":1671,"children":1672},{},[1673],{"type":573,"value":1674},"使用开放/封闭原则可以使代码更加稳定，降低对现有代码的影响，同时也更容易应对变化和扩展。",{"type":567,"tag":766,"props":1676,"children":1678},{"id":1677},"里式替换原则",[1679],{"type":573,"value":1677},{"type":567,"tag":595,"props":1681,"children":1682},{},[1683],{"type":573,"value":1684},"里氏替换原则（Liskov Substitution Principle，LSP） 是 SOLID 原则之一，它强调子类型（派生类或子类）必须能够替换掉它们的基类型（基类或父类）并出现在基类能够工作的任何地方，而不破坏程序的正确性。",{"type":567,"tag":595,"props":1686,"children":1687},{},[1688],{"type":573,"value":1689},"通俗地说，如果一个类是基类的子类，那么在任何需要基类的地方，都可以使用这个子类而不产生错误。子类应该保持基类的行为，并且可以扩展或修改基类的行为，但不应该破坏基类原有的约定。",{"type":567,"tag":595,"props":1691,"children":1692},{},[1693],{"type":573,"value":1694},"假设我们有一个表示矩形的基类 Rectangle：",{"type":567,"tag":777,"props":1696,"children":1698},{"className":779,"code":1697,"language":781,"meta":562,"style":562},"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n",[1699],{"type":567,"tag":784,"props":1700,"children":1701},{"__ignoreMap":562},[1702,1718,1752,1780,1808,1815,1822,1846,1873,1880,1887,1911,1938,1945,1952,1968,2011,2018],{"type":567,"tag":788,"props":1703,"children":1704},{"class":790,"line":791},[1705,1709,1714],{"type":567,"tag":788,"props":1706,"children":1707},{"style":795},[1708],{"type":573,"value":798},{"type":567,"tag":788,"props":1710,"children":1711},{"style":801},[1712],{"type":573,"value":1713}," Rectangle",{"type":567,"tag":788,"props":1715,"children":1716},{"style":807},[1717],{"type":573,"value":810},{"type":567,"tag":788,"props":1719,"children":1720},{"class":790,"line":813},[1721,1725,1729,1734,1739,1744,1748],{"type":567,"tag":788,"props":1722,"children":1723},{"style":795},[1724],{"type":573,"value":1114},{"type":567,"tag":788,"props":1726,"children":1727},{"style":807},[1728],{"type":573,"value":825},{"type":567,"tag":788,"props":1730,"children":1731},{"style":828},[1732],{"type":573,"value":1733},"width",{"type":567,"tag":788,"props":1735,"children":1736},{"style":807},[1737],{"type":573,"value":1738},",",{"type":567,"tag":788,"props":1740,"children":1741},{"style":828},[1742],{"type":573,"value":1743}," height",{"type":567,"tag":788,"props":1745,"children":1746},{"style":807},[1747],{"type":573,"value":836},{"type":567,"tag":788,"props":1749,"children":1750},{"style":807},[1751],{"type":573,"value":810},{"type":567,"tag":788,"props":1753,"children":1754},{"class":790,"line":843},[1755,1759,1763,1767,1771,1776],{"type":567,"tag":788,"props":1756,"children":1757},{"style":1137},[1758],{"type":573,"value":1140},{"type":567,"tag":788,"props":1760,"children":1761},{"style":807},[1762],{"type":573,"value":1145},{"type":567,"tag":788,"props":1764,"children":1765},{"style":828},[1766],{"type":573,"value":1733},{"type":567,"tag":788,"props":1768,"children":1769},{"style":807},[1770],{"type":573,"value":1154},{"type":567,"tag":788,"props":1772,"children":1773},{"style":828},[1774],{"type":573,"value":1775}," width",{"type":567,"tag":788,"props":1777,"children":1778},{"style":807},[1779],{"type":573,"value":1164},{"type":567,"tag":788,"props":1781,"children":1782},{"class":790,"line":853},[1783,1787,1791,1796,1800,1804],{"type":567,"tag":788,"props":1784,"children":1785},{"style":1137},[1786],{"type":573,"value":1140},{"type":567,"tag":788,"props":1788,"children":1789},{"style":807},[1790],{"type":573,"value":1145},{"type":567,"tag":788,"props":1792,"children":1793},{"style":828},[1794],{"type":573,"value":1795},"height",{"type":567,"tag":788,"props":1797,"children":1798},{"style":807},[1799],{"type":573,"value":1154},{"type":567,"tag":788,"props":1801,"children":1802},{"style":828},[1803],{"type":573,"value":1743},{"type":567,"tag":788,"props":1805,"children":1806},{"style":807},[1807],{"type":573,"value":1164},{"type":567,"tag":788,"props":1809,"children":1810},{"class":790,"line":862},[1811],{"type":567,"tag":788,"props":1812,"children":1813},{"style":807},[1814],{"type":573,"value":859},{"type":567,"tag":788,"props":1816,"children":1817},{"class":790,"line":872},[1818],{"type":567,"tag":788,"props":1819,"children":1820},{"emptyLinePlaceholder":866},[1821],{"type":573,"value":869},{"type":567,"tag":788,"props":1823,"children":1824},{"class":790,"line":890},[1825,1830,1834,1838,1842],{"type":567,"tag":788,"props":1826,"children":1827},{"style":817},[1828],{"type":573,"value":1829},"  setWidth",{"type":567,"tag":788,"props":1831,"children":1832},{"style":807},[1833],{"type":573,"value":825},{"type":567,"tag":788,"props":1835,"children":1836},{"style":828},[1837],{"type":573,"value":1733},{"type":567,"tag":788,"props":1839,"children":1840},{"style":807},[1841],{"type":573,"value":836},{"type":567,"tag":788,"props":1843,"children":1844},{"style":807},[1845],{"type":573,"value":810},{"type":567,"tag":788,"props":1847,"children":1848},{"class":790,"line":899},[1849,1853,1857,1861,1865,1869],{"type":567,"tag":788,"props":1850,"children":1851},{"style":1137},[1852],{"type":573,"value":1140},{"type":567,"tag":788,"props":1854,"children":1855},{"style":807},[1856],{"type":573,"value":1145},{"type":567,"tag":788,"props":1858,"children":1859},{"style":828},[1860],{"type":573,"value":1733},{"type":567,"tag":788,"props":1862,"children":1863},{"style":807},[1864],{"type":573,"value":1154},{"type":567,"tag":788,"props":1866,"children":1867},{"style":828},[1868],{"type":573,"value":1775},{"type":567,"tag":788,"props":1870,"children":1871},{"style":807},[1872],{"type":573,"value":1164},{"type":567,"tag":788,"props":1874,"children":1875},{"class":790,"line":907},[1876],{"type":567,"tag":788,"props":1877,"children":1878},{"style":807},[1879],{"type":573,"value":859},{"type":567,"tag":788,"props":1881,"children":1882},{"class":790,"line":1050},[1883],{"type":567,"tag":788,"props":1884,"children":1885},{"emptyLinePlaceholder":866},[1886],{"type":573,"value":869},{"type":567,"tag":788,"props":1888,"children":1889},{"class":790,"line":1058},[1890,1895,1899,1903,1907],{"type":567,"tag":788,"props":1891,"children":1892},{"style":817},[1893],{"type":573,"value":1894},"  setHeight",{"type":567,"tag":788,"props":1896,"children":1897},{"style":807},[1898],{"type":573,"value":825},{"type":567,"tag":788,"props":1900,"children":1901},{"style":828},[1902],{"type":573,"value":1795},{"type":567,"tag":788,"props":1904,"children":1905},{"style":807},[1906],{"type":573,"value":836},{"type":567,"tag":788,"props":1908,"children":1909},{"style":807},[1910],{"type":573,"value":810},{"type":567,"tag":788,"props":1912,"children":1913},{"class":790,"line":1268},[1914,1918,1922,1926,1930,1934],{"type":567,"tag":788,"props":1915,"children":1916},{"style":1137},[1917],{"type":573,"value":1140},{"type":567,"tag":788,"props":1919,"children":1920},{"style":807},[1921],{"type":573,"value":1145},{"type":567,"tag":788,"props":1923,"children":1924},{"style":828},[1925],{"type":573,"value":1795},{"type":567,"tag":788,"props":1927,"children":1928},{"style":807},[1929],{"type":573,"value":1154},{"type":567,"tag":788,"props":1931,"children":1932},{"style":828},[1933],{"type":573,"value":1743},{"type":567,"tag":788,"props":1935,"children":1936},{"style":807},[1937],{"type":573,"value":1164},{"type":567,"tag":788,"props":1939,"children":1940},{"class":790,"line":1294},[1941],{"type":567,"tag":788,"props":1942,"children":1943},{"style":807},[1944],{"type":573,"value":859},{"type":567,"tag":788,"props":1946,"children":1947},{"class":790,"line":1310},[1948],{"type":567,"tag":788,"props":1949,"children":1950},{"emptyLinePlaceholder":866},[1951],{"type":573,"value":869},{"type":567,"tag":788,"props":1953,"children":1954},{"class":790,"line":1347},[1955,1960,1964],{"type":567,"tag":788,"props":1956,"children":1957},{"style":817},[1958],{"type":573,"value":1959},"  getArea",{"type":567,"tag":788,"props":1961,"children":1962},{"style":807},[1963],{"type":573,"value":883},{"type":567,"tag":788,"props":1965,"children":1966},{"style":807},[1967],{"type":573,"value":810},{"type":567,"tag":788,"props":1969,"children":1970},{"class":790,"line":1355},[1971,1977,1982,1986,1990,1995,1999,2003,2007],{"type":567,"tag":788,"props":1972,"children":1974},{"style":1973},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1975],{"type":573,"value":1976},"    return",{"type":567,"tag":788,"props":1978,"children":1979},{"style":1137},[1980],{"type":573,"value":1981}," this",{"type":567,"tag":788,"props":1983,"children":1984},{"style":807},[1985],{"type":573,"value":1145},{"type":567,"tag":788,"props":1987,"children":1988},{"style":828},[1989],{"type":573,"value":1733},{"type":567,"tag":788,"props":1991,"children":1992},{"style":795},[1993],{"type":573,"value":1994}," *",{"type":567,"tag":788,"props":1996,"children":1997},{"style":1137},[1998],{"type":573,"value":1981},{"type":567,"tag":788,"props":2000,"children":2001},{"style":807},[2002],{"type":573,"value":1145},{"type":567,"tag":788,"props":2004,"children":2005},{"style":828},[2006],{"type":573,"value":1795},{"type":567,"tag":788,"props":2008,"children":2009},{"style":807},[2010],{"type":573,"value":1164},{"type":567,"tag":788,"props":2012,"children":2013},{"class":790,"line":1363},[2014],{"type":567,"tag":788,"props":2015,"children":2016},{"style":807},[2017],{"type":573,"value":859},{"type":567,"tag":788,"props":2019,"children":2020},{"class":790,"line":1371},[2021],{"type":567,"tag":788,"props":2022,"children":2023},{"style":807},[2024],{"type":573,"value":913},{"type":567,"tag":595,"props":2026,"children":2027},{},[2028],{"type":573,"value":2029},"现在，我们创建了一个子类 Square 继承自 Rectangle，表示正方形。在正方形中，宽和高应该始终相等。",{"type":567,"tag":777,"props":2031,"children":2033},{"className":779,"code":2032,"language":781,"meta":562,"style":562},"class Square extends Rectangle {\n  setWidth(width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  setHeight(height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n",[2034],{"type":567,"tag":784,"props":2035,"children":2036},{"__ignoreMap":562},[2037,2061,2084,2113,2141,2148,2155,2178,2205,2232,2239],{"type":567,"tag":788,"props":2038,"children":2039},{"class":790,"line":791},[2040,2044,2049,2053,2057],{"type":567,"tag":788,"props":2041,"children":2042},{"style":795},[2043],{"type":573,"value":798},{"type":567,"tag":788,"props":2045,"children":2046},{"style":801},[2047],{"type":573,"value":2048}," Square",{"type":567,"tag":788,"props":2050,"children":2051},{"style":795},[2052],{"type":573,"value":1283},{"type":567,"tag":788,"props":2054,"children":2055},{"style":817},[2056],{"type":573,"value":1713},{"type":567,"tag":788,"props":2058,"children":2059},{"style":807},[2060],{"type":573,"value":810},{"type":567,"tag":788,"props":2062,"children":2063},{"class":790,"line":813},[2064,2068,2072,2076,2080],{"type":567,"tag":788,"props":2065,"children":2066},{"style":817},[2067],{"type":573,"value":1829},{"type":567,"tag":788,"props":2069,"children":2070},{"style":807},[2071],{"type":573,"value":825},{"type":567,"tag":788,"props":2073,"children":2074},{"style":828},[2075],{"type":573,"value":1733},{"type":567,"tag":788,"props":2077,"children":2078},{"style":807},[2079],{"type":573,"value":836},{"type":567,"tag":788,"props":2081,"children":2082},{"style":807},[2083],{"type":573,"value":810},{"type":567,"tag":788,"props":2085,"children":2086},{"class":790,"line":843},[2087,2092,2096,2101,2105,2109],{"type":567,"tag":788,"props":2088,"children":2089},{"style":1137},[2090],{"type":573,"value":2091},"    super",{"type":567,"tag":788,"props":2093,"children":2094},{"style":807},[2095],{"type":573,"value":1145},{"type":567,"tag":788,"props":2097,"children":2098},{"style":817},[2099],{"type":573,"value":2100},"setWidth",{"type":567,"tag":788,"props":2102,"children":2103},{"style":807},[2104],{"type":573,"value":825},{"type":567,"tag":788,"props":2106,"children":2107},{"style":828},[2108],{"type":573,"value":1733},{"type":567,"tag":788,"props":2110,"children":2111},{"style":807},[2112],{"type":573,"value":1244},{"type":567,"tag":788,"props":2114,"children":2115},{"class":790,"line":853},[2116,2120,2124,2129,2133,2137],{"type":567,"tag":788,"props":2117,"children":2118},{"style":1137},[2119],{"type":573,"value":2091},{"type":567,"tag":788,"props":2121,"children":2122},{"style":807},[2123],{"type":573,"value":1145},{"type":567,"tag":788,"props":2125,"children":2126},{"style":817},[2127],{"type":573,"value":2128},"setHeight",{"type":567,"tag":788,"props":2130,"children":2131},{"style":807},[2132],{"type":573,"value":825},{"type":567,"tag":788,"props":2134,"children":2135},{"style":828},[2136],{"type":573,"value":1733},{"type":567,"tag":788,"props":2138,"children":2139},{"style":807},[2140],{"type":573,"value":1244},{"type":567,"tag":788,"props":2142,"children":2143},{"class":790,"line":862},[2144],{"type":567,"tag":788,"props":2145,"children":2146},{"style":807},[2147],{"type":573,"value":859},{"type":567,"tag":788,"props":2149,"children":2150},{"class":790,"line":872},[2151],{"type":567,"tag":788,"props":2152,"children":2153},{"emptyLinePlaceholder":866},[2154],{"type":573,"value":869},{"type":567,"tag":788,"props":2156,"children":2157},{"class":790,"line":890},[2158,2162,2166,2170,2174],{"type":567,"tag":788,"props":2159,"children":2160},{"style":817},[2161],{"type":573,"value":1894},{"type":567,"tag":788,"props":2163,"children":2164},{"style":807},[2165],{"type":573,"value":825},{"type":567,"tag":788,"props":2167,"children":2168},{"style":828},[2169],{"type":573,"value":1795},{"type":567,"tag":788,"props":2171,"children":2172},{"style":807},[2173],{"type":573,"value":836},{"type":567,"tag":788,"props":2175,"children":2176},{"style":807},[2177],{"type":573,"value":810},{"type":567,"tag":788,"props":2179,"children":2180},{"class":790,"line":899},[2181,2185,2189,2193,2197,2201],{"type":567,"tag":788,"props":2182,"children":2183},{"style":1137},[2184],{"type":573,"value":2091},{"type":567,"tag":788,"props":2186,"children":2187},{"style":807},[2188],{"type":573,"value":1145},{"type":567,"tag":788,"props":2190,"children":2191},{"style":817},[2192],{"type":573,"value":2100},{"type":567,"tag":788,"props":2194,"children":2195},{"style":807},[2196],{"type":573,"value":825},{"type":567,"tag":788,"props":2198,"children":2199},{"style":828},[2200],{"type":573,"value":1795},{"type":567,"tag":788,"props":2202,"children":2203},{"style":807},[2204],{"type":573,"value":1244},{"type":567,"tag":788,"props":2206,"children":2207},{"class":790,"line":907},[2208,2212,2216,2220,2224,2228],{"type":567,"tag":788,"props":2209,"children":2210},{"style":1137},[2211],{"type":573,"value":2091},{"type":567,"tag":788,"props":2213,"children":2214},{"style":807},[2215],{"type":573,"value":1145},{"type":567,"tag":788,"props":2217,"children":2218},{"style":817},[2219],{"type":573,"value":2128},{"type":567,"tag":788,"props":2221,"children":2222},{"style":807},[2223],{"type":573,"value":825},{"type":567,"tag":788,"props":2225,"children":2226},{"style":828},[2227],{"type":573,"value":1795},{"type":567,"tag":788,"props":2229,"children":2230},{"style":807},[2231],{"type":573,"value":1244},{"type":567,"tag":788,"props":2233,"children":2234},{"class":790,"line":1050},[2235],{"type":567,"tag":788,"props":2236,"children":2237},{"style":807},[2238],{"type":573,"value":859},{"type":567,"tag":788,"props":2240,"children":2241},{"class":790,"line":1058},[2242],{"type":567,"tag":788,"props":2243,"children":2244},{"style":807},[2245],{"type":573,"value":913},{"type":567,"tag":595,"props":2247,"children":2248},{},[2249],{"type":573,"value":2250},"这里的问题是，Square 子类在修改宽度或高度时，通过覆写 setWidth 和 setHeight 方法，强制宽和高相等，这与基类的行为不一致。如果在需要 Rectangle 的地方使用了 Square，可能会导致程序逻辑错误。",{"type":567,"tag":595,"props":2252,"children":2253},{},[2254],{"type":573,"value":2255},"这违反了里氏替换原则，因为子类修改了父类的预期行为。为了符合里氏替换原则，可能需要重新设计类的继承结构，或者使用更精确的命名来表达实际意图。",{"type":567,"tag":766,"props":2257,"children":2259},{"id":2258},"接口隔离原则",[2260],{"type":573,"value":2258},{"type":567,"tag":595,"props":2262,"children":2263},{},[2264],{"type":573,"value":2265},"接口隔离原则（Interface Segregation Principle，ISP） 是 SOLID 原则之一，它强调一个类不应该被强迫实现它不需要的接口。简而言之，一个类对另一个类的依赖应该建立在最小的接口上。",{"type":567,"tag":595,"props":2267,"children":2268},{},[2269],{"type":573,"value":2270},"在通俗的语言中，接口隔离原则告诉我们不应该让一个类依赖它不需要的接口，否则会导致类需要实现一些它根本不需要的方法。",{"type":567,"tag":595,"props":2272,"children":2273},{},[2274],{"type":573,"value":2275},"举例说明，假设我们有一个动物园的系统，其中有两种动物，一种会飞，一种会游泳：",{"type":567,"tag":777,"props":2277,"children":2279},{"className":779,"code":2278,"language":781,"meta":562,"style":562},"// 不遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n\n  swim() {\n    // 这是一个鸟类不需要的方法，违反接口隔离原则\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n\n  fly() {\n    // 这是一个鱼类不需要的方法，违反接口隔离原则\n  }\n}\n",[2280],{"type":567,"tag":784,"props":2281,"children":2282},{"__ignoreMap":562},[2283,2291,2307,2323,2331,2338,2345,2361,2369,2376,2383,2390,2406,2421,2429,2436,2443,2458,2466,2473],{"type":567,"tag":788,"props":2284,"children":2285},{"class":790,"line":791},[2286],{"type":567,"tag":788,"props":2287,"children":2288},{"style":847},[2289],{"type":573,"value":2290},"// 不遵循接口隔离原则的设计\n",{"type":567,"tag":788,"props":2292,"children":2293},{"class":790,"line":813},[2294,2298,2303],{"type":567,"tag":788,"props":2295,"children":2296},{"style":795},[2297],{"type":573,"value":798},{"type":567,"tag":788,"props":2299,"children":2300},{"style":801},[2301],{"type":573,"value":2302}," Bird",{"type":567,"tag":788,"props":2304,"children":2305},{"style":807},[2306],{"type":573,"value":810},{"type":567,"tag":788,"props":2308,"children":2309},{"class":790,"line":843},[2310,2315,2319],{"type":567,"tag":788,"props":2311,"children":2312},{"style":817},[2313],{"type":573,"value":2314},"  fly",{"type":567,"tag":788,"props":2316,"children":2317},{"style":807},[2318],{"type":573,"value":883},{"type":567,"tag":788,"props":2320,"children":2321},{"style":807},[2322],{"type":573,"value":810},{"type":567,"tag":788,"props":2324,"children":2325},{"class":790,"line":853},[2326],{"type":567,"tag":788,"props":2327,"children":2328},{"style":847},[2329],{"type":573,"value":2330},"    // 实现飞行逻辑\n",{"type":567,"tag":788,"props":2332,"children":2333},{"class":790,"line":862},[2334],{"type":567,"tag":788,"props":2335,"children":2336},{"style":807},[2337],{"type":573,"value":859},{"type":567,"tag":788,"props":2339,"children":2340},{"class":790,"line":872},[2341],{"type":567,"tag":788,"props":2342,"children":2343},{"emptyLinePlaceholder":866},[2344],{"type":573,"value":869},{"type":567,"tag":788,"props":2346,"children":2347},{"class":790,"line":890},[2348,2353,2357],{"type":567,"tag":788,"props":2349,"children":2350},{"style":817},[2351],{"type":573,"value":2352},"  swim",{"type":567,"tag":788,"props":2354,"children":2355},{"style":807},[2356],{"type":573,"value":883},{"type":567,"tag":788,"props":2358,"children":2359},{"style":807},[2360],{"type":573,"value":810},{"type":567,"tag":788,"props":2362,"children":2363},{"class":790,"line":899},[2364],{"type":567,"tag":788,"props":2365,"children":2366},{"style":847},[2367],{"type":573,"value":2368},"    // 这是一个鸟类不需要的方法，违反接口隔离原则\n",{"type":567,"tag":788,"props":2370,"children":2371},{"class":790,"line":907},[2372],{"type":567,"tag":788,"props":2373,"children":2374},{"style":807},[2375],{"type":573,"value":859},{"type":567,"tag":788,"props":2377,"children":2378},{"class":790,"line":1050},[2379],{"type":567,"tag":788,"props":2380,"children":2381},{"style":807},[2382],{"type":573,"value":913},{"type":567,"tag":788,"props":2384,"children":2385},{"class":790,"line":1058},[2386],{"type":567,"tag":788,"props":2387,"children":2388},{"emptyLinePlaceholder":866},[2389],{"type":573,"value":869},{"type":567,"tag":788,"props":2391,"children":2392},{"class":790,"line":1268},[2393,2397,2402],{"type":567,"tag":788,"props":2394,"children":2395},{"style":795},[2396],{"type":573,"value":798},{"type":567,"tag":788,"props":2398,"children":2399},{"style":801},[2400],{"type":573,"value":2401}," Fish",{"type":567,"tag":788,"props":2403,"children":2404},{"style":807},[2405],{"type":573,"value":810},{"type":567,"tag":788,"props":2407,"children":2408},{"class":790,"line":1294},[2409,2413,2417],{"type":567,"tag":788,"props":2410,"children":2411},{"style":817},[2412],{"type":573,"value":2352},{"type":567,"tag":788,"props":2414,"children":2415},{"style":807},[2416],{"type":573,"value":883},{"type":567,"tag":788,"props":2418,"children":2419},{"style":807},[2420],{"type":573,"value":810},{"type":567,"tag":788,"props":2422,"children":2423},{"class":790,"line":1310},[2424],{"type":567,"tag":788,"props":2425,"children":2426},{"style":847},[2427],{"type":573,"value":2428},"    // 实现游泳逻辑\n",{"type":567,"tag":788,"props":2430,"children":2431},{"class":790,"line":1347},[2432],{"type":567,"tag":788,"props":2433,"children":2434},{"style":807},[2435],{"type":573,"value":859},{"type":567,"tag":788,"props":2437,"children":2438},{"class":790,"line":1355},[2439],{"type":567,"tag":788,"props":2440,"children":2441},{"emptyLinePlaceholder":866},[2442],{"type":573,"value":869},{"type":567,"tag":788,"props":2444,"children":2445},{"class":790,"line":1363},[2446,2450,2454],{"type":567,"tag":788,"props":2447,"children":2448},{"style":817},[2449],{"type":573,"value":2314},{"type":567,"tag":788,"props":2451,"children":2452},{"style":807},[2453],{"type":573,"value":883},{"type":567,"tag":788,"props":2455,"children":2456},{"style":807},[2457],{"type":573,"value":810},{"type":567,"tag":788,"props":2459,"children":2460},{"class":790,"line":1371},[2461],{"type":567,"tag":788,"props":2462,"children":2463},{"style":847},[2464],{"type":573,"value":2465},"    // 这是一个鱼类不需要的方法，违反接口隔离原则\n",{"type":567,"tag":788,"props":2467,"children":2468},{"class":790,"line":1396},[2469],{"type":567,"tag":788,"props":2470,"children":2471},{"style":807},[2472],{"type":573,"value":859},{"type":567,"tag":788,"props":2474,"children":2475},{"class":790,"line":1412},[2476],{"type":567,"tag":788,"props":2477,"children":2478},{"style":807},[2479],{"type":573,"value":913},{"type":567,"tag":595,"props":2481,"children":2482},{},[2483],{"type":573,"value":2484},"在这个例子中，Bird 类实现了 fly 和 swim 两个方法，而 Fish 类也实现了 swim 和 fly 两个方法。这违反了接口隔离原则，因为每个类都被迫实现了它们不需要的方法。",{"type":567,"tag":595,"props":2486,"children":2487},{},[2488],{"type":573,"value":2489},"为了符合接口隔离原则，我们可以将接口拆分成更小的部分，让每个类只实现它们需要的方法：",{"type":567,"tag":777,"props":2491,"children":2493},{"className":779,"code":2492,"language":781,"meta":562,"style":562},"// 遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n}\n",[2494],{"type":567,"tag":784,"props":2495,"children":2496},{"__ignoreMap":562},[2497,2505,2520,2535,2542,2549,2556,2563,2578,2593,2600,2607],{"type":567,"tag":788,"props":2498,"children":2499},{"class":790,"line":791},[2500],{"type":567,"tag":788,"props":2501,"children":2502},{"style":847},[2503],{"type":573,"value":2504},"// 遵循接口隔离原则的设计\n",{"type":567,"tag":788,"props":2506,"children":2507},{"class":790,"line":813},[2508,2512,2516],{"type":567,"tag":788,"props":2509,"children":2510},{"style":795},[2511],{"type":573,"value":798},{"type":567,"tag":788,"props":2513,"children":2514},{"style":801},[2515],{"type":573,"value":2302},{"type":567,"tag":788,"props":2517,"children":2518},{"style":807},[2519],{"type":573,"value":810},{"type":567,"tag":788,"props":2521,"children":2522},{"class":790,"line":843},[2523,2527,2531],{"type":567,"tag":788,"props":2524,"children":2525},{"style":817},[2526],{"type":573,"value":2314},{"type":567,"tag":788,"props":2528,"children":2529},{"style":807},[2530],{"type":573,"value":883},{"type":567,"tag":788,"props":2532,"children":2533},{"style":807},[2534],{"type":573,"value":810},{"type":567,"tag":788,"props":2536,"children":2537},{"class":790,"line":853},[2538],{"type":567,"tag":788,"props":2539,"children":2540},{"style":847},[2541],{"type":573,"value":2330},{"type":567,"tag":788,"props":2543,"children":2544},{"class":790,"line":862},[2545],{"type":567,"tag":788,"props":2546,"children":2547},{"style":807},[2548],{"type":573,"value":859},{"type":567,"tag":788,"props":2550,"children":2551},{"class":790,"line":872},[2552],{"type":567,"tag":788,"props":2553,"children":2554},{"style":807},[2555],{"type":573,"value":913},{"type":567,"tag":788,"props":2557,"children":2558},{"class":790,"line":890},[2559],{"type":567,"tag":788,"props":2560,"children":2561},{"emptyLinePlaceholder":866},[2562],{"type":573,"value":869},{"type":567,"tag":788,"props":2564,"children":2565},{"class":790,"line":899},[2566,2570,2574],{"type":567,"tag":788,"props":2567,"children":2568},{"style":795},[2569],{"type":573,"value":798},{"type":567,"tag":788,"props":2571,"children":2572},{"style":801},[2573],{"type":573,"value":2401},{"type":567,"tag":788,"props":2575,"children":2576},{"style":807},[2577],{"type":573,"value":810},{"type":567,"tag":788,"props":2579,"children":2580},{"class":790,"line":907},[2581,2585,2589],{"type":567,"tag":788,"props":2582,"children":2583},{"style":817},[2584],{"type":573,"value":2352},{"type":567,"tag":788,"props":2586,"children":2587},{"style":807},[2588],{"type":573,"value":883},{"type":567,"tag":788,"props":2590,"children":2591},{"style":807},[2592],{"type":573,"value":810},{"type":567,"tag":788,"props":2594,"children":2595},{"class":790,"line":1050},[2596],{"type":567,"tag":788,"props":2597,"children":2598},{"style":847},[2599],{"type":573,"value":2428},{"type":567,"tag":788,"props":2601,"children":2602},{"class":790,"line":1058},[2603],{"type":567,"tag":788,"props":2604,"children":2605},{"style":807},[2606],{"type":573,"value":859},{"type":567,"tag":788,"props":2608,"children":2609},{"class":790,"line":1268},[2610],{"type":567,"tag":788,"props":2611,"children":2612},{"style":807},[2613],{"type":573,"value":913},{"type":567,"tag":595,"props":2615,"children":2616},{},[2617],{"type":573,"value":2618},"这样，每个类都只依赖于它们需要的接口，不再强迫实现不必要的方法。接口隔离原则的目标是使接口更具体，更贴近类的实际需求，从而提高系统的灵活性和可维护性。",{"type":567,"tag":766,"props":2620,"children":2622},{"id":2621},"依赖反转原则",[2623],{"type":573,"value":2621},{"type":567,"tag":595,"props":2625,"children":2626},{},[2627],{"type":573,"value":2628},"依赖反转原则（Dependency Inversion Principle，DIP） 是 SOLID 原则之一，它强调高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。",{"type":567,"tag":595,"props":2630,"children":2631},{},[2632],{"type":573,"value":2633},"举例说明，考虑一个简单的报告生成系统，有一个高层模块 ReportGenerator 负责生成报告：",{"type":567,"tag":777,"props":2635,"children":2637},{"className":779,"code":2636,"language":781,"meta":562,"style":562},"// 不遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor() {\n    this.pdfGenerator = new PDFGenerator(); // 依赖于具体的 PDF 生成器\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.pdfGenerator.generatePDF();\n  }\n}\n\nclass PDFGenerator {\n  generatePDF() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n",[2638],{"type":567,"tag":784,"props":2639,"children":2640},{"__ignoreMap":562},[2641,2649,2665,2680,2720,2727,2734,2750,2758,2787,2794,2801,2808,2823,2839,2847,2854],{"type":567,"tag":788,"props":2642,"children":2643},{"class":790,"line":791},[2644],{"type":567,"tag":788,"props":2645,"children":2646},{"style":847},[2647],{"type":573,"value":2648},"// 不遵循依赖反转原则的设计\n",{"type":567,"tag":788,"props":2650,"children":2651},{"class":790,"line":813},[2652,2656,2661],{"type":567,"tag":788,"props":2653,"children":2654},{"style":795},[2655],{"type":573,"value":798},{"type":567,"tag":788,"props":2657,"children":2658},{"style":801},[2659],{"type":573,"value":2660}," ReportGenerator",{"type":567,"tag":788,"props":2662,"children":2663},{"style":807},[2664],{"type":573,"value":810},{"type":567,"tag":788,"props":2666,"children":2667},{"class":790,"line":843},[2668,2672,2676],{"type":567,"tag":788,"props":2669,"children":2670},{"style":795},[2671],{"type":573,"value":1114},{"type":567,"tag":788,"props":2673,"children":2674},{"style":807},[2675],{"type":573,"value":883},{"type":567,"tag":788,"props":2677,"children":2678},{"style":807},[2679],{"type":573,"value":810},{"type":567,"tag":788,"props":2681,"children":2682},{"class":790,"line":853},[2683,2687,2691,2696,2700,2705,2710,2715],{"type":567,"tag":788,"props":2684,"children":2685},{"style":1137},[2686],{"type":573,"value":1140},{"type":567,"tag":788,"props":2688,"children":2689},{"style":807},[2690],{"type":573,"value":1145},{"type":567,"tag":788,"props":2692,"children":2693},{"style":828},[2694],{"type":573,"value":2695},"pdfGenerator",{"type":567,"tag":788,"props":2697,"children":2698},{"style":807},[2699],{"type":573,"value":1154},{"type":567,"tag":788,"props":2701,"children":2702},{"style":795},[2703],{"type":573,"value":2704}," new",{"type":567,"tag":788,"props":2706,"children":2707},{"style":817},[2708],{"type":573,"value":2709}," PDFGenerator",{"type":567,"tag":788,"props":2711,"children":2712},{"style":807},[2713],{"type":573,"value":2714},"();",{"type":567,"tag":788,"props":2716,"children":2717},{"style":847},[2718],{"type":573,"value":2719}," // 依赖于具体的 PDF 生成器\n",{"type":567,"tag":788,"props":2721,"children":2722},{"class":790,"line":862},[2723],{"type":567,"tag":788,"props":2724,"children":2725},{"style":807},[2726],{"type":573,"value":859},{"type":567,"tag":788,"props":2728,"children":2729},{"class":790,"line":872},[2730],{"type":567,"tag":788,"props":2731,"children":2732},{"emptyLinePlaceholder":866},[2733],{"type":573,"value":869},{"type":567,"tag":788,"props":2735,"children":2736},{"class":790,"line":890},[2737,2742,2746],{"type":567,"tag":788,"props":2738,"children":2739},{"style":817},[2740],{"type":573,"value":2741},"  generateReport",{"type":567,"tag":788,"props":2743,"children":2744},{"style":807},[2745],{"type":573,"value":883},{"type":567,"tag":788,"props":2747,"children":2748},{"style":807},[2749],{"type":573,"value":810},{"type":567,"tag":788,"props":2751,"children":2752},{"class":790,"line":899},[2753],{"type":567,"tag":788,"props":2754,"children":2755},{"style":847},[2756],{"type":573,"value":2757},"    // 生成报告的逻辑\n",{"type":567,"tag":788,"props":2759,"children":2760},{"class":790,"line":907},[2761,2765,2769,2773,2777,2782],{"type":567,"tag":788,"props":2762,"children":2763},{"style":1137},[2764],{"type":573,"value":1140},{"type":567,"tag":788,"props":2766,"children":2767},{"style":807},[2768],{"type":573,"value":1145},{"type":567,"tag":788,"props":2770,"children":2771},{"style":828},[2772],{"type":573,"value":2695},{"type":567,"tag":788,"props":2774,"children":2775},{"style":807},[2776],{"type":573,"value":1145},{"type":567,"tag":788,"props":2778,"children":2779},{"style":817},[2780],{"type":573,"value":2781},"generatePDF",{"type":567,"tag":788,"props":2783,"children":2784},{"style":807},[2785],{"type":573,"value":2786},"();\n",{"type":567,"tag":788,"props":2788,"children":2789},{"class":790,"line":1050},[2790],{"type":567,"tag":788,"props":2791,"children":2792},{"style":807},[2793],{"type":573,"value":859},{"type":567,"tag":788,"props":2795,"children":2796},{"class":790,"line":1058},[2797],{"type":567,"tag":788,"props":2798,"children":2799},{"style":807},[2800],{"type":573,"value":913},{"type":567,"tag":788,"props":2802,"children":2803},{"class":790,"line":1268},[2804],{"type":567,"tag":788,"props":2805,"children":2806},{"emptyLinePlaceholder":866},[2807],{"type":573,"value":869},{"type":567,"tag":788,"props":2809,"children":2810},{"class":790,"line":1294},[2811,2815,2819],{"type":567,"tag":788,"props":2812,"children":2813},{"style":795},[2814],{"type":573,"value":798},{"type":567,"tag":788,"props":2816,"children":2817},{"style":801},[2818],{"type":573,"value":2709},{"type":567,"tag":788,"props":2820,"children":2821},{"style":807},[2822],{"type":573,"value":810},{"type":567,"tag":788,"props":2824,"children":2825},{"class":790,"line":1310},[2826,2831,2835],{"type":567,"tag":788,"props":2827,"children":2828},{"style":817},[2829],{"type":573,"value":2830},"  generatePDF",{"type":567,"tag":788,"props":2832,"children":2833},{"style":807},[2834],{"type":573,"value":883},{"type":567,"tag":788,"props":2836,"children":2837},{"style":807},[2838],{"type":573,"value":810},{"type":567,"tag":788,"props":2840,"children":2841},{"class":790,"line":1347},[2842],{"type":567,"tag":788,"props":2843,"children":2844},{"style":847},[2845],{"type":573,"value":2846},"    // 具体的 PDF 生成逻辑\n",{"type":567,"tag":788,"props":2848,"children":2849},{"class":790,"line":1355},[2850],{"type":567,"tag":788,"props":2851,"children":2852},{"style":807},[2853],{"type":573,"value":859},{"type":567,"tag":788,"props":2855,"children":2856},{"class":790,"line":1363},[2857],{"type":567,"tag":788,"props":2858,"children":2859},{"style":807},[2860],{"type":573,"value":913},{"type":567,"tag":595,"props":2862,"children":2863},{},[2864],{"type":573,"value":2865},"在这个设计中，ReportGenerator 直接依赖于具体的 PDFGenerator 类，这违反了依赖反转原则。如果我们想使用其他类型的报告生成器，例如 HTMLGenerator，就需要修改 ReportGenerator 类。",{"type":567,"tag":595,"props":2867,"children":2868},{},[2869],{"type":573,"value":2870},"为了符合依赖反转原则，我们应该通过抽象来解耦高层和低层模块：",{"type":567,"tag":777,"props":2872,"children":2874},{"className":779,"code":2873,"language":781,"meta":562,"style":562},"// 遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor(generator) {\n    this.generator = generator; // 依赖于抽象的报告生成器接口\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.generator.generate();\n  }\n}\n\nclass PDFGenerator {\n  generate() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n\nclass HTMLGenerator {\n  generate() {\n    // 具体的 HTML 生成逻辑\n  }\n}\n",[2875],{"type":567,"tag":784,"props":2876,"children":2877},{"__ignoreMap":562},[2878,2886,2901,2925,2959,2966,2973,2988,2995,3023,3030,3037,3044,3059,3075,3082,3089,3096,3103,3119,3134,3142,3149],{"type":567,"tag":788,"props":2879,"children":2880},{"class":790,"line":791},[2881],{"type":567,"tag":788,"props":2882,"children":2883},{"style":847},[2884],{"type":573,"value":2885},"// 遵循依赖反转原则的设计\n",{"type":567,"tag":788,"props":2887,"children":2888},{"class":790,"line":813},[2889,2893,2897],{"type":567,"tag":788,"props":2890,"children":2891},{"style":795},[2892],{"type":573,"value":798},{"type":567,"tag":788,"props":2894,"children":2895},{"style":801},[2896],{"type":573,"value":2660},{"type":567,"tag":788,"props":2898,"children":2899},{"style":807},[2900],{"type":573,"value":810},{"type":567,"tag":788,"props":2902,"children":2903},{"class":790,"line":843},[2904,2908,2912,2917,2921],{"type":567,"tag":788,"props":2905,"children":2906},{"style":795},[2907],{"type":573,"value":1114},{"type":567,"tag":788,"props":2909,"children":2910},{"style":807},[2911],{"type":573,"value":825},{"type":567,"tag":788,"props":2913,"children":2914},{"style":828},[2915],{"type":573,"value":2916},"generator",{"type":567,"tag":788,"props":2918,"children":2919},{"style":807},[2920],{"type":573,"value":836},{"type":567,"tag":788,"props":2922,"children":2923},{"style":807},[2924],{"type":573,"value":810},{"type":567,"tag":788,"props":2926,"children":2927},{"class":790,"line":853},[2928,2932,2936,2940,2944,2949,2954],{"type":567,"tag":788,"props":2929,"children":2930},{"style":1137},[2931],{"type":573,"value":1140},{"type":567,"tag":788,"props":2933,"children":2934},{"style":807},[2935],{"type":573,"value":1145},{"type":567,"tag":788,"props":2937,"children":2938},{"style":828},[2939],{"type":573,"value":2916},{"type":567,"tag":788,"props":2941,"children":2942},{"style":807},[2943],{"type":573,"value":1154},{"type":567,"tag":788,"props":2945,"children":2946},{"style":828},[2947],{"type":573,"value":2948}," generator",{"type":567,"tag":788,"props":2950,"children":2951},{"style":807},[2952],{"type":573,"value":2953},";",{"type":567,"tag":788,"props":2955,"children":2956},{"style":847},[2957],{"type":573,"value":2958}," // 依赖于抽象的报告生成器接口\n",{"type":567,"tag":788,"props":2960,"children":2961},{"class":790,"line":862},[2962],{"type":567,"tag":788,"props":2963,"children":2964},{"style":807},[2965],{"type":573,"value":859},{"type":567,"tag":788,"props":2967,"children":2968},{"class":790,"line":872},[2969],{"type":567,"tag":788,"props":2970,"children":2971},{"emptyLinePlaceholder":866},[2972],{"type":573,"value":869},{"type":567,"tag":788,"props":2974,"children":2975},{"class":790,"line":890},[2976,2980,2984],{"type":567,"tag":788,"props":2977,"children":2978},{"style":817},[2979],{"type":573,"value":2741},{"type":567,"tag":788,"props":2981,"children":2982},{"style":807},[2983],{"type":573,"value":883},{"type":567,"tag":788,"props":2985,"children":2986},{"style":807},[2987],{"type":573,"value":810},{"type":567,"tag":788,"props":2989,"children":2990},{"class":790,"line":899},[2991],{"type":567,"tag":788,"props":2992,"children":2993},{"style":847},[2994],{"type":573,"value":2757},{"type":567,"tag":788,"props":2996,"children":2997},{"class":790,"line":907},[2998,3002,3006,3010,3014,3019],{"type":567,"tag":788,"props":2999,"children":3000},{"style":1137},[3001],{"type":573,"value":1140},{"type":567,"tag":788,"props":3003,"children":3004},{"style":807},[3005],{"type":573,"value":1145},{"type":567,"tag":788,"props":3007,"children":3008},{"style":828},[3009],{"type":573,"value":2916},{"type":567,"tag":788,"props":3011,"children":3012},{"style":807},[3013],{"type":573,"value":1145},{"type":567,"tag":788,"props":3015,"children":3016},{"style":817},[3017],{"type":573,"value":3018},"generate",{"type":567,"tag":788,"props":3020,"children":3021},{"style":807},[3022],{"type":573,"value":2786},{"type":567,"tag":788,"props":3024,"children":3025},{"class":790,"line":1050},[3026],{"type":567,"tag":788,"props":3027,"children":3028},{"style":807},[3029],{"type":573,"value":859},{"type":567,"tag":788,"props":3031,"children":3032},{"class":790,"line":1058},[3033],{"type":567,"tag":788,"props":3034,"children":3035},{"style":807},[3036],{"type":573,"value":913},{"type":567,"tag":788,"props":3038,"children":3039},{"class":790,"line":1268},[3040],{"type":567,"tag":788,"props":3041,"children":3042},{"emptyLinePlaceholder":866},[3043],{"type":573,"value":869},{"type":567,"tag":788,"props":3045,"children":3046},{"class":790,"line":1294},[3047,3051,3055],{"type":567,"tag":788,"props":3048,"children":3049},{"style":795},[3050],{"type":573,"value":798},{"type":567,"tag":788,"props":3052,"children":3053},{"style":801},[3054],{"type":573,"value":2709},{"type":567,"tag":788,"props":3056,"children":3057},{"style":807},[3058],{"type":573,"value":810},{"type":567,"tag":788,"props":3060,"children":3061},{"class":790,"line":1310},[3062,3067,3071],{"type":567,"tag":788,"props":3063,"children":3064},{"style":817},[3065],{"type":573,"value":3066},"  generate",{"type":567,"tag":788,"props":3068,"children":3069},{"style":807},[3070],{"type":573,"value":883},{"type":567,"tag":788,"props":3072,"children":3073},{"style":807},[3074],{"type":573,"value":810},{"type":567,"tag":788,"props":3076,"children":3077},{"class":790,"line":1347},[3078],{"type":567,"tag":788,"props":3079,"children":3080},{"style":847},[3081],{"type":573,"value":2846},{"type":567,"tag":788,"props":3083,"children":3084},{"class":790,"line":1355},[3085],{"type":567,"tag":788,"props":3086,"children":3087},{"style":807},[3088],{"type":573,"value":859},{"type":567,"tag":788,"props":3090,"children":3091},{"class":790,"line":1363},[3092],{"type":567,"tag":788,"props":3093,"children":3094},{"style":807},[3095],{"type":573,"value":913},{"type":567,"tag":788,"props":3097,"children":3098},{"class":790,"line":1371},[3099],{"type":567,"tag":788,"props":3100,"children":3101},{"emptyLinePlaceholder":866},[3102],{"type":573,"value":869},{"type":567,"tag":788,"props":3104,"children":3105},{"class":790,"line":1396},[3106,3110,3115],{"type":567,"tag":788,"props":3107,"children":3108},{"style":795},[3109],{"type":573,"value":798},{"type":567,"tag":788,"props":3111,"children":3112},{"style":801},[3113],{"type":573,"value":3114}," HTMLGenerator",{"type":567,"tag":788,"props":3116,"children":3117},{"style":807},[3118],{"type":573,"value":810},{"type":567,"tag":788,"props":3120,"children":3121},{"class":790,"line":1412},[3122,3126,3130],{"type":567,"tag":788,"props":3123,"children":3124},{"style":817},[3125],{"type":573,"value":3066},{"type":567,"tag":788,"props":3127,"children":3128},{"style":807},[3129],{"type":573,"value":883},{"type":567,"tag":788,"props":3131,"children":3132},{"style":807},[3133],{"type":573,"value":810},{"type":567,"tag":788,"props":3135,"children":3136},{"class":790,"line":1449},[3137],{"type":567,"tag":788,"props":3138,"children":3139},{"style":847},[3140],{"type":573,"value":3141},"    // 具体的 HTML 生成逻辑\n",{"type":567,"tag":788,"props":3143,"children":3144},{"class":790,"line":1457},[3145],{"type":567,"tag":788,"props":3146,"children":3147},{"style":807},[3148],{"type":573,"value":859},{"type":567,"tag":788,"props":3150,"children":3152},{"class":790,"line":3151},23,[3153],{"type":567,"tag":788,"props":3154,"children":3155},{"style":807},[3156],{"type":573,"value":913},{"type":567,"tag":595,"props":3158,"children":3159},{},[3160],{"type":573,"value":3161},"现在，ReportGenerator 不再直接依赖于具体的实现，而是依赖于抽象的报告生成器接口。这使得我们可以轻松地扩展系统，例如添加新的报告生成器，而不需要修改 ReportGenerator 类。这样的设计更加灵活，符合依赖反转原则。",{"type":567,"tag":3163,"props":3164,"children":3165},"style",{},[3166],{"type":573,"value":3167},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":562,"searchDepth":862,"depth":862,"links":3169},[3170,3171,3172,3173,3174,3175],{"id":570,"depth":813,"text":570},{"id":591,"depth":813,"text":591},{"id":602,"depth":813,"text":602},{"id":612,"depth":813,"text":612},{"id":630,"depth":813,"text":630},{"id":670,"depth":813,"text":673,"children":3176},[3177,3178,3179,3180,3181],{"id":768,"depth":843,"text":768},{"id":1071,"depth":843,"text":1071},{"id":1677,"depth":843,"text":1677},{"id":2258,"depth":843,"text":2258},{"id":2621,"depth":843,"text":2621},"markdown","content:2.endorsement:1.oop:1.oop-basic-concept.md","content","2.endorsement/1.oop/1.oop-basic-concept.md","md",[3188,3190],{"_path":270,"title":269,"description":3189},"给你两个字符串 word1 和 word2 。请你从 word1 开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。",{"_path":285,"title":284,"description":562},1717731134013]