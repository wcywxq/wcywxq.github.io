[{"data":1,"prerenderedAt":3184},["Reactive",2],{"navigation":3,"/endorsement/oop/oop-basic-concept":552,"/endorsement/oop/oop-basic-concept-surround":3180},[4,272,311,529,537],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":310},"八股文","/endorsement",[276,286,297],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"构建工具","/endorsement/build-tools",[290],{"title":291,"_path":292,"children":293},"Webpack","/endorsement/build-tools/webpack",[294],{"title":295,"_path":296},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":298,"_path":299,"children":300},"Html","/endorsement/html",[301,304,307],{"title":302,"_path":303},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":305,"_path":306},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":308,"_path":309},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":312,"_path":313,"children":314,"icon":528},"代码考核","/code-assessment",[315,420,521],{"title":316,"_path":317,"children":318},"源码实现","/code-assessment/source",[319,353,369,397,404,411,414,417],{"title":320,"_path":321,"children":322},"原生 api","/code-assessment/source/native-api",[323,326,329,332,335,338,341,344,347,350],{"title":324,"_path":325},"polyfill","/code-assessment/source/native-api/polyfill",{"title":327,"_path":328},"ajax","/code-assessment/source/native-api/ajax",{"title":330,"_path":331},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":333,"_path":334},"new 操作符","/code-assessment/source/native-api/new",{"title":336,"_path":337},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":339,"_path":340},"定时器","/code-assessment/source/native-api/timer",{"title":342,"_path":343},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":345,"_path":346},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":348,"_path":349},"extends","/code-assessment/source/native-api/extends",{"title":351,"_path":352},"Promise","/code-assessment/source/native-api/promise",{"title":354,"_path":355,"children":356},"函数 Function","/code-assessment/source/function",[357,360,363,366],{"title":358,"_path":359},"函数防抖","/code-assessment/source/function/debounce",{"title":361,"_path":362},"函数节流","/code-assessment/source/function/throttle",{"title":364,"_path":365},"函数柯理化","/code-assessment/source/function/curry",{"title":367,"_path":368},"函数睡眠","/code-assessment/source/function/sleep",{"title":370,"_path":371,"children":372},"数组 Array","/code-assessment/source/array",[373,376,379,382,385,388,391,394],{"title":374,"_path":375},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":377,"_path":378},"数组扁平化","/code-assessment/source/array/flat",{"title":380,"_path":381},"原型方法","/code-assessment/source/array/prototype-method",{"title":383,"_path":384},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":386,"_path":387},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":389,"_path":390},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":392,"_path":393},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":395,"_path":396},"二维数组","/code-assessment/source/array/2d-array",{"title":398,"_path":399,"children":400},"字符串 String","/code-assessment/source/string",[401],{"title":402,"_path":403},"repeat()","/code-assessment/source/string/repeat",{"title":405,"_path":406,"children":407},"集合 Set","/code-assessment/source/set",[408],{"title":409,"_path":410},"遍历集合","/code-assessment/source/set/traverse",{"title":412,"_path":413},"获取通用类型","/code-assessment/source/get-generic-type",{"title":415,"_path":416},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":418,"_path":419},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":421,"_path":422,"children":423},"业务场景","/code-assessment/scene",[424,454,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518],{"title":351,"_path":425,"children":426},"/code-assessment/scene/promise",[427,430,433,436,439,442,445,448,451],{"title":428,"_path":429},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":431,"_path":432},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":434,"_path":435},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":437,"_path":438},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":440,"_path":441},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":443,"_path":444},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":446,"_path":447},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":449,"_path":450},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":452,"_path":453},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":455,"_path":456,"children":457},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[458,461],{"title":459,"_path":460},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":462,"_path":463},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":465,"_path":466},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":468,"_path":469},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":471,"_path":472},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":474,"_path":475},"倒计时","/code-assessment/scene/countdown",{"title":477,"_path":478},"日期格式化","/code-assessment/scene/date-format",{"title":480,"_path":481},"实现前端路由","/code-assessment/scene/frontend-route",{"title":483,"_path":484},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":486,"_path":487},"lodash.get","/code-assessment/scene/lodash-get",{"title":489,"_path":490},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":492,"_path":493},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":495,"_path":496},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":498,"_path":499},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":501,"_path":502},"随机数","/code-assessment/scene/random-number",{"title":504,"_path":505},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":507,"_path":508},"sku 算法实现","/code-assessment/scene/sku",{"title":510,"_path":511},"整数分割","/code-assessment/scene/split-number",{"title":513,"_path":514},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":516,"_path":517},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":519,"_path":520},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":522,"_path":523,"children":524},"Ts 类型挑战","/code-assessment/type-challeges",[525],{"title":526,"_path":527},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":530,"_path":531,"children":532,"icon":536},"项目","/project",[533],{"title":534,"_path":535},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":538,"_path":539,"children":540,"icon":551},"后端语言","/backend-languages",[541],{"title":542,"_path":543,"children":544},"Python","/backend-languages/python",[545,548],{"title":546,"_path":547},"基础","/backend-languages/python/base",{"title":549,"_path":550},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":282,"_dir":553,"_draft":554,"_partial":554,"_locale":555,"title":281,"description":555,"body":556,"_type":3175,"_id":3176,"_source":3177,"_file":3178,"_extension":3179},"oop",false,"",{"type":557,"children":558,"toc":3161},"root",[559,567,582,587,593,598,603,608,621,626,661,667,672,680,689,697,705,713,721,729,737,745,753,758,764,769,907,912,925,930,1057,1062,1067,1072,1077,1456,1461,1466,1658,1663,1668,1673,1678,1683,1688,2018,2023,2239,2244,2249,2254,2259,2264,2269,2473,2478,2483,2607,2612,2617,2622,2627,2854,2859,2864,3150,3155],{"type":560,"tag":561,"props":562,"children":564},"element","h2",{"id":563},"类与对象",[565],{"type":566,"value":563},"text",{"type":560,"tag":568,"props":569,"children":570},"ul",{},[571,577],{"type":560,"tag":572,"props":573,"children":574},"li",{},[575],{"type":566,"value":576},"类（Class）：类是具有相同属性和行为的对象的蓝图或模板。在类中定义了数据成员（即属性或状态）和成员函数（即方法或操作），描述了该类所有对象共有的特征和功能。",{"type":560,"tag":572,"props":578,"children":579},{},[580],{"type":566,"value":581},"对象（Object）：对象是类的一个实例，每个对象有自己的属性值，并且可以执行类中定义的方法。例如，在现实世界中，一个“狗”是一个类，而“波比”是一只具体的狗，就是这个类的一个对象。",{"type":560,"tag":561,"props":583,"children":585},{"id":584},"抽象",[586],{"type":566,"value":584},{"type":560,"tag":588,"props":589,"children":590},"p",{},[591],{"type":566,"value":592},"抽象是指从具体实现中提取出共同特征的过程，通常通过接口（Interface）或抽象类（Abstract Class）实现。抽象类不能被实例化，但可以包含抽象方法（没有具体实现的方法），要求子类必须提供其实现。",{"type":560,"tag":561,"props":594,"children":596},{"id":595},"消息传递",[597],{"type":566,"value":595},{"type":560,"tag":588,"props":599,"children":600},{},[601],{"type":566,"value":602},"在面向对象系统中，对象之间通过消息传递进行交互。一个对象向另一个对象发送消息请求服务，实际上就是调用目标对象的方法。",{"type":560,"tag":561,"props":604,"children":606},{"id":605},"组合与聚合",[607],{"type":566,"value":605},{"type":560,"tag":568,"props":609,"children":610},{},[611,616],{"type":560,"tag":572,"props":612,"children":613},{},[614],{"type":566,"value":615},"组合（Composition）是强关联关系，表示一个对象包含其他对象作为其内部部分，当外部对象不存在时，内部对象也随之不存在。",{"type":560,"tag":572,"props":617,"children":618},{},[619],{"type":566,"value":620},"聚合（Aggregation）也是部分与整体的关系，但与组合相比，它是较弱的关联，代表整体拥有部分，但部分可以独立存在。",{"type":560,"tag":561,"props":622,"children":624},{"id":623},"三大特征",[625],{"type":566,"value":623},{"type":560,"tag":627,"props":628,"children":629},"ol",{},[630,641,651],{"type":560,"tag":572,"props":631,"children":632},{},[633,639],{"type":560,"tag":634,"props":635,"children":636},"strong",{},[637],{"type":566,"value":638},"封装",{"type":566,"value":640},"：封装是将数据和处理这些数据的函数绑定在一起，对外隐藏内部实现细节，仅通过公共接口（公有方法）访问和修改对象的状态。这样能够保护数据安全，防止外部代码直接篡改对象内部状态。",{"type":560,"tag":572,"props":642,"children":643},{},[644,649],{"type":560,"tag":634,"props":645,"children":646},{},[647],{"type":566,"value":648},"继承",{"type":566,"value":650},"：继承允许子类（Derived Class）继承父类（Base Class）的属性和方法，同时还可以添加新的属性、覆盖或扩展已有的方法。这有助于代码复用和层次化的设计结构。",{"type":560,"tag":572,"props":652,"children":653},{},[654,659],{"type":560,"tag":634,"props":655,"children":656},{},[657],{"type":566,"value":658},"多态",{"type":566,"value":660},"：多态是指同一种类型的引用可以指向不同类型的具体对象，或者不同类的对象对同一消息作出不同的响应。包括静态多态（编译时多态，如函数重载）和动态多态（运行时多态，如虚函数机制）。",{"type":560,"tag":561,"props":662,"children":664},{"id":663},"solid",[665],{"type":566,"value":666},"SOLID",{"type":560,"tag":588,"props":668,"children":669},{},[670],{"type":566,"value":671},"SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。这些原则由 Robert C. Martin 等人提出，它们包括以下五个原则：",{"type":560,"tag":568,"props":673,"children":674},{},[675],{"type":560,"tag":572,"props":676,"children":677},{},[678],{"type":566,"value":679},"单一职责原则（Single Responsibility Principle，SRP）",{"type":560,"tag":681,"props":682,"children":683},"blockquote",{},[684],{"type":560,"tag":588,"props":685,"children":686},{},[687],{"type":566,"value":688},"对一个类（对象、方法）来说，应该仅有一个引起它变化的原因，也就是说，一个对象只做一件事。",{"type":560,"tag":568,"props":690,"children":691},{},[692],{"type":560,"tag":572,"props":693,"children":694},{},[695],{"type":566,"value":696},"开放/封闭原则（Open/Closed Principle，OCP）",{"type":560,"tag":681,"props":698,"children":699},{},[700],{"type":560,"tag":588,"props":701,"children":702},{},[703],{"type":566,"value":704},"一个模块在扩展性方面应该是开放的，而在更改性方面应该是封闭的，也就是对扩展开放，对修改封闭。",{"type":560,"tag":568,"props":706,"children":707},{},[708],{"type":560,"tag":572,"props":709,"children":710},{},[711],{"type":566,"value":712},"里氏替换原则（Liskov Substitution Principle，LSP）",{"type":560,"tag":681,"props":714,"children":715},{},[716],{"type":560,"tag":588,"props":717,"children":718},{},[719],{"type":566,"value":720},"使用接口时，我们必须确保子类能够替换父类所出现的任何地方，也就是说，父类的接口必须确保所有子类都可以实现需求，而不是某一个子类。",{"type":560,"tag":568,"props":722,"children":723},{},[724],{"type":560,"tag":572,"props":725,"children":726},{},[727],{"type":566,"value":728},"接口隔离原则（Interface Segregation Principle，ISP）",{"type":560,"tag":681,"props":730,"children":731},{},[732],{"type":560,"tag":588,"props":733,"children":734},{},[735],{"type":566,"value":736},"让高层模块不要依赖低层模块。",{"type":560,"tag":568,"props":738,"children":739},{},[740],{"type":560,"tag":572,"props":741,"children":742},{},[743],{"type":566,"value":744},"依赖反转原则（Dependency Inversion Principle，DIP）",{"type":560,"tag":681,"props":746,"children":747},{},[748],{"type":560,"tag":588,"props":749,"children":750},{},[751],{"type":566,"value":752},"强调每个类继承的接口一定要保证最少，不能继承无用的接口，保证接口隔离原则的前提是要先保证职责单一原则。",{"type":560,"tag":588,"props":754,"children":755},{},[756],{"type":566,"value":757},"这些原则共同促使开发者创建具有高内聚、低耦合、易扩展和易维护性的软件系统。遵循这些原则有助于构建更健壮的面向对象系统，提高代码质量和可维护性。",{"type":560,"tag":759,"props":760,"children":762},"h3",{"id":761},"单一职责原则",[763],{"type":566,"value":761},{"type":560,"tag":588,"props":765,"children":766},{},[767],{"type":566,"value":768},"单一职责原则（Single Responsibility Principle，SRP）要求一个类或者模块只负责完成一个职责（或者功能）。 假设我们有一个简单的厨师类，它负责烹饪和洗碗两个职责：",{"type":560,"tag":770,"props":771,"children":775},"pre",{"className":772,"code":773,"language":774,"meta":555,"style":555},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n","js",[776],{"type":560,"tag":777,"props":778,"children":779},"code",{"__ignoreMap":555},[780,804,834,844,853,863,881,890,898],{"type":560,"tag":781,"props":782,"children":785},"span",{"class":783,"line":784},"line",1,[786,792,798],{"type":560,"tag":781,"props":787,"children":789},{"style":788},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[790],{"type":566,"value":791},"class",{"type":560,"tag":781,"props":793,"children":795},{"style":794},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[796],{"type":566,"value":797}," Chef",{"type":560,"tag":781,"props":799,"children":801},{"style":800},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[802],{"type":566,"value":803}," {\n",{"type":560,"tag":781,"props":805,"children":807},{"class":783,"line":806},2,[808,814,819,825,830],{"type":560,"tag":781,"props":809,"children":811},{"style":810},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[812],{"type":566,"value":813},"  cookDish",{"type":560,"tag":781,"props":815,"children":816},{"style":800},[817],{"type":566,"value":818},"(",{"type":560,"tag":781,"props":820,"children":822},{"style":821},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[823],{"type":566,"value":824},"dish",{"type":560,"tag":781,"props":826,"children":827},{"style":800},[828],{"type":566,"value":829},")",{"type":560,"tag":781,"props":831,"children":832},{"style":800},[833],{"type":566,"value":803},{"type":560,"tag":781,"props":835,"children":837},{"class":783,"line":836},3,[838],{"type":560,"tag":781,"props":839,"children":841},{"style":840},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[842],{"type":566,"value":843},"    // 烹饪菜品的具体实现\n",{"type":560,"tag":781,"props":845,"children":847},{"class":783,"line":846},4,[848],{"type":560,"tag":781,"props":849,"children":850},{"style":800},[851],{"type":566,"value":852},"  }\n",{"type":560,"tag":781,"props":854,"children":856},{"class":783,"line":855},5,[857],{"type":560,"tag":781,"props":858,"children":860},{"emptyLinePlaceholder":859},true,[861],{"type":566,"value":862},"\n",{"type":560,"tag":781,"props":864,"children":866},{"class":783,"line":865},6,[867,872,877],{"type":560,"tag":781,"props":868,"children":869},{"style":810},[870],{"type":566,"value":871},"  washDishes",{"type":560,"tag":781,"props":873,"children":874},{"style":800},[875],{"type":566,"value":876},"()",{"type":560,"tag":781,"props":878,"children":879},{"style":800},[880],{"type":566,"value":803},{"type":560,"tag":781,"props":882,"children":884},{"class":783,"line":883},7,[885],{"type":560,"tag":781,"props":886,"children":887},{"style":840},[888],{"type":566,"value":889},"    // 洗碗的具体实现\n",{"type":560,"tag":781,"props":891,"children":893},{"class":783,"line":892},8,[894],{"type":560,"tag":781,"props":895,"children":896},{"style":800},[897],{"type":566,"value":852},{"type":560,"tag":781,"props":899,"children":901},{"class":783,"line":900},9,[902],{"type":560,"tag":781,"props":903,"children":904},{"style":800},[905],{"type":566,"value":906},"}\n",{"type":560,"tag":588,"props":908,"children":909},{},[910],{"type":566,"value":911},"这个类违反了单一职责原则，因为它有两个职责：烹饪和洗碗。这样的设计可能导致以下问题：",{"type":560,"tag":627,"props":913,"children":914},{},[915,920],{"type":560,"tag":572,"props":916,"children":917},{},[918],{"type":566,"value":919},"如果厨师的烹饪逻辑变化，需要修改 cookDish 方法，这可能会影响洗碗的部分。",{"type":560,"tag":572,"props":921,"children":922},{},[923],{"type":566,"value":924},"如果洗碗的逻辑变化，需要修改 washDishes 方法，这可能会影响烹饪的部分。",{"type":560,"tag":588,"props":926,"children":927},{},[928],{"type":566,"value":929},"按照单一职责原则，我们应该将这两个职责分开，分别由不同的类负责：",{"type":560,"tag":770,"props":931,"children":933},{"className":772,"code":932,"language":774,"meta":555,"style":555},"class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n}\n\nclass Dishwasher {\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n",[934],{"type":560,"tag":777,"props":935,"children":936},{"__ignoreMap":555},[937,952,975,982,989,996,1003,1019,1034,1041,1049],{"type":560,"tag":781,"props":938,"children":939},{"class":783,"line":784},[940,944,948],{"type":560,"tag":781,"props":941,"children":942},{"style":788},[943],{"type":566,"value":791},{"type":560,"tag":781,"props":945,"children":946},{"style":794},[947],{"type":566,"value":797},{"type":560,"tag":781,"props":949,"children":950},{"style":800},[951],{"type":566,"value":803},{"type":560,"tag":781,"props":953,"children":954},{"class":783,"line":806},[955,959,963,967,971],{"type":560,"tag":781,"props":956,"children":957},{"style":810},[958],{"type":566,"value":813},{"type":560,"tag":781,"props":960,"children":961},{"style":800},[962],{"type":566,"value":818},{"type":560,"tag":781,"props":964,"children":965},{"style":821},[966],{"type":566,"value":824},{"type":560,"tag":781,"props":968,"children":969},{"style":800},[970],{"type":566,"value":829},{"type":560,"tag":781,"props":972,"children":973},{"style":800},[974],{"type":566,"value":803},{"type":560,"tag":781,"props":976,"children":977},{"class":783,"line":836},[978],{"type":560,"tag":781,"props":979,"children":980},{"style":840},[981],{"type":566,"value":843},{"type":560,"tag":781,"props":983,"children":984},{"class":783,"line":846},[985],{"type":560,"tag":781,"props":986,"children":987},{"style":800},[988],{"type":566,"value":852},{"type":560,"tag":781,"props":990,"children":991},{"class":783,"line":855},[992],{"type":560,"tag":781,"props":993,"children":994},{"style":800},[995],{"type":566,"value":906},{"type":560,"tag":781,"props":997,"children":998},{"class":783,"line":865},[999],{"type":560,"tag":781,"props":1000,"children":1001},{"emptyLinePlaceholder":859},[1002],{"type":566,"value":862},{"type":560,"tag":781,"props":1004,"children":1005},{"class":783,"line":883},[1006,1010,1015],{"type":560,"tag":781,"props":1007,"children":1008},{"style":788},[1009],{"type":566,"value":791},{"type":560,"tag":781,"props":1011,"children":1012},{"style":794},[1013],{"type":566,"value":1014}," Dishwasher",{"type":560,"tag":781,"props":1016,"children":1017},{"style":800},[1018],{"type":566,"value":803},{"type":560,"tag":781,"props":1020,"children":1021},{"class":783,"line":892},[1022,1026,1030],{"type":560,"tag":781,"props":1023,"children":1024},{"style":810},[1025],{"type":566,"value":871},{"type":560,"tag":781,"props":1027,"children":1028},{"style":800},[1029],{"type":566,"value":876},{"type":560,"tag":781,"props":1031,"children":1032},{"style":800},[1033],{"type":566,"value":803},{"type":560,"tag":781,"props":1035,"children":1036},{"class":783,"line":900},[1037],{"type":560,"tag":781,"props":1038,"children":1039},{"style":840},[1040],{"type":566,"value":889},{"type":560,"tag":781,"props":1042,"children":1044},{"class":783,"line":1043},10,[1045],{"type":560,"tag":781,"props":1046,"children":1047},{"style":800},[1048],{"type":566,"value":852},{"type":560,"tag":781,"props":1050,"children":1052},{"class":783,"line":1051},11,[1053],{"type":560,"tag":781,"props":1054,"children":1055},{"style":800},[1056],{"type":566,"value":906},{"type":560,"tag":588,"props":1058,"children":1059},{},[1060],{"type":566,"value":1061},"这样，Chef 类专注于烹饪，而 Dishwasher 类专注于洗碗。每个类都有一个单一的职责，使得代码更清晰、易于理解，并且在未来的变更中更具弹性。",{"type":560,"tag":759,"props":1063,"children":1065},{"id":1064},"开放封闭原则",[1066],{"type":566,"value":1064},{"type":560,"tag":588,"props":1068,"children":1069},{},[1070],{"type":566,"value":1071},"开关封闭原则（Open/Closed Principle，OCP）要求软件实体（例如类、模块、函数等）应该对扩展开放，对修改关闭。简而言之，一个模块在扩展新功能时不应该修改原有的代码，而是通过添加新的代码来实现扩展。",{"type":560,"tag":588,"props":1073,"children":1074},{},[1075],{"type":566,"value":1076},"考虑一个动物园的场景。我们有一些动物，每个动物都会发出叫声。初始设计如下：",{"type":560,"tag":770,"props":1078,"children":1080},{"className":772,"code":1079,"language":774,"meta":555,"style":555},"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    // 默认的叫声\n    console.log(\"Some generic animal sound\");\n  }\n}\n\nclass Lion extends Animal {\n  makeSound() {\n    console.log(\"Roar!\");\n  }\n}\n\nclass Elephant extends Animal {\n  makeSound() {\n    console.log(\"Trumpet!\");\n  }\n}\n",[1081],{"type":560,"tag":777,"props":1082,"children":1083},{"__ignoreMap":555},[1084,1100,1125,1158,1165,1172,1188,1196,1238,1245,1252,1259,1285,1301,1338,1346,1354,1362,1387,1403,1440,1448],{"type":560,"tag":781,"props":1085,"children":1086},{"class":783,"line":784},[1087,1091,1096],{"type":560,"tag":781,"props":1088,"children":1089},{"style":788},[1090],{"type":566,"value":791},{"type":560,"tag":781,"props":1092,"children":1093},{"style":794},[1094],{"type":566,"value":1095}," Animal",{"type":560,"tag":781,"props":1097,"children":1098},{"style":800},[1099],{"type":566,"value":803},{"type":560,"tag":781,"props":1101,"children":1102},{"class":783,"line":806},[1103,1108,1112,1117,1121],{"type":560,"tag":781,"props":1104,"children":1105},{"style":788},[1106],{"type":566,"value":1107},"  constructor",{"type":560,"tag":781,"props":1109,"children":1110},{"style":800},[1111],{"type":566,"value":818},{"type":560,"tag":781,"props":1113,"children":1114},{"style":821},[1115],{"type":566,"value":1116},"name",{"type":560,"tag":781,"props":1118,"children":1119},{"style":800},[1120],{"type":566,"value":829},{"type":560,"tag":781,"props":1122,"children":1123},{"style":800},[1124],{"type":566,"value":803},{"type":560,"tag":781,"props":1126,"children":1127},{"class":783,"line":836},[1128,1134,1139,1143,1148,1153],{"type":560,"tag":781,"props":1129,"children":1131},{"style":1130},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[1132],{"type":566,"value":1133},"    this",{"type":560,"tag":781,"props":1135,"children":1136},{"style":800},[1137],{"type":566,"value":1138},".",{"type":560,"tag":781,"props":1140,"children":1141},{"style":821},[1142],{"type":566,"value":1116},{"type":560,"tag":781,"props":1144,"children":1145},{"style":800},[1146],{"type":566,"value":1147}," =",{"type":560,"tag":781,"props":1149,"children":1150},{"style":821},[1151],{"type":566,"value":1152}," name",{"type":560,"tag":781,"props":1154,"children":1155},{"style":800},[1156],{"type":566,"value":1157},";\n",{"type":560,"tag":781,"props":1159,"children":1160},{"class":783,"line":846},[1161],{"type":560,"tag":781,"props":1162,"children":1163},{"style":800},[1164],{"type":566,"value":852},{"type":560,"tag":781,"props":1166,"children":1167},{"class":783,"line":855},[1168],{"type":560,"tag":781,"props":1169,"children":1170},{"emptyLinePlaceholder":859},[1171],{"type":566,"value":862},{"type":560,"tag":781,"props":1173,"children":1174},{"class":783,"line":865},[1175,1180,1184],{"type":560,"tag":781,"props":1176,"children":1177},{"style":810},[1178],{"type":566,"value":1179},"  makeSound",{"type":560,"tag":781,"props":1181,"children":1182},{"style":800},[1183],{"type":566,"value":876},{"type":560,"tag":781,"props":1185,"children":1186},{"style":800},[1187],{"type":566,"value":803},{"type":560,"tag":781,"props":1189,"children":1190},{"class":783,"line":883},[1191],{"type":560,"tag":781,"props":1192,"children":1193},{"style":840},[1194],{"type":566,"value":1195},"    // 默认的叫声\n",{"type":560,"tag":781,"props":1197,"children":1198},{"class":783,"line":892},[1199,1204,1208,1213,1217,1223,1229,1233],{"type":560,"tag":781,"props":1200,"children":1201},{"style":821},[1202],{"type":566,"value":1203},"    console",{"type":560,"tag":781,"props":1205,"children":1206},{"style":800},[1207],{"type":566,"value":1138},{"type":560,"tag":781,"props":1209,"children":1210},{"style":810},[1211],{"type":566,"value":1212},"log",{"type":560,"tag":781,"props":1214,"children":1215},{"style":800},[1216],{"type":566,"value":818},{"type":560,"tag":781,"props":1218,"children":1220},{"style":1219},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1221],{"type":566,"value":1222},"\"",{"type":560,"tag":781,"props":1224,"children":1226},{"style":1225},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1227],{"type":566,"value":1228},"Some generic animal sound",{"type":560,"tag":781,"props":1230,"children":1231},{"style":1219},[1232],{"type":566,"value":1222},{"type":560,"tag":781,"props":1234,"children":1235},{"style":800},[1236],{"type":566,"value":1237},");\n",{"type":560,"tag":781,"props":1239,"children":1240},{"class":783,"line":900},[1241],{"type":560,"tag":781,"props":1242,"children":1243},{"style":800},[1244],{"type":566,"value":852},{"type":560,"tag":781,"props":1246,"children":1247},{"class":783,"line":1043},[1248],{"type":560,"tag":781,"props":1249,"children":1250},{"style":800},[1251],{"type":566,"value":906},{"type":560,"tag":781,"props":1253,"children":1254},{"class":783,"line":1051},[1255],{"type":560,"tag":781,"props":1256,"children":1257},{"emptyLinePlaceholder":859},[1258],{"type":566,"value":862},{"type":560,"tag":781,"props":1260,"children":1262},{"class":783,"line":1261},12,[1263,1267,1272,1277,1281],{"type":560,"tag":781,"props":1264,"children":1265},{"style":788},[1266],{"type":566,"value":791},{"type":560,"tag":781,"props":1268,"children":1269},{"style":794},[1270],{"type":566,"value":1271}," Lion",{"type":560,"tag":781,"props":1273,"children":1274},{"style":788},[1275],{"type":566,"value":1276}," extends",{"type":560,"tag":781,"props":1278,"children":1279},{"style":810},[1280],{"type":566,"value":1095},{"type":560,"tag":781,"props":1282,"children":1283},{"style":800},[1284],{"type":566,"value":803},{"type":560,"tag":781,"props":1286,"children":1288},{"class":783,"line":1287},13,[1289,1293,1297],{"type":560,"tag":781,"props":1290,"children":1291},{"style":810},[1292],{"type":566,"value":1179},{"type":560,"tag":781,"props":1294,"children":1295},{"style":800},[1296],{"type":566,"value":876},{"type":560,"tag":781,"props":1298,"children":1299},{"style":800},[1300],{"type":566,"value":803},{"type":560,"tag":781,"props":1302,"children":1304},{"class":783,"line":1303},14,[1305,1309,1313,1317,1321,1325,1330,1334],{"type":560,"tag":781,"props":1306,"children":1307},{"style":821},[1308],{"type":566,"value":1203},{"type":560,"tag":781,"props":1310,"children":1311},{"style":800},[1312],{"type":566,"value":1138},{"type":560,"tag":781,"props":1314,"children":1315},{"style":810},[1316],{"type":566,"value":1212},{"type":560,"tag":781,"props":1318,"children":1319},{"style":800},[1320],{"type":566,"value":818},{"type":560,"tag":781,"props":1322,"children":1323},{"style":1219},[1324],{"type":566,"value":1222},{"type":560,"tag":781,"props":1326,"children":1327},{"style":1225},[1328],{"type":566,"value":1329},"Roar!",{"type":560,"tag":781,"props":1331,"children":1332},{"style":1219},[1333],{"type":566,"value":1222},{"type":560,"tag":781,"props":1335,"children":1336},{"style":800},[1337],{"type":566,"value":1237},{"type":560,"tag":781,"props":1339,"children":1341},{"class":783,"line":1340},15,[1342],{"type":560,"tag":781,"props":1343,"children":1344},{"style":800},[1345],{"type":566,"value":852},{"type":560,"tag":781,"props":1347,"children":1349},{"class":783,"line":1348},16,[1350],{"type":560,"tag":781,"props":1351,"children":1352},{"style":800},[1353],{"type":566,"value":906},{"type":560,"tag":781,"props":1355,"children":1357},{"class":783,"line":1356},17,[1358],{"type":560,"tag":781,"props":1359,"children":1360},{"emptyLinePlaceholder":859},[1361],{"type":566,"value":862},{"type":560,"tag":781,"props":1363,"children":1365},{"class":783,"line":1364},18,[1366,1370,1375,1379,1383],{"type":560,"tag":781,"props":1367,"children":1368},{"style":788},[1369],{"type":566,"value":791},{"type":560,"tag":781,"props":1371,"children":1372},{"style":794},[1373],{"type":566,"value":1374}," Elephant",{"type":560,"tag":781,"props":1376,"children":1377},{"style":788},[1378],{"type":566,"value":1276},{"type":560,"tag":781,"props":1380,"children":1381},{"style":810},[1382],{"type":566,"value":1095},{"type":560,"tag":781,"props":1384,"children":1385},{"style":800},[1386],{"type":566,"value":803},{"type":560,"tag":781,"props":1388,"children":1390},{"class":783,"line":1389},19,[1391,1395,1399],{"type":560,"tag":781,"props":1392,"children":1393},{"style":810},[1394],{"type":566,"value":1179},{"type":560,"tag":781,"props":1396,"children":1397},{"style":800},[1398],{"type":566,"value":876},{"type":560,"tag":781,"props":1400,"children":1401},{"style":800},[1402],{"type":566,"value":803},{"type":560,"tag":781,"props":1404,"children":1406},{"class":783,"line":1405},20,[1407,1411,1415,1419,1423,1427,1432,1436],{"type":560,"tag":781,"props":1408,"children":1409},{"style":821},[1410],{"type":566,"value":1203},{"type":560,"tag":781,"props":1412,"children":1413},{"style":800},[1414],{"type":566,"value":1138},{"type":560,"tag":781,"props":1416,"children":1417},{"style":810},[1418],{"type":566,"value":1212},{"type":560,"tag":781,"props":1420,"children":1421},{"style":800},[1422],{"type":566,"value":818},{"type":560,"tag":781,"props":1424,"children":1425},{"style":1219},[1426],{"type":566,"value":1222},{"type":560,"tag":781,"props":1428,"children":1429},{"style":1225},[1430],{"type":566,"value":1431},"Trumpet!",{"type":560,"tag":781,"props":1433,"children":1434},{"style":1219},[1435],{"type":566,"value":1222},{"type":560,"tag":781,"props":1437,"children":1438},{"style":800},[1439],{"type":566,"value":1237},{"type":560,"tag":781,"props":1441,"children":1443},{"class":783,"line":1442},21,[1444],{"type":560,"tag":781,"props":1445,"children":1446},{"style":800},[1447],{"type":566,"value":852},{"type":560,"tag":781,"props":1449,"children":1451},{"class":783,"line":1450},22,[1452],{"type":560,"tag":781,"props":1453,"children":1454},{"style":800},[1455],{"type":566,"value":906},{"type":560,"tag":588,"props":1457,"children":1458},{},[1459],{"type":566,"value":1460},"在这个设计中，Animal 类是一个基类，而 Lion 和 Elephant 是它的子类。每个动物都有自己的叫声，通过重写 makeSound 方法来实现。",{"type":560,"tag":588,"props":1462,"children":1463},{},[1464],{"type":566,"value":1465},"现在，假设我们要添加一些新的动物，比如鹦鹉和狗，按照开放/封闭原则，我们应该扩展而不是修改现有的代码：",{"type":560,"tag":770,"props":1467,"children":1469},{"className":772,"code":1468,"language":774,"meta":555,"style":555},"class Parrot extends Animal {\n  makeSound() {\n    console.log(\"Squawk!\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Bark!\");\n  }\n}\n",[1470],{"type":560,"tag":777,"props":1471,"children":1472},{"__ignoreMap":555},[1473,1497,1512,1548,1555,1562,1569,1593,1608,1644,1651],{"type":560,"tag":781,"props":1474,"children":1475},{"class":783,"line":784},[1476,1480,1485,1489,1493],{"type":560,"tag":781,"props":1477,"children":1478},{"style":788},[1479],{"type":566,"value":791},{"type":560,"tag":781,"props":1481,"children":1482},{"style":794},[1483],{"type":566,"value":1484}," Parrot",{"type":560,"tag":781,"props":1486,"children":1487},{"style":788},[1488],{"type":566,"value":1276},{"type":560,"tag":781,"props":1490,"children":1491},{"style":810},[1492],{"type":566,"value":1095},{"type":560,"tag":781,"props":1494,"children":1495},{"style":800},[1496],{"type":566,"value":803},{"type":560,"tag":781,"props":1498,"children":1499},{"class":783,"line":806},[1500,1504,1508],{"type":560,"tag":781,"props":1501,"children":1502},{"style":810},[1503],{"type":566,"value":1179},{"type":560,"tag":781,"props":1505,"children":1506},{"style":800},[1507],{"type":566,"value":876},{"type":560,"tag":781,"props":1509,"children":1510},{"style":800},[1511],{"type":566,"value":803},{"type":560,"tag":781,"props":1513,"children":1514},{"class":783,"line":836},[1515,1519,1523,1527,1531,1535,1540,1544],{"type":560,"tag":781,"props":1516,"children":1517},{"style":821},[1518],{"type":566,"value":1203},{"type":560,"tag":781,"props":1520,"children":1521},{"style":800},[1522],{"type":566,"value":1138},{"type":560,"tag":781,"props":1524,"children":1525},{"style":810},[1526],{"type":566,"value":1212},{"type":560,"tag":781,"props":1528,"children":1529},{"style":800},[1530],{"type":566,"value":818},{"type":560,"tag":781,"props":1532,"children":1533},{"style":1219},[1534],{"type":566,"value":1222},{"type":560,"tag":781,"props":1536,"children":1537},{"style":1225},[1538],{"type":566,"value":1539},"Squawk!",{"type":560,"tag":781,"props":1541,"children":1542},{"style":1219},[1543],{"type":566,"value":1222},{"type":560,"tag":781,"props":1545,"children":1546},{"style":800},[1547],{"type":566,"value":1237},{"type":560,"tag":781,"props":1549,"children":1550},{"class":783,"line":846},[1551],{"type":560,"tag":781,"props":1552,"children":1553},{"style":800},[1554],{"type":566,"value":852},{"type":560,"tag":781,"props":1556,"children":1557},{"class":783,"line":855},[1558],{"type":560,"tag":781,"props":1559,"children":1560},{"style":800},[1561],{"type":566,"value":906},{"type":560,"tag":781,"props":1563,"children":1564},{"class":783,"line":865},[1565],{"type":560,"tag":781,"props":1566,"children":1567},{"emptyLinePlaceholder":859},[1568],{"type":566,"value":862},{"type":560,"tag":781,"props":1570,"children":1571},{"class":783,"line":883},[1572,1576,1581,1585,1589],{"type":560,"tag":781,"props":1573,"children":1574},{"style":788},[1575],{"type":566,"value":791},{"type":560,"tag":781,"props":1577,"children":1578},{"style":794},[1579],{"type":566,"value":1580}," Dog",{"type":560,"tag":781,"props":1582,"children":1583},{"style":788},[1584],{"type":566,"value":1276},{"type":560,"tag":781,"props":1586,"children":1587},{"style":810},[1588],{"type":566,"value":1095},{"type":560,"tag":781,"props":1590,"children":1591},{"style":800},[1592],{"type":566,"value":803},{"type":560,"tag":781,"props":1594,"children":1595},{"class":783,"line":892},[1596,1600,1604],{"type":560,"tag":781,"props":1597,"children":1598},{"style":810},[1599],{"type":566,"value":1179},{"type":560,"tag":781,"props":1601,"children":1602},{"style":800},[1603],{"type":566,"value":876},{"type":560,"tag":781,"props":1605,"children":1606},{"style":800},[1607],{"type":566,"value":803},{"type":560,"tag":781,"props":1609,"children":1610},{"class":783,"line":900},[1611,1615,1619,1623,1627,1631,1636,1640],{"type":560,"tag":781,"props":1612,"children":1613},{"style":821},[1614],{"type":566,"value":1203},{"type":560,"tag":781,"props":1616,"children":1617},{"style":800},[1618],{"type":566,"value":1138},{"type":560,"tag":781,"props":1620,"children":1621},{"style":810},[1622],{"type":566,"value":1212},{"type":560,"tag":781,"props":1624,"children":1625},{"style":800},[1626],{"type":566,"value":818},{"type":560,"tag":781,"props":1628,"children":1629},{"style":1219},[1630],{"type":566,"value":1222},{"type":560,"tag":781,"props":1632,"children":1633},{"style":1225},[1634],{"type":566,"value":1635},"Bark!",{"type":560,"tag":781,"props":1637,"children":1638},{"style":1219},[1639],{"type":566,"value":1222},{"type":560,"tag":781,"props":1641,"children":1642},{"style":800},[1643],{"type":566,"value":1237},{"type":560,"tag":781,"props":1645,"children":1646},{"class":783,"line":1043},[1647],{"type":560,"tag":781,"props":1648,"children":1649},{"style":800},[1650],{"type":566,"value":852},{"type":560,"tag":781,"props":1652,"children":1653},{"class":783,"line":1051},[1654],{"type":560,"tag":781,"props":1655,"children":1656},{"style":800},[1657],{"type":566,"value":906},{"type":560,"tag":588,"props":1659,"children":1660},{},[1661],{"type":566,"value":1662},"这样，我们通过扩展 Animal 类，而不是修改它，来添加新的功能（新的动物）。这符合开放/封闭原则，因为我们对于现有代码的修改是关闭的，我们只是通过扩展来引入新的功能。",{"type":560,"tag":588,"props":1664,"children":1665},{},[1666],{"type":566,"value":1667},"使用开放/封闭原则可以使代码更加稳定，降低对现有代码的影响，同时也更容易应对变化和扩展。",{"type":560,"tag":759,"props":1669,"children":1671},{"id":1670},"里式替换原则",[1672],{"type":566,"value":1670},{"type":560,"tag":588,"props":1674,"children":1675},{},[1676],{"type":566,"value":1677},"里氏替换原则（Liskov Substitution Principle，LSP） 是 SOLID 原则之一，它强调子类型（派生类或子类）必须能够替换掉它们的基类型（基类或父类）并出现在基类能够工作的任何地方，而不破坏程序的正确性。",{"type":560,"tag":588,"props":1679,"children":1680},{},[1681],{"type":566,"value":1682},"通俗地说，如果一个类是基类的子类，那么在任何需要基类的地方，都可以使用这个子类而不产生错误。子类应该保持基类的行为，并且可以扩展或修改基类的行为，但不应该破坏基类原有的约定。",{"type":560,"tag":588,"props":1684,"children":1685},{},[1686],{"type":566,"value":1687},"假设我们有一个表示矩形的基类 Rectangle：",{"type":560,"tag":770,"props":1689,"children":1691},{"className":772,"code":1690,"language":774,"meta":555,"style":555},"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n",[1692],{"type":560,"tag":777,"props":1693,"children":1694},{"__ignoreMap":555},[1695,1711,1745,1773,1801,1808,1815,1839,1866,1873,1880,1904,1931,1938,1945,1961,2004,2011],{"type":560,"tag":781,"props":1696,"children":1697},{"class":783,"line":784},[1698,1702,1707],{"type":560,"tag":781,"props":1699,"children":1700},{"style":788},[1701],{"type":566,"value":791},{"type":560,"tag":781,"props":1703,"children":1704},{"style":794},[1705],{"type":566,"value":1706}," Rectangle",{"type":560,"tag":781,"props":1708,"children":1709},{"style":800},[1710],{"type":566,"value":803},{"type":560,"tag":781,"props":1712,"children":1713},{"class":783,"line":806},[1714,1718,1722,1727,1732,1737,1741],{"type":560,"tag":781,"props":1715,"children":1716},{"style":788},[1717],{"type":566,"value":1107},{"type":560,"tag":781,"props":1719,"children":1720},{"style":800},[1721],{"type":566,"value":818},{"type":560,"tag":781,"props":1723,"children":1724},{"style":821},[1725],{"type":566,"value":1726},"width",{"type":560,"tag":781,"props":1728,"children":1729},{"style":800},[1730],{"type":566,"value":1731},",",{"type":560,"tag":781,"props":1733,"children":1734},{"style":821},[1735],{"type":566,"value":1736}," height",{"type":560,"tag":781,"props":1738,"children":1739},{"style":800},[1740],{"type":566,"value":829},{"type":560,"tag":781,"props":1742,"children":1743},{"style":800},[1744],{"type":566,"value":803},{"type":560,"tag":781,"props":1746,"children":1747},{"class":783,"line":836},[1748,1752,1756,1760,1764,1769],{"type":560,"tag":781,"props":1749,"children":1750},{"style":1130},[1751],{"type":566,"value":1133},{"type":560,"tag":781,"props":1753,"children":1754},{"style":800},[1755],{"type":566,"value":1138},{"type":560,"tag":781,"props":1757,"children":1758},{"style":821},[1759],{"type":566,"value":1726},{"type":560,"tag":781,"props":1761,"children":1762},{"style":800},[1763],{"type":566,"value":1147},{"type":560,"tag":781,"props":1765,"children":1766},{"style":821},[1767],{"type":566,"value":1768}," width",{"type":560,"tag":781,"props":1770,"children":1771},{"style":800},[1772],{"type":566,"value":1157},{"type":560,"tag":781,"props":1774,"children":1775},{"class":783,"line":846},[1776,1780,1784,1789,1793,1797],{"type":560,"tag":781,"props":1777,"children":1778},{"style":1130},[1779],{"type":566,"value":1133},{"type":560,"tag":781,"props":1781,"children":1782},{"style":800},[1783],{"type":566,"value":1138},{"type":560,"tag":781,"props":1785,"children":1786},{"style":821},[1787],{"type":566,"value":1788},"height",{"type":560,"tag":781,"props":1790,"children":1791},{"style":800},[1792],{"type":566,"value":1147},{"type":560,"tag":781,"props":1794,"children":1795},{"style":821},[1796],{"type":566,"value":1736},{"type":560,"tag":781,"props":1798,"children":1799},{"style":800},[1800],{"type":566,"value":1157},{"type":560,"tag":781,"props":1802,"children":1803},{"class":783,"line":855},[1804],{"type":560,"tag":781,"props":1805,"children":1806},{"style":800},[1807],{"type":566,"value":852},{"type":560,"tag":781,"props":1809,"children":1810},{"class":783,"line":865},[1811],{"type":560,"tag":781,"props":1812,"children":1813},{"emptyLinePlaceholder":859},[1814],{"type":566,"value":862},{"type":560,"tag":781,"props":1816,"children":1817},{"class":783,"line":883},[1818,1823,1827,1831,1835],{"type":560,"tag":781,"props":1819,"children":1820},{"style":810},[1821],{"type":566,"value":1822},"  setWidth",{"type":560,"tag":781,"props":1824,"children":1825},{"style":800},[1826],{"type":566,"value":818},{"type":560,"tag":781,"props":1828,"children":1829},{"style":821},[1830],{"type":566,"value":1726},{"type":560,"tag":781,"props":1832,"children":1833},{"style":800},[1834],{"type":566,"value":829},{"type":560,"tag":781,"props":1836,"children":1837},{"style":800},[1838],{"type":566,"value":803},{"type":560,"tag":781,"props":1840,"children":1841},{"class":783,"line":892},[1842,1846,1850,1854,1858,1862],{"type":560,"tag":781,"props":1843,"children":1844},{"style":1130},[1845],{"type":566,"value":1133},{"type":560,"tag":781,"props":1847,"children":1848},{"style":800},[1849],{"type":566,"value":1138},{"type":560,"tag":781,"props":1851,"children":1852},{"style":821},[1853],{"type":566,"value":1726},{"type":560,"tag":781,"props":1855,"children":1856},{"style":800},[1857],{"type":566,"value":1147},{"type":560,"tag":781,"props":1859,"children":1860},{"style":821},[1861],{"type":566,"value":1768},{"type":560,"tag":781,"props":1863,"children":1864},{"style":800},[1865],{"type":566,"value":1157},{"type":560,"tag":781,"props":1867,"children":1868},{"class":783,"line":900},[1869],{"type":560,"tag":781,"props":1870,"children":1871},{"style":800},[1872],{"type":566,"value":852},{"type":560,"tag":781,"props":1874,"children":1875},{"class":783,"line":1043},[1876],{"type":560,"tag":781,"props":1877,"children":1878},{"emptyLinePlaceholder":859},[1879],{"type":566,"value":862},{"type":560,"tag":781,"props":1881,"children":1882},{"class":783,"line":1051},[1883,1888,1892,1896,1900],{"type":560,"tag":781,"props":1884,"children":1885},{"style":810},[1886],{"type":566,"value":1887},"  setHeight",{"type":560,"tag":781,"props":1889,"children":1890},{"style":800},[1891],{"type":566,"value":818},{"type":560,"tag":781,"props":1893,"children":1894},{"style":821},[1895],{"type":566,"value":1788},{"type":560,"tag":781,"props":1897,"children":1898},{"style":800},[1899],{"type":566,"value":829},{"type":560,"tag":781,"props":1901,"children":1902},{"style":800},[1903],{"type":566,"value":803},{"type":560,"tag":781,"props":1905,"children":1906},{"class":783,"line":1261},[1907,1911,1915,1919,1923,1927],{"type":560,"tag":781,"props":1908,"children":1909},{"style":1130},[1910],{"type":566,"value":1133},{"type":560,"tag":781,"props":1912,"children":1913},{"style":800},[1914],{"type":566,"value":1138},{"type":560,"tag":781,"props":1916,"children":1917},{"style":821},[1918],{"type":566,"value":1788},{"type":560,"tag":781,"props":1920,"children":1921},{"style":800},[1922],{"type":566,"value":1147},{"type":560,"tag":781,"props":1924,"children":1925},{"style":821},[1926],{"type":566,"value":1736},{"type":560,"tag":781,"props":1928,"children":1929},{"style":800},[1930],{"type":566,"value":1157},{"type":560,"tag":781,"props":1932,"children":1933},{"class":783,"line":1287},[1934],{"type":560,"tag":781,"props":1935,"children":1936},{"style":800},[1937],{"type":566,"value":852},{"type":560,"tag":781,"props":1939,"children":1940},{"class":783,"line":1303},[1941],{"type":560,"tag":781,"props":1942,"children":1943},{"emptyLinePlaceholder":859},[1944],{"type":566,"value":862},{"type":560,"tag":781,"props":1946,"children":1947},{"class":783,"line":1340},[1948,1953,1957],{"type":560,"tag":781,"props":1949,"children":1950},{"style":810},[1951],{"type":566,"value":1952},"  getArea",{"type":560,"tag":781,"props":1954,"children":1955},{"style":800},[1956],{"type":566,"value":876},{"type":560,"tag":781,"props":1958,"children":1959},{"style":800},[1960],{"type":566,"value":803},{"type":560,"tag":781,"props":1962,"children":1963},{"class":783,"line":1348},[1964,1970,1975,1979,1983,1988,1992,1996,2000],{"type":560,"tag":781,"props":1965,"children":1967},{"style":1966},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1968],{"type":566,"value":1969},"    return",{"type":560,"tag":781,"props":1971,"children":1972},{"style":1130},[1973],{"type":566,"value":1974}," this",{"type":560,"tag":781,"props":1976,"children":1977},{"style":800},[1978],{"type":566,"value":1138},{"type":560,"tag":781,"props":1980,"children":1981},{"style":821},[1982],{"type":566,"value":1726},{"type":560,"tag":781,"props":1984,"children":1985},{"style":788},[1986],{"type":566,"value":1987}," *",{"type":560,"tag":781,"props":1989,"children":1990},{"style":1130},[1991],{"type":566,"value":1974},{"type":560,"tag":781,"props":1993,"children":1994},{"style":800},[1995],{"type":566,"value":1138},{"type":560,"tag":781,"props":1997,"children":1998},{"style":821},[1999],{"type":566,"value":1788},{"type":560,"tag":781,"props":2001,"children":2002},{"style":800},[2003],{"type":566,"value":1157},{"type":560,"tag":781,"props":2005,"children":2006},{"class":783,"line":1356},[2007],{"type":560,"tag":781,"props":2008,"children":2009},{"style":800},[2010],{"type":566,"value":852},{"type":560,"tag":781,"props":2012,"children":2013},{"class":783,"line":1364},[2014],{"type":560,"tag":781,"props":2015,"children":2016},{"style":800},[2017],{"type":566,"value":906},{"type":560,"tag":588,"props":2019,"children":2020},{},[2021],{"type":566,"value":2022},"现在，我们创建了一个子类 Square 继承自 Rectangle，表示正方形。在正方形中，宽和高应该始终相等。",{"type":560,"tag":770,"props":2024,"children":2026},{"className":772,"code":2025,"language":774,"meta":555,"style":555},"class Square extends Rectangle {\n  setWidth(width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  setHeight(height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n",[2027],{"type":560,"tag":777,"props":2028,"children":2029},{"__ignoreMap":555},[2030,2054,2077,2106,2134,2141,2148,2171,2198,2225,2232],{"type":560,"tag":781,"props":2031,"children":2032},{"class":783,"line":784},[2033,2037,2042,2046,2050],{"type":560,"tag":781,"props":2034,"children":2035},{"style":788},[2036],{"type":566,"value":791},{"type":560,"tag":781,"props":2038,"children":2039},{"style":794},[2040],{"type":566,"value":2041}," Square",{"type":560,"tag":781,"props":2043,"children":2044},{"style":788},[2045],{"type":566,"value":1276},{"type":560,"tag":781,"props":2047,"children":2048},{"style":810},[2049],{"type":566,"value":1706},{"type":560,"tag":781,"props":2051,"children":2052},{"style":800},[2053],{"type":566,"value":803},{"type":560,"tag":781,"props":2055,"children":2056},{"class":783,"line":806},[2057,2061,2065,2069,2073],{"type":560,"tag":781,"props":2058,"children":2059},{"style":810},[2060],{"type":566,"value":1822},{"type":560,"tag":781,"props":2062,"children":2063},{"style":800},[2064],{"type":566,"value":818},{"type":560,"tag":781,"props":2066,"children":2067},{"style":821},[2068],{"type":566,"value":1726},{"type":560,"tag":781,"props":2070,"children":2071},{"style":800},[2072],{"type":566,"value":829},{"type":560,"tag":781,"props":2074,"children":2075},{"style":800},[2076],{"type":566,"value":803},{"type":560,"tag":781,"props":2078,"children":2079},{"class":783,"line":836},[2080,2085,2089,2094,2098,2102],{"type":560,"tag":781,"props":2081,"children":2082},{"style":1130},[2083],{"type":566,"value":2084},"    super",{"type":560,"tag":781,"props":2086,"children":2087},{"style":800},[2088],{"type":566,"value":1138},{"type":560,"tag":781,"props":2090,"children":2091},{"style":810},[2092],{"type":566,"value":2093},"setWidth",{"type":560,"tag":781,"props":2095,"children":2096},{"style":800},[2097],{"type":566,"value":818},{"type":560,"tag":781,"props":2099,"children":2100},{"style":821},[2101],{"type":566,"value":1726},{"type":560,"tag":781,"props":2103,"children":2104},{"style":800},[2105],{"type":566,"value":1237},{"type":560,"tag":781,"props":2107,"children":2108},{"class":783,"line":846},[2109,2113,2117,2122,2126,2130],{"type":560,"tag":781,"props":2110,"children":2111},{"style":1130},[2112],{"type":566,"value":2084},{"type":560,"tag":781,"props":2114,"children":2115},{"style":800},[2116],{"type":566,"value":1138},{"type":560,"tag":781,"props":2118,"children":2119},{"style":810},[2120],{"type":566,"value":2121},"setHeight",{"type":560,"tag":781,"props":2123,"children":2124},{"style":800},[2125],{"type":566,"value":818},{"type":560,"tag":781,"props":2127,"children":2128},{"style":821},[2129],{"type":566,"value":1726},{"type":560,"tag":781,"props":2131,"children":2132},{"style":800},[2133],{"type":566,"value":1237},{"type":560,"tag":781,"props":2135,"children":2136},{"class":783,"line":855},[2137],{"type":560,"tag":781,"props":2138,"children":2139},{"style":800},[2140],{"type":566,"value":852},{"type":560,"tag":781,"props":2142,"children":2143},{"class":783,"line":865},[2144],{"type":560,"tag":781,"props":2145,"children":2146},{"emptyLinePlaceholder":859},[2147],{"type":566,"value":862},{"type":560,"tag":781,"props":2149,"children":2150},{"class":783,"line":883},[2151,2155,2159,2163,2167],{"type":560,"tag":781,"props":2152,"children":2153},{"style":810},[2154],{"type":566,"value":1887},{"type":560,"tag":781,"props":2156,"children":2157},{"style":800},[2158],{"type":566,"value":818},{"type":560,"tag":781,"props":2160,"children":2161},{"style":821},[2162],{"type":566,"value":1788},{"type":560,"tag":781,"props":2164,"children":2165},{"style":800},[2166],{"type":566,"value":829},{"type":560,"tag":781,"props":2168,"children":2169},{"style":800},[2170],{"type":566,"value":803},{"type":560,"tag":781,"props":2172,"children":2173},{"class":783,"line":892},[2174,2178,2182,2186,2190,2194],{"type":560,"tag":781,"props":2175,"children":2176},{"style":1130},[2177],{"type":566,"value":2084},{"type":560,"tag":781,"props":2179,"children":2180},{"style":800},[2181],{"type":566,"value":1138},{"type":560,"tag":781,"props":2183,"children":2184},{"style":810},[2185],{"type":566,"value":2093},{"type":560,"tag":781,"props":2187,"children":2188},{"style":800},[2189],{"type":566,"value":818},{"type":560,"tag":781,"props":2191,"children":2192},{"style":821},[2193],{"type":566,"value":1788},{"type":560,"tag":781,"props":2195,"children":2196},{"style":800},[2197],{"type":566,"value":1237},{"type":560,"tag":781,"props":2199,"children":2200},{"class":783,"line":900},[2201,2205,2209,2213,2217,2221],{"type":560,"tag":781,"props":2202,"children":2203},{"style":1130},[2204],{"type":566,"value":2084},{"type":560,"tag":781,"props":2206,"children":2207},{"style":800},[2208],{"type":566,"value":1138},{"type":560,"tag":781,"props":2210,"children":2211},{"style":810},[2212],{"type":566,"value":2121},{"type":560,"tag":781,"props":2214,"children":2215},{"style":800},[2216],{"type":566,"value":818},{"type":560,"tag":781,"props":2218,"children":2219},{"style":821},[2220],{"type":566,"value":1788},{"type":560,"tag":781,"props":2222,"children":2223},{"style":800},[2224],{"type":566,"value":1237},{"type":560,"tag":781,"props":2226,"children":2227},{"class":783,"line":1043},[2228],{"type":560,"tag":781,"props":2229,"children":2230},{"style":800},[2231],{"type":566,"value":852},{"type":560,"tag":781,"props":2233,"children":2234},{"class":783,"line":1051},[2235],{"type":560,"tag":781,"props":2236,"children":2237},{"style":800},[2238],{"type":566,"value":906},{"type":560,"tag":588,"props":2240,"children":2241},{},[2242],{"type":566,"value":2243},"这里的问题是，Square 子类在修改宽度或高度时，通过覆写 setWidth 和 setHeight 方法，强制宽和高相等，这与基类的行为不一致。如果在需要 Rectangle 的地方使用了 Square，可能会导致程序逻辑错误。",{"type":560,"tag":588,"props":2245,"children":2246},{},[2247],{"type":566,"value":2248},"这违反了里氏替换原则，因为子类修改了父类的预期行为。为了符合里氏替换原则，可能需要重新设计类的继承结构，或者使用更精确的命名来表达实际意图。",{"type":560,"tag":759,"props":2250,"children":2252},{"id":2251},"接口隔离原则",[2253],{"type":566,"value":2251},{"type":560,"tag":588,"props":2255,"children":2256},{},[2257],{"type":566,"value":2258},"接口隔离原则（Interface Segregation Principle，ISP） 是 SOLID 原则之一，它强调一个类不应该被强迫实现它不需要的接口。简而言之，一个类对另一个类的依赖应该建立在最小的接口上。",{"type":560,"tag":588,"props":2260,"children":2261},{},[2262],{"type":566,"value":2263},"在通俗的语言中，接口隔离原则告诉我们不应该让一个类依赖它不需要的接口，否则会导致类需要实现一些它根本不需要的方法。",{"type":560,"tag":588,"props":2265,"children":2266},{},[2267],{"type":566,"value":2268},"举例说明，假设我们有一个动物园的系统，其中有两种动物，一种会飞，一种会游泳：",{"type":560,"tag":770,"props":2270,"children":2272},{"className":772,"code":2271,"language":774,"meta":555,"style":555},"// 不遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n\n  swim() {\n    // 这是一个鸟类不需要的方法，违反接口隔离原则\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n\n  fly() {\n    // 这是一个鱼类不需要的方法，违反接口隔离原则\n  }\n}\n",[2273],{"type":560,"tag":777,"props":2274,"children":2275},{"__ignoreMap":555},[2276,2284,2300,2316,2324,2331,2338,2354,2362,2369,2376,2383,2399,2414,2422,2429,2436,2451,2459,2466],{"type":560,"tag":781,"props":2277,"children":2278},{"class":783,"line":784},[2279],{"type":560,"tag":781,"props":2280,"children":2281},{"style":840},[2282],{"type":566,"value":2283},"// 不遵循接口隔离原则的设计\n",{"type":560,"tag":781,"props":2285,"children":2286},{"class":783,"line":806},[2287,2291,2296],{"type":560,"tag":781,"props":2288,"children":2289},{"style":788},[2290],{"type":566,"value":791},{"type":560,"tag":781,"props":2292,"children":2293},{"style":794},[2294],{"type":566,"value":2295}," Bird",{"type":560,"tag":781,"props":2297,"children":2298},{"style":800},[2299],{"type":566,"value":803},{"type":560,"tag":781,"props":2301,"children":2302},{"class":783,"line":836},[2303,2308,2312],{"type":560,"tag":781,"props":2304,"children":2305},{"style":810},[2306],{"type":566,"value":2307},"  fly",{"type":560,"tag":781,"props":2309,"children":2310},{"style":800},[2311],{"type":566,"value":876},{"type":560,"tag":781,"props":2313,"children":2314},{"style":800},[2315],{"type":566,"value":803},{"type":560,"tag":781,"props":2317,"children":2318},{"class":783,"line":846},[2319],{"type":560,"tag":781,"props":2320,"children":2321},{"style":840},[2322],{"type":566,"value":2323},"    // 实现飞行逻辑\n",{"type":560,"tag":781,"props":2325,"children":2326},{"class":783,"line":855},[2327],{"type":560,"tag":781,"props":2328,"children":2329},{"style":800},[2330],{"type":566,"value":852},{"type":560,"tag":781,"props":2332,"children":2333},{"class":783,"line":865},[2334],{"type":560,"tag":781,"props":2335,"children":2336},{"emptyLinePlaceholder":859},[2337],{"type":566,"value":862},{"type":560,"tag":781,"props":2339,"children":2340},{"class":783,"line":883},[2341,2346,2350],{"type":560,"tag":781,"props":2342,"children":2343},{"style":810},[2344],{"type":566,"value":2345},"  swim",{"type":560,"tag":781,"props":2347,"children":2348},{"style":800},[2349],{"type":566,"value":876},{"type":560,"tag":781,"props":2351,"children":2352},{"style":800},[2353],{"type":566,"value":803},{"type":560,"tag":781,"props":2355,"children":2356},{"class":783,"line":892},[2357],{"type":560,"tag":781,"props":2358,"children":2359},{"style":840},[2360],{"type":566,"value":2361},"    // 这是一个鸟类不需要的方法，违反接口隔离原则\n",{"type":560,"tag":781,"props":2363,"children":2364},{"class":783,"line":900},[2365],{"type":560,"tag":781,"props":2366,"children":2367},{"style":800},[2368],{"type":566,"value":852},{"type":560,"tag":781,"props":2370,"children":2371},{"class":783,"line":1043},[2372],{"type":560,"tag":781,"props":2373,"children":2374},{"style":800},[2375],{"type":566,"value":906},{"type":560,"tag":781,"props":2377,"children":2378},{"class":783,"line":1051},[2379],{"type":560,"tag":781,"props":2380,"children":2381},{"emptyLinePlaceholder":859},[2382],{"type":566,"value":862},{"type":560,"tag":781,"props":2384,"children":2385},{"class":783,"line":1261},[2386,2390,2395],{"type":560,"tag":781,"props":2387,"children":2388},{"style":788},[2389],{"type":566,"value":791},{"type":560,"tag":781,"props":2391,"children":2392},{"style":794},[2393],{"type":566,"value":2394}," Fish",{"type":560,"tag":781,"props":2396,"children":2397},{"style":800},[2398],{"type":566,"value":803},{"type":560,"tag":781,"props":2400,"children":2401},{"class":783,"line":1287},[2402,2406,2410],{"type":560,"tag":781,"props":2403,"children":2404},{"style":810},[2405],{"type":566,"value":2345},{"type":560,"tag":781,"props":2407,"children":2408},{"style":800},[2409],{"type":566,"value":876},{"type":560,"tag":781,"props":2411,"children":2412},{"style":800},[2413],{"type":566,"value":803},{"type":560,"tag":781,"props":2415,"children":2416},{"class":783,"line":1303},[2417],{"type":560,"tag":781,"props":2418,"children":2419},{"style":840},[2420],{"type":566,"value":2421},"    // 实现游泳逻辑\n",{"type":560,"tag":781,"props":2423,"children":2424},{"class":783,"line":1340},[2425],{"type":560,"tag":781,"props":2426,"children":2427},{"style":800},[2428],{"type":566,"value":852},{"type":560,"tag":781,"props":2430,"children":2431},{"class":783,"line":1348},[2432],{"type":560,"tag":781,"props":2433,"children":2434},{"emptyLinePlaceholder":859},[2435],{"type":566,"value":862},{"type":560,"tag":781,"props":2437,"children":2438},{"class":783,"line":1356},[2439,2443,2447],{"type":560,"tag":781,"props":2440,"children":2441},{"style":810},[2442],{"type":566,"value":2307},{"type":560,"tag":781,"props":2444,"children":2445},{"style":800},[2446],{"type":566,"value":876},{"type":560,"tag":781,"props":2448,"children":2449},{"style":800},[2450],{"type":566,"value":803},{"type":560,"tag":781,"props":2452,"children":2453},{"class":783,"line":1364},[2454],{"type":560,"tag":781,"props":2455,"children":2456},{"style":840},[2457],{"type":566,"value":2458},"    // 这是一个鱼类不需要的方法，违反接口隔离原则\n",{"type":560,"tag":781,"props":2460,"children":2461},{"class":783,"line":1389},[2462],{"type":560,"tag":781,"props":2463,"children":2464},{"style":800},[2465],{"type":566,"value":852},{"type":560,"tag":781,"props":2467,"children":2468},{"class":783,"line":1405},[2469],{"type":560,"tag":781,"props":2470,"children":2471},{"style":800},[2472],{"type":566,"value":906},{"type":560,"tag":588,"props":2474,"children":2475},{},[2476],{"type":566,"value":2477},"在这个例子中，Bird 类实现了 fly 和 swim 两个方法，而 Fish 类也实现了 swim 和 fly 两个方法。这违反了接口隔离原则，因为每个类都被迫实现了它们不需要的方法。",{"type":560,"tag":588,"props":2479,"children":2480},{},[2481],{"type":566,"value":2482},"为了符合接口隔离原则，我们可以将接口拆分成更小的部分，让每个类只实现它们需要的方法：",{"type":560,"tag":770,"props":2484,"children":2486},{"className":772,"code":2485,"language":774,"meta":555,"style":555},"// 遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n}\n",[2487],{"type":560,"tag":777,"props":2488,"children":2489},{"__ignoreMap":555},[2490,2498,2513,2528,2535,2542,2549,2556,2571,2586,2593,2600],{"type":560,"tag":781,"props":2491,"children":2492},{"class":783,"line":784},[2493],{"type":560,"tag":781,"props":2494,"children":2495},{"style":840},[2496],{"type":566,"value":2497},"// 遵循接口隔离原则的设计\n",{"type":560,"tag":781,"props":2499,"children":2500},{"class":783,"line":806},[2501,2505,2509],{"type":560,"tag":781,"props":2502,"children":2503},{"style":788},[2504],{"type":566,"value":791},{"type":560,"tag":781,"props":2506,"children":2507},{"style":794},[2508],{"type":566,"value":2295},{"type":560,"tag":781,"props":2510,"children":2511},{"style":800},[2512],{"type":566,"value":803},{"type":560,"tag":781,"props":2514,"children":2515},{"class":783,"line":836},[2516,2520,2524],{"type":560,"tag":781,"props":2517,"children":2518},{"style":810},[2519],{"type":566,"value":2307},{"type":560,"tag":781,"props":2521,"children":2522},{"style":800},[2523],{"type":566,"value":876},{"type":560,"tag":781,"props":2525,"children":2526},{"style":800},[2527],{"type":566,"value":803},{"type":560,"tag":781,"props":2529,"children":2530},{"class":783,"line":846},[2531],{"type":560,"tag":781,"props":2532,"children":2533},{"style":840},[2534],{"type":566,"value":2323},{"type":560,"tag":781,"props":2536,"children":2537},{"class":783,"line":855},[2538],{"type":560,"tag":781,"props":2539,"children":2540},{"style":800},[2541],{"type":566,"value":852},{"type":560,"tag":781,"props":2543,"children":2544},{"class":783,"line":865},[2545],{"type":560,"tag":781,"props":2546,"children":2547},{"style":800},[2548],{"type":566,"value":906},{"type":560,"tag":781,"props":2550,"children":2551},{"class":783,"line":883},[2552],{"type":560,"tag":781,"props":2553,"children":2554},{"emptyLinePlaceholder":859},[2555],{"type":566,"value":862},{"type":560,"tag":781,"props":2557,"children":2558},{"class":783,"line":892},[2559,2563,2567],{"type":560,"tag":781,"props":2560,"children":2561},{"style":788},[2562],{"type":566,"value":791},{"type":560,"tag":781,"props":2564,"children":2565},{"style":794},[2566],{"type":566,"value":2394},{"type":560,"tag":781,"props":2568,"children":2569},{"style":800},[2570],{"type":566,"value":803},{"type":560,"tag":781,"props":2572,"children":2573},{"class":783,"line":900},[2574,2578,2582],{"type":560,"tag":781,"props":2575,"children":2576},{"style":810},[2577],{"type":566,"value":2345},{"type":560,"tag":781,"props":2579,"children":2580},{"style":800},[2581],{"type":566,"value":876},{"type":560,"tag":781,"props":2583,"children":2584},{"style":800},[2585],{"type":566,"value":803},{"type":560,"tag":781,"props":2587,"children":2588},{"class":783,"line":1043},[2589],{"type":560,"tag":781,"props":2590,"children":2591},{"style":840},[2592],{"type":566,"value":2421},{"type":560,"tag":781,"props":2594,"children":2595},{"class":783,"line":1051},[2596],{"type":560,"tag":781,"props":2597,"children":2598},{"style":800},[2599],{"type":566,"value":852},{"type":560,"tag":781,"props":2601,"children":2602},{"class":783,"line":1261},[2603],{"type":560,"tag":781,"props":2604,"children":2605},{"style":800},[2606],{"type":566,"value":906},{"type":560,"tag":588,"props":2608,"children":2609},{},[2610],{"type":566,"value":2611},"这样，每个类都只依赖于它们需要的接口，不再强迫实现不必要的方法。接口隔离原则的目标是使接口更具体，更贴近类的实际需求，从而提高系统的灵活性和可维护性。",{"type":560,"tag":759,"props":2613,"children":2615},{"id":2614},"依赖反转原则",[2616],{"type":566,"value":2614},{"type":560,"tag":588,"props":2618,"children":2619},{},[2620],{"type":566,"value":2621},"依赖反转原则（Dependency Inversion Principle，DIP） 是 SOLID 原则之一，它强调高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。",{"type":560,"tag":588,"props":2623,"children":2624},{},[2625],{"type":566,"value":2626},"举例说明，考虑一个简单的报告生成系统，有一个高层模块 ReportGenerator 负责生成报告：",{"type":560,"tag":770,"props":2628,"children":2630},{"className":772,"code":2629,"language":774,"meta":555,"style":555},"// 不遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor() {\n    this.pdfGenerator = new PDFGenerator(); // 依赖于具体的 PDF 生成器\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.pdfGenerator.generatePDF();\n  }\n}\n\nclass PDFGenerator {\n  generatePDF() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n",[2631],{"type":560,"tag":777,"props":2632,"children":2633},{"__ignoreMap":555},[2634,2642,2658,2673,2713,2720,2727,2743,2751,2780,2787,2794,2801,2816,2832,2840,2847],{"type":560,"tag":781,"props":2635,"children":2636},{"class":783,"line":784},[2637],{"type":560,"tag":781,"props":2638,"children":2639},{"style":840},[2640],{"type":566,"value":2641},"// 不遵循依赖反转原则的设计\n",{"type":560,"tag":781,"props":2643,"children":2644},{"class":783,"line":806},[2645,2649,2654],{"type":560,"tag":781,"props":2646,"children":2647},{"style":788},[2648],{"type":566,"value":791},{"type":560,"tag":781,"props":2650,"children":2651},{"style":794},[2652],{"type":566,"value":2653}," ReportGenerator",{"type":560,"tag":781,"props":2655,"children":2656},{"style":800},[2657],{"type":566,"value":803},{"type":560,"tag":781,"props":2659,"children":2660},{"class":783,"line":836},[2661,2665,2669],{"type":560,"tag":781,"props":2662,"children":2663},{"style":788},[2664],{"type":566,"value":1107},{"type":560,"tag":781,"props":2666,"children":2667},{"style":800},[2668],{"type":566,"value":876},{"type":560,"tag":781,"props":2670,"children":2671},{"style":800},[2672],{"type":566,"value":803},{"type":560,"tag":781,"props":2674,"children":2675},{"class":783,"line":846},[2676,2680,2684,2689,2693,2698,2703,2708],{"type":560,"tag":781,"props":2677,"children":2678},{"style":1130},[2679],{"type":566,"value":1133},{"type":560,"tag":781,"props":2681,"children":2682},{"style":800},[2683],{"type":566,"value":1138},{"type":560,"tag":781,"props":2685,"children":2686},{"style":821},[2687],{"type":566,"value":2688},"pdfGenerator",{"type":560,"tag":781,"props":2690,"children":2691},{"style":800},[2692],{"type":566,"value":1147},{"type":560,"tag":781,"props":2694,"children":2695},{"style":788},[2696],{"type":566,"value":2697}," new",{"type":560,"tag":781,"props":2699,"children":2700},{"style":810},[2701],{"type":566,"value":2702}," PDFGenerator",{"type":560,"tag":781,"props":2704,"children":2705},{"style":800},[2706],{"type":566,"value":2707},"();",{"type":560,"tag":781,"props":2709,"children":2710},{"style":840},[2711],{"type":566,"value":2712}," // 依赖于具体的 PDF 生成器\n",{"type":560,"tag":781,"props":2714,"children":2715},{"class":783,"line":855},[2716],{"type":560,"tag":781,"props":2717,"children":2718},{"style":800},[2719],{"type":566,"value":852},{"type":560,"tag":781,"props":2721,"children":2722},{"class":783,"line":865},[2723],{"type":560,"tag":781,"props":2724,"children":2725},{"emptyLinePlaceholder":859},[2726],{"type":566,"value":862},{"type":560,"tag":781,"props":2728,"children":2729},{"class":783,"line":883},[2730,2735,2739],{"type":560,"tag":781,"props":2731,"children":2732},{"style":810},[2733],{"type":566,"value":2734},"  generateReport",{"type":560,"tag":781,"props":2736,"children":2737},{"style":800},[2738],{"type":566,"value":876},{"type":560,"tag":781,"props":2740,"children":2741},{"style":800},[2742],{"type":566,"value":803},{"type":560,"tag":781,"props":2744,"children":2745},{"class":783,"line":892},[2746],{"type":560,"tag":781,"props":2747,"children":2748},{"style":840},[2749],{"type":566,"value":2750},"    // 生成报告的逻辑\n",{"type":560,"tag":781,"props":2752,"children":2753},{"class":783,"line":900},[2754,2758,2762,2766,2770,2775],{"type":560,"tag":781,"props":2755,"children":2756},{"style":1130},[2757],{"type":566,"value":1133},{"type":560,"tag":781,"props":2759,"children":2760},{"style":800},[2761],{"type":566,"value":1138},{"type":560,"tag":781,"props":2763,"children":2764},{"style":821},[2765],{"type":566,"value":2688},{"type":560,"tag":781,"props":2767,"children":2768},{"style":800},[2769],{"type":566,"value":1138},{"type":560,"tag":781,"props":2771,"children":2772},{"style":810},[2773],{"type":566,"value":2774},"generatePDF",{"type":560,"tag":781,"props":2776,"children":2777},{"style":800},[2778],{"type":566,"value":2779},"();\n",{"type":560,"tag":781,"props":2781,"children":2782},{"class":783,"line":1043},[2783],{"type":560,"tag":781,"props":2784,"children":2785},{"style":800},[2786],{"type":566,"value":852},{"type":560,"tag":781,"props":2788,"children":2789},{"class":783,"line":1051},[2790],{"type":560,"tag":781,"props":2791,"children":2792},{"style":800},[2793],{"type":566,"value":906},{"type":560,"tag":781,"props":2795,"children":2796},{"class":783,"line":1261},[2797],{"type":560,"tag":781,"props":2798,"children":2799},{"emptyLinePlaceholder":859},[2800],{"type":566,"value":862},{"type":560,"tag":781,"props":2802,"children":2803},{"class":783,"line":1287},[2804,2808,2812],{"type":560,"tag":781,"props":2805,"children":2806},{"style":788},[2807],{"type":566,"value":791},{"type":560,"tag":781,"props":2809,"children":2810},{"style":794},[2811],{"type":566,"value":2702},{"type":560,"tag":781,"props":2813,"children":2814},{"style":800},[2815],{"type":566,"value":803},{"type":560,"tag":781,"props":2817,"children":2818},{"class":783,"line":1303},[2819,2824,2828],{"type":560,"tag":781,"props":2820,"children":2821},{"style":810},[2822],{"type":566,"value":2823},"  generatePDF",{"type":560,"tag":781,"props":2825,"children":2826},{"style":800},[2827],{"type":566,"value":876},{"type":560,"tag":781,"props":2829,"children":2830},{"style":800},[2831],{"type":566,"value":803},{"type":560,"tag":781,"props":2833,"children":2834},{"class":783,"line":1340},[2835],{"type":560,"tag":781,"props":2836,"children":2837},{"style":840},[2838],{"type":566,"value":2839},"    // 具体的 PDF 生成逻辑\n",{"type":560,"tag":781,"props":2841,"children":2842},{"class":783,"line":1348},[2843],{"type":560,"tag":781,"props":2844,"children":2845},{"style":800},[2846],{"type":566,"value":852},{"type":560,"tag":781,"props":2848,"children":2849},{"class":783,"line":1356},[2850],{"type":560,"tag":781,"props":2851,"children":2852},{"style":800},[2853],{"type":566,"value":906},{"type":560,"tag":588,"props":2855,"children":2856},{},[2857],{"type":566,"value":2858},"在这个设计中，ReportGenerator 直接依赖于具体的 PDFGenerator 类，这违反了依赖反转原则。如果我们想使用其他类型的报告生成器，例如 HTMLGenerator，就需要修改 ReportGenerator 类。",{"type":560,"tag":588,"props":2860,"children":2861},{},[2862],{"type":566,"value":2863},"为了符合依赖反转原则，我们应该通过抽象来解耦高层和低层模块：",{"type":560,"tag":770,"props":2865,"children":2867},{"className":772,"code":2866,"language":774,"meta":555,"style":555},"// 遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor(generator) {\n    this.generator = generator; // 依赖于抽象的报告生成器接口\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.generator.generate();\n  }\n}\n\nclass PDFGenerator {\n  generate() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n\nclass HTMLGenerator {\n  generate() {\n    // 具体的 HTML 生成逻辑\n  }\n}\n",[2868],{"type":560,"tag":777,"props":2869,"children":2870},{"__ignoreMap":555},[2871,2879,2894,2918,2952,2959,2966,2981,2988,3016,3023,3030,3037,3052,3068,3075,3082,3089,3096,3112,3127,3135,3142],{"type":560,"tag":781,"props":2872,"children":2873},{"class":783,"line":784},[2874],{"type":560,"tag":781,"props":2875,"children":2876},{"style":840},[2877],{"type":566,"value":2878},"// 遵循依赖反转原则的设计\n",{"type":560,"tag":781,"props":2880,"children":2881},{"class":783,"line":806},[2882,2886,2890],{"type":560,"tag":781,"props":2883,"children":2884},{"style":788},[2885],{"type":566,"value":791},{"type":560,"tag":781,"props":2887,"children":2888},{"style":794},[2889],{"type":566,"value":2653},{"type":560,"tag":781,"props":2891,"children":2892},{"style":800},[2893],{"type":566,"value":803},{"type":560,"tag":781,"props":2895,"children":2896},{"class":783,"line":836},[2897,2901,2905,2910,2914],{"type":560,"tag":781,"props":2898,"children":2899},{"style":788},[2900],{"type":566,"value":1107},{"type":560,"tag":781,"props":2902,"children":2903},{"style":800},[2904],{"type":566,"value":818},{"type":560,"tag":781,"props":2906,"children":2907},{"style":821},[2908],{"type":566,"value":2909},"generator",{"type":560,"tag":781,"props":2911,"children":2912},{"style":800},[2913],{"type":566,"value":829},{"type":560,"tag":781,"props":2915,"children":2916},{"style":800},[2917],{"type":566,"value":803},{"type":560,"tag":781,"props":2919,"children":2920},{"class":783,"line":846},[2921,2925,2929,2933,2937,2942,2947],{"type":560,"tag":781,"props":2922,"children":2923},{"style":1130},[2924],{"type":566,"value":1133},{"type":560,"tag":781,"props":2926,"children":2927},{"style":800},[2928],{"type":566,"value":1138},{"type":560,"tag":781,"props":2930,"children":2931},{"style":821},[2932],{"type":566,"value":2909},{"type":560,"tag":781,"props":2934,"children":2935},{"style":800},[2936],{"type":566,"value":1147},{"type":560,"tag":781,"props":2938,"children":2939},{"style":821},[2940],{"type":566,"value":2941}," generator",{"type":560,"tag":781,"props":2943,"children":2944},{"style":800},[2945],{"type":566,"value":2946},";",{"type":560,"tag":781,"props":2948,"children":2949},{"style":840},[2950],{"type":566,"value":2951}," // 依赖于抽象的报告生成器接口\n",{"type":560,"tag":781,"props":2953,"children":2954},{"class":783,"line":855},[2955],{"type":560,"tag":781,"props":2956,"children":2957},{"style":800},[2958],{"type":566,"value":852},{"type":560,"tag":781,"props":2960,"children":2961},{"class":783,"line":865},[2962],{"type":560,"tag":781,"props":2963,"children":2964},{"emptyLinePlaceholder":859},[2965],{"type":566,"value":862},{"type":560,"tag":781,"props":2967,"children":2968},{"class":783,"line":883},[2969,2973,2977],{"type":560,"tag":781,"props":2970,"children":2971},{"style":810},[2972],{"type":566,"value":2734},{"type":560,"tag":781,"props":2974,"children":2975},{"style":800},[2976],{"type":566,"value":876},{"type":560,"tag":781,"props":2978,"children":2979},{"style":800},[2980],{"type":566,"value":803},{"type":560,"tag":781,"props":2982,"children":2983},{"class":783,"line":892},[2984],{"type":560,"tag":781,"props":2985,"children":2986},{"style":840},[2987],{"type":566,"value":2750},{"type":560,"tag":781,"props":2989,"children":2990},{"class":783,"line":900},[2991,2995,2999,3003,3007,3012],{"type":560,"tag":781,"props":2992,"children":2993},{"style":1130},[2994],{"type":566,"value":1133},{"type":560,"tag":781,"props":2996,"children":2997},{"style":800},[2998],{"type":566,"value":1138},{"type":560,"tag":781,"props":3000,"children":3001},{"style":821},[3002],{"type":566,"value":2909},{"type":560,"tag":781,"props":3004,"children":3005},{"style":800},[3006],{"type":566,"value":1138},{"type":560,"tag":781,"props":3008,"children":3009},{"style":810},[3010],{"type":566,"value":3011},"generate",{"type":560,"tag":781,"props":3013,"children":3014},{"style":800},[3015],{"type":566,"value":2779},{"type":560,"tag":781,"props":3017,"children":3018},{"class":783,"line":1043},[3019],{"type":560,"tag":781,"props":3020,"children":3021},{"style":800},[3022],{"type":566,"value":852},{"type":560,"tag":781,"props":3024,"children":3025},{"class":783,"line":1051},[3026],{"type":560,"tag":781,"props":3027,"children":3028},{"style":800},[3029],{"type":566,"value":906},{"type":560,"tag":781,"props":3031,"children":3032},{"class":783,"line":1261},[3033],{"type":560,"tag":781,"props":3034,"children":3035},{"emptyLinePlaceholder":859},[3036],{"type":566,"value":862},{"type":560,"tag":781,"props":3038,"children":3039},{"class":783,"line":1287},[3040,3044,3048],{"type":560,"tag":781,"props":3041,"children":3042},{"style":788},[3043],{"type":566,"value":791},{"type":560,"tag":781,"props":3045,"children":3046},{"style":794},[3047],{"type":566,"value":2702},{"type":560,"tag":781,"props":3049,"children":3050},{"style":800},[3051],{"type":566,"value":803},{"type":560,"tag":781,"props":3053,"children":3054},{"class":783,"line":1303},[3055,3060,3064],{"type":560,"tag":781,"props":3056,"children":3057},{"style":810},[3058],{"type":566,"value":3059},"  generate",{"type":560,"tag":781,"props":3061,"children":3062},{"style":800},[3063],{"type":566,"value":876},{"type":560,"tag":781,"props":3065,"children":3066},{"style":800},[3067],{"type":566,"value":803},{"type":560,"tag":781,"props":3069,"children":3070},{"class":783,"line":1340},[3071],{"type":560,"tag":781,"props":3072,"children":3073},{"style":840},[3074],{"type":566,"value":2839},{"type":560,"tag":781,"props":3076,"children":3077},{"class":783,"line":1348},[3078],{"type":560,"tag":781,"props":3079,"children":3080},{"style":800},[3081],{"type":566,"value":852},{"type":560,"tag":781,"props":3083,"children":3084},{"class":783,"line":1356},[3085],{"type":560,"tag":781,"props":3086,"children":3087},{"style":800},[3088],{"type":566,"value":906},{"type":560,"tag":781,"props":3090,"children":3091},{"class":783,"line":1364},[3092],{"type":560,"tag":781,"props":3093,"children":3094},{"emptyLinePlaceholder":859},[3095],{"type":566,"value":862},{"type":560,"tag":781,"props":3097,"children":3098},{"class":783,"line":1389},[3099,3103,3108],{"type":560,"tag":781,"props":3100,"children":3101},{"style":788},[3102],{"type":566,"value":791},{"type":560,"tag":781,"props":3104,"children":3105},{"style":794},[3106],{"type":566,"value":3107}," HTMLGenerator",{"type":560,"tag":781,"props":3109,"children":3110},{"style":800},[3111],{"type":566,"value":803},{"type":560,"tag":781,"props":3113,"children":3114},{"class":783,"line":1405},[3115,3119,3123],{"type":560,"tag":781,"props":3116,"children":3117},{"style":810},[3118],{"type":566,"value":3059},{"type":560,"tag":781,"props":3120,"children":3121},{"style":800},[3122],{"type":566,"value":876},{"type":560,"tag":781,"props":3124,"children":3125},{"style":800},[3126],{"type":566,"value":803},{"type":560,"tag":781,"props":3128,"children":3129},{"class":783,"line":1442},[3130],{"type":560,"tag":781,"props":3131,"children":3132},{"style":840},[3133],{"type":566,"value":3134},"    // 具体的 HTML 生成逻辑\n",{"type":560,"tag":781,"props":3136,"children":3137},{"class":783,"line":1450},[3138],{"type":560,"tag":781,"props":3139,"children":3140},{"style":800},[3141],{"type":566,"value":852},{"type":560,"tag":781,"props":3143,"children":3145},{"class":783,"line":3144},23,[3146],{"type":560,"tag":781,"props":3147,"children":3148},{"style":800},[3149],{"type":566,"value":906},{"type":560,"tag":588,"props":3151,"children":3152},{},[3153],{"type":566,"value":3154},"现在，ReportGenerator 不再直接依赖于具体的实现，而是依赖于抽象的报告生成器接口。这使得我们可以轻松地扩展系统，例如添加新的报告生成器，而不需要修改 ReportGenerator 类。这样的设计更加灵活，符合依赖反转原则。",{"type":560,"tag":3156,"props":3157,"children":3158},"style",{},[3159],{"type":566,"value":3160},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":555,"searchDepth":855,"depth":855,"links":3162},[3163,3164,3165,3166,3167,3168],{"id":563,"depth":806,"text":563},{"id":584,"depth":806,"text":584},{"id":595,"depth":806,"text":595},{"id":605,"depth":806,"text":605},{"id":623,"depth":806,"text":623},{"id":663,"depth":806,"text":666,"children":3169},[3170,3171,3172,3173,3174],{"id":761,"depth":836,"text":761},{"id":1064,"depth":836,"text":1064},{"id":1670,"depth":836,"text":1670},{"id":2251,"depth":836,"text":2251},{"id":2614,"depth":836,"text":2614},"markdown","content:2.endorsement:1.oop:1.oop-basic-concept.md","content","2.endorsement/1.oop/1.oop-basic-concept.md","md",[3181,3183],{"_path":270,"title":269,"description":3182},"给你两个字符串 word1 和 word2 。请你从 word1 开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。",{"_path":285,"title":284,"description":555},1716810720195]