[{"data":1,"prerenderedAt":1213},["Reactive",2],{"navigation":3,"/code/algorithm/leetcode/generate-parentheses":320,"/code/algorithm/leetcode/generate-parentheses-surround":1208},[4,32],{"title":5,"_path":6,"children":7},"八股文","/endorsement",[8,19],{"title":9,"_path":10,"children":11},"构建工具","/endorsement/build-tools",[12],{"title":13,"_path":14,"children":15},"Webpack","/endorsement/build-tools/webpack",[16],{"title":17,"_path":18},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":20,"_path":21,"children":22},"Html","/endorsement/html",[23,26,29],{"title":24,"_path":25},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":27,"_path":28},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":30,"_path":31},"离线存储","/endorsement/html/offline-storage",{"title":33,"_path":34,"children":35},"代码","/code",[36,264,313],{"title":37,"_path":38,"children":39},"算法","/code/algorithm",[40,53],{"title":41,"_path":42,"children":43},"剑指 offer","/code/algorithm/sword-ofter",[44,47,50],{"title":45,"_path":46},"LCR.140 训练计划 II","/code/algorithm/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":48,"_path":49},"LCR 169. 招式拆解 II","/code/algorithm/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":51,"_path":52},"LCR 187. 破冰游戏","/code/algorithm/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":54,"_path":55,"children":56},"力扣 leetCode","/code/algorithm/leetcode",[57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261],{"title":58,"_path":59},"No.1 两数相加","/code/algorithm/leetcode/two-sum",{"title":61,"_path":62},"No.2 两数相加","/code/algorithm/leetcode/add-two-numbers",{"title":64,"_path":65},"No.3 无重复字符的最长子串","/code/algorithm/leetcode/longest-substring-without-repeating-characters",{"title":67,"_path":68},"No.4 寻找两个正序数组的中位数","/code/algorithm/leetcode/median-of-two-sorted-arrays",{"title":70,"_path":71},"No.5 最长回文子串","/code/algorithm/leetcode/longest-palindromic-substring",{"title":73,"_path":74},"No.7 整数反转","/code/algorithm/leetcode/reverse-integer",{"title":76,"_path":77},"No.9 回文数","/code/algorithm/leetcode/palindrome-number",{"title":79,"_path":80},"No.14 最长公共前缀","/code/algorithm/leetcode/longest-common-prefix",{"title":82,"_path":83},"No.15 三数之和","/code/algorithm/leetcode/3sum",{"title":85,"_path":86},"No.20 有效的括号","/code/algorithm/leetcode/valid-parentheses",{"title":88,"_path":89},"No.21 合并两个有序链表","/code/algorithm/leetcode/merge-two-sorted-lists",{"title":91,"_path":92},"No.22 括号生成","/code/algorithm/leetcode/generate-parentheses",{"title":94,"_path":95},"No.23 合并 K 个升序链表","/code/algorithm/leetcode/merge-k-sorted-lists",{"title":97,"_path":98},"No.24 两两交换链表中的节点","/code/algorithm/leetcode/swap-nodes-in-pairs",{"title":100,"_path":101},"No.25 K 个一组翻转链表","/code/algorithm/leetcode/reverse-nodes-in-k-group",{"title":103,"_path":104},"No.31 下一个排列","/code/algorithm/leetcode/next-permutation",{"title":106,"_path":107},"No.32 最长有效括号","/code/algorithm/leetcode/longest-valid-parentheses",{"title":109,"_path":110},"No.33 搜索旋转排序数组","/code/algorithm/leetcode/search-in-rotated-sorted-array",{"title":112,"_path":113},"No.34 在排序数组中查找元素的第一个和最后一个位置","/code/algorithm/leetcode/find-first-and-last-position-of-element-in-sorted-array",{"title":115,"_path":116},"No.39 组合求和","/code/algorithm/leetcode/combination-sum",{"title":118,"_path":119},"No.42 接雨水","/code/algorithm/leetcode/trapping-rain-water",{"title":121,"_path":122},"No.46 全排列","/code/algorithm/leetcode/permutations",{"title":124,"_path":125},"No.53 最大子序和","/code/algorithm/leetcode/maximum-subarray",{"title":127,"_path":128},"No.56 合并区间","/code/algorithm/leetcode/merge-intervals",{"title":130,"_path":131},"No.67 二进制求和","/code/algorithm/leetcode/add-binary",{"title":133,"_path":134},"No.69 x 的平方根","/code/algorithm/leetcode/sqrtx",{"title":136,"_path":137},"No.70 爬楼梯","/code/algorithm/leetcode/climbing-stairs",{"title":139,"_path":140},"No.88 合并两个有序数组","/code/algorithm/leetcode/merge-sorted-array",{"title":142,"_path":143},"No.92 反转链表 II","/code/algorithm/leetcode/reverse-linked-list-ii",{"title":145,"_path":146},"No.94 二叉树的中序遍历","/code/algorithm/leetcode/binary-tree-inorder-traversal",{"title":148,"_path":149},"No.101 对称二叉树","/code/algorithm/leetcode/symmetric-tree",{"title":151,"_path":152},"No.102 二叉树的层序遍历","/code/algorithm/leetcode/binary-tree-level-order-traversal",{"title":154,"_path":155},"No.104 二叉树的最大深度","/code/algorithm/leetcode/maximum-depth-of-binary-tree",{"title":157,"_path":158},"No.111 二叉树的最小深度","/code/algorithm/leetcode/minimum-depth-of-binary-tree",{"title":160,"_path":161},"No.112 路径总和","/code/algorithm/leetcode/path-sum",{"title":163,"_path":164},"No.121 买股票的最佳时机","/code/algorithm/leetcode/best-time-to-buy-and-sell-stock",{"title":166,"_path":167},"No.129 求根到叶子节点数字之和","/code/algorithm/leetcode/sum-root-to-leaf-numbers",{"title":169,"_path":170},"No.136 只出现一次的数字","/code/algorithm/leetcode/single-number",{"title":172,"_path":173},"No.141 环型链表","/code/algorithm/leetcode/linked-list-cycle",{"title":175,"_path":176},"No.146 LRU 缓存","/code/algorithm/leetcode/lru-cache",{"title":178,"_path":179},"No.151 反转字符串中的单词","/code/algorithm/leetcode/reverse-words-in-a-string",{"title":181,"_path":182},"No.153 寻找旋转排序数组中的最小值","/code/algorithm/leetcode/find-minimum-in-rotated-sorted-array",{"title":184,"_path":185},"No.155 最小栈","/code/algorithm/leetcode/min-stack",{"title":187,"_path":188},"No.160 相交链表","/code/algorithm/leetcode/intersection-of-two-linked-lists",{"title":190,"_path":191},"No.162 寻找峰值","/code/algorithm/leetcode/find-peak-element",{"title":193,"_path":194},"No.169 多数元素","/code/algorithm/leetcode/majority-element",{"title":196,"_path":197},"No.200 岛屿数量","/code/algorithm/leetcode/number-of-islands",{"title":199,"_path":200},"No.206 反转链表","/code/algorithm/leetcode/reverse-linked-list",{"title":202,"_path":203},"No.209 长度最小的子数组","/code/algorithm/leetcode/minimum-size-subarray-sum",{"title":205,"_path":206},"No.215 数组中的第K个最大元素","/code/algorithm/leetcode/kth-largest-element-in-an-array",{"title":208,"_path":209},"No.226 翻转二叉树","/code/algorithm/leetcode/invert-binary-tree",{"title":211,"_path":212},"No.238 除自身以外数组的乘积","/code/algorithm/leetcode/product-of-array-except-self",{"title":214,"_path":215},"No.322 零钱兑换","/code/algorithm/leetcode/coin-change",{"title":217,"_path":218},"No.334 递增的三元子序列","/code/algorithm/leetcode/increasing-triplet-subsequence",{"title":220,"_path":221},"No.344 反转字符串","/code/algorithm/leetcode/reverse-string",{"title":223,"_path":224},"No.345 反转字符串中的元音字母","/code/algorithm/leetcode/reverse-vowels-of-a-string",{"title":226,"_path":227},"No.384 打乱数组","/code/algorithm/leetcode/shuffle-an-array",{"title":229,"_path":230},"No.415 字符串相加","/code/algorithm/leetcode/add-strings",{"title":232,"_path":233},"No.443 压缩字符串","/code/algorithm/leetcode/string-compression",{"title":235,"_path":236},"No.509 斐波那契数","/code/algorithm/leetcode/fibonacci-number",{"title":238,"_path":239},"No.605 种花问题","/code/algorithm/leetcode/can-place-flowers",{"title":241,"_path":242},"No.617 合并二叉树","/code/algorithm/leetcode/merge-two-binary-trees",{"title":244,"_path":245},"No.678 有效的括号字符串","/code/algorithm/leetcode/valid-parenthesis-string",{"title":247,"_path":248},"No.704 二分查找","/code/algorithm/leetcode/binary-search",{"title":250,"_path":251},"No.912 排序数组","/code/algorithm/leetcode/sort-an-array",{"title":253,"_path":254},"No.1071 字符串的最大公因子","/code/algorithm/leetcode/greatest-common-divisor-of-strings",{"title":256,"_path":257},"No.1143 最长公共子序列","/code/algorithm/leetcode/longest-common-subsequence",{"title":259,"_path":260},"No.1431 拥有最多糖果的孩子","/code/algorithm/leetcode/kids-with-the-greatest-number-of-candies",{"title":262,"_path":263},"No.1768 交替合并字符串","/code/algorithm/leetcode/merge-strings-alternately",{"title":265,"_path":266,"children":267},"源码实现","/code/source",[268,293,306],{"title":269,"_path":270,"children":271},"原生 api","/code/source/native-api",[272,275,278,281,284,287,290],{"title":273,"_path":274},"ajax","/code/source/native-api/ajax",{"title":276,"_path":277},"call & apply & bind","/code/source/native-api/call-apply-bind",{"title":279,"_path":280},"new 操作符","/code/source/native-api/new",{"title":282,"_path":283},"instanceof 关键字","/code/source/native-api/instanceof",{"title":285,"_path":286},"定时器","/code/source/native-api/timer",{"title":288,"_path":289},"JSON.stringify","/code/source/native-api/json-stringify",{"title":291,"_path":292},"Iterator 迭代器","/code/source/native-api/iterator",{"title":294,"_path":295,"children":296},"数组 Array","/code/source/array",[297,300,303],{"title":298,"_path":299},"数组去重","/code/source/array/remove-duplicate",{"title":301,"_path":302},"数组扁平化","/code/source/array/flat",{"title":304,"_path":305},"交集、差集、并集、补集","/code/source/array/intersect-minus-union-complement",{"title":307,"_path":308,"children":309},"字符串 String","/code/source/string",[310],{"title":311,"_path":312},"repeat()","/code/source/string/repeat",{"title":314,"_path":315,"children":316},"业务场景","/code/scene",[317],{"title":318,"_path":319},"顺序打印 url 并支持 retry","/code/scene/promise-url-retry",{"_path":92,"_dir":321,"_draft":322,"_partial":322,"_locale":323,"title":91,"description":324,"url":325,"body":326,"_type":1203,"_id":1204,"_source":1205,"_file":1206,"_extension":1207},"leetcode",false,"","数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。","https://leetcode.cn/problems/generate-parentheses",{"type":327,"children":328,"toc":1197},"root",[329,336,341,371,376,399,404,414,420,425,438,443,449,1191],{"type":330,"tag":331,"props":332,"children":333},"element","p",{},[334],{"type":335,"value":324},"text",{"type":330,"tag":331,"props":337,"children":338},{},[339],{"type":335,"value":340},"示例 1：",{"type":330,"tag":342,"props":343,"children":346},"pre",{"className":344,"code":345,"language":335,"meta":323,"style":323},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：n = 3\n输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",[347],{"type":330,"tag":348,"props":349,"children":350},"code",{"__ignoreMap":323},[351,362],{"type":330,"tag":352,"props":353,"children":356},"span",{"class":354,"line":355},"line",1,[357],{"type":330,"tag":352,"props":358,"children":359},{},[360],{"type":335,"value":361},"输入：n = 3\n",{"type":330,"tag":352,"props":363,"children":365},{"class":354,"line":364},2,[366],{"type":330,"tag":352,"props":367,"children":368},{},[369],{"type":335,"value":370},"输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",{"type":330,"tag":331,"props":372,"children":373},{},[374],{"type":335,"value":375},"示例 2：",{"type":330,"tag":342,"props":377,"children":379},{"className":344,"code":378,"language":335,"meta":323,"style":323},"输入：n = 1\n输出：[\"()\"]\n",[380],{"type":330,"tag":348,"props":381,"children":382},{"__ignoreMap":323},[383,391],{"type":330,"tag":352,"props":384,"children":385},{"class":354,"line":355},[386],{"type":330,"tag":352,"props":387,"children":388},{},[389],{"type":335,"value":390},"输入：n = 1\n",{"type":330,"tag":352,"props":392,"children":393},{"class":354,"line":364},[394],{"type":330,"tag":352,"props":395,"children":396},{},[397],{"type":335,"value":398},"输出：[\"()\"]\n",{"type":330,"tag":331,"props":400,"children":401},{},[402],{"type":335,"value":403},"提示：",{"type":330,"tag":405,"props":406,"children":407},"ul",{},[408],{"type":330,"tag":409,"props":410,"children":411},"li",{},[412],{"type":335,"value":413},"1 \u003C= n \u003C= 8",{"type":330,"tag":415,"props":416,"children":418},"h2",{"id":417},"解题思路",[419],{"type":335,"value":417},{"type":330,"tag":331,"props":421,"children":422},{},[423],{"type":335,"value":424},"由于需要求解所有的可能，因此回溯就不难想到，回溯的思路和写法相对比较固定，并且回溯的优化手段大多是剪枝。\n不难想到，如果左括号的数据小于右括号，我们可以提前退出，这就是这道题的剪枝。例如：())...，后面就不用看了，直接退出即可。回溯的退出条件也不难想到：",{"type":330,"tag":405,"props":426,"children":427},{},[428,433],{"type":330,"tag":409,"props":429,"children":430},{},[431],{"type":335,"value":432},"左括号数目 = 右括号数目",{"type":330,"tag":409,"props":434,"children":435},{},[436],{"type":335,"value":437},"左括号数据 + 右括号数据 = 2 * n\n因此这道题可以使用深度优先搜索（回溯思想），从空字符串开始构造，做加法，即 dfs(左括号数目，右括号数据，路径)，我们从 dfs(0, 0, \"\") 开始",{"type":330,"tag":415,"props":439,"children":441},{"id":440},"实现",[442],{"type":335,"value":440},{"type":330,"tag":444,"props":445,"children":447},"h3",{"id":446},"回溯",[448],{"type":335,"value":446},{"type":330,"tag":342,"props":450,"children":454},{"className":451,"code":452,"language":453,"meta":323,"style":323},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const res = [];\n\n  /**\n   * @param l 左侧括号已经用了几个\n   * @param r 右侧括号已经用了几个\n   * @param str 当前递归得到的拼接字符串结果\n   */\n  function dfs(l, r, str) {\n    if (l === n && r === n) {\n      return res.push(str);\n    }\n    // l \u003C r 时不满足条件，剪枝\n    if (l \u003C r) return;\n    // l \u003C n 时可插入左括号，最多可以插入 n 个\n    if (l \u003C n) {\n      dfs(l + 1, r, str + \"(\");\n    }\n    // r \u003C l 时，可以插入右括号\n    if (r \u003C l) {\n      dfs(l, r + 1, str + \")\");\n    }\n  }\n\n  dfs(0, 0, \"\");\n\n  return res;\n};\n","js",[455],{"type":330,"tag":348,"props":456,"children":457},{"__ignoreMap":323},[458,467,493,511,520,564,594,604,613,636,658,680,689,734,783,825,834,843,882,891,919,981,989,998,1027,1084,1092,1101,1109,1153,1161,1178],{"type":330,"tag":352,"props":459,"children":460},{"class":354,"line":355},[461],{"type":330,"tag":352,"props":462,"children":464},{"style":463},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[465],{"type":335,"value":466},"/**\n",{"type":330,"tag":352,"props":468,"children":469},{"class":354,"line":364},[470,475,481,487],{"type":330,"tag":352,"props":471,"children":472},{"style":463},[473],{"type":335,"value":474}," * ",{"type":330,"tag":352,"props":476,"children":478},{"style":477},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[479],{"type":335,"value":480},"@param",{"type":330,"tag":352,"props":482,"children":484},{"style":483},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[485],{"type":335,"value":486}," {number}",{"type":330,"tag":352,"props":488,"children":490},{"style":489},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[491],{"type":335,"value":492}," n\n",{"type":330,"tag":352,"props":494,"children":496},{"class":354,"line":495},3,[497,501,506],{"type":330,"tag":352,"props":498,"children":499},{"style":463},[500],{"type":335,"value":474},{"type":330,"tag":352,"props":502,"children":503},{"style":477},[504],{"type":335,"value":505},"@return",{"type":330,"tag":352,"props":507,"children":508},{"style":483},[509],{"type":335,"value":510}," {string[]}\n",{"type":330,"tag":352,"props":512,"children":514},{"class":354,"line":513},4,[515],{"type":330,"tag":352,"props":516,"children":517},{"style":463},[518],{"type":335,"value":519}," */\n",{"type":330,"tag":352,"props":521,"children":523},{"class":354,"line":522},5,[524,530,536,542,547,553,559],{"type":330,"tag":352,"props":525,"children":527},{"style":526},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[528],{"type":335,"value":529},"var",{"type":330,"tag":352,"props":531,"children":533},{"style":532},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[534],{"type":335,"value":535}," generateParenthesis",{"type":330,"tag":352,"props":537,"children":539},{"style":538},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[540],{"type":335,"value":541}," =",{"type":330,"tag":352,"props":543,"children":544},{"style":526},[545],{"type":335,"value":546}," function",{"type":330,"tag":352,"props":548,"children":550},{"style":549},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[551],{"type":335,"value":552}," (",{"type":330,"tag":352,"props":554,"children":556},{"style":555},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[557],{"type":335,"value":558},"n",{"type":330,"tag":352,"props":560,"children":561},{"style":549},[562],{"type":335,"value":563},") {\n",{"type":330,"tag":352,"props":565,"children":567},{"class":354,"line":566},6,[568,573,579,583,588],{"type":330,"tag":352,"props":569,"children":570},{"style":526},[571],{"type":335,"value":572},"  const",{"type":330,"tag":352,"props":574,"children":576},{"style":575},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[577],{"type":335,"value":578}," res",{"type":330,"tag":352,"props":580,"children":581},{"style":538},[582],{"type":335,"value":541},{"type":330,"tag":352,"props":584,"children":585},{"style":549},[586],{"type":335,"value":587}," []",{"type":330,"tag":352,"props":589,"children":591},{"style":590},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[592],{"type":335,"value":593},";\n",{"type":330,"tag":352,"props":595,"children":597},{"class":354,"line":596},7,[598],{"type":330,"tag":352,"props":599,"children":601},{"emptyLinePlaceholder":600},true,[602],{"type":335,"value":603},"\n",{"type":330,"tag":352,"props":605,"children":607},{"class":354,"line":606},8,[608],{"type":330,"tag":352,"props":609,"children":610},{"style":463},[611],{"type":335,"value":612},"  /**\n",{"type":330,"tag":352,"props":614,"children":616},{"class":354,"line":615},9,[617,622,626,631],{"type":330,"tag":352,"props":618,"children":619},{"style":463},[620],{"type":335,"value":621},"   * ",{"type":330,"tag":352,"props":623,"children":624},{"style":477},[625],{"type":335,"value":480},{"type":330,"tag":352,"props":627,"children":628},{"style":489},[629],{"type":335,"value":630}," l",{"type":330,"tag":352,"props":632,"children":633},{"style":463},[634],{"type":335,"value":635}," 左侧括号已经用了几个\n",{"type":330,"tag":352,"props":637,"children":639},{"class":354,"line":638},10,[640,644,648,653],{"type":330,"tag":352,"props":641,"children":642},{"style":463},[643],{"type":335,"value":621},{"type":330,"tag":352,"props":645,"children":646},{"style":477},[647],{"type":335,"value":480},{"type":330,"tag":352,"props":649,"children":650},{"style":489},[651],{"type":335,"value":652}," r",{"type":330,"tag":352,"props":654,"children":655},{"style":463},[656],{"type":335,"value":657}," 右侧括号已经用了几个\n",{"type":330,"tag":352,"props":659,"children":661},{"class":354,"line":660},11,[662,666,670,675],{"type":330,"tag":352,"props":663,"children":664},{"style":463},[665],{"type":335,"value":621},{"type":330,"tag":352,"props":667,"children":668},{"style":477},[669],{"type":335,"value":480},{"type":330,"tag":352,"props":671,"children":672},{"style":489},[673],{"type":335,"value":674}," str",{"type":330,"tag":352,"props":676,"children":677},{"style":463},[678],{"type":335,"value":679}," 当前递归得到的拼接字符串结果\n",{"type":330,"tag":352,"props":681,"children":683},{"class":354,"line":682},12,[684],{"type":330,"tag":352,"props":685,"children":686},{"style":463},[687],{"type":335,"value":688},"   */\n",{"type":330,"tag":352,"props":690,"children":692},{"class":354,"line":691},13,[693,698,703,708,713,718,722,726,730],{"type":330,"tag":352,"props":694,"children":695},{"style":526},[696],{"type":335,"value":697},"  function",{"type":330,"tag":352,"props":699,"children":700},{"style":532},[701],{"type":335,"value":702}," dfs",{"type":330,"tag":352,"props":704,"children":705},{"style":549},[706],{"type":335,"value":707},"(",{"type":330,"tag":352,"props":709,"children":710},{"style":555},[711],{"type":335,"value":712},"l",{"type":330,"tag":352,"props":714,"children":715},{"style":590},[716],{"type":335,"value":717},",",{"type":330,"tag":352,"props":719,"children":720},{"style":555},[721],{"type":335,"value":652},{"type":330,"tag":352,"props":723,"children":724},{"style":590},[725],{"type":335,"value":717},{"type":330,"tag":352,"props":727,"children":728},{"style":555},[729],{"type":335,"value":674},{"type":330,"tag":352,"props":731,"children":732},{"style":549},[733],{"type":335,"value":563},{"type":330,"tag":352,"props":735,"children":737},{"class":354,"line":736},14,[738,744,748,752,757,762,767,771,775,779],{"type":330,"tag":352,"props":739,"children":741},{"style":740},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[742],{"type":335,"value":743},"    if",{"type":330,"tag":352,"props":745,"children":746},{"style":549},[747],{"type":335,"value":552},{"type":330,"tag":352,"props":749,"children":750},{"style":575},[751],{"type":335,"value":712},{"type":330,"tag":352,"props":753,"children":754},{"style":538},[755],{"type":335,"value":756}," ===",{"type":330,"tag":352,"props":758,"children":759},{"style":575},[760],{"type":335,"value":761}," n",{"type":330,"tag":352,"props":763,"children":764},{"style":538},[765],{"type":335,"value":766}," &&",{"type":330,"tag":352,"props":768,"children":769},{"style":575},[770],{"type":335,"value":652},{"type":330,"tag":352,"props":772,"children":773},{"style":538},[774],{"type":335,"value":756},{"type":330,"tag":352,"props":776,"children":777},{"style":575},[778],{"type":335,"value":761},{"type":330,"tag":352,"props":780,"children":781},{"style":549},[782],{"type":335,"value":563},{"type":330,"tag":352,"props":784,"children":786},{"class":354,"line":785},15,[787,792,796,802,807,811,816,821],{"type":330,"tag":352,"props":788,"children":789},{"style":740},[790],{"type":335,"value":791},"      return",{"type":330,"tag":352,"props":793,"children":794},{"style":575},[795],{"type":335,"value":578},{"type":330,"tag":352,"props":797,"children":799},{"style":798},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[800],{"type":335,"value":801},".",{"type":330,"tag":352,"props":803,"children":804},{"style":532},[805],{"type":335,"value":806},"push",{"type":330,"tag":352,"props":808,"children":809},{"style":549},[810],{"type":335,"value":707},{"type":330,"tag":352,"props":812,"children":813},{"style":575},[814],{"type":335,"value":815},"str",{"type":330,"tag":352,"props":817,"children":818},{"style":549},[819],{"type":335,"value":820},")",{"type":330,"tag":352,"props":822,"children":823},{"style":590},[824],{"type":335,"value":593},{"type":330,"tag":352,"props":826,"children":828},{"class":354,"line":827},16,[829],{"type":330,"tag":352,"props":830,"children":831},{"style":549},[832],{"type":335,"value":833},"    }\n",{"type":330,"tag":352,"props":835,"children":837},{"class":354,"line":836},17,[838],{"type":330,"tag":352,"props":839,"children":840},{"style":463},[841],{"type":335,"value":842},"    // l \u003C r 时不满足条件，剪枝\n",{"type":330,"tag":352,"props":844,"children":846},{"class":354,"line":845},18,[847,851,855,859,864,868,873,878],{"type":330,"tag":352,"props":848,"children":849},{"style":740},[850],{"type":335,"value":743},{"type":330,"tag":352,"props":852,"children":853},{"style":549},[854],{"type":335,"value":552},{"type":330,"tag":352,"props":856,"children":857},{"style":575},[858],{"type":335,"value":712},{"type":330,"tag":352,"props":860,"children":861},{"style":538},[862],{"type":335,"value":863}," \u003C",{"type":330,"tag":352,"props":865,"children":866},{"style":575},[867],{"type":335,"value":652},{"type":330,"tag":352,"props":869,"children":870},{"style":549},[871],{"type":335,"value":872},") ",{"type":330,"tag":352,"props":874,"children":875},{"style":740},[876],{"type":335,"value":877},"return",{"type":330,"tag":352,"props":879,"children":880},{"style":590},[881],{"type":335,"value":593},{"type":330,"tag":352,"props":883,"children":885},{"class":354,"line":884},19,[886],{"type":330,"tag":352,"props":887,"children":888},{"style":463},[889],{"type":335,"value":890},"    // l \u003C n 时可插入左括号，最多可以插入 n 个\n",{"type":330,"tag":352,"props":892,"children":894},{"class":354,"line":893},20,[895,899,903,907,911,915],{"type":330,"tag":352,"props":896,"children":897},{"style":740},[898],{"type":335,"value":743},{"type":330,"tag":352,"props":900,"children":901},{"style":549},[902],{"type":335,"value":552},{"type":330,"tag":352,"props":904,"children":905},{"style":575},[906],{"type":335,"value":712},{"type":330,"tag":352,"props":908,"children":909},{"style":538},[910],{"type":335,"value":863},{"type":330,"tag":352,"props":912,"children":913},{"style":575},[914],{"type":335,"value":761},{"type":330,"tag":352,"props":916,"children":917},{"style":549},[918],{"type":335,"value":563},{"type":330,"tag":352,"props":920,"children":922},{"class":354,"line":921},21,[923,928,932,936,941,947,951,955,959,963,967,973,977],{"type":330,"tag":352,"props":924,"children":925},{"style":532},[926],{"type":335,"value":927},"      dfs",{"type":330,"tag":352,"props":929,"children":930},{"style":549},[931],{"type":335,"value":707},{"type":330,"tag":352,"props":933,"children":934},{"style":575},[935],{"type":335,"value":712},{"type":330,"tag":352,"props":937,"children":938},{"style":538},[939],{"type":335,"value":940}," +",{"type":330,"tag":352,"props":942,"children":944},{"style":943},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[945],{"type":335,"value":946}," 1",{"type":330,"tag":352,"props":948,"children":949},{"style":590},[950],{"type":335,"value":717},{"type":330,"tag":352,"props":952,"children":953},{"style":575},[954],{"type":335,"value":652},{"type":330,"tag":352,"props":956,"children":957},{"style":590},[958],{"type":335,"value":717},{"type":330,"tag":352,"props":960,"children":961},{"style":575},[962],{"type":335,"value":674},{"type":330,"tag":352,"props":964,"children":965},{"style":538},[966],{"type":335,"value":940},{"type":330,"tag":352,"props":968,"children":970},{"style":969},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[971],{"type":335,"value":972}," \"(\"",{"type":330,"tag":352,"props":974,"children":975},{"style":549},[976],{"type":335,"value":820},{"type":330,"tag":352,"props":978,"children":979},{"style":590},[980],{"type":335,"value":593},{"type":330,"tag":352,"props":982,"children":984},{"class":354,"line":983},22,[985],{"type":330,"tag":352,"props":986,"children":987},{"style":549},[988],{"type":335,"value":833},{"type":330,"tag":352,"props":990,"children":992},{"class":354,"line":991},23,[993],{"type":330,"tag":352,"props":994,"children":995},{"style":463},[996],{"type":335,"value":997},"    // r \u003C l 时，可以插入右括号\n",{"type":330,"tag":352,"props":999,"children":1001},{"class":354,"line":1000},24,[1002,1006,1010,1015,1019,1023],{"type":330,"tag":352,"props":1003,"children":1004},{"style":740},[1005],{"type":335,"value":743},{"type":330,"tag":352,"props":1007,"children":1008},{"style":549},[1009],{"type":335,"value":552},{"type":330,"tag":352,"props":1011,"children":1012},{"style":575},[1013],{"type":335,"value":1014},"r",{"type":330,"tag":352,"props":1016,"children":1017},{"style":538},[1018],{"type":335,"value":863},{"type":330,"tag":352,"props":1020,"children":1021},{"style":575},[1022],{"type":335,"value":630},{"type":330,"tag":352,"props":1024,"children":1025},{"style":549},[1026],{"type":335,"value":563},{"type":330,"tag":352,"props":1028,"children":1030},{"class":354,"line":1029},25,[1031,1035,1039,1043,1047,1051,1055,1059,1063,1067,1071,1076,1080],{"type":330,"tag":352,"props":1032,"children":1033},{"style":532},[1034],{"type":335,"value":927},{"type":330,"tag":352,"props":1036,"children":1037},{"style":549},[1038],{"type":335,"value":707},{"type":330,"tag":352,"props":1040,"children":1041},{"style":575},[1042],{"type":335,"value":712},{"type":330,"tag":352,"props":1044,"children":1045},{"style":590},[1046],{"type":335,"value":717},{"type":330,"tag":352,"props":1048,"children":1049},{"style":575},[1050],{"type":335,"value":652},{"type":330,"tag":352,"props":1052,"children":1053},{"style":538},[1054],{"type":335,"value":940},{"type":330,"tag":352,"props":1056,"children":1057},{"style":943},[1058],{"type":335,"value":946},{"type":330,"tag":352,"props":1060,"children":1061},{"style":590},[1062],{"type":335,"value":717},{"type":330,"tag":352,"props":1064,"children":1065},{"style":575},[1066],{"type":335,"value":674},{"type":330,"tag":352,"props":1068,"children":1069},{"style":538},[1070],{"type":335,"value":940},{"type":330,"tag":352,"props":1072,"children":1073},{"style":969},[1074],{"type":335,"value":1075}," \")\"",{"type":330,"tag":352,"props":1077,"children":1078},{"style":549},[1079],{"type":335,"value":820},{"type":330,"tag":352,"props":1081,"children":1082},{"style":590},[1083],{"type":335,"value":593},{"type":330,"tag":352,"props":1085,"children":1087},{"class":354,"line":1086},26,[1088],{"type":330,"tag":352,"props":1089,"children":1090},{"style":549},[1091],{"type":335,"value":833},{"type":330,"tag":352,"props":1093,"children":1095},{"class":354,"line":1094},27,[1096],{"type":330,"tag":352,"props":1097,"children":1098},{"style":549},[1099],{"type":335,"value":1100},"  }\n",{"type":330,"tag":352,"props":1102,"children":1104},{"class":354,"line":1103},28,[1105],{"type":330,"tag":352,"props":1106,"children":1107},{"emptyLinePlaceholder":600},[1108],{"type":335,"value":603},{"type":330,"tag":352,"props":1110,"children":1112},{"class":354,"line":1111},29,[1113,1118,1122,1127,1131,1136,1140,1145,1149],{"type":330,"tag":352,"props":1114,"children":1115},{"style":532},[1116],{"type":335,"value":1117},"  dfs",{"type":330,"tag":352,"props":1119,"children":1120},{"style":549},[1121],{"type":335,"value":707},{"type":330,"tag":352,"props":1123,"children":1124},{"style":943},[1125],{"type":335,"value":1126},"0",{"type":330,"tag":352,"props":1128,"children":1129},{"style":590},[1130],{"type":335,"value":717},{"type":330,"tag":352,"props":1132,"children":1133},{"style":943},[1134],{"type":335,"value":1135}," 0",{"type":330,"tag":352,"props":1137,"children":1138},{"style":590},[1139],{"type":335,"value":717},{"type":330,"tag":352,"props":1141,"children":1142},{"style":969},[1143],{"type":335,"value":1144}," \"\"",{"type":330,"tag":352,"props":1146,"children":1147},{"style":549},[1148],{"type":335,"value":820},{"type":330,"tag":352,"props":1150,"children":1151},{"style":590},[1152],{"type":335,"value":593},{"type":330,"tag":352,"props":1154,"children":1156},{"class":354,"line":1155},30,[1157],{"type":330,"tag":352,"props":1158,"children":1159},{"emptyLinePlaceholder":600},[1160],{"type":335,"value":603},{"type":330,"tag":352,"props":1162,"children":1164},{"class":354,"line":1163},31,[1165,1170,1174],{"type":330,"tag":352,"props":1166,"children":1167},{"style":740},[1168],{"type":335,"value":1169},"  return",{"type":330,"tag":352,"props":1171,"children":1172},{"style":575},[1173],{"type":335,"value":578},{"type":330,"tag":352,"props":1175,"children":1176},{"style":590},[1177],{"type":335,"value":593},{"type":330,"tag":352,"props":1179,"children":1181},{"class":354,"line":1180},32,[1182,1187],{"type":330,"tag":352,"props":1183,"children":1184},{"style":549},[1185],{"type":335,"value":1186},"}",{"type":330,"tag":352,"props":1188,"children":1189},{"style":590},[1190],{"type":335,"value":593},{"type":330,"tag":1192,"props":1193,"children":1194},"style",{},[1195],{"type":335,"value":1196},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":323,"searchDepth":522,"depth":522,"links":1198},[1199,1200],{"id":417,"depth":364,"text":417},{"id":440,"depth":364,"text":440,"children":1201},[1202],{"id":446,"depth":495,"text":446},"markdown","content:2.code:1.algorithm:2.leetcode:22.generate-parentheses.md","content","2.code/1.algorithm/2.leetcode/22.generate-parentheses.md","md",[1209,1211],{"_path":89,"title":88,"description":1210},"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",{"_path":95,"title":94,"description":1212},"给你一个链表数组，每个链表都已经按升序排列。",1712112507898]