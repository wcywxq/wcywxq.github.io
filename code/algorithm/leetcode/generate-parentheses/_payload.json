[{"data":1,"prerenderedAt":1215},["Reactive",2],{"navigation":3,"/code/algorithm/leetcode/generate-parentheses":322,"/code/algorithm/leetcode/generate-parentheses-surround":1210},[4,32],{"title":5,"_path":6,"children":7},"八股文","/endorsement",[8,19],{"title":9,"_path":10,"children":11},"构建工具","/endorsement/build-tools",[12],{"title":13,"_path":14,"children":15},"Webpack","/endorsement/build-tools/webpack",[16],{"title":17,"_path":18},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":20,"_path":21,"children":22},"Html","/endorsement/html",[23,26,29],{"title":24,"_path":25},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":27,"_path":28},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":30,"_path":31},"离线存储","/endorsement/html/offline-storage",{"title":33,"_path":34,"children":35},"代码","/code",[36,266,315],{"title":37,"_path":38,"children":39},"算法","/code/algorithm",[40,42,55],{"title":41,"_path":38},"刷题索引",{"title":43,"_path":44,"children":45},"剑指 offer","/code/algorithm/sword-ofter",[46,49,52],{"title":47,"_path":48},"LCR.140 训练计划 II","/code/algorithm/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":50,"_path":51},"LCR 169. 招式拆解 II","/code/algorithm/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":53,"_path":54},"LCR 187. 破冰游戏","/code/algorithm/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":56,"_path":57,"children":58},"力扣 leetCode","/code/algorithm/leetcode",[59,62,65,68,71,74,77,80,83,86,89,92,95,98,101,104,107,110,113,116,119,122,125,128,131,134,137,140,143,146,149,152,155,158,161,164,167,170,173,176,179,182,185,188,191,194,197,200,203,206,209,212,215,218,221,224,227,230,233,236,239,242,245,248,251,254,257,260,263],{"title":60,"_path":61},"No.1 两数相加","/code/algorithm/leetcode/two-sum",{"title":63,"_path":64},"No.2 两数相加","/code/algorithm/leetcode/add-two-numbers",{"title":66,"_path":67},"No.3 无重复字符的最长子串","/code/algorithm/leetcode/longest-substring-without-repeating-characters",{"title":69,"_path":70},"No.4 寻找两个正序数组的中位数","/code/algorithm/leetcode/median-of-two-sorted-arrays",{"title":72,"_path":73},"No.5 最长回文子串","/code/algorithm/leetcode/longest-palindromic-substring",{"title":75,"_path":76},"No.7 整数反转","/code/algorithm/leetcode/reverse-integer",{"title":78,"_path":79},"No.9 回文数","/code/algorithm/leetcode/palindrome-number",{"title":81,"_path":82},"No.14 最长公共前缀","/code/algorithm/leetcode/longest-common-prefix",{"title":84,"_path":85},"No.15 三数之和","/code/algorithm/leetcode/3sum",{"title":87,"_path":88},"No.20 有效的括号","/code/algorithm/leetcode/valid-parentheses",{"title":90,"_path":91},"No.21 合并两个有序链表","/code/algorithm/leetcode/merge-two-sorted-lists",{"title":93,"_path":94},"No.22 括号生成","/code/algorithm/leetcode/generate-parentheses",{"title":96,"_path":97},"No.23 合并 K 个升序链表","/code/algorithm/leetcode/merge-k-sorted-lists",{"title":99,"_path":100},"No.24 两两交换链表中的节点","/code/algorithm/leetcode/swap-nodes-in-pairs",{"title":102,"_path":103},"No.25 K 个一组翻转链表","/code/algorithm/leetcode/reverse-nodes-in-k-group",{"title":105,"_path":106},"No.31 下一个排列","/code/algorithm/leetcode/next-permutation",{"title":108,"_path":109},"No.32 最长有效括号","/code/algorithm/leetcode/longest-valid-parentheses",{"title":111,"_path":112},"No.33 搜索旋转排序数组","/code/algorithm/leetcode/search-in-rotated-sorted-array",{"title":114,"_path":115},"No.34 在排序数组中查找元素的第一个和最后一个位置","/code/algorithm/leetcode/find-first-and-last-position-of-element-in-sorted-array",{"title":117,"_path":118},"No.39 组合求和","/code/algorithm/leetcode/combination-sum",{"title":120,"_path":121},"No.42 接雨水","/code/algorithm/leetcode/trapping-rain-water",{"title":123,"_path":124},"No.46 全排列","/code/algorithm/leetcode/permutations",{"title":126,"_path":127},"No.53 最大子序和","/code/algorithm/leetcode/maximum-subarray",{"title":129,"_path":130},"No.56 合并区间","/code/algorithm/leetcode/merge-intervals",{"title":132,"_path":133},"No.67 二进制求和","/code/algorithm/leetcode/add-binary",{"title":135,"_path":136},"No.69 x 的平方根","/code/algorithm/leetcode/sqrtx",{"title":138,"_path":139},"No.70 爬楼梯","/code/algorithm/leetcode/climbing-stairs",{"title":141,"_path":142},"No.88 合并两个有序数组","/code/algorithm/leetcode/merge-sorted-array",{"title":144,"_path":145},"No.92 反转链表 II","/code/algorithm/leetcode/reverse-linked-list-ii",{"title":147,"_path":148},"No.94 二叉树的中序遍历","/code/algorithm/leetcode/binary-tree-inorder-traversal",{"title":150,"_path":151},"No.101 对称二叉树","/code/algorithm/leetcode/symmetric-tree",{"title":153,"_path":154},"No.102 二叉树的层序遍历","/code/algorithm/leetcode/binary-tree-level-order-traversal",{"title":156,"_path":157},"No.104 二叉树的最大深度","/code/algorithm/leetcode/maximum-depth-of-binary-tree",{"title":159,"_path":160},"No.111 二叉树的最小深度","/code/algorithm/leetcode/minimum-depth-of-binary-tree",{"title":162,"_path":163},"No.112 路径总和","/code/algorithm/leetcode/path-sum",{"title":165,"_path":166},"No.121 买股票的最佳时机","/code/algorithm/leetcode/best-time-to-buy-and-sell-stock",{"title":168,"_path":169},"No.129 求根到叶子节点数字之和","/code/algorithm/leetcode/sum-root-to-leaf-numbers",{"title":171,"_path":172},"No.136 只出现一次的数字","/code/algorithm/leetcode/single-number",{"title":174,"_path":175},"No.141 环型链表","/code/algorithm/leetcode/linked-list-cycle",{"title":177,"_path":178},"No.146 LRU 缓存","/code/algorithm/leetcode/lru-cache",{"title":180,"_path":181},"No.151 反转字符串中的单词","/code/algorithm/leetcode/reverse-words-in-a-string",{"title":183,"_path":184},"No.153 寻找旋转排序数组中的最小值","/code/algorithm/leetcode/find-minimum-in-rotated-sorted-array",{"title":186,"_path":187},"No.155 最小栈","/code/algorithm/leetcode/min-stack",{"title":189,"_path":190},"No.160 相交链表","/code/algorithm/leetcode/intersection-of-two-linked-lists",{"title":192,"_path":193},"No.162 寻找峰值","/code/algorithm/leetcode/find-peak-element",{"title":195,"_path":196},"No.169 多数元素","/code/algorithm/leetcode/majority-element",{"title":198,"_path":199},"No.200 岛屿数量","/code/algorithm/leetcode/number-of-islands",{"title":201,"_path":202},"No.206 反转链表","/code/algorithm/leetcode/reverse-linked-list",{"title":204,"_path":205},"No.209 长度最小的子数组","/code/algorithm/leetcode/minimum-size-subarray-sum",{"title":207,"_path":208},"No.215 数组中的第K个最大元素","/code/algorithm/leetcode/kth-largest-element-in-an-array",{"title":210,"_path":211},"No.226 翻转二叉树","/code/algorithm/leetcode/invert-binary-tree",{"title":213,"_path":214},"No.238 除自身以外数组的乘积","/code/algorithm/leetcode/product-of-array-except-self",{"title":216,"_path":217},"No.322 零钱兑换","/code/algorithm/leetcode/coin-change",{"title":219,"_path":220},"No.334 递增的三元子序列","/code/algorithm/leetcode/increasing-triplet-subsequence",{"title":222,"_path":223},"No.344 反转字符串","/code/algorithm/leetcode/reverse-string",{"title":225,"_path":226},"No.345 反转字符串中的元音字母","/code/algorithm/leetcode/reverse-vowels-of-a-string",{"title":228,"_path":229},"No.384 打乱数组","/code/algorithm/leetcode/shuffle-an-array",{"title":231,"_path":232},"No.415 字符串相加","/code/algorithm/leetcode/add-strings",{"title":234,"_path":235},"No.443 压缩字符串","/code/algorithm/leetcode/string-compression",{"title":237,"_path":238},"No.509 斐波那契数","/code/algorithm/leetcode/fibonacci-number",{"title":240,"_path":241},"No.605 种花问题","/code/algorithm/leetcode/can-place-flowers",{"title":243,"_path":244},"No.617 合并二叉树","/code/algorithm/leetcode/merge-two-binary-trees",{"title":246,"_path":247},"No.678 有效的括号字符串","/code/algorithm/leetcode/valid-parenthesis-string",{"title":249,"_path":250},"No.704 二分查找","/code/algorithm/leetcode/binary-search",{"title":252,"_path":253},"No.912 排序数组","/code/algorithm/leetcode/sort-an-array",{"title":255,"_path":256},"No.1071 字符串的最大公因子","/code/algorithm/leetcode/greatest-common-divisor-of-strings",{"title":258,"_path":259},"No.1143 最长公共子序列","/code/algorithm/leetcode/longest-common-subsequence",{"title":261,"_path":262},"No.1431 拥有最多糖果的孩子","/code/algorithm/leetcode/kids-with-the-greatest-number-of-candies",{"title":264,"_path":265},"No.1768 交替合并字符串","/code/algorithm/leetcode/merge-strings-alternately",{"title":267,"_path":268,"children":269},"源码实现","/code/source",[270,295,308],{"title":271,"_path":272,"children":273},"原生 api","/code/source/native-api",[274,277,280,283,286,289,292],{"title":275,"_path":276},"ajax","/code/source/native-api/ajax",{"title":278,"_path":279},"call & apply & bind","/code/source/native-api/call-apply-bind",{"title":281,"_path":282},"new 操作符","/code/source/native-api/new",{"title":284,"_path":285},"instanceof 关键字","/code/source/native-api/instanceof",{"title":287,"_path":288},"定时器","/code/source/native-api/timer",{"title":290,"_path":291},"JSON.stringify","/code/source/native-api/json-stringify",{"title":293,"_path":294},"Iterator 迭代器","/code/source/native-api/iterator",{"title":296,"_path":297,"children":298},"数组 Array","/code/source/array",[299,302,305],{"title":300,"_path":301},"数组去重","/code/source/array/remove-duplicate",{"title":303,"_path":304},"数组扁平化","/code/source/array/flat",{"title":306,"_path":307},"交集、差集、并集、补集","/code/source/array/intersect-minus-union-complement",{"title":309,"_path":310,"children":311},"字符串 String","/code/source/string",[312],{"title":313,"_path":314},"repeat()","/code/source/string/repeat",{"title":316,"_path":317,"children":318},"业务场景","/code/scene",[319],{"title":320,"_path":321},"顺序打印 url 并支持 retry","/code/scene/promise-url-retry",{"_path":94,"_dir":323,"_draft":324,"_partial":324,"_locale":325,"title":93,"description":326,"url":327,"body":328,"_type":1205,"_id":1206,"_source":1207,"_file":1208,"_extension":1209},"leetcode",false,"","数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。","https://leetcode.cn/problems/generate-parentheses",{"type":329,"children":330,"toc":1199},"root",[331,338,343,373,378,401,406,416,422,427,440,445,451,1193],{"type":332,"tag":333,"props":334,"children":335},"element","p",{},[336],{"type":337,"value":326},"text",{"type":332,"tag":333,"props":339,"children":340},{},[341],{"type":337,"value":342},"示例 1：",{"type":332,"tag":344,"props":345,"children":348},"pre",{"className":346,"code":347,"language":337,"meta":325,"style":325},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：n = 3\n输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",[349],{"type":332,"tag":350,"props":351,"children":352},"code",{"__ignoreMap":325},[353,364],{"type":332,"tag":354,"props":355,"children":358},"span",{"class":356,"line":357},"line",1,[359],{"type":332,"tag":354,"props":360,"children":361},{},[362],{"type":337,"value":363},"输入：n = 3\n",{"type":332,"tag":354,"props":365,"children":367},{"class":356,"line":366},2,[368],{"type":332,"tag":354,"props":369,"children":370},{},[371],{"type":337,"value":372},"输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",{"type":332,"tag":333,"props":374,"children":375},{},[376],{"type":337,"value":377},"示例 2：",{"type":332,"tag":344,"props":379,"children":381},{"className":346,"code":380,"language":337,"meta":325,"style":325},"输入：n = 1\n输出：[\"()\"]\n",[382],{"type":332,"tag":350,"props":383,"children":384},{"__ignoreMap":325},[385,393],{"type":332,"tag":354,"props":386,"children":387},{"class":356,"line":357},[388],{"type":332,"tag":354,"props":389,"children":390},{},[391],{"type":337,"value":392},"输入：n = 1\n",{"type":332,"tag":354,"props":394,"children":395},{"class":356,"line":366},[396],{"type":332,"tag":354,"props":397,"children":398},{},[399],{"type":337,"value":400},"输出：[\"()\"]\n",{"type":332,"tag":333,"props":402,"children":403},{},[404],{"type":337,"value":405},"提示：",{"type":332,"tag":407,"props":408,"children":409},"ul",{},[410],{"type":332,"tag":411,"props":412,"children":413},"li",{},[414],{"type":337,"value":415},"1 \u003C= n \u003C= 8",{"type":332,"tag":417,"props":418,"children":420},"h2",{"id":419},"解题思路",[421],{"type":337,"value":419},{"type":332,"tag":333,"props":423,"children":424},{},[425],{"type":337,"value":426},"由于需要求解所有的可能，因此回溯就不难想到，回溯的思路和写法相对比较固定，并且回溯的优化手段大多是剪枝。\n不难想到，如果左括号的数据小于右括号，我们可以提前退出，这就是这道题的剪枝。例如：())...，后面就不用看了，直接退出即可。回溯的退出条件也不难想到：",{"type":332,"tag":407,"props":428,"children":429},{},[430,435],{"type":332,"tag":411,"props":431,"children":432},{},[433],{"type":337,"value":434},"左括号数目 = 右括号数目",{"type":332,"tag":411,"props":436,"children":437},{},[438],{"type":337,"value":439},"左括号数据 + 右括号数据 = 2 * n\n因此这道题可以使用深度优先搜索（回溯思想），从空字符串开始构造，做加法，即 dfs(左括号数目，右括号数据，路径)，我们从 dfs(0, 0, \"\") 开始",{"type":332,"tag":417,"props":441,"children":443},{"id":442},"实现",[444],{"type":337,"value":442},{"type":332,"tag":446,"props":447,"children":449},"h3",{"id":448},"回溯",[450],{"type":337,"value":448},{"type":332,"tag":344,"props":452,"children":456},{"className":453,"code":454,"language":455,"meta":325,"style":325},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const res = [];\n\n  /**\n   * @param l 左侧括号已经用了几个\n   * @param r 右侧括号已经用了几个\n   * @param str 当前递归得到的拼接字符串结果\n   */\n  function dfs(l, r, str) {\n    if (l === n && r === n) {\n      return res.push(str);\n    }\n    // l \u003C r 时不满足条件，剪枝\n    if (l \u003C r) return;\n    // l \u003C n 时可插入左括号，最多可以插入 n 个\n    if (l \u003C n) {\n      dfs(l + 1, r, str + \"(\");\n    }\n    // r \u003C l 时，可以插入右括号\n    if (r \u003C l) {\n      dfs(l, r + 1, str + \")\");\n    }\n  }\n\n  dfs(0, 0, \"\");\n\n  return res;\n};\n","js",[457],{"type":332,"tag":350,"props":458,"children":459},{"__ignoreMap":325},[460,469,495,513,522,566,596,606,615,638,660,682,691,736,785,827,836,845,884,893,921,983,991,1000,1029,1086,1094,1103,1111,1155,1163,1180],{"type":332,"tag":354,"props":461,"children":462},{"class":356,"line":357},[463],{"type":332,"tag":354,"props":464,"children":466},{"style":465},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[467],{"type":337,"value":468},"/**\n",{"type":332,"tag":354,"props":470,"children":471},{"class":356,"line":366},[472,477,483,489],{"type":332,"tag":354,"props":473,"children":474},{"style":465},[475],{"type":337,"value":476}," * ",{"type":332,"tag":354,"props":478,"children":480},{"style":479},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[481],{"type":337,"value":482},"@param",{"type":332,"tag":354,"props":484,"children":486},{"style":485},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[487],{"type":337,"value":488}," {number}",{"type":332,"tag":354,"props":490,"children":492},{"style":491},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[493],{"type":337,"value":494}," n\n",{"type":332,"tag":354,"props":496,"children":498},{"class":356,"line":497},3,[499,503,508],{"type":332,"tag":354,"props":500,"children":501},{"style":465},[502],{"type":337,"value":476},{"type":332,"tag":354,"props":504,"children":505},{"style":479},[506],{"type":337,"value":507},"@return",{"type":332,"tag":354,"props":509,"children":510},{"style":485},[511],{"type":337,"value":512}," {string[]}\n",{"type":332,"tag":354,"props":514,"children":516},{"class":356,"line":515},4,[517],{"type":332,"tag":354,"props":518,"children":519},{"style":465},[520],{"type":337,"value":521}," */\n",{"type":332,"tag":354,"props":523,"children":525},{"class":356,"line":524},5,[526,532,538,544,549,555,561],{"type":332,"tag":354,"props":527,"children":529},{"style":528},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[530],{"type":337,"value":531},"var",{"type":332,"tag":354,"props":533,"children":535},{"style":534},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[536],{"type":337,"value":537}," generateParenthesis",{"type":332,"tag":354,"props":539,"children":541},{"style":540},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[542],{"type":337,"value":543}," =",{"type":332,"tag":354,"props":545,"children":546},{"style":528},[547],{"type":337,"value":548}," function",{"type":332,"tag":354,"props":550,"children":552},{"style":551},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[553],{"type":337,"value":554}," (",{"type":332,"tag":354,"props":556,"children":558},{"style":557},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[559],{"type":337,"value":560},"n",{"type":332,"tag":354,"props":562,"children":563},{"style":551},[564],{"type":337,"value":565},") {\n",{"type":332,"tag":354,"props":567,"children":569},{"class":356,"line":568},6,[570,575,581,585,590],{"type":332,"tag":354,"props":571,"children":572},{"style":528},[573],{"type":337,"value":574},"  const",{"type":332,"tag":354,"props":576,"children":578},{"style":577},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[579],{"type":337,"value":580}," res",{"type":332,"tag":354,"props":582,"children":583},{"style":540},[584],{"type":337,"value":543},{"type":332,"tag":354,"props":586,"children":587},{"style":551},[588],{"type":337,"value":589}," []",{"type":332,"tag":354,"props":591,"children":593},{"style":592},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[594],{"type":337,"value":595},";\n",{"type":332,"tag":354,"props":597,"children":599},{"class":356,"line":598},7,[600],{"type":332,"tag":354,"props":601,"children":603},{"emptyLinePlaceholder":602},true,[604],{"type":337,"value":605},"\n",{"type":332,"tag":354,"props":607,"children":609},{"class":356,"line":608},8,[610],{"type":332,"tag":354,"props":611,"children":612},{"style":465},[613],{"type":337,"value":614},"  /**\n",{"type":332,"tag":354,"props":616,"children":618},{"class":356,"line":617},9,[619,624,628,633],{"type":332,"tag":354,"props":620,"children":621},{"style":465},[622],{"type":337,"value":623},"   * ",{"type":332,"tag":354,"props":625,"children":626},{"style":479},[627],{"type":337,"value":482},{"type":332,"tag":354,"props":629,"children":630},{"style":491},[631],{"type":337,"value":632}," l",{"type":332,"tag":354,"props":634,"children":635},{"style":465},[636],{"type":337,"value":637}," 左侧括号已经用了几个\n",{"type":332,"tag":354,"props":639,"children":641},{"class":356,"line":640},10,[642,646,650,655],{"type":332,"tag":354,"props":643,"children":644},{"style":465},[645],{"type":337,"value":623},{"type":332,"tag":354,"props":647,"children":648},{"style":479},[649],{"type":337,"value":482},{"type":332,"tag":354,"props":651,"children":652},{"style":491},[653],{"type":337,"value":654}," r",{"type":332,"tag":354,"props":656,"children":657},{"style":465},[658],{"type":337,"value":659}," 右侧括号已经用了几个\n",{"type":332,"tag":354,"props":661,"children":663},{"class":356,"line":662},11,[664,668,672,677],{"type":332,"tag":354,"props":665,"children":666},{"style":465},[667],{"type":337,"value":623},{"type":332,"tag":354,"props":669,"children":670},{"style":479},[671],{"type":337,"value":482},{"type":332,"tag":354,"props":673,"children":674},{"style":491},[675],{"type":337,"value":676}," str",{"type":332,"tag":354,"props":678,"children":679},{"style":465},[680],{"type":337,"value":681}," 当前递归得到的拼接字符串结果\n",{"type":332,"tag":354,"props":683,"children":685},{"class":356,"line":684},12,[686],{"type":332,"tag":354,"props":687,"children":688},{"style":465},[689],{"type":337,"value":690},"   */\n",{"type":332,"tag":354,"props":692,"children":694},{"class":356,"line":693},13,[695,700,705,710,715,720,724,728,732],{"type":332,"tag":354,"props":696,"children":697},{"style":528},[698],{"type":337,"value":699},"  function",{"type":332,"tag":354,"props":701,"children":702},{"style":534},[703],{"type":337,"value":704}," dfs",{"type":332,"tag":354,"props":706,"children":707},{"style":551},[708],{"type":337,"value":709},"(",{"type":332,"tag":354,"props":711,"children":712},{"style":557},[713],{"type":337,"value":714},"l",{"type":332,"tag":354,"props":716,"children":717},{"style":592},[718],{"type":337,"value":719},",",{"type":332,"tag":354,"props":721,"children":722},{"style":557},[723],{"type":337,"value":654},{"type":332,"tag":354,"props":725,"children":726},{"style":592},[727],{"type":337,"value":719},{"type":332,"tag":354,"props":729,"children":730},{"style":557},[731],{"type":337,"value":676},{"type":332,"tag":354,"props":733,"children":734},{"style":551},[735],{"type":337,"value":565},{"type":332,"tag":354,"props":737,"children":739},{"class":356,"line":738},14,[740,746,750,754,759,764,769,773,777,781],{"type":332,"tag":354,"props":741,"children":743},{"style":742},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[744],{"type":337,"value":745},"    if",{"type":332,"tag":354,"props":747,"children":748},{"style":551},[749],{"type":337,"value":554},{"type":332,"tag":354,"props":751,"children":752},{"style":577},[753],{"type":337,"value":714},{"type":332,"tag":354,"props":755,"children":756},{"style":540},[757],{"type":337,"value":758}," ===",{"type":332,"tag":354,"props":760,"children":761},{"style":577},[762],{"type":337,"value":763}," n",{"type":332,"tag":354,"props":765,"children":766},{"style":540},[767],{"type":337,"value":768}," &&",{"type":332,"tag":354,"props":770,"children":771},{"style":577},[772],{"type":337,"value":654},{"type":332,"tag":354,"props":774,"children":775},{"style":540},[776],{"type":337,"value":758},{"type":332,"tag":354,"props":778,"children":779},{"style":577},[780],{"type":337,"value":763},{"type":332,"tag":354,"props":782,"children":783},{"style":551},[784],{"type":337,"value":565},{"type":332,"tag":354,"props":786,"children":788},{"class":356,"line":787},15,[789,794,798,804,809,813,818,823],{"type":332,"tag":354,"props":790,"children":791},{"style":742},[792],{"type":337,"value":793},"      return",{"type":332,"tag":354,"props":795,"children":796},{"style":577},[797],{"type":337,"value":580},{"type":332,"tag":354,"props":799,"children":801},{"style":800},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[802],{"type":337,"value":803},".",{"type":332,"tag":354,"props":805,"children":806},{"style":534},[807],{"type":337,"value":808},"push",{"type":332,"tag":354,"props":810,"children":811},{"style":551},[812],{"type":337,"value":709},{"type":332,"tag":354,"props":814,"children":815},{"style":577},[816],{"type":337,"value":817},"str",{"type":332,"tag":354,"props":819,"children":820},{"style":551},[821],{"type":337,"value":822},")",{"type":332,"tag":354,"props":824,"children":825},{"style":592},[826],{"type":337,"value":595},{"type":332,"tag":354,"props":828,"children":830},{"class":356,"line":829},16,[831],{"type":332,"tag":354,"props":832,"children":833},{"style":551},[834],{"type":337,"value":835},"    }\n",{"type":332,"tag":354,"props":837,"children":839},{"class":356,"line":838},17,[840],{"type":332,"tag":354,"props":841,"children":842},{"style":465},[843],{"type":337,"value":844},"    // l \u003C r 时不满足条件，剪枝\n",{"type":332,"tag":354,"props":846,"children":848},{"class":356,"line":847},18,[849,853,857,861,866,870,875,880],{"type":332,"tag":354,"props":850,"children":851},{"style":742},[852],{"type":337,"value":745},{"type":332,"tag":354,"props":854,"children":855},{"style":551},[856],{"type":337,"value":554},{"type":332,"tag":354,"props":858,"children":859},{"style":577},[860],{"type":337,"value":714},{"type":332,"tag":354,"props":862,"children":863},{"style":540},[864],{"type":337,"value":865}," \u003C",{"type":332,"tag":354,"props":867,"children":868},{"style":577},[869],{"type":337,"value":654},{"type":332,"tag":354,"props":871,"children":872},{"style":551},[873],{"type":337,"value":874},") ",{"type":332,"tag":354,"props":876,"children":877},{"style":742},[878],{"type":337,"value":879},"return",{"type":332,"tag":354,"props":881,"children":882},{"style":592},[883],{"type":337,"value":595},{"type":332,"tag":354,"props":885,"children":887},{"class":356,"line":886},19,[888],{"type":332,"tag":354,"props":889,"children":890},{"style":465},[891],{"type":337,"value":892},"    // l \u003C n 时可插入左括号，最多可以插入 n 个\n",{"type":332,"tag":354,"props":894,"children":896},{"class":356,"line":895},20,[897,901,905,909,913,917],{"type":332,"tag":354,"props":898,"children":899},{"style":742},[900],{"type":337,"value":745},{"type":332,"tag":354,"props":902,"children":903},{"style":551},[904],{"type":337,"value":554},{"type":332,"tag":354,"props":906,"children":907},{"style":577},[908],{"type":337,"value":714},{"type":332,"tag":354,"props":910,"children":911},{"style":540},[912],{"type":337,"value":865},{"type":332,"tag":354,"props":914,"children":915},{"style":577},[916],{"type":337,"value":763},{"type":332,"tag":354,"props":918,"children":919},{"style":551},[920],{"type":337,"value":565},{"type":332,"tag":354,"props":922,"children":924},{"class":356,"line":923},21,[925,930,934,938,943,949,953,957,961,965,969,975,979],{"type":332,"tag":354,"props":926,"children":927},{"style":534},[928],{"type":337,"value":929},"      dfs",{"type":332,"tag":354,"props":931,"children":932},{"style":551},[933],{"type":337,"value":709},{"type":332,"tag":354,"props":935,"children":936},{"style":577},[937],{"type":337,"value":714},{"type":332,"tag":354,"props":939,"children":940},{"style":540},[941],{"type":337,"value":942}," +",{"type":332,"tag":354,"props":944,"children":946},{"style":945},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[947],{"type":337,"value":948}," 1",{"type":332,"tag":354,"props":950,"children":951},{"style":592},[952],{"type":337,"value":719},{"type":332,"tag":354,"props":954,"children":955},{"style":577},[956],{"type":337,"value":654},{"type":332,"tag":354,"props":958,"children":959},{"style":592},[960],{"type":337,"value":719},{"type":332,"tag":354,"props":962,"children":963},{"style":577},[964],{"type":337,"value":676},{"type":332,"tag":354,"props":966,"children":967},{"style":540},[968],{"type":337,"value":942},{"type":332,"tag":354,"props":970,"children":972},{"style":971},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[973],{"type":337,"value":974}," \"(\"",{"type":332,"tag":354,"props":976,"children":977},{"style":551},[978],{"type":337,"value":822},{"type":332,"tag":354,"props":980,"children":981},{"style":592},[982],{"type":337,"value":595},{"type":332,"tag":354,"props":984,"children":986},{"class":356,"line":985},22,[987],{"type":332,"tag":354,"props":988,"children":989},{"style":551},[990],{"type":337,"value":835},{"type":332,"tag":354,"props":992,"children":994},{"class":356,"line":993},23,[995],{"type":332,"tag":354,"props":996,"children":997},{"style":465},[998],{"type":337,"value":999},"    // r \u003C l 时，可以插入右括号\n",{"type":332,"tag":354,"props":1001,"children":1003},{"class":356,"line":1002},24,[1004,1008,1012,1017,1021,1025],{"type":332,"tag":354,"props":1005,"children":1006},{"style":742},[1007],{"type":337,"value":745},{"type":332,"tag":354,"props":1009,"children":1010},{"style":551},[1011],{"type":337,"value":554},{"type":332,"tag":354,"props":1013,"children":1014},{"style":577},[1015],{"type":337,"value":1016},"r",{"type":332,"tag":354,"props":1018,"children":1019},{"style":540},[1020],{"type":337,"value":865},{"type":332,"tag":354,"props":1022,"children":1023},{"style":577},[1024],{"type":337,"value":632},{"type":332,"tag":354,"props":1026,"children":1027},{"style":551},[1028],{"type":337,"value":565},{"type":332,"tag":354,"props":1030,"children":1032},{"class":356,"line":1031},25,[1033,1037,1041,1045,1049,1053,1057,1061,1065,1069,1073,1078,1082],{"type":332,"tag":354,"props":1034,"children":1035},{"style":534},[1036],{"type":337,"value":929},{"type":332,"tag":354,"props":1038,"children":1039},{"style":551},[1040],{"type":337,"value":709},{"type":332,"tag":354,"props":1042,"children":1043},{"style":577},[1044],{"type":337,"value":714},{"type":332,"tag":354,"props":1046,"children":1047},{"style":592},[1048],{"type":337,"value":719},{"type":332,"tag":354,"props":1050,"children":1051},{"style":577},[1052],{"type":337,"value":654},{"type":332,"tag":354,"props":1054,"children":1055},{"style":540},[1056],{"type":337,"value":942},{"type":332,"tag":354,"props":1058,"children":1059},{"style":945},[1060],{"type":337,"value":948},{"type":332,"tag":354,"props":1062,"children":1063},{"style":592},[1064],{"type":337,"value":719},{"type":332,"tag":354,"props":1066,"children":1067},{"style":577},[1068],{"type":337,"value":676},{"type":332,"tag":354,"props":1070,"children":1071},{"style":540},[1072],{"type":337,"value":942},{"type":332,"tag":354,"props":1074,"children":1075},{"style":971},[1076],{"type":337,"value":1077}," \")\"",{"type":332,"tag":354,"props":1079,"children":1080},{"style":551},[1081],{"type":337,"value":822},{"type":332,"tag":354,"props":1083,"children":1084},{"style":592},[1085],{"type":337,"value":595},{"type":332,"tag":354,"props":1087,"children":1089},{"class":356,"line":1088},26,[1090],{"type":332,"tag":354,"props":1091,"children":1092},{"style":551},[1093],{"type":337,"value":835},{"type":332,"tag":354,"props":1095,"children":1097},{"class":356,"line":1096},27,[1098],{"type":332,"tag":354,"props":1099,"children":1100},{"style":551},[1101],{"type":337,"value":1102},"  }\n",{"type":332,"tag":354,"props":1104,"children":1106},{"class":356,"line":1105},28,[1107],{"type":332,"tag":354,"props":1108,"children":1109},{"emptyLinePlaceholder":602},[1110],{"type":337,"value":605},{"type":332,"tag":354,"props":1112,"children":1114},{"class":356,"line":1113},29,[1115,1120,1124,1129,1133,1138,1142,1147,1151],{"type":332,"tag":354,"props":1116,"children":1117},{"style":534},[1118],{"type":337,"value":1119},"  dfs",{"type":332,"tag":354,"props":1121,"children":1122},{"style":551},[1123],{"type":337,"value":709},{"type":332,"tag":354,"props":1125,"children":1126},{"style":945},[1127],{"type":337,"value":1128},"0",{"type":332,"tag":354,"props":1130,"children":1131},{"style":592},[1132],{"type":337,"value":719},{"type":332,"tag":354,"props":1134,"children":1135},{"style":945},[1136],{"type":337,"value":1137}," 0",{"type":332,"tag":354,"props":1139,"children":1140},{"style":592},[1141],{"type":337,"value":719},{"type":332,"tag":354,"props":1143,"children":1144},{"style":971},[1145],{"type":337,"value":1146}," \"\"",{"type":332,"tag":354,"props":1148,"children":1149},{"style":551},[1150],{"type":337,"value":822},{"type":332,"tag":354,"props":1152,"children":1153},{"style":592},[1154],{"type":337,"value":595},{"type":332,"tag":354,"props":1156,"children":1158},{"class":356,"line":1157},30,[1159],{"type":332,"tag":354,"props":1160,"children":1161},{"emptyLinePlaceholder":602},[1162],{"type":337,"value":605},{"type":332,"tag":354,"props":1164,"children":1166},{"class":356,"line":1165},31,[1167,1172,1176],{"type":332,"tag":354,"props":1168,"children":1169},{"style":742},[1170],{"type":337,"value":1171},"  return",{"type":332,"tag":354,"props":1173,"children":1174},{"style":577},[1175],{"type":337,"value":580},{"type":332,"tag":354,"props":1177,"children":1178},{"style":592},[1179],{"type":337,"value":595},{"type":332,"tag":354,"props":1181,"children":1183},{"class":356,"line":1182},32,[1184,1189],{"type":332,"tag":354,"props":1185,"children":1186},{"style":551},[1187],{"type":337,"value":1188},"}",{"type":332,"tag":354,"props":1190,"children":1191},{"style":592},[1192],{"type":337,"value":595},{"type":332,"tag":1194,"props":1195,"children":1196},"style",{},[1197],{"type":337,"value":1198},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":325,"searchDepth":524,"depth":524,"links":1200},[1201,1202],{"id":419,"depth":366,"text":419},{"id":442,"depth":366,"text":442,"children":1203},[1204],{"id":448,"depth":497,"text":448},"markdown","content:2.code:1.algorithm:3.leetcode:22.generate-parentheses.md","content","2.code/1.algorithm/3.leetcode/22.generate-parentheses.md","md",[1211,1213],{"_path":91,"title":90,"description":1212},"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",{"_path":97,"title":96,"description":1214},"给你一个链表数组，每个链表都已经按升序排列。",1712115781557]