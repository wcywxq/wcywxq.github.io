[{"data":1,"prerenderedAt":1399},["Reactive",2],{"navigation":3,"/code/algorithm/leetcode/reverse-words-in-a-string":359,"/code/algorithm/leetcode/reverse-words-in-a-string-surround":1394},[4,32],{"title":5,"_path":6,"children":7},"八股文","/endorsement",[8,19],{"title":9,"_path":10,"children":11},"构建工具","/endorsement/build-tools",[12],{"title":13,"_path":14,"children":15},"Webpack","/endorsement/build-tools/webpack",[16],{"title":17,"_path":18},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":20,"_path":21,"children":22},"Html","/endorsement/html",[23,26,29],{"title":24,"_path":25},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":27,"_path":28},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":30,"_path":31},"离线存储","/endorsement/html/offline-storage",{"title":33,"_path":34,"children":35},"代码","/code",[36,269,318],{"title":37,"_path":38,"children":39},"算法","/code/algorithm",[40,42,55],{"title":41,"_path":38},"刷题索引",{"title":43,"_path":44,"children":45},"剑指 offer","/code/algorithm/sword-ofter",[46,49,52],{"title":47,"_path":48},"LCR.140 训练计划 II","/code/algorithm/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":50,"_path":51},"LCR 169. 招式拆解 II","/code/algorithm/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":53,"_path":54},"LCR 187. 破冰游戏","/code/algorithm/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":56,"_path":57,"children":58},"力扣 leetCode","/code/algorithm/leetcode",[59,62,65,68,71,74,77,80,83,86,89,92,95,98,101,104,107,110,113,116,119,122,125,128,131,134,137,140,143,146,149,152,155,158,161,164,167,170,173,176,179,182,185,188,191,194,197,200,203,206,209,212,215,218,221,224,227,230,233,236,239,242,245,248,251,254,257,260,263,266],{"title":60,"_path":61},"No.1 两数相加","/code/algorithm/leetcode/two-sum",{"title":63,"_path":64},"No.2 两数相加","/code/algorithm/leetcode/add-two-numbers",{"title":66,"_path":67},"No.3 无重复字符的最长子串","/code/algorithm/leetcode/longest-substring-without-repeating-characters",{"title":69,"_path":70},"No.4 寻找两个正序数组的中位数","/code/algorithm/leetcode/median-of-two-sorted-arrays",{"title":72,"_path":73},"No.5 最长回文子串","/code/algorithm/leetcode/longest-palindromic-substring",{"title":75,"_path":76},"No.7 整数反转","/code/algorithm/leetcode/reverse-integer",{"title":78,"_path":79},"No.9 回文数","/code/algorithm/leetcode/palindrome-number",{"title":81,"_path":82},"No.14 最长公共前缀","/code/algorithm/leetcode/longest-common-prefix",{"title":84,"_path":85},"No.15 三数之和","/code/algorithm/leetcode/3sum",{"title":87,"_path":88},"No.20 有效的括号","/code/algorithm/leetcode/valid-parentheses",{"title":90,"_path":91},"No.21 合并两个有序链表","/code/algorithm/leetcode/merge-two-sorted-lists",{"title":93,"_path":94},"No.22 括号生成","/code/algorithm/leetcode/generate-parentheses",{"title":96,"_path":97},"No.23 合并 K 个升序链表","/code/algorithm/leetcode/merge-k-sorted-lists",{"title":99,"_path":100},"No.24 两两交换链表中的节点","/code/algorithm/leetcode/swap-nodes-in-pairs",{"title":102,"_path":103},"No.25 K 个一组翻转链表","/code/algorithm/leetcode/reverse-nodes-in-k-group",{"title":105,"_path":106},"No.31 下一个排列","/code/algorithm/leetcode/next-permutation",{"title":108,"_path":109},"No.32 最长有效括号","/code/algorithm/leetcode/longest-valid-parentheses",{"title":111,"_path":112},"No.33 搜索旋转排序数组","/code/algorithm/leetcode/search-in-rotated-sorted-array",{"title":114,"_path":115},"No.34 在排序数组中查找元素的第一个和最后一个位置","/code/algorithm/leetcode/find-first-and-last-position-of-element-in-sorted-array",{"title":117,"_path":118},"No.39 组合求和","/code/algorithm/leetcode/combination-sum",{"title":120,"_path":121},"No.42 接雨水","/code/algorithm/leetcode/trapping-rain-water",{"title":123,"_path":124},"No.46 全排列","/code/algorithm/leetcode/permutations",{"title":126,"_path":127},"No.53 最大子序和","/code/algorithm/leetcode/maximum-subarray",{"title":129,"_path":130},"No.56 合并区间","/code/algorithm/leetcode/merge-intervals",{"title":132,"_path":133},"No.67 二进制求和","/code/algorithm/leetcode/add-binary",{"title":135,"_path":136},"No.69 x 的平方根","/code/algorithm/leetcode/sqrtx",{"title":138,"_path":139},"No.70 爬楼梯","/code/algorithm/leetcode/climbing-stairs",{"title":141,"_path":142},"No.88 合并两个有序数组","/code/algorithm/leetcode/merge-sorted-array",{"title":144,"_path":145},"No.92 反转链表 II","/code/algorithm/leetcode/reverse-linked-list-ii",{"title":147,"_path":148},"No.94 二叉树的中序遍历","/code/algorithm/leetcode/binary-tree-inorder-traversal",{"title":150,"_path":151},"No.101 对称二叉树","/code/algorithm/leetcode/symmetric-tree",{"title":153,"_path":154},"No.102 二叉树的层序遍历","/code/algorithm/leetcode/binary-tree-level-order-traversal",{"title":156,"_path":157},"No.104 二叉树的最大深度","/code/algorithm/leetcode/maximum-depth-of-binary-tree",{"title":159,"_path":160},"No.111 二叉树的最小深度","/code/algorithm/leetcode/minimum-depth-of-binary-tree",{"title":162,"_path":163},"No.112 路径总和","/code/algorithm/leetcode/path-sum",{"title":165,"_path":166},"No.121 买股票的最佳时机","/code/algorithm/leetcode/best-time-to-buy-and-sell-stock",{"title":168,"_path":169},"No.129 求根到叶子节点数字之和","/code/algorithm/leetcode/sum-root-to-leaf-numbers",{"title":171,"_path":172},"No.136 只出现一次的数字","/code/algorithm/leetcode/single-number",{"title":174,"_path":175},"No.141 环型链表","/code/algorithm/leetcode/linked-list-cycle",{"title":177,"_path":178},"No.146 LRU 缓存","/code/algorithm/leetcode/lru-cache",{"title":180,"_path":181},"No.151 反转字符串中的单词","/code/algorithm/leetcode/reverse-words-in-a-string",{"title":183,"_path":184},"No.153 寻找旋转排序数组中的最小值","/code/algorithm/leetcode/find-minimum-in-rotated-sorted-array",{"title":186,"_path":187},"No.155 最小栈","/code/algorithm/leetcode/min-stack",{"title":189,"_path":190},"No.160 相交链表","/code/algorithm/leetcode/intersection-of-two-linked-lists",{"title":192,"_path":193},"No.162 寻找峰值","/code/algorithm/leetcode/find-peak-element",{"title":195,"_path":196},"No.165 比较版本号","/code/algorithm/leetcode/compare-version-numbers",{"title":198,"_path":199},"No.169 多数元素","/code/algorithm/leetcode/majority-element",{"title":201,"_path":202},"No.200 岛屿数量","/code/algorithm/leetcode/number-of-islands",{"title":204,"_path":205},"No.206 反转链表","/code/algorithm/leetcode/reverse-linked-list",{"title":207,"_path":208},"No.209 长度最小的子数组","/code/algorithm/leetcode/minimum-size-subarray-sum",{"title":210,"_path":211},"No.215 数组中的第K个最大元素","/code/algorithm/leetcode/kth-largest-element-in-an-array",{"title":213,"_path":214},"No.226 翻转二叉树","/code/algorithm/leetcode/invert-binary-tree",{"title":216,"_path":217},"No.238 除自身以外数组的乘积","/code/algorithm/leetcode/product-of-array-except-self",{"title":219,"_path":220},"No.322 零钱兑换","/code/algorithm/leetcode/coin-change",{"title":222,"_path":223},"No.334 递增的三元子序列","/code/algorithm/leetcode/increasing-triplet-subsequence",{"title":225,"_path":226},"No.344 反转字符串","/code/algorithm/leetcode/reverse-string",{"title":228,"_path":229},"No.345 反转字符串中的元音字母","/code/algorithm/leetcode/reverse-vowels-of-a-string",{"title":231,"_path":232},"No.384 打乱数组","/code/algorithm/leetcode/shuffle-an-array",{"title":234,"_path":235},"No.415 字符串相加","/code/algorithm/leetcode/add-strings",{"title":237,"_path":238},"No.443 压缩字符串","/code/algorithm/leetcode/string-compression",{"title":240,"_path":241},"No.509 斐波那契数","/code/algorithm/leetcode/fibonacci-number",{"title":243,"_path":244},"No.605 种花问题","/code/algorithm/leetcode/can-place-flowers",{"title":246,"_path":247},"No.617 合并二叉树","/code/algorithm/leetcode/merge-two-binary-trees",{"title":249,"_path":250},"No.678 有效的括号字符串","/code/algorithm/leetcode/valid-parenthesis-string",{"title":252,"_path":253},"No.704 二分查找","/code/algorithm/leetcode/binary-search",{"title":255,"_path":256},"No.912 排序数组","/code/algorithm/leetcode/sort-an-array",{"title":258,"_path":259},"No.1071 字符串的最大公因子","/code/algorithm/leetcode/greatest-common-divisor-of-strings",{"title":261,"_path":262},"No.1143 最长公共子序列","/code/algorithm/leetcode/longest-common-subsequence",{"title":264,"_path":265},"No.1431 拥有最多糖果的孩子","/code/algorithm/leetcode/kids-with-the-greatest-number-of-candies",{"title":267,"_path":268},"No.1768 交替合并字符串","/code/algorithm/leetcode/merge-strings-alternately",{"title":270,"_path":271,"children":272},"源码实现","/code/source",[273,298,311],{"title":274,"_path":275,"children":276},"原生 api","/code/source/native-api",[277,280,283,286,289,292,295],{"title":278,"_path":279},"ajax","/code/source/native-api/ajax",{"title":281,"_path":282},"call & apply & bind","/code/source/native-api/call-apply-bind",{"title":284,"_path":285},"new 操作符","/code/source/native-api/new",{"title":287,"_path":288},"instanceof 关键字","/code/source/native-api/instanceof",{"title":290,"_path":291},"定时器","/code/source/native-api/timer",{"title":293,"_path":294},"JSON.stringify","/code/source/native-api/json-stringify",{"title":296,"_path":297},"Iterator 迭代器","/code/source/native-api/iterator",{"title":299,"_path":300,"children":301},"数组 Array","/code/source/array",[302,305,308],{"title":303,"_path":304},"数组去重","/code/source/array/remove-duplicate",{"title":306,"_path":307},"数组扁平化","/code/source/array/flat",{"title":309,"_path":310},"交集、差集、并集、补集","/code/source/array/intersect-minus-union-complement",{"title":312,"_path":313,"children":314},"字符串 String","/code/source/string",[315],{"title":316,"_path":317},"repeat()","/code/source/string/repeat",{"title":319,"_path":320,"children":321},"业务场景","/code/scene",[322,344,347,350,353,356],{"title":323,"_path":324,"children":325},"Promise","/code/scene/promise",[326,329,332,335,338,341],{"title":327,"_path":328},"保证 url 打印顺序并支持 retry","/code/scene/promise/order-print-url-and-support-retry",{"title":330,"_path":331},"并发限制图片加载数量","/code/scene/promise/concurrent-limit-image-load-count",{"title":333,"_path":334},"使用 addRemote 实现 add","/code/scene/promise/use-addremote-to-implement-add",{"title":336,"_path":337},"实现 mergePromise 函数","/code/scene/promise/implement-merge-promise-function",{"title":339,"_path":340},"循环打印红-黄-绿","/code/scene/promise/cycle-printing-red-yellow-green",{"title":342,"_path":343},"promise 每隔 1s 输出","/code/scene/promise/promise-output-every-1s",{"title":345,"_path":346},"计算对象占用字节数","/code/scene/calcuate-object-bytes",{"title":348,"_path":349},"lodash.get","/code/scene/lodash-get",{"title":351,"_path":352},"记忆化请求函数 - 可缓存请求函数","/code/scene/memorize-request",{"title":354,"_path":355},"sku 算法实现","/code/scene/sku",{"title":357,"_path":358},"长列表虚拟滚动","/code/scene/vitrual-scroll-list",{"_path":181,"_dir":360,"_draft":361,"_partial":361,"_locale":362,"title":180,"description":363,"url":364,"body":365,"_type":1389,"_id":1390,"_source":1391,"_file":1392,"_extension":1393},"leetcode",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":366,"children":367,"toc":1382},"root",[368,375,380,385,390,395,425,430,462,467,498,503,523,528,534,539,545,778,783,1376],{"type":369,"tag":370,"props":371,"children":372},"element","p",{},[373],{"type":374,"value":363},"text",{"type":369,"tag":370,"props":376,"children":377},{},[378],{"type":374,"value":379},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":369,"tag":370,"props":381,"children":382},{},[383],{"type":374,"value":384},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":369,"tag":370,"props":386,"children":387},{},[388],{"type":374,"value":389},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":369,"tag":370,"props":391,"children":392},{},[393],{"type":374,"value":394},"示例 1：",{"type":369,"tag":396,"props":397,"children":400},"pre",{"className":398,"code":399,"language":374,"meta":362,"style":362},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[401],{"type":369,"tag":402,"props":403,"children":404},"code",{"__ignoreMap":362},[405,416],{"type":369,"tag":406,"props":407,"children":410},"span",{"class":408,"line":409},"line",1,[411],{"type":369,"tag":406,"props":412,"children":413},{},[414],{"type":374,"value":415},"输入：s = \"the sky is blue\"\n",{"type":369,"tag":406,"props":417,"children":419},{"class":408,"line":418},2,[420],{"type":369,"tag":406,"props":421,"children":422},{},[423],{"type":374,"value":424},"输出：\"blue is sky the\"\n",{"type":369,"tag":370,"props":426,"children":427},{},[428],{"type":374,"value":429},"示例 2：",{"type":369,"tag":396,"props":431,"children":433},{"className":398,"code":432,"language":374,"meta":362,"style":362},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[434],{"type":369,"tag":402,"props":435,"children":436},{"__ignoreMap":362},[437,445,453],{"type":369,"tag":406,"props":438,"children":439},{"class":408,"line":409},[440],{"type":369,"tag":406,"props":441,"children":442},{},[443],{"type":374,"value":444},"输入：s = \" hello world \"\n",{"type":369,"tag":406,"props":446,"children":447},{"class":408,"line":418},[448],{"type":369,"tag":406,"props":449,"children":450},{},[451],{"type":374,"value":452},"输出：\"world hello\"\n",{"type":369,"tag":406,"props":454,"children":456},{"class":408,"line":455},3,[457],{"type":369,"tag":406,"props":458,"children":459},{},[460],{"type":374,"value":461},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":369,"tag":370,"props":463,"children":464},{},[465],{"type":374,"value":466},"示例 3：",{"type":369,"tag":396,"props":468,"children":470},{"className":398,"code":469,"language":374,"meta":362,"style":362},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[471],{"type":369,"tag":402,"props":472,"children":473},{"__ignoreMap":362},[474,482,490],{"type":369,"tag":406,"props":475,"children":476},{"class":408,"line":409},[477],{"type":369,"tag":406,"props":478,"children":479},{},[480],{"type":374,"value":481},"输入：s = \"a good example\"\n",{"type":369,"tag":406,"props":483,"children":484},{"class":408,"line":418},[485],{"type":369,"tag":406,"props":486,"children":487},{},[488],{"type":374,"value":489},"输出：\"example good a\"\n",{"type":369,"tag":406,"props":491,"children":492},{"class":408,"line":455},[493],{"type":369,"tag":406,"props":494,"children":495},{},[496],{"type":374,"value":497},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":369,"tag":370,"props":499,"children":500},{},[501],{"type":374,"value":502},"提示：",{"type":369,"tag":504,"props":505,"children":506},"ul",{},[507,513,518],{"type":369,"tag":508,"props":509,"children":510},"li",{},[511],{"type":374,"value":512},"1 \u003C= s.length \u003C= 10^4",{"type":369,"tag":508,"props":514,"children":515},{},[516],{"type":374,"value":517},"s 包含英文大小写字母、数字和空格 ' '",{"type":369,"tag":508,"props":519,"children":520},{},[521],{"type":374,"value":522},"s 中 至少存在一个 单词",{"type":369,"tag":370,"props":524,"children":525},{},[526],{"type":374,"value":527},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":369,"tag":529,"props":530,"children":532},"h2",{"id":531},"解题思路",[533],{"type":374,"value":531},{"type":369,"tag":529,"props":535,"children":537},{"id":536},"实现",[538],{"type":374,"value":536},{"type":369,"tag":540,"props":541,"children":543},"h3",{"id":542},"语言特性",[544],{"type":374,"value":542},{"type":369,"tag":396,"props":546,"children":550},{"className":547,"code":548,"language":549,"meta":362,"style":362},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[551],{"type":369,"tag":402,"props":552,"children":553},{"__ignoreMap":362},[554,563,589,606,615,659,765],{"type":369,"tag":406,"props":555,"children":556},{"class":408,"line":409},[557],{"type":369,"tag":406,"props":558,"children":560},{"style":559},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[561],{"type":374,"value":562},"/**\n",{"type":369,"tag":406,"props":564,"children":565},{"class":408,"line":418},[566,571,577,583],{"type":369,"tag":406,"props":567,"children":568},{"style":559},[569],{"type":374,"value":570}," * ",{"type":369,"tag":406,"props":572,"children":574},{"style":573},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[575],{"type":374,"value":576},"@param",{"type":369,"tag":406,"props":578,"children":580},{"style":579},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[581],{"type":374,"value":582}," {string}",{"type":369,"tag":406,"props":584,"children":586},{"style":585},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[587],{"type":374,"value":588}," s\n",{"type":369,"tag":406,"props":590,"children":591},{"class":408,"line":455},[592,596,601],{"type":369,"tag":406,"props":593,"children":594},{"style":559},[595],{"type":374,"value":570},{"type":369,"tag":406,"props":597,"children":598},{"style":573},[599],{"type":374,"value":600},"@return",{"type":369,"tag":406,"props":602,"children":603},{"style":579},[604],{"type":374,"value":605}," {string}\n",{"type":369,"tag":406,"props":607,"children":609},{"class":408,"line":608},4,[610],{"type":369,"tag":406,"props":611,"children":612},{"style":559},[613],{"type":374,"value":614}," */\n",{"type":369,"tag":406,"props":616,"children":618},{"class":408,"line":617},5,[619,625,631,637,642,648,654],{"type":369,"tag":406,"props":620,"children":622},{"style":621},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[623],{"type":374,"value":624},"var",{"type":369,"tag":406,"props":626,"children":628},{"style":627},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[629],{"type":374,"value":630}," reverseWords",{"type":369,"tag":406,"props":632,"children":634},{"style":633},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[635],{"type":374,"value":636}," =",{"type":369,"tag":406,"props":638,"children":639},{"style":621},[640],{"type":374,"value":641}," function",{"type":369,"tag":406,"props":643,"children":645},{"style":644},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[646],{"type":374,"value":647}," (",{"type":369,"tag":406,"props":649,"children":651},{"style":650},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[652],{"type":374,"value":653},"s",{"type":369,"tag":406,"props":655,"children":656},{"style":644},[657],{"type":374,"value":658},") {\n",{"type":369,"tag":406,"props":660,"children":662},{"class":408,"line":661},6,[663,669,675,681,686,691,697,702,706,711,715,720,724,728,733,738,742,747,751,755,759],{"type":369,"tag":406,"props":664,"children":666},{"style":665},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[667],{"type":374,"value":668},"  return",{"type":369,"tag":406,"props":670,"children":672},{"style":671},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[673],{"type":374,"value":674}," s",{"type":369,"tag":406,"props":676,"children":678},{"style":677},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[679],{"type":374,"value":680},".",{"type":369,"tag":406,"props":682,"children":683},{"style":627},[684],{"type":374,"value":685},"split",{"type":369,"tag":406,"props":687,"children":688},{"style":644},[689],{"type":374,"value":690},"(",{"type":369,"tag":406,"props":692,"children":694},{"style":693},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[695],{"type":374,"value":696},"\" \"",{"type":369,"tag":406,"props":698,"children":699},{"style":644},[700],{"type":374,"value":701},")",{"type":369,"tag":406,"props":703,"children":704},{"style":677},[705],{"type":374,"value":680},{"type":369,"tag":406,"props":707,"children":708},{"style":627},[709],{"type":374,"value":710},"filter",{"type":369,"tag":406,"props":712,"children":713},{"style":644},[714],{"type":374,"value":690},{"type":369,"tag":406,"props":716,"children":717},{"style":671},[718],{"type":374,"value":719},"Boolean",{"type":369,"tag":406,"props":721,"children":722},{"style":644},[723],{"type":374,"value":701},{"type":369,"tag":406,"props":725,"children":726},{"style":677},[727],{"type":374,"value":680},{"type":369,"tag":406,"props":729,"children":730},{"style":627},[731],{"type":374,"value":732},"reverse",{"type":369,"tag":406,"props":734,"children":735},{"style":644},[736],{"type":374,"value":737},"()",{"type":369,"tag":406,"props":739,"children":740},{"style":677},[741],{"type":374,"value":680},{"type":369,"tag":406,"props":743,"children":744},{"style":627},[745],{"type":374,"value":746},"join",{"type":369,"tag":406,"props":748,"children":749},{"style":644},[750],{"type":374,"value":690},{"type":369,"tag":406,"props":752,"children":753},{"style":693},[754],{"type":374,"value":696},{"type":369,"tag":406,"props":756,"children":757},{"style":644},[758],{"type":374,"value":701},{"type":369,"tag":406,"props":760,"children":762},{"style":761},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[763],{"type":374,"value":764},";\n",{"type":369,"tag":406,"props":766,"children":768},{"class":408,"line":767},7,[769,774],{"type":369,"tag":406,"props":770,"children":771},{"style":644},[772],{"type":374,"value":773},"}",{"type":369,"tag":406,"props":775,"children":776},{"style":761},[777],{"type":374,"value":764},{"type":369,"tag":540,"props":779,"children":781},{"id":780},"双指针",[782],{"type":374,"value":780},{"type":369,"tag":396,"props":784,"children":786},{"className":547,"code":785,"language":549,"meta":362,"style":362},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[787],{"type":369,"tag":402,"props":788,"children":789},{"__ignoreMap":362},[790,797,816,831,838,869,877,885,894,903,912,939,984,1009,1041,1123,1206,1280,1306,1315,1364],{"type":369,"tag":406,"props":791,"children":792},{"class":408,"line":409},[793],{"type":369,"tag":406,"props":794,"children":795},{"style":559},[796],{"type":374,"value":562},{"type":369,"tag":406,"props":798,"children":799},{"class":408,"line":418},[800,804,808,812],{"type":369,"tag":406,"props":801,"children":802},{"style":559},[803],{"type":374,"value":570},{"type":369,"tag":406,"props":805,"children":806},{"style":573},[807],{"type":374,"value":576},{"type":369,"tag":406,"props":809,"children":810},{"style":579},[811],{"type":374,"value":582},{"type":369,"tag":406,"props":813,"children":814},{"style":585},[815],{"type":374,"value":588},{"type":369,"tag":406,"props":817,"children":818},{"class":408,"line":455},[819,823,827],{"type":369,"tag":406,"props":820,"children":821},{"style":559},[822],{"type":374,"value":570},{"type":369,"tag":406,"props":824,"children":825},{"style":573},[826],{"type":374,"value":600},{"type":369,"tag":406,"props":828,"children":829},{"style":579},[830],{"type":374,"value":605},{"type":369,"tag":406,"props":832,"children":833},{"class":408,"line":608},[834],{"type":369,"tag":406,"props":835,"children":836},{"style":559},[837],{"type":374,"value":614},{"type":369,"tag":406,"props":839,"children":840},{"class":408,"line":617},[841,845,849,853,857,861,865],{"type":369,"tag":406,"props":842,"children":843},{"style":621},[844],{"type":374,"value":624},{"type":369,"tag":406,"props":846,"children":847},{"style":627},[848],{"type":374,"value":630},{"type":369,"tag":406,"props":850,"children":851},{"style":633},[852],{"type":374,"value":636},{"type":369,"tag":406,"props":854,"children":855},{"style":621},[856],{"type":374,"value":641},{"type":369,"tag":406,"props":858,"children":859},{"style":644},[860],{"type":374,"value":647},{"type":369,"tag":406,"props":862,"children":863},{"style":650},[864],{"type":374,"value":653},{"type":369,"tag":406,"props":866,"children":867},{"style":644},[868],{"type":374,"value":658},{"type":369,"tag":406,"props":870,"children":871},{"class":408,"line":661},[872],{"type":369,"tag":406,"props":873,"children":874},{"style":559},[875],{"type":374,"value":876},"  // 倒序遍历字符串\n",{"type":369,"tag":406,"props":878,"children":879},{"class":408,"line":767},[880],{"type":369,"tag":406,"props":881,"children":882},{"style":559},[883],{"type":374,"value":884},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":369,"tag":406,"props":886,"children":888},{"class":408,"line":887},8,[889],{"type":369,"tag":406,"props":890,"children":891},{"style":559},[892],{"type":374,"value":893},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":369,"tag":406,"props":895,"children":897},{"class":408,"line":896},9,[898],{"type":369,"tag":406,"props":899,"children":900},{"style":559},[901],{"type":374,"value":902},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":369,"tag":406,"props":904,"children":906},{"class":408,"line":905},10,[907],{"type":369,"tag":406,"props":908,"children":909},{"style":559},[910],{"type":374,"value":911},"  // 4. 执行 j = i\n",{"type":369,"tag":406,"props":913,"children":915},{"class":408,"line":914},11,[916,921,926,930,935],{"type":369,"tag":406,"props":917,"children":918},{"style":621},[919],{"type":374,"value":920},"  let",{"type":369,"tag":406,"props":922,"children":923},{"style":671},[924],{"type":374,"value":925}," res",{"type":369,"tag":406,"props":927,"children":928},{"style":633},[929],{"type":374,"value":636},{"type":369,"tag":406,"props":931,"children":932},{"style":644},[933],{"type":374,"value":934}," []",{"type":369,"tag":406,"props":936,"children":937},{"style":761},[938],{"type":374,"value":764},{"type":369,"tag":406,"props":940,"children":942},{"class":408,"line":941},12,[943,947,952,956,960,964,969,974,980],{"type":369,"tag":406,"props":944,"children":945},{"style":621},[946],{"type":374,"value":920},{"type":369,"tag":406,"props":948,"children":949},{"style":671},[950],{"type":374,"value":951}," i",{"type":369,"tag":406,"props":953,"children":954},{"style":633},[955],{"type":374,"value":636},{"type":369,"tag":406,"props":957,"children":958},{"style":671},[959],{"type":374,"value":674},{"type":369,"tag":406,"props":961,"children":962},{"style":677},[963],{"type":374,"value":680},{"type":369,"tag":406,"props":965,"children":966},{"style":644},[967],{"type":374,"value":968},"length ",{"type":369,"tag":406,"props":970,"children":971},{"style":633},[972],{"type":374,"value":973},"-",{"type":369,"tag":406,"props":975,"children":977},{"style":976},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[978],{"type":374,"value":979}," 1",{"type":369,"tag":406,"props":981,"children":982},{"style":761},[983],{"type":374,"value":764},{"type":369,"tag":406,"props":985,"children":987},{"class":408,"line":986},13,[988,992,997,1001,1005],{"type":369,"tag":406,"props":989,"children":990},{"style":621},[991],{"type":374,"value":920},{"type":369,"tag":406,"props":993,"children":994},{"style":671},[995],{"type":374,"value":996}," j",{"type":369,"tag":406,"props":998,"children":999},{"style":633},[1000],{"type":374,"value":636},{"type":369,"tag":406,"props":1002,"children":1003},{"style":671},[1004],{"type":374,"value":951},{"type":369,"tag":406,"props":1006,"children":1007},{"style":761},[1008],{"type":374,"value":764},{"type":369,"tag":406,"props":1010,"children":1012},{"class":408,"line":1011},14,[1013,1018,1022,1027,1032,1037],{"type":369,"tag":406,"props":1014,"children":1015},{"style":665},[1016],{"type":374,"value":1017},"  while",{"type":369,"tag":406,"props":1019,"children":1020},{"style":644},[1021],{"type":374,"value":647},{"type":369,"tag":406,"props":1023,"children":1024},{"style":671},[1025],{"type":374,"value":1026},"i",{"type":369,"tag":406,"props":1028,"children":1029},{"style":633},[1030],{"type":374,"value":1031}," >=",{"type":369,"tag":406,"props":1033,"children":1034},{"style":976},[1035],{"type":374,"value":1036}," 0",{"type":369,"tag":406,"props":1038,"children":1039},{"style":644},[1040],{"type":374,"value":658},{"type":369,"tag":406,"props":1042,"children":1044},{"class":408,"line":1043},15,[1045,1050,1054,1058,1062,1066,1071,1075,1080,1084,1089,1094,1099,1104,1108,1113,1118],{"type":369,"tag":406,"props":1046,"children":1047},{"style":665},[1048],{"type":374,"value":1049},"    while",{"type":369,"tag":406,"props":1051,"children":1052},{"style":644},[1053],{"type":374,"value":647},{"type":369,"tag":406,"props":1055,"children":1056},{"style":671},[1057],{"type":374,"value":1026},{"type":369,"tag":406,"props":1059,"children":1060},{"style":633},[1061],{"type":374,"value":1031},{"type":369,"tag":406,"props":1063,"children":1064},{"style":976},[1065],{"type":374,"value":1036},{"type":369,"tag":406,"props":1067,"children":1068},{"style":633},[1069],{"type":374,"value":1070}," &&",{"type":369,"tag":406,"props":1072,"children":1073},{"style":671},[1074],{"type":374,"value":674},{"type":369,"tag":406,"props":1076,"children":1077},{"style":644},[1078],{"type":374,"value":1079},"[",{"type":369,"tag":406,"props":1081,"children":1082},{"style":671},[1083],{"type":374,"value":1026},{"type":369,"tag":406,"props":1085,"children":1086},{"style":644},[1087],{"type":374,"value":1088},"] ",{"type":369,"tag":406,"props":1090,"children":1091},{"style":633},[1092],{"type":374,"value":1093},"!==",{"type":369,"tag":406,"props":1095,"children":1096},{"style":693},[1097],{"type":374,"value":1098}," \" \"",{"type":369,"tag":406,"props":1100,"children":1101},{"style":644},[1102],{"type":374,"value":1103},") ",{"type":369,"tag":406,"props":1105,"children":1106},{"style":671},[1107],{"type":374,"value":1026},{"type":369,"tag":406,"props":1109,"children":1110},{"style":633},[1111],{"type":374,"value":1112},"--",{"type":369,"tag":406,"props":1114,"children":1115},{"style":761},[1116],{"type":374,"value":1117},";",{"type":369,"tag":406,"props":1119,"children":1120},{"style":559},[1121],{"type":374,"value":1122}," // 搜索首个空格\n",{"type":369,"tag":406,"props":1124,"children":1126},{"class":408,"line":1125},16,[1127,1132,1136,1141,1145,1149,1153,1158,1162,1166,1171,1175,1180,1184,1188,1192,1197,1201],{"type":369,"tag":406,"props":1128,"children":1129},{"style":671},[1130],{"type":374,"value":1131},"    res",{"type":369,"tag":406,"props":1133,"children":1134},{"style":677},[1135],{"type":374,"value":680},{"type":369,"tag":406,"props":1137,"children":1138},{"style":627},[1139],{"type":374,"value":1140},"push",{"type":369,"tag":406,"props":1142,"children":1143},{"style":644},[1144],{"type":374,"value":690},{"type":369,"tag":406,"props":1146,"children":1147},{"style":671},[1148],{"type":374,"value":653},{"type":369,"tag":406,"props":1150,"children":1151},{"style":677},[1152],{"type":374,"value":680},{"type":369,"tag":406,"props":1154,"children":1155},{"style":627},[1156],{"type":374,"value":1157},"substring",{"type":369,"tag":406,"props":1159,"children":1160},{"style":644},[1161],{"type":374,"value":690},{"type":369,"tag":406,"props":1163,"children":1164},{"style":671},[1165],{"type":374,"value":1026},{"type":369,"tag":406,"props":1167,"children":1168},{"style":633},[1169],{"type":374,"value":1170}," +",{"type":369,"tag":406,"props":1172,"children":1173},{"style":976},[1174],{"type":374,"value":979},{"type":369,"tag":406,"props":1176,"children":1177},{"style":761},[1178],{"type":374,"value":1179},",",{"type":369,"tag":406,"props":1181,"children":1182},{"style":671},[1183],{"type":374,"value":996},{"type":369,"tag":406,"props":1185,"children":1186},{"style":633},[1187],{"type":374,"value":1170},{"type":369,"tag":406,"props":1189,"children":1190},{"style":976},[1191],{"type":374,"value":979},{"type":369,"tag":406,"props":1193,"children":1194},{"style":644},[1195],{"type":374,"value":1196},"))",{"type":369,"tag":406,"props":1198,"children":1199},{"style":761},[1200],{"type":374,"value":1117},{"type":369,"tag":406,"props":1202,"children":1203},{"style":559},[1204],{"type":374,"value":1205}," // 添加单词\n",{"type":369,"tag":406,"props":1207,"children":1209},{"class":408,"line":1208},17,[1210,1214,1218,1222,1226,1230,1234,1238,1242,1246,1250,1255,1259,1263,1267,1271,1275],{"type":369,"tag":406,"props":1211,"children":1212},{"style":665},[1213],{"type":374,"value":1049},{"type":369,"tag":406,"props":1215,"children":1216},{"style":644},[1217],{"type":374,"value":647},{"type":369,"tag":406,"props":1219,"children":1220},{"style":671},[1221],{"type":374,"value":1026},{"type":369,"tag":406,"props":1223,"children":1224},{"style":633},[1225],{"type":374,"value":1031},{"type":369,"tag":406,"props":1227,"children":1228},{"style":976},[1229],{"type":374,"value":1036},{"type":369,"tag":406,"props":1231,"children":1232},{"style":633},[1233],{"type":374,"value":1070},{"type":369,"tag":406,"props":1235,"children":1236},{"style":671},[1237],{"type":374,"value":674},{"type":369,"tag":406,"props":1239,"children":1240},{"style":644},[1241],{"type":374,"value":1079},{"type":369,"tag":406,"props":1243,"children":1244},{"style":671},[1245],{"type":374,"value":1026},{"type":369,"tag":406,"props":1247,"children":1248},{"style":644},[1249],{"type":374,"value":1088},{"type":369,"tag":406,"props":1251,"children":1252},{"style":633},[1253],{"type":374,"value":1254},"===",{"type":369,"tag":406,"props":1256,"children":1257},{"style":693},[1258],{"type":374,"value":1098},{"type":369,"tag":406,"props":1260,"children":1261},{"style":644},[1262],{"type":374,"value":1103},{"type":369,"tag":406,"props":1264,"children":1265},{"style":671},[1266],{"type":374,"value":1026},{"type":369,"tag":406,"props":1268,"children":1269},{"style":633},[1270],{"type":374,"value":1112},{"type":369,"tag":406,"props":1272,"children":1273},{"style":761},[1274],{"type":374,"value":1117},{"type":369,"tag":406,"props":1276,"children":1277},{"style":559},[1278],{"type":374,"value":1279}," // 跳过单词间空格\n",{"type":369,"tag":406,"props":1281,"children":1283},{"class":408,"line":1282},18,[1284,1289,1293,1297,1301],{"type":369,"tag":406,"props":1285,"children":1286},{"style":671},[1287],{"type":374,"value":1288},"    j",{"type":369,"tag":406,"props":1290,"children":1291},{"style":633},[1292],{"type":374,"value":636},{"type":369,"tag":406,"props":1294,"children":1295},{"style":671},[1296],{"type":374,"value":951},{"type":369,"tag":406,"props":1298,"children":1299},{"style":761},[1300],{"type":374,"value":1117},{"type":369,"tag":406,"props":1302,"children":1303},{"style":559},[1304],{"type":374,"value":1305}," // 指针移动，指向下个单词的尾字符\n",{"type":369,"tag":406,"props":1307,"children":1309},{"class":408,"line":1308},19,[1310],{"type":369,"tag":406,"props":1311,"children":1312},{"style":644},[1313],{"type":374,"value":1314},"  }\n",{"type":369,"tag":406,"props":1316,"children":1318},{"class":408,"line":1317},20,[1319,1323,1327,1331,1335,1339,1343,1347,1351,1356,1360],{"type":369,"tag":406,"props":1320,"children":1321},{"style":665},[1322],{"type":374,"value":668},{"type":369,"tag":406,"props":1324,"children":1325},{"style":671},[1326],{"type":374,"value":925},{"type":369,"tag":406,"props":1328,"children":1329},{"style":677},[1330],{"type":374,"value":680},{"type":369,"tag":406,"props":1332,"children":1333},{"style":627},[1334],{"type":374,"value":746},{"type":369,"tag":406,"props":1336,"children":1337},{"style":644},[1338],{"type":374,"value":690},{"type":369,"tag":406,"props":1340,"children":1341},{"style":693},[1342],{"type":374,"value":696},{"type":369,"tag":406,"props":1344,"children":1345},{"style":644},[1346],{"type":374,"value":701},{"type":369,"tag":406,"props":1348,"children":1349},{"style":677},[1350],{"type":374,"value":680},{"type":369,"tag":406,"props":1352,"children":1353},{"style":627},[1354],{"type":374,"value":1355},"trim",{"type":369,"tag":406,"props":1357,"children":1358},{"style":644},[1359],{"type":374,"value":737},{"type":369,"tag":406,"props":1361,"children":1362},{"style":761},[1363],{"type":374,"value":764},{"type":369,"tag":406,"props":1365,"children":1367},{"class":408,"line":1366},21,[1368,1372],{"type":369,"tag":406,"props":1369,"children":1370},{"style":644},[1371],{"type":374,"value":773},{"type":369,"tag":406,"props":1373,"children":1374},{"style":761},[1375],{"type":374,"value":764},{"type":369,"tag":1377,"props":1378,"children":1379},"style",{},[1380],{"type":374,"value":1381},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":362,"searchDepth":617,"depth":617,"links":1383},[1384,1385],{"id":531,"depth":418,"text":531},{"id":536,"depth":418,"text":536,"children":1386},[1387,1388],{"id":542,"depth":455,"text":542},{"id":780,"depth":455,"text":780},"markdown","content:2.code:1.algorithm:3.leetcode:151.reverse-words-in-a-string.md","content","2.code/1.algorithm/3.leetcode/151.reverse-words-in-a-string.md","md",[1395,1397],{"_path":178,"title":177,"description":1396},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":184,"title":183,"description":1398},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1712748638672]