{"_path":"/endorsement/javascript/grammar-data-types","_dir":"javascript","_draft":false,"_partial":false,"_locale":"","title":"语法和数据类型","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"声明"},"children":[{"type":"text","value":"声明"}]},{"type":"element","tag":"h3","props":{"id":"变量声明"},"children":[{"type":"text","value":"变量声明"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"var：声明一个变量，可选初始化一个值。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"let：声明一个块作用域的局部变量，可选初始化一个值。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"const：声明一个块作用域的只读常量。"}]}]},{"type":"element","tag":"h3","props":{"id":"作用域"},"children":[{"type":"text","value":"作用域"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在函数之外声明的变量，叫做"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"全局变量"}]},{"type":"text","value":"，因为它可被当前文档中的任何其他代码所访问。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在函数内部声明的变量，叫做"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"局部变量"}]},{"type":"text","value":"，因为它只能在当前函数的内部访问。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ES6 之前的 JavaScript 没有"},{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#%E8%AF%AD%E5%8F%A5%E5%9D%97","rel":["nofollow"]},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"语句块"}]}]},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"作用域"}]},{"type":"text","value":"；相反，语句块中声明的变量将成为语句块所在函数（或全局作用域）的局部变量。"}]}]},{"type":"element","tag":"h3","props":{"id":"变量提升"},"children":[{"type":"text","value":"变量提升"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在 ES6 中，let 和 const 同样会被提升变量到"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"代码块"}]},{"type":"text","value":"的顶部但是"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"不会被赋予初始值"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在变量声明之前引用这个变量，将抛出"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"引用错误（ReferenceError）"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"这个变量将从代码块一开始的时候就处在一个“"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"暂时性死区"}]},{"type":"text","value":"”，"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"直到这个变量被声明为止"}]},{"type":"text","value":"。"}]}]},{"type":"element","tag":"h3","props":{"id":"函数提升"},"children":[{"type":"text","value":"函数提升"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"对于函数来说，"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"只有函数声明会被提升"}]},{"type":"text","value":"到顶部，而"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"函数表达式不会被提升"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"h3","props":{"id":"全局变量"},"children":[{"type":"text","value":"全局变量"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"全局变量是全局对象的属性。在网页中，（译注：缺省的）全局对象是 "},{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/API/Window","rel":["nofollow"]},"children":[{"type":"text","value":"window"}]},{"type":"text","value":" ，所以可以用形如 window.variable 的语法来设置和访问全局变量。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可以通过指定 window 或 frame 的名字，在当前 window 或 frame 访问另一个 window 或 frame 中声明的变量。例如，在文档里声明一个叫 phoneNumber 的变量，那么可以在子框架里使用 parent.phoneNumber 的方式来引用它。"}]}]},{"type":"element","tag":"h3","props":{"id":"常量"},"children":[{"type":"text","value":"常量"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"可以用关键字 const 创建一个只读的常量。常量标识符的命名规则和变量相同：必须以字母、下划线（_）或美元符号（$）开头并可以包含有字母、数字或下划线。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"常量不可以通过重新赋值改变其值，也不可以在代码运行时重新声明。它必须被初始化为某个值。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"常量的"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"作用域规则与 let 块级作用域变量相同"}]},{"type":"text","value":"。若省略 const 关键字，则该标识符将被视为变量。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量。"}]}]},{"type":"element","tag":"h3","props":{"id":"总结"},"children":[{"type":"text","value":"总结"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"1.png","src":"https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/endorsement/javascript/grammar-data-types/1.png"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"数据结构和类型"},"children":[{"type":"text","value":"数据结构和类型"}]},{"type":"element","tag":"h3","props":{"id":"_8-种数据类型"},"children":[{"type":"text","value":"8 种数据类型"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"7 种基本数据类型：\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"布尔值（"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Boolean"}]},{"type":"text","value":"）：有 2 个值分别是：true 和 false。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"null"}]},{"type":"text","value":"：一个表明 null 值的特殊关键字。JavaScript 是大小写敏感的，因此 null 与 Null、NULL或变体完全不同。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"undefined"}]},{"type":"text","value":"：和 null 一样是一个特殊的关键字，undefined 表示变量未赋值时的属性。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"数字（"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Number"}]},{"type":"text","value":"）：整数或浮点数，例如： 42 或者 3.14159。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"任意精度的整数（"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"BigInt"}]},{"type":"text","value":"）：可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"字符串（"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"）：字符串是一串表示文本值的字符序列，例如：\"Howdy\"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"代表（"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Symbol"}]},{"type":"text","value":"，在 ES6 中新添加的类型）。一种实例是唯一且不可改变的数据类型。"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"引用数据类型：\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"对象（"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Object"}]},{"type":"text","value":"）。"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"存储位置"},"children":[{"type":"text","value":"存储位置"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"栈：存放基本数据类型（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Undefined"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Null"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Boolean"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Number"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Symbol"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"BigInt"}]},{"type":"text","value":"）"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"基本数据类型是直接存储在栈 stack 中的简单数据段，"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"占据空间小、大小固定"}]},{"type":"text","value":"，属于被频繁使用的数据，因此放入栈中存储（在数据结构中，栈中数据的存储方式为先进后出）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"栈是一个优先队列，是按优先级进行排序的，优先级可以按照大小来规定"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"堆：存放引用数据类型（"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"对象"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"数组"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"函数"}]},{"type":"text","value":"）"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"引用数据类型是存储在堆 heap 中的对象，"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"占据空间大、大小不固定"}]},{"type":"text","value":"。如果存储在栈中，将会影响程序运行的性能；"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"引用数据类型在栈中存储了"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"指针"}]},{"type":"text","value":"，该"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"指针指向堆中该实体的起始地址"}]},{"type":"text","value":"。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在操作系统中，内存被分为"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"栈区和堆区"}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"栈区：内存由编译器自动分配释放，存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"堆区：内存一般由开发者分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收"}]}]},{"type":"element","tag":"h2","props":{"id":"字面量"},"children":[{"type":"text","value":"字面量"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E6%95%B0%E7%BB%84%E5%AD%97%E9%9D%A2%E9%87%8F","rel":["nofollow"]},"children":[{"type":"text","value":"数组字面量"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%B8%83%E5%B0%94%E5%AD%97%E9%9D%A2%E9%87%8F","rel":["nofollow"]},"children":[{"type":"text","value":"布尔字面量"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E6%95%B0%E5%AD%97%E5%AD%97%E9%9D%A2%E9%87%8F","rel":["nofollow"]},"children":[{"type":"text","value":"数字字面量"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F","rel":["nofollow"]},"children":[{"type":"text","value":"对象字面量"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#regexp_%E5%AD%97%E9%9D%A2%E9%87%8F","rel":["nofollow"]},"children":[{"type":"text","value":"RegExp 字面量"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F","rel":["nofollow"]},"children":[{"type":"text","value":"字符串字面量"}]}]}]}],"toc":{"title":"","searchDepth":5,"depth":5,"links":[{"id":"声明","depth":2,"text":"声明","children":[{"id":"变量声明","depth":3,"text":"变量声明"},{"id":"作用域","depth":3,"text":"作用域"},{"id":"变量提升","depth":3,"text":"变量提升"},{"id":"函数提升","depth":3,"text":"函数提升"},{"id":"全局变量","depth":3,"text":"全局变量"},{"id":"常量","depth":3,"text":"常量"},{"id":"总结","depth":3,"text":"总结"}]},{"id":"数据结构和类型","depth":2,"text":"数据结构和类型","children":[{"id":"_8-种数据类型","depth":3,"text":"8 种数据类型"},{"id":"存储位置","depth":3,"text":"存储位置"}]},{"id":"字面量","depth":2,"text":"字面量"}]}},"_type":"markdown","_id":"content:2.endorsement:2.javascript:1.grammar-data-types.md","_source":"content","_file":"2.endorsement/2.javascript/1.grammar-data-types.md","_extension":"md"}