[{"data":1,"prerenderedAt":3020},["Reactive",2],{"navigation":3,"/design-mode/thoughts-principles":551,"/design-mode/thoughts-principles-surround":3017},[4,272,301,519,527,536],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":300},"八股文","/endorsement",[276,287],{"title":277,"_path":278,"children":279},"构建工具","/endorsement/build-tools",[280],{"title":281,"_path":282,"children":283},"Webpack","/endorsement/build-tools/webpack",[284],{"title":285,"_path":286},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":288,"_path":289,"children":290},"Html","/endorsement/html",[291,294,297],{"title":292,"_path":293},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":295,"_path":296},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":298,"_path":299},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":302,"_path":303,"children":304,"icon":518},"代码考核","/code-assessment",[305,410,511],{"title":306,"_path":307,"children":308},"源码实现","/code-assessment/source",[309,343,359,387,394,401,404,407],{"title":310,"_path":311,"children":312},"原生 api","/code-assessment/source/native-api",[313,316,319,322,325,328,331,334,337,340],{"title":314,"_path":315},"polyfill","/code-assessment/source/native-api/polyfill",{"title":317,"_path":318},"ajax","/code-assessment/source/native-api/ajax",{"title":320,"_path":321},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":323,"_path":324},"new 操作符","/code-assessment/source/native-api/new",{"title":326,"_path":327},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":329,"_path":330},"定时器","/code-assessment/source/native-api/timer",{"title":332,"_path":333},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":335,"_path":336},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":338,"_path":339},"extends","/code-assessment/source/native-api/extends",{"title":341,"_path":342},"Promise","/code-assessment/source/native-api/promise",{"title":344,"_path":345,"children":346},"函数 Function","/code-assessment/source/function",[347,350,353,356],{"title":348,"_path":349},"函数防抖","/code-assessment/source/function/debounce",{"title":351,"_path":352},"函数节流","/code-assessment/source/function/throttle",{"title":354,"_path":355},"函数柯理化","/code-assessment/source/function/curry",{"title":357,"_path":358},"函数睡眠","/code-assessment/source/function/sleep",{"title":360,"_path":361,"children":362},"数组 Array","/code-assessment/source/array",[363,366,369,372,375,378,381,384],{"title":364,"_path":365},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":367,"_path":368},"数组扁平化","/code-assessment/source/array/flat",{"title":370,"_path":371},"原型方法","/code-assessment/source/array/prototype-method",{"title":373,"_path":374},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":376,"_path":377},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":379,"_path":380},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":382,"_path":383},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":385,"_path":386},"二维数组","/code-assessment/source/array/2d-array",{"title":388,"_path":389,"children":390},"字符串 String","/code-assessment/source/string",[391],{"title":392,"_path":393},"repeat()","/code-assessment/source/string/repeat",{"title":395,"_path":396,"children":397},"集合 Set","/code-assessment/source/set",[398],{"title":399,"_path":400},"遍历集合","/code-assessment/source/set/traverse",{"title":402,"_path":403},"获取通用类型","/code-assessment/source/get-generic-type",{"title":405,"_path":406},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":408,"_path":409},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":411,"_path":412,"children":413},"业务场景","/code-assessment/scene",[414,444,454,457,460,463,466,469,472,475,478,481,484,487,490,493,496,499,502,505,508],{"title":341,"_path":415,"children":416},"/code-assessment/scene/promise",[417,420,423,426,429,432,435,438,441],{"title":418,"_path":419},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":421,"_path":422},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":424,"_path":425},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":427,"_path":428},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":430,"_path":431},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":433,"_path":434},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":436,"_path":437},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":439,"_path":440},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":442,"_path":443},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":445,"_path":446,"children":447},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[448,451],{"title":449,"_path":450},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":452,"_path":453},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":455,"_path":456},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":458,"_path":459},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":461,"_path":462},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":464,"_path":465},"倒计时","/code-assessment/scene/countdown",{"title":467,"_path":468},"日期格式化","/code-assessment/scene/date-format",{"title":470,"_path":471},"实现前端路由","/code-assessment/scene/frontend-route",{"title":473,"_path":474},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":476,"_path":477},"lodash.get","/code-assessment/scene/lodash-get",{"title":479,"_path":480},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":482,"_path":483},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":485,"_path":486},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":488,"_path":489},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":491,"_path":492},"随机数","/code-assessment/scene/random-number",{"title":494,"_path":495},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":497,"_path":498},"sku 算法实现","/code-assessment/scene/sku",{"title":500,"_path":501},"整数分割","/code-assessment/scene/split-number",{"title":503,"_path":504},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":506,"_path":507},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":509,"_path":510},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":512,"_path":513,"children":514},"Ts 类型挑战","/code-assessment/type-challeges",[515],{"title":516,"_path":517},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":520,"_path":521,"children":522,"icon":526},"项目","/project",[523],{"title":524,"_path":525},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":528,"_path":529,"children":530,"icon":535},"设计模式","/design-mode",[531,532],{"title":528,"_path":529},{"title":533,"_path":534},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":537,"_path":538,"children":539,"icon":550},"后端语言","/backend-languages",[540],{"title":541,"_path":542,"children":543},"Python","/backend-languages/python",[544,547],{"title":545,"_path":546},"基础","/backend-languages/python/base",{"title":548,"_path":549},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":534,"_dir":552,"_draft":553,"_partial":553,"_locale":554,"title":533,"description":555,"body":556,"_type":3012,"_id":3013,"_source":3014,"_file":3015,"_extension":3016},"design-mode",false,"","SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。这些原则由 Robert C. Martin 等人提出，它们包括以下五个原则：",{"type":557,"children":558,"toc":3005},"root",[559,566,596,601,607,612,750,755,769,774,901,906,911,916,921,1300,1305,1310,1502,1507,1512,1517,1522,1527,1532,1862,1867,2083,2088,2093,2098,2103,2108,2113,2317,2322,2327,2451,2456,2461,2466,2471,2698,2703,2708,2994,2999],{"type":560,"tag":561,"props":562,"children":563},"element","p",{},[564],{"type":565,"value":555},"text",{"type":560,"tag":567,"props":568,"children":569},"ul",{},[570,576,581,586,591],{"type":560,"tag":571,"props":572,"children":573},"li",{},[574],{"type":565,"value":575},"单一职责原则（Single Responsibility Principle，SRP）",{"type":560,"tag":571,"props":577,"children":578},{},[579],{"type":565,"value":580},"开放/封闭原则（Open/Closed Principle，OCP）",{"type":560,"tag":571,"props":582,"children":583},{},[584],{"type":565,"value":585},"里氏替换原则（Liskov Substitution Principle，LSP）",{"type":560,"tag":571,"props":587,"children":588},{},[589],{"type":565,"value":590},"接口隔离原则（Interface Segregation Principle，ISP）",{"type":560,"tag":571,"props":592,"children":593},{},[594],{"type":565,"value":595},"依赖反转原则（Dependency Inversion Principle，DIP）",{"type":560,"tag":561,"props":597,"children":598},{},[599],{"type":565,"value":600},"这些原则共同促使开发者创建具有高内聚、低耦合、易扩展和易维护性的软件系统。遵循这些原则有助于构建更健壮的面向对象系统，提高代码质量和可维护性。",{"type":560,"tag":602,"props":603,"children":605},"h2",{"id":604},"单一职责原则",[606],{"type":565,"value":604},{"type":560,"tag":561,"props":608,"children":609},{},[610],{"type":565,"value":611},"单一职责原则（Single Responsibility Principle，SRP）要求一个类或者模块只负责完成一个职责（或者功能）。 假设我们有一个简单的厨师类，它负责烹饪和洗碗两个职责：",{"type":560,"tag":613,"props":614,"children":618},"pre",{"className":615,"code":616,"language":617,"meta":554,"style":554},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n","js",[619],{"type":560,"tag":620,"props":621,"children":622},"code",{"__ignoreMap":554},[623,647,677,687,696,706,724,733,741],{"type":560,"tag":624,"props":625,"children":628},"span",{"class":626,"line":627},"line",1,[629,635,641],{"type":560,"tag":624,"props":630,"children":632},{"style":631},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[633],{"type":565,"value":634},"class",{"type":560,"tag":624,"props":636,"children":638},{"style":637},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[639],{"type":565,"value":640}," Chef",{"type":560,"tag":624,"props":642,"children":644},{"style":643},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[645],{"type":565,"value":646}," {\n",{"type":560,"tag":624,"props":648,"children":650},{"class":626,"line":649},2,[651,657,662,668,673],{"type":560,"tag":624,"props":652,"children":654},{"style":653},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[655],{"type":565,"value":656},"  cookDish",{"type":560,"tag":624,"props":658,"children":659},{"style":643},[660],{"type":565,"value":661},"(",{"type":560,"tag":624,"props":663,"children":665},{"style":664},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[666],{"type":565,"value":667},"dish",{"type":560,"tag":624,"props":669,"children":670},{"style":643},[671],{"type":565,"value":672},")",{"type":560,"tag":624,"props":674,"children":675},{"style":643},[676],{"type":565,"value":646},{"type":560,"tag":624,"props":678,"children":680},{"class":626,"line":679},3,[681],{"type":560,"tag":624,"props":682,"children":684},{"style":683},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[685],{"type":565,"value":686},"    // 烹饪菜品的具体实现\n",{"type":560,"tag":624,"props":688,"children":690},{"class":626,"line":689},4,[691],{"type":560,"tag":624,"props":692,"children":693},{"style":643},[694],{"type":565,"value":695},"  }\n",{"type":560,"tag":624,"props":697,"children":699},{"class":626,"line":698},5,[700],{"type":560,"tag":624,"props":701,"children":703},{"emptyLinePlaceholder":702},true,[704],{"type":565,"value":705},"\n",{"type":560,"tag":624,"props":707,"children":709},{"class":626,"line":708},6,[710,715,720],{"type":560,"tag":624,"props":711,"children":712},{"style":653},[713],{"type":565,"value":714},"  washDishes",{"type":560,"tag":624,"props":716,"children":717},{"style":643},[718],{"type":565,"value":719},"()",{"type":560,"tag":624,"props":721,"children":722},{"style":643},[723],{"type":565,"value":646},{"type":560,"tag":624,"props":725,"children":727},{"class":626,"line":726},7,[728],{"type":560,"tag":624,"props":729,"children":730},{"style":683},[731],{"type":565,"value":732},"    // 洗碗的具体实现\n",{"type":560,"tag":624,"props":734,"children":736},{"class":626,"line":735},8,[737],{"type":560,"tag":624,"props":738,"children":739},{"style":643},[740],{"type":565,"value":695},{"type":560,"tag":624,"props":742,"children":744},{"class":626,"line":743},9,[745],{"type":560,"tag":624,"props":746,"children":747},{"style":643},[748],{"type":565,"value":749},"}\n",{"type":560,"tag":561,"props":751,"children":752},{},[753],{"type":565,"value":754},"这个类违反了单一职责原则，因为它有两个职责：烹饪和洗碗。这样的设计可能导致以下问题：",{"type":560,"tag":756,"props":757,"children":758},"ol",{},[759,764],{"type":560,"tag":571,"props":760,"children":761},{},[762],{"type":565,"value":763},"如果厨师的烹饪逻辑变化，需要修改 cookDish 方法，这可能会影响洗碗的部分。",{"type":560,"tag":571,"props":765,"children":766},{},[767],{"type":565,"value":768},"如果洗碗的逻辑变化，需要修改 washDishes 方法，这可能会影响烹饪的部分。",{"type":560,"tag":561,"props":770,"children":771},{},[772],{"type":565,"value":773},"按照单一职责原则，我们应该将这两个职责分开，分别由不同的类负责：",{"type":560,"tag":613,"props":775,"children":777},{"className":615,"code":776,"language":617,"meta":554,"style":554},"class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n}\n\nclass Dishwasher {\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n",[778],{"type":560,"tag":620,"props":779,"children":780},{"__ignoreMap":554},[781,796,819,826,833,840,847,863,878,885,893],{"type":560,"tag":624,"props":782,"children":783},{"class":626,"line":627},[784,788,792],{"type":560,"tag":624,"props":785,"children":786},{"style":631},[787],{"type":565,"value":634},{"type":560,"tag":624,"props":789,"children":790},{"style":637},[791],{"type":565,"value":640},{"type":560,"tag":624,"props":793,"children":794},{"style":643},[795],{"type":565,"value":646},{"type":560,"tag":624,"props":797,"children":798},{"class":626,"line":649},[799,803,807,811,815],{"type":560,"tag":624,"props":800,"children":801},{"style":653},[802],{"type":565,"value":656},{"type":560,"tag":624,"props":804,"children":805},{"style":643},[806],{"type":565,"value":661},{"type":560,"tag":624,"props":808,"children":809},{"style":664},[810],{"type":565,"value":667},{"type":560,"tag":624,"props":812,"children":813},{"style":643},[814],{"type":565,"value":672},{"type":560,"tag":624,"props":816,"children":817},{"style":643},[818],{"type":565,"value":646},{"type":560,"tag":624,"props":820,"children":821},{"class":626,"line":679},[822],{"type":560,"tag":624,"props":823,"children":824},{"style":683},[825],{"type":565,"value":686},{"type":560,"tag":624,"props":827,"children":828},{"class":626,"line":689},[829],{"type":560,"tag":624,"props":830,"children":831},{"style":643},[832],{"type":565,"value":695},{"type":560,"tag":624,"props":834,"children":835},{"class":626,"line":698},[836],{"type":560,"tag":624,"props":837,"children":838},{"style":643},[839],{"type":565,"value":749},{"type":560,"tag":624,"props":841,"children":842},{"class":626,"line":708},[843],{"type":560,"tag":624,"props":844,"children":845},{"emptyLinePlaceholder":702},[846],{"type":565,"value":705},{"type":560,"tag":624,"props":848,"children":849},{"class":626,"line":726},[850,854,859],{"type":560,"tag":624,"props":851,"children":852},{"style":631},[853],{"type":565,"value":634},{"type":560,"tag":624,"props":855,"children":856},{"style":637},[857],{"type":565,"value":858}," Dishwasher",{"type":560,"tag":624,"props":860,"children":861},{"style":643},[862],{"type":565,"value":646},{"type":560,"tag":624,"props":864,"children":865},{"class":626,"line":735},[866,870,874],{"type":560,"tag":624,"props":867,"children":868},{"style":653},[869],{"type":565,"value":714},{"type":560,"tag":624,"props":871,"children":872},{"style":643},[873],{"type":565,"value":719},{"type":560,"tag":624,"props":875,"children":876},{"style":643},[877],{"type":565,"value":646},{"type":560,"tag":624,"props":879,"children":880},{"class":626,"line":743},[881],{"type":560,"tag":624,"props":882,"children":883},{"style":683},[884],{"type":565,"value":732},{"type":560,"tag":624,"props":886,"children":888},{"class":626,"line":887},10,[889],{"type":560,"tag":624,"props":890,"children":891},{"style":643},[892],{"type":565,"value":695},{"type":560,"tag":624,"props":894,"children":896},{"class":626,"line":895},11,[897],{"type":560,"tag":624,"props":898,"children":899},{"style":643},[900],{"type":565,"value":749},{"type":560,"tag":561,"props":902,"children":903},{},[904],{"type":565,"value":905},"这样，Chef 类专注于烹饪，而 Dishwasher 类专注于洗碗。每个类都有一个单一的职责，使得代码更清晰、易于理解，并且在未来的变更中更具弹性。",{"type":560,"tag":602,"props":907,"children":909},{"id":908},"开放封闭原则",[910],{"type":565,"value":908},{"type":560,"tag":561,"props":912,"children":913},{},[914],{"type":565,"value":915},"开关封闭原则（Open/Closed Principle，OCP）要求软件实体（例如类、模块、函数等）应该对扩展开放，对修改关闭。简而言之，一个模块在扩展新功能时不应该修改原有的代码，而是通过添加新的代码来实现扩展。",{"type":560,"tag":561,"props":917,"children":918},{},[919],{"type":565,"value":920},"考虑一个动物园的场景。我们有一些动物，每个动物都会发出叫声。初始设计如下：",{"type":560,"tag":613,"props":922,"children":924},{"className":615,"code":923,"language":617,"meta":554,"style":554},"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    // 默认的叫声\n    console.log(\"Some generic animal sound\");\n  }\n}\n\nclass Lion extends Animal {\n  makeSound() {\n    console.log(\"Roar!\");\n  }\n}\n\nclass Elephant extends Animal {\n  makeSound() {\n    console.log(\"Trumpet!\");\n  }\n}\n",[925],{"type":560,"tag":620,"props":926,"children":927},{"__ignoreMap":554},[928,944,969,1002,1009,1016,1032,1040,1082,1089,1096,1103,1129,1145,1182,1190,1198,1206,1231,1247,1284,1292],{"type":560,"tag":624,"props":929,"children":930},{"class":626,"line":627},[931,935,940],{"type":560,"tag":624,"props":932,"children":933},{"style":631},[934],{"type":565,"value":634},{"type":560,"tag":624,"props":936,"children":937},{"style":637},[938],{"type":565,"value":939}," Animal",{"type":560,"tag":624,"props":941,"children":942},{"style":643},[943],{"type":565,"value":646},{"type":560,"tag":624,"props":945,"children":946},{"class":626,"line":649},[947,952,956,961,965],{"type":560,"tag":624,"props":948,"children":949},{"style":631},[950],{"type":565,"value":951},"  constructor",{"type":560,"tag":624,"props":953,"children":954},{"style":643},[955],{"type":565,"value":661},{"type":560,"tag":624,"props":957,"children":958},{"style":664},[959],{"type":565,"value":960},"name",{"type":560,"tag":624,"props":962,"children":963},{"style":643},[964],{"type":565,"value":672},{"type":560,"tag":624,"props":966,"children":967},{"style":643},[968],{"type":565,"value":646},{"type":560,"tag":624,"props":970,"children":971},{"class":626,"line":679},[972,978,983,987,992,997],{"type":560,"tag":624,"props":973,"children":975},{"style":974},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[976],{"type":565,"value":977},"    this",{"type":560,"tag":624,"props":979,"children":980},{"style":643},[981],{"type":565,"value":982},".",{"type":560,"tag":624,"props":984,"children":985},{"style":664},[986],{"type":565,"value":960},{"type":560,"tag":624,"props":988,"children":989},{"style":643},[990],{"type":565,"value":991}," =",{"type":560,"tag":624,"props":993,"children":994},{"style":664},[995],{"type":565,"value":996}," name",{"type":560,"tag":624,"props":998,"children":999},{"style":643},[1000],{"type":565,"value":1001},";\n",{"type":560,"tag":624,"props":1003,"children":1004},{"class":626,"line":689},[1005],{"type":560,"tag":624,"props":1006,"children":1007},{"style":643},[1008],{"type":565,"value":695},{"type":560,"tag":624,"props":1010,"children":1011},{"class":626,"line":698},[1012],{"type":560,"tag":624,"props":1013,"children":1014},{"emptyLinePlaceholder":702},[1015],{"type":565,"value":705},{"type":560,"tag":624,"props":1017,"children":1018},{"class":626,"line":708},[1019,1024,1028],{"type":560,"tag":624,"props":1020,"children":1021},{"style":653},[1022],{"type":565,"value":1023},"  makeSound",{"type":560,"tag":624,"props":1025,"children":1026},{"style":643},[1027],{"type":565,"value":719},{"type":560,"tag":624,"props":1029,"children":1030},{"style":643},[1031],{"type":565,"value":646},{"type":560,"tag":624,"props":1033,"children":1034},{"class":626,"line":726},[1035],{"type":560,"tag":624,"props":1036,"children":1037},{"style":683},[1038],{"type":565,"value":1039},"    // 默认的叫声\n",{"type":560,"tag":624,"props":1041,"children":1042},{"class":626,"line":735},[1043,1048,1052,1057,1061,1067,1073,1077],{"type":560,"tag":624,"props":1044,"children":1045},{"style":664},[1046],{"type":565,"value":1047},"    console",{"type":560,"tag":624,"props":1049,"children":1050},{"style":643},[1051],{"type":565,"value":982},{"type":560,"tag":624,"props":1053,"children":1054},{"style":653},[1055],{"type":565,"value":1056},"log",{"type":560,"tag":624,"props":1058,"children":1059},{"style":643},[1060],{"type":565,"value":661},{"type":560,"tag":624,"props":1062,"children":1064},{"style":1063},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1065],{"type":565,"value":1066},"\"",{"type":560,"tag":624,"props":1068,"children":1070},{"style":1069},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1071],{"type":565,"value":1072},"Some generic animal sound",{"type":560,"tag":624,"props":1074,"children":1075},{"style":1063},[1076],{"type":565,"value":1066},{"type":560,"tag":624,"props":1078,"children":1079},{"style":643},[1080],{"type":565,"value":1081},");\n",{"type":560,"tag":624,"props":1083,"children":1084},{"class":626,"line":743},[1085],{"type":560,"tag":624,"props":1086,"children":1087},{"style":643},[1088],{"type":565,"value":695},{"type":560,"tag":624,"props":1090,"children":1091},{"class":626,"line":887},[1092],{"type":560,"tag":624,"props":1093,"children":1094},{"style":643},[1095],{"type":565,"value":749},{"type":560,"tag":624,"props":1097,"children":1098},{"class":626,"line":895},[1099],{"type":560,"tag":624,"props":1100,"children":1101},{"emptyLinePlaceholder":702},[1102],{"type":565,"value":705},{"type":560,"tag":624,"props":1104,"children":1106},{"class":626,"line":1105},12,[1107,1111,1116,1121,1125],{"type":560,"tag":624,"props":1108,"children":1109},{"style":631},[1110],{"type":565,"value":634},{"type":560,"tag":624,"props":1112,"children":1113},{"style":637},[1114],{"type":565,"value":1115}," Lion",{"type":560,"tag":624,"props":1117,"children":1118},{"style":631},[1119],{"type":565,"value":1120}," extends",{"type":560,"tag":624,"props":1122,"children":1123},{"style":653},[1124],{"type":565,"value":939},{"type":560,"tag":624,"props":1126,"children":1127},{"style":643},[1128],{"type":565,"value":646},{"type":560,"tag":624,"props":1130,"children":1132},{"class":626,"line":1131},13,[1133,1137,1141],{"type":560,"tag":624,"props":1134,"children":1135},{"style":653},[1136],{"type":565,"value":1023},{"type":560,"tag":624,"props":1138,"children":1139},{"style":643},[1140],{"type":565,"value":719},{"type":560,"tag":624,"props":1142,"children":1143},{"style":643},[1144],{"type":565,"value":646},{"type":560,"tag":624,"props":1146,"children":1148},{"class":626,"line":1147},14,[1149,1153,1157,1161,1165,1169,1174,1178],{"type":560,"tag":624,"props":1150,"children":1151},{"style":664},[1152],{"type":565,"value":1047},{"type":560,"tag":624,"props":1154,"children":1155},{"style":643},[1156],{"type":565,"value":982},{"type":560,"tag":624,"props":1158,"children":1159},{"style":653},[1160],{"type":565,"value":1056},{"type":560,"tag":624,"props":1162,"children":1163},{"style":643},[1164],{"type":565,"value":661},{"type":560,"tag":624,"props":1166,"children":1167},{"style":1063},[1168],{"type":565,"value":1066},{"type":560,"tag":624,"props":1170,"children":1171},{"style":1069},[1172],{"type":565,"value":1173},"Roar!",{"type":560,"tag":624,"props":1175,"children":1176},{"style":1063},[1177],{"type":565,"value":1066},{"type":560,"tag":624,"props":1179,"children":1180},{"style":643},[1181],{"type":565,"value":1081},{"type":560,"tag":624,"props":1183,"children":1185},{"class":626,"line":1184},15,[1186],{"type":560,"tag":624,"props":1187,"children":1188},{"style":643},[1189],{"type":565,"value":695},{"type":560,"tag":624,"props":1191,"children":1193},{"class":626,"line":1192},16,[1194],{"type":560,"tag":624,"props":1195,"children":1196},{"style":643},[1197],{"type":565,"value":749},{"type":560,"tag":624,"props":1199,"children":1201},{"class":626,"line":1200},17,[1202],{"type":560,"tag":624,"props":1203,"children":1204},{"emptyLinePlaceholder":702},[1205],{"type":565,"value":705},{"type":560,"tag":624,"props":1207,"children":1209},{"class":626,"line":1208},18,[1210,1214,1219,1223,1227],{"type":560,"tag":624,"props":1211,"children":1212},{"style":631},[1213],{"type":565,"value":634},{"type":560,"tag":624,"props":1215,"children":1216},{"style":637},[1217],{"type":565,"value":1218}," Elephant",{"type":560,"tag":624,"props":1220,"children":1221},{"style":631},[1222],{"type":565,"value":1120},{"type":560,"tag":624,"props":1224,"children":1225},{"style":653},[1226],{"type":565,"value":939},{"type":560,"tag":624,"props":1228,"children":1229},{"style":643},[1230],{"type":565,"value":646},{"type":560,"tag":624,"props":1232,"children":1234},{"class":626,"line":1233},19,[1235,1239,1243],{"type":560,"tag":624,"props":1236,"children":1237},{"style":653},[1238],{"type":565,"value":1023},{"type":560,"tag":624,"props":1240,"children":1241},{"style":643},[1242],{"type":565,"value":719},{"type":560,"tag":624,"props":1244,"children":1245},{"style":643},[1246],{"type":565,"value":646},{"type":560,"tag":624,"props":1248,"children":1250},{"class":626,"line":1249},20,[1251,1255,1259,1263,1267,1271,1276,1280],{"type":560,"tag":624,"props":1252,"children":1253},{"style":664},[1254],{"type":565,"value":1047},{"type":560,"tag":624,"props":1256,"children":1257},{"style":643},[1258],{"type":565,"value":982},{"type":560,"tag":624,"props":1260,"children":1261},{"style":653},[1262],{"type":565,"value":1056},{"type":560,"tag":624,"props":1264,"children":1265},{"style":643},[1266],{"type":565,"value":661},{"type":560,"tag":624,"props":1268,"children":1269},{"style":1063},[1270],{"type":565,"value":1066},{"type":560,"tag":624,"props":1272,"children":1273},{"style":1069},[1274],{"type":565,"value":1275},"Trumpet!",{"type":560,"tag":624,"props":1277,"children":1278},{"style":1063},[1279],{"type":565,"value":1066},{"type":560,"tag":624,"props":1281,"children":1282},{"style":643},[1283],{"type":565,"value":1081},{"type":560,"tag":624,"props":1285,"children":1287},{"class":626,"line":1286},21,[1288],{"type":560,"tag":624,"props":1289,"children":1290},{"style":643},[1291],{"type":565,"value":695},{"type":560,"tag":624,"props":1293,"children":1295},{"class":626,"line":1294},22,[1296],{"type":560,"tag":624,"props":1297,"children":1298},{"style":643},[1299],{"type":565,"value":749},{"type":560,"tag":561,"props":1301,"children":1302},{},[1303],{"type":565,"value":1304},"在这个设计中，Animal 类是一个基类，而 Lion 和 Elephant 是它的子类。每个动物都有自己的叫声，通过重写 makeSound 方法来实现。",{"type":560,"tag":561,"props":1306,"children":1307},{},[1308],{"type":565,"value":1309},"现在，假设我们要添加一些新的动物，比如鹦鹉和狗，按照开放/封闭原则，我们应该扩展而不是修改现有的代码：",{"type":560,"tag":613,"props":1311,"children":1313},{"className":615,"code":1312,"language":617,"meta":554,"style":554},"class Parrot extends Animal {\n  makeSound() {\n    console.log(\"Squawk!\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Bark!\");\n  }\n}\n",[1314],{"type":560,"tag":620,"props":1315,"children":1316},{"__ignoreMap":554},[1317,1341,1356,1392,1399,1406,1413,1437,1452,1488,1495],{"type":560,"tag":624,"props":1318,"children":1319},{"class":626,"line":627},[1320,1324,1329,1333,1337],{"type":560,"tag":624,"props":1321,"children":1322},{"style":631},[1323],{"type":565,"value":634},{"type":560,"tag":624,"props":1325,"children":1326},{"style":637},[1327],{"type":565,"value":1328}," Parrot",{"type":560,"tag":624,"props":1330,"children":1331},{"style":631},[1332],{"type":565,"value":1120},{"type":560,"tag":624,"props":1334,"children":1335},{"style":653},[1336],{"type":565,"value":939},{"type":560,"tag":624,"props":1338,"children":1339},{"style":643},[1340],{"type":565,"value":646},{"type":560,"tag":624,"props":1342,"children":1343},{"class":626,"line":649},[1344,1348,1352],{"type":560,"tag":624,"props":1345,"children":1346},{"style":653},[1347],{"type":565,"value":1023},{"type":560,"tag":624,"props":1349,"children":1350},{"style":643},[1351],{"type":565,"value":719},{"type":560,"tag":624,"props":1353,"children":1354},{"style":643},[1355],{"type":565,"value":646},{"type":560,"tag":624,"props":1357,"children":1358},{"class":626,"line":679},[1359,1363,1367,1371,1375,1379,1384,1388],{"type":560,"tag":624,"props":1360,"children":1361},{"style":664},[1362],{"type":565,"value":1047},{"type":560,"tag":624,"props":1364,"children":1365},{"style":643},[1366],{"type":565,"value":982},{"type":560,"tag":624,"props":1368,"children":1369},{"style":653},[1370],{"type":565,"value":1056},{"type":560,"tag":624,"props":1372,"children":1373},{"style":643},[1374],{"type":565,"value":661},{"type":560,"tag":624,"props":1376,"children":1377},{"style":1063},[1378],{"type":565,"value":1066},{"type":560,"tag":624,"props":1380,"children":1381},{"style":1069},[1382],{"type":565,"value":1383},"Squawk!",{"type":560,"tag":624,"props":1385,"children":1386},{"style":1063},[1387],{"type":565,"value":1066},{"type":560,"tag":624,"props":1389,"children":1390},{"style":643},[1391],{"type":565,"value":1081},{"type":560,"tag":624,"props":1393,"children":1394},{"class":626,"line":689},[1395],{"type":560,"tag":624,"props":1396,"children":1397},{"style":643},[1398],{"type":565,"value":695},{"type":560,"tag":624,"props":1400,"children":1401},{"class":626,"line":698},[1402],{"type":560,"tag":624,"props":1403,"children":1404},{"style":643},[1405],{"type":565,"value":749},{"type":560,"tag":624,"props":1407,"children":1408},{"class":626,"line":708},[1409],{"type":560,"tag":624,"props":1410,"children":1411},{"emptyLinePlaceholder":702},[1412],{"type":565,"value":705},{"type":560,"tag":624,"props":1414,"children":1415},{"class":626,"line":726},[1416,1420,1425,1429,1433],{"type":560,"tag":624,"props":1417,"children":1418},{"style":631},[1419],{"type":565,"value":634},{"type":560,"tag":624,"props":1421,"children":1422},{"style":637},[1423],{"type":565,"value":1424}," Dog",{"type":560,"tag":624,"props":1426,"children":1427},{"style":631},[1428],{"type":565,"value":1120},{"type":560,"tag":624,"props":1430,"children":1431},{"style":653},[1432],{"type":565,"value":939},{"type":560,"tag":624,"props":1434,"children":1435},{"style":643},[1436],{"type":565,"value":646},{"type":560,"tag":624,"props":1438,"children":1439},{"class":626,"line":735},[1440,1444,1448],{"type":560,"tag":624,"props":1441,"children":1442},{"style":653},[1443],{"type":565,"value":1023},{"type":560,"tag":624,"props":1445,"children":1446},{"style":643},[1447],{"type":565,"value":719},{"type":560,"tag":624,"props":1449,"children":1450},{"style":643},[1451],{"type":565,"value":646},{"type":560,"tag":624,"props":1453,"children":1454},{"class":626,"line":743},[1455,1459,1463,1467,1471,1475,1480,1484],{"type":560,"tag":624,"props":1456,"children":1457},{"style":664},[1458],{"type":565,"value":1047},{"type":560,"tag":624,"props":1460,"children":1461},{"style":643},[1462],{"type":565,"value":982},{"type":560,"tag":624,"props":1464,"children":1465},{"style":653},[1466],{"type":565,"value":1056},{"type":560,"tag":624,"props":1468,"children":1469},{"style":643},[1470],{"type":565,"value":661},{"type":560,"tag":624,"props":1472,"children":1473},{"style":1063},[1474],{"type":565,"value":1066},{"type":560,"tag":624,"props":1476,"children":1477},{"style":1069},[1478],{"type":565,"value":1479},"Bark!",{"type":560,"tag":624,"props":1481,"children":1482},{"style":1063},[1483],{"type":565,"value":1066},{"type":560,"tag":624,"props":1485,"children":1486},{"style":643},[1487],{"type":565,"value":1081},{"type":560,"tag":624,"props":1489,"children":1490},{"class":626,"line":887},[1491],{"type":560,"tag":624,"props":1492,"children":1493},{"style":643},[1494],{"type":565,"value":695},{"type":560,"tag":624,"props":1496,"children":1497},{"class":626,"line":895},[1498],{"type":560,"tag":624,"props":1499,"children":1500},{"style":643},[1501],{"type":565,"value":749},{"type":560,"tag":561,"props":1503,"children":1504},{},[1505],{"type":565,"value":1506},"这样，我们通过扩展 Animal 类，而不是修改它，来添加新的功能（新的动物）。这符合开放/封闭原则，因为我们对于现有代码的修改是关闭的，我们只是通过扩展来引入新的功能。",{"type":560,"tag":561,"props":1508,"children":1509},{},[1510],{"type":565,"value":1511},"使用开放/封闭原则可以使代码更加稳定，降低对现有代码的影响，同时也更容易应对变化和扩展。",{"type":560,"tag":602,"props":1513,"children":1515},{"id":1514},"里式替换原则",[1516],{"type":565,"value":1514},{"type":560,"tag":561,"props":1518,"children":1519},{},[1520],{"type":565,"value":1521},"里氏替换原则（Liskov Substitution Principle，LSP） 是 SOLID 原则之一，它强调子类型（派生类或子类）必须能够替换掉它们的基类型（基类或父类）并出现在基类能够工作的任何地方，而不破坏程序的正确性。",{"type":560,"tag":561,"props":1523,"children":1524},{},[1525],{"type":565,"value":1526},"通俗地说，如果一个类是基类的子类，那么在任何需要基类的地方，都可以使用这个子类而不产生错误。子类应该保持基类的行为，并且可以扩展或修改基类的行为，但不应该破坏基类原有的约定。",{"type":560,"tag":561,"props":1528,"children":1529},{},[1530],{"type":565,"value":1531},"假设我们有一个表示矩形的基类 Rectangle：",{"type":560,"tag":613,"props":1533,"children":1535},{"className":615,"code":1534,"language":617,"meta":554,"style":554},"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n",[1536],{"type":560,"tag":620,"props":1537,"children":1538},{"__ignoreMap":554},[1539,1555,1589,1617,1645,1652,1659,1683,1710,1717,1724,1748,1775,1782,1789,1805,1848,1855],{"type":560,"tag":624,"props":1540,"children":1541},{"class":626,"line":627},[1542,1546,1551],{"type":560,"tag":624,"props":1543,"children":1544},{"style":631},[1545],{"type":565,"value":634},{"type":560,"tag":624,"props":1547,"children":1548},{"style":637},[1549],{"type":565,"value":1550}," Rectangle",{"type":560,"tag":624,"props":1552,"children":1553},{"style":643},[1554],{"type":565,"value":646},{"type":560,"tag":624,"props":1556,"children":1557},{"class":626,"line":649},[1558,1562,1566,1571,1576,1581,1585],{"type":560,"tag":624,"props":1559,"children":1560},{"style":631},[1561],{"type":565,"value":951},{"type":560,"tag":624,"props":1563,"children":1564},{"style":643},[1565],{"type":565,"value":661},{"type":560,"tag":624,"props":1567,"children":1568},{"style":664},[1569],{"type":565,"value":1570},"width",{"type":560,"tag":624,"props":1572,"children":1573},{"style":643},[1574],{"type":565,"value":1575},",",{"type":560,"tag":624,"props":1577,"children":1578},{"style":664},[1579],{"type":565,"value":1580}," height",{"type":560,"tag":624,"props":1582,"children":1583},{"style":643},[1584],{"type":565,"value":672},{"type":560,"tag":624,"props":1586,"children":1587},{"style":643},[1588],{"type":565,"value":646},{"type":560,"tag":624,"props":1590,"children":1591},{"class":626,"line":679},[1592,1596,1600,1604,1608,1613],{"type":560,"tag":624,"props":1593,"children":1594},{"style":974},[1595],{"type":565,"value":977},{"type":560,"tag":624,"props":1597,"children":1598},{"style":643},[1599],{"type":565,"value":982},{"type":560,"tag":624,"props":1601,"children":1602},{"style":664},[1603],{"type":565,"value":1570},{"type":560,"tag":624,"props":1605,"children":1606},{"style":643},[1607],{"type":565,"value":991},{"type":560,"tag":624,"props":1609,"children":1610},{"style":664},[1611],{"type":565,"value":1612}," width",{"type":560,"tag":624,"props":1614,"children":1615},{"style":643},[1616],{"type":565,"value":1001},{"type":560,"tag":624,"props":1618,"children":1619},{"class":626,"line":689},[1620,1624,1628,1633,1637,1641],{"type":560,"tag":624,"props":1621,"children":1622},{"style":974},[1623],{"type":565,"value":977},{"type":560,"tag":624,"props":1625,"children":1626},{"style":643},[1627],{"type":565,"value":982},{"type":560,"tag":624,"props":1629,"children":1630},{"style":664},[1631],{"type":565,"value":1632},"height",{"type":560,"tag":624,"props":1634,"children":1635},{"style":643},[1636],{"type":565,"value":991},{"type":560,"tag":624,"props":1638,"children":1639},{"style":664},[1640],{"type":565,"value":1580},{"type":560,"tag":624,"props":1642,"children":1643},{"style":643},[1644],{"type":565,"value":1001},{"type":560,"tag":624,"props":1646,"children":1647},{"class":626,"line":698},[1648],{"type":560,"tag":624,"props":1649,"children":1650},{"style":643},[1651],{"type":565,"value":695},{"type":560,"tag":624,"props":1653,"children":1654},{"class":626,"line":708},[1655],{"type":560,"tag":624,"props":1656,"children":1657},{"emptyLinePlaceholder":702},[1658],{"type":565,"value":705},{"type":560,"tag":624,"props":1660,"children":1661},{"class":626,"line":726},[1662,1667,1671,1675,1679],{"type":560,"tag":624,"props":1663,"children":1664},{"style":653},[1665],{"type":565,"value":1666},"  setWidth",{"type":560,"tag":624,"props":1668,"children":1669},{"style":643},[1670],{"type":565,"value":661},{"type":560,"tag":624,"props":1672,"children":1673},{"style":664},[1674],{"type":565,"value":1570},{"type":560,"tag":624,"props":1676,"children":1677},{"style":643},[1678],{"type":565,"value":672},{"type":560,"tag":624,"props":1680,"children":1681},{"style":643},[1682],{"type":565,"value":646},{"type":560,"tag":624,"props":1684,"children":1685},{"class":626,"line":735},[1686,1690,1694,1698,1702,1706],{"type":560,"tag":624,"props":1687,"children":1688},{"style":974},[1689],{"type":565,"value":977},{"type":560,"tag":624,"props":1691,"children":1692},{"style":643},[1693],{"type":565,"value":982},{"type":560,"tag":624,"props":1695,"children":1696},{"style":664},[1697],{"type":565,"value":1570},{"type":560,"tag":624,"props":1699,"children":1700},{"style":643},[1701],{"type":565,"value":991},{"type":560,"tag":624,"props":1703,"children":1704},{"style":664},[1705],{"type":565,"value":1612},{"type":560,"tag":624,"props":1707,"children":1708},{"style":643},[1709],{"type":565,"value":1001},{"type":560,"tag":624,"props":1711,"children":1712},{"class":626,"line":743},[1713],{"type":560,"tag":624,"props":1714,"children":1715},{"style":643},[1716],{"type":565,"value":695},{"type":560,"tag":624,"props":1718,"children":1719},{"class":626,"line":887},[1720],{"type":560,"tag":624,"props":1721,"children":1722},{"emptyLinePlaceholder":702},[1723],{"type":565,"value":705},{"type":560,"tag":624,"props":1725,"children":1726},{"class":626,"line":895},[1727,1732,1736,1740,1744],{"type":560,"tag":624,"props":1728,"children":1729},{"style":653},[1730],{"type":565,"value":1731},"  setHeight",{"type":560,"tag":624,"props":1733,"children":1734},{"style":643},[1735],{"type":565,"value":661},{"type":560,"tag":624,"props":1737,"children":1738},{"style":664},[1739],{"type":565,"value":1632},{"type":560,"tag":624,"props":1741,"children":1742},{"style":643},[1743],{"type":565,"value":672},{"type":560,"tag":624,"props":1745,"children":1746},{"style":643},[1747],{"type":565,"value":646},{"type":560,"tag":624,"props":1749,"children":1750},{"class":626,"line":1105},[1751,1755,1759,1763,1767,1771],{"type":560,"tag":624,"props":1752,"children":1753},{"style":974},[1754],{"type":565,"value":977},{"type":560,"tag":624,"props":1756,"children":1757},{"style":643},[1758],{"type":565,"value":982},{"type":560,"tag":624,"props":1760,"children":1761},{"style":664},[1762],{"type":565,"value":1632},{"type":560,"tag":624,"props":1764,"children":1765},{"style":643},[1766],{"type":565,"value":991},{"type":560,"tag":624,"props":1768,"children":1769},{"style":664},[1770],{"type":565,"value":1580},{"type":560,"tag":624,"props":1772,"children":1773},{"style":643},[1774],{"type":565,"value":1001},{"type":560,"tag":624,"props":1776,"children":1777},{"class":626,"line":1131},[1778],{"type":560,"tag":624,"props":1779,"children":1780},{"style":643},[1781],{"type":565,"value":695},{"type":560,"tag":624,"props":1783,"children":1784},{"class":626,"line":1147},[1785],{"type":560,"tag":624,"props":1786,"children":1787},{"emptyLinePlaceholder":702},[1788],{"type":565,"value":705},{"type":560,"tag":624,"props":1790,"children":1791},{"class":626,"line":1184},[1792,1797,1801],{"type":560,"tag":624,"props":1793,"children":1794},{"style":653},[1795],{"type":565,"value":1796},"  getArea",{"type":560,"tag":624,"props":1798,"children":1799},{"style":643},[1800],{"type":565,"value":719},{"type":560,"tag":624,"props":1802,"children":1803},{"style":643},[1804],{"type":565,"value":646},{"type":560,"tag":624,"props":1806,"children":1807},{"class":626,"line":1192},[1808,1814,1819,1823,1827,1832,1836,1840,1844],{"type":560,"tag":624,"props":1809,"children":1811},{"style":1810},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1812],{"type":565,"value":1813},"    return",{"type":560,"tag":624,"props":1815,"children":1816},{"style":974},[1817],{"type":565,"value":1818}," this",{"type":560,"tag":624,"props":1820,"children":1821},{"style":643},[1822],{"type":565,"value":982},{"type":560,"tag":624,"props":1824,"children":1825},{"style":664},[1826],{"type":565,"value":1570},{"type":560,"tag":624,"props":1828,"children":1829},{"style":631},[1830],{"type":565,"value":1831}," *",{"type":560,"tag":624,"props":1833,"children":1834},{"style":974},[1835],{"type":565,"value":1818},{"type":560,"tag":624,"props":1837,"children":1838},{"style":643},[1839],{"type":565,"value":982},{"type":560,"tag":624,"props":1841,"children":1842},{"style":664},[1843],{"type":565,"value":1632},{"type":560,"tag":624,"props":1845,"children":1846},{"style":643},[1847],{"type":565,"value":1001},{"type":560,"tag":624,"props":1849,"children":1850},{"class":626,"line":1200},[1851],{"type":560,"tag":624,"props":1852,"children":1853},{"style":643},[1854],{"type":565,"value":695},{"type":560,"tag":624,"props":1856,"children":1857},{"class":626,"line":1208},[1858],{"type":560,"tag":624,"props":1859,"children":1860},{"style":643},[1861],{"type":565,"value":749},{"type":560,"tag":561,"props":1863,"children":1864},{},[1865],{"type":565,"value":1866},"现在，我们创建了一个子类 Square 继承自 Rectangle，表示正方形。在正方形中，宽和高应该始终相等。",{"type":560,"tag":613,"props":1868,"children":1870},{"className":615,"code":1869,"language":617,"meta":554,"style":554},"class Square extends Rectangle {\n  setWidth(width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  setHeight(height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n",[1871],{"type":560,"tag":620,"props":1872,"children":1873},{"__ignoreMap":554},[1874,1898,1921,1950,1978,1985,1992,2015,2042,2069,2076],{"type":560,"tag":624,"props":1875,"children":1876},{"class":626,"line":627},[1877,1881,1886,1890,1894],{"type":560,"tag":624,"props":1878,"children":1879},{"style":631},[1880],{"type":565,"value":634},{"type":560,"tag":624,"props":1882,"children":1883},{"style":637},[1884],{"type":565,"value":1885}," Square",{"type":560,"tag":624,"props":1887,"children":1888},{"style":631},[1889],{"type":565,"value":1120},{"type":560,"tag":624,"props":1891,"children":1892},{"style":653},[1893],{"type":565,"value":1550},{"type":560,"tag":624,"props":1895,"children":1896},{"style":643},[1897],{"type":565,"value":646},{"type":560,"tag":624,"props":1899,"children":1900},{"class":626,"line":649},[1901,1905,1909,1913,1917],{"type":560,"tag":624,"props":1902,"children":1903},{"style":653},[1904],{"type":565,"value":1666},{"type":560,"tag":624,"props":1906,"children":1907},{"style":643},[1908],{"type":565,"value":661},{"type":560,"tag":624,"props":1910,"children":1911},{"style":664},[1912],{"type":565,"value":1570},{"type":560,"tag":624,"props":1914,"children":1915},{"style":643},[1916],{"type":565,"value":672},{"type":560,"tag":624,"props":1918,"children":1919},{"style":643},[1920],{"type":565,"value":646},{"type":560,"tag":624,"props":1922,"children":1923},{"class":626,"line":679},[1924,1929,1933,1938,1942,1946],{"type":560,"tag":624,"props":1925,"children":1926},{"style":974},[1927],{"type":565,"value":1928},"    super",{"type":560,"tag":624,"props":1930,"children":1931},{"style":643},[1932],{"type":565,"value":982},{"type":560,"tag":624,"props":1934,"children":1935},{"style":653},[1936],{"type":565,"value":1937},"setWidth",{"type":560,"tag":624,"props":1939,"children":1940},{"style":643},[1941],{"type":565,"value":661},{"type":560,"tag":624,"props":1943,"children":1944},{"style":664},[1945],{"type":565,"value":1570},{"type":560,"tag":624,"props":1947,"children":1948},{"style":643},[1949],{"type":565,"value":1081},{"type":560,"tag":624,"props":1951,"children":1952},{"class":626,"line":689},[1953,1957,1961,1966,1970,1974],{"type":560,"tag":624,"props":1954,"children":1955},{"style":974},[1956],{"type":565,"value":1928},{"type":560,"tag":624,"props":1958,"children":1959},{"style":643},[1960],{"type":565,"value":982},{"type":560,"tag":624,"props":1962,"children":1963},{"style":653},[1964],{"type":565,"value":1965},"setHeight",{"type":560,"tag":624,"props":1967,"children":1968},{"style":643},[1969],{"type":565,"value":661},{"type":560,"tag":624,"props":1971,"children":1972},{"style":664},[1973],{"type":565,"value":1570},{"type":560,"tag":624,"props":1975,"children":1976},{"style":643},[1977],{"type":565,"value":1081},{"type":560,"tag":624,"props":1979,"children":1980},{"class":626,"line":698},[1981],{"type":560,"tag":624,"props":1982,"children":1983},{"style":643},[1984],{"type":565,"value":695},{"type":560,"tag":624,"props":1986,"children":1987},{"class":626,"line":708},[1988],{"type":560,"tag":624,"props":1989,"children":1990},{"emptyLinePlaceholder":702},[1991],{"type":565,"value":705},{"type":560,"tag":624,"props":1993,"children":1994},{"class":626,"line":726},[1995,1999,2003,2007,2011],{"type":560,"tag":624,"props":1996,"children":1997},{"style":653},[1998],{"type":565,"value":1731},{"type":560,"tag":624,"props":2000,"children":2001},{"style":643},[2002],{"type":565,"value":661},{"type":560,"tag":624,"props":2004,"children":2005},{"style":664},[2006],{"type":565,"value":1632},{"type":560,"tag":624,"props":2008,"children":2009},{"style":643},[2010],{"type":565,"value":672},{"type":560,"tag":624,"props":2012,"children":2013},{"style":643},[2014],{"type":565,"value":646},{"type":560,"tag":624,"props":2016,"children":2017},{"class":626,"line":735},[2018,2022,2026,2030,2034,2038],{"type":560,"tag":624,"props":2019,"children":2020},{"style":974},[2021],{"type":565,"value":1928},{"type":560,"tag":624,"props":2023,"children":2024},{"style":643},[2025],{"type":565,"value":982},{"type":560,"tag":624,"props":2027,"children":2028},{"style":653},[2029],{"type":565,"value":1937},{"type":560,"tag":624,"props":2031,"children":2032},{"style":643},[2033],{"type":565,"value":661},{"type":560,"tag":624,"props":2035,"children":2036},{"style":664},[2037],{"type":565,"value":1632},{"type":560,"tag":624,"props":2039,"children":2040},{"style":643},[2041],{"type":565,"value":1081},{"type":560,"tag":624,"props":2043,"children":2044},{"class":626,"line":743},[2045,2049,2053,2057,2061,2065],{"type":560,"tag":624,"props":2046,"children":2047},{"style":974},[2048],{"type":565,"value":1928},{"type":560,"tag":624,"props":2050,"children":2051},{"style":643},[2052],{"type":565,"value":982},{"type":560,"tag":624,"props":2054,"children":2055},{"style":653},[2056],{"type":565,"value":1965},{"type":560,"tag":624,"props":2058,"children":2059},{"style":643},[2060],{"type":565,"value":661},{"type":560,"tag":624,"props":2062,"children":2063},{"style":664},[2064],{"type":565,"value":1632},{"type":560,"tag":624,"props":2066,"children":2067},{"style":643},[2068],{"type":565,"value":1081},{"type":560,"tag":624,"props":2070,"children":2071},{"class":626,"line":887},[2072],{"type":560,"tag":624,"props":2073,"children":2074},{"style":643},[2075],{"type":565,"value":695},{"type":560,"tag":624,"props":2077,"children":2078},{"class":626,"line":895},[2079],{"type":560,"tag":624,"props":2080,"children":2081},{"style":643},[2082],{"type":565,"value":749},{"type":560,"tag":561,"props":2084,"children":2085},{},[2086],{"type":565,"value":2087},"这里的问题是，Square 子类在修改宽度或高度时，通过覆写 setWidth 和 setHeight 方法，强制宽和高相等，这与基类的行为不一致。如果在需要 Rectangle 的地方使用了 Square，可能会导致程序逻辑错误。",{"type":560,"tag":561,"props":2089,"children":2090},{},[2091],{"type":565,"value":2092},"这违反了里氏替换原则，因为子类修改了父类的预期行为。为了符合里氏替换原则，可能需要重新设计类的继承结构，或者使用更精确的命名来表达实际意图。",{"type":560,"tag":602,"props":2094,"children":2096},{"id":2095},"接口隔离原则",[2097],{"type":565,"value":2095},{"type":560,"tag":561,"props":2099,"children":2100},{},[2101],{"type":565,"value":2102},"接口隔离原则（Interface Segregation Principle，ISP） 是 SOLID 原则之一，它强调一个类不应该被强迫实现它不需要的接口。简而言之，一个类对另一个类的依赖应该建立在最小的接口上。",{"type":560,"tag":561,"props":2104,"children":2105},{},[2106],{"type":565,"value":2107},"在通俗的语言中，接口隔离原则告诉我们不应该让一个类依赖它不需要的接口，否则会导致类需要实现一些它根本不需要的方法。",{"type":560,"tag":561,"props":2109,"children":2110},{},[2111],{"type":565,"value":2112},"举例说明，假设我们有一个动物园的系统，其中有两种动物，一种会飞，一种会游泳：",{"type":560,"tag":613,"props":2114,"children":2116},{"className":615,"code":2115,"language":617,"meta":554,"style":554},"// 不遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n\n  swim() {\n    // 这是一个鸟类不需要的方法，违反接口隔离原则\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n\n  fly() {\n    // 这是一个鱼类不需要的方法，违反接口隔离原则\n  }\n}\n",[2117],{"type":560,"tag":620,"props":2118,"children":2119},{"__ignoreMap":554},[2120,2128,2144,2160,2168,2175,2182,2198,2206,2213,2220,2227,2243,2258,2266,2273,2280,2295,2303,2310],{"type":560,"tag":624,"props":2121,"children":2122},{"class":626,"line":627},[2123],{"type":560,"tag":624,"props":2124,"children":2125},{"style":683},[2126],{"type":565,"value":2127},"// 不遵循接口隔离原则的设计\n",{"type":560,"tag":624,"props":2129,"children":2130},{"class":626,"line":649},[2131,2135,2140],{"type":560,"tag":624,"props":2132,"children":2133},{"style":631},[2134],{"type":565,"value":634},{"type":560,"tag":624,"props":2136,"children":2137},{"style":637},[2138],{"type":565,"value":2139}," Bird",{"type":560,"tag":624,"props":2141,"children":2142},{"style":643},[2143],{"type":565,"value":646},{"type":560,"tag":624,"props":2145,"children":2146},{"class":626,"line":679},[2147,2152,2156],{"type":560,"tag":624,"props":2148,"children":2149},{"style":653},[2150],{"type":565,"value":2151},"  fly",{"type":560,"tag":624,"props":2153,"children":2154},{"style":643},[2155],{"type":565,"value":719},{"type":560,"tag":624,"props":2157,"children":2158},{"style":643},[2159],{"type":565,"value":646},{"type":560,"tag":624,"props":2161,"children":2162},{"class":626,"line":689},[2163],{"type":560,"tag":624,"props":2164,"children":2165},{"style":683},[2166],{"type":565,"value":2167},"    // 实现飞行逻辑\n",{"type":560,"tag":624,"props":2169,"children":2170},{"class":626,"line":698},[2171],{"type":560,"tag":624,"props":2172,"children":2173},{"style":643},[2174],{"type":565,"value":695},{"type":560,"tag":624,"props":2176,"children":2177},{"class":626,"line":708},[2178],{"type":560,"tag":624,"props":2179,"children":2180},{"emptyLinePlaceholder":702},[2181],{"type":565,"value":705},{"type":560,"tag":624,"props":2183,"children":2184},{"class":626,"line":726},[2185,2190,2194],{"type":560,"tag":624,"props":2186,"children":2187},{"style":653},[2188],{"type":565,"value":2189},"  swim",{"type":560,"tag":624,"props":2191,"children":2192},{"style":643},[2193],{"type":565,"value":719},{"type":560,"tag":624,"props":2195,"children":2196},{"style":643},[2197],{"type":565,"value":646},{"type":560,"tag":624,"props":2199,"children":2200},{"class":626,"line":735},[2201],{"type":560,"tag":624,"props":2202,"children":2203},{"style":683},[2204],{"type":565,"value":2205},"    // 这是一个鸟类不需要的方法，违反接口隔离原则\n",{"type":560,"tag":624,"props":2207,"children":2208},{"class":626,"line":743},[2209],{"type":560,"tag":624,"props":2210,"children":2211},{"style":643},[2212],{"type":565,"value":695},{"type":560,"tag":624,"props":2214,"children":2215},{"class":626,"line":887},[2216],{"type":560,"tag":624,"props":2217,"children":2218},{"style":643},[2219],{"type":565,"value":749},{"type":560,"tag":624,"props":2221,"children":2222},{"class":626,"line":895},[2223],{"type":560,"tag":624,"props":2224,"children":2225},{"emptyLinePlaceholder":702},[2226],{"type":565,"value":705},{"type":560,"tag":624,"props":2228,"children":2229},{"class":626,"line":1105},[2230,2234,2239],{"type":560,"tag":624,"props":2231,"children":2232},{"style":631},[2233],{"type":565,"value":634},{"type":560,"tag":624,"props":2235,"children":2236},{"style":637},[2237],{"type":565,"value":2238}," Fish",{"type":560,"tag":624,"props":2240,"children":2241},{"style":643},[2242],{"type":565,"value":646},{"type":560,"tag":624,"props":2244,"children":2245},{"class":626,"line":1131},[2246,2250,2254],{"type":560,"tag":624,"props":2247,"children":2248},{"style":653},[2249],{"type":565,"value":2189},{"type":560,"tag":624,"props":2251,"children":2252},{"style":643},[2253],{"type":565,"value":719},{"type":560,"tag":624,"props":2255,"children":2256},{"style":643},[2257],{"type":565,"value":646},{"type":560,"tag":624,"props":2259,"children":2260},{"class":626,"line":1147},[2261],{"type":560,"tag":624,"props":2262,"children":2263},{"style":683},[2264],{"type":565,"value":2265},"    // 实现游泳逻辑\n",{"type":560,"tag":624,"props":2267,"children":2268},{"class":626,"line":1184},[2269],{"type":560,"tag":624,"props":2270,"children":2271},{"style":643},[2272],{"type":565,"value":695},{"type":560,"tag":624,"props":2274,"children":2275},{"class":626,"line":1192},[2276],{"type":560,"tag":624,"props":2277,"children":2278},{"emptyLinePlaceholder":702},[2279],{"type":565,"value":705},{"type":560,"tag":624,"props":2281,"children":2282},{"class":626,"line":1200},[2283,2287,2291],{"type":560,"tag":624,"props":2284,"children":2285},{"style":653},[2286],{"type":565,"value":2151},{"type":560,"tag":624,"props":2288,"children":2289},{"style":643},[2290],{"type":565,"value":719},{"type":560,"tag":624,"props":2292,"children":2293},{"style":643},[2294],{"type":565,"value":646},{"type":560,"tag":624,"props":2296,"children":2297},{"class":626,"line":1208},[2298],{"type":560,"tag":624,"props":2299,"children":2300},{"style":683},[2301],{"type":565,"value":2302},"    // 这是一个鱼类不需要的方法，违反接口隔离原则\n",{"type":560,"tag":624,"props":2304,"children":2305},{"class":626,"line":1233},[2306],{"type":560,"tag":624,"props":2307,"children":2308},{"style":643},[2309],{"type":565,"value":695},{"type":560,"tag":624,"props":2311,"children":2312},{"class":626,"line":1249},[2313],{"type":560,"tag":624,"props":2314,"children":2315},{"style":643},[2316],{"type":565,"value":749},{"type":560,"tag":561,"props":2318,"children":2319},{},[2320],{"type":565,"value":2321},"在这个例子中，Bird 类实现了 fly 和 swim 两个方法，而 Fish 类也实现了 swim 和 fly 两个方法。这违反了接口隔离原则，因为每个类都被迫实现了它们不需要的方法。",{"type":560,"tag":561,"props":2323,"children":2324},{},[2325],{"type":565,"value":2326},"为了符合接口隔离原则，我们可以将接口拆分成更小的部分，让每个类只实现它们需要的方法：",{"type":560,"tag":613,"props":2328,"children":2330},{"className":615,"code":2329,"language":617,"meta":554,"style":554},"// 遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n}\n",[2331],{"type":560,"tag":620,"props":2332,"children":2333},{"__ignoreMap":554},[2334,2342,2357,2372,2379,2386,2393,2400,2415,2430,2437,2444],{"type":560,"tag":624,"props":2335,"children":2336},{"class":626,"line":627},[2337],{"type":560,"tag":624,"props":2338,"children":2339},{"style":683},[2340],{"type":565,"value":2341},"// 遵循接口隔离原则的设计\n",{"type":560,"tag":624,"props":2343,"children":2344},{"class":626,"line":649},[2345,2349,2353],{"type":560,"tag":624,"props":2346,"children":2347},{"style":631},[2348],{"type":565,"value":634},{"type":560,"tag":624,"props":2350,"children":2351},{"style":637},[2352],{"type":565,"value":2139},{"type":560,"tag":624,"props":2354,"children":2355},{"style":643},[2356],{"type":565,"value":646},{"type":560,"tag":624,"props":2358,"children":2359},{"class":626,"line":679},[2360,2364,2368],{"type":560,"tag":624,"props":2361,"children":2362},{"style":653},[2363],{"type":565,"value":2151},{"type":560,"tag":624,"props":2365,"children":2366},{"style":643},[2367],{"type":565,"value":719},{"type":560,"tag":624,"props":2369,"children":2370},{"style":643},[2371],{"type":565,"value":646},{"type":560,"tag":624,"props":2373,"children":2374},{"class":626,"line":689},[2375],{"type":560,"tag":624,"props":2376,"children":2377},{"style":683},[2378],{"type":565,"value":2167},{"type":560,"tag":624,"props":2380,"children":2381},{"class":626,"line":698},[2382],{"type":560,"tag":624,"props":2383,"children":2384},{"style":643},[2385],{"type":565,"value":695},{"type":560,"tag":624,"props":2387,"children":2388},{"class":626,"line":708},[2389],{"type":560,"tag":624,"props":2390,"children":2391},{"style":643},[2392],{"type":565,"value":749},{"type":560,"tag":624,"props":2394,"children":2395},{"class":626,"line":726},[2396],{"type":560,"tag":624,"props":2397,"children":2398},{"emptyLinePlaceholder":702},[2399],{"type":565,"value":705},{"type":560,"tag":624,"props":2401,"children":2402},{"class":626,"line":735},[2403,2407,2411],{"type":560,"tag":624,"props":2404,"children":2405},{"style":631},[2406],{"type":565,"value":634},{"type":560,"tag":624,"props":2408,"children":2409},{"style":637},[2410],{"type":565,"value":2238},{"type":560,"tag":624,"props":2412,"children":2413},{"style":643},[2414],{"type":565,"value":646},{"type":560,"tag":624,"props":2416,"children":2417},{"class":626,"line":743},[2418,2422,2426],{"type":560,"tag":624,"props":2419,"children":2420},{"style":653},[2421],{"type":565,"value":2189},{"type":560,"tag":624,"props":2423,"children":2424},{"style":643},[2425],{"type":565,"value":719},{"type":560,"tag":624,"props":2427,"children":2428},{"style":643},[2429],{"type":565,"value":646},{"type":560,"tag":624,"props":2431,"children":2432},{"class":626,"line":887},[2433],{"type":560,"tag":624,"props":2434,"children":2435},{"style":683},[2436],{"type":565,"value":2265},{"type":560,"tag":624,"props":2438,"children":2439},{"class":626,"line":895},[2440],{"type":560,"tag":624,"props":2441,"children":2442},{"style":643},[2443],{"type":565,"value":695},{"type":560,"tag":624,"props":2445,"children":2446},{"class":626,"line":1105},[2447],{"type":560,"tag":624,"props":2448,"children":2449},{"style":643},[2450],{"type":565,"value":749},{"type":560,"tag":561,"props":2452,"children":2453},{},[2454],{"type":565,"value":2455},"这样，每个类都只依赖于它们需要的接口，不再强迫实现不必要的方法。接口隔离原则的目标是使接口更具体，更贴近类的实际需求，从而提高系统的灵活性和可维护性。",{"type":560,"tag":602,"props":2457,"children":2459},{"id":2458},"依赖反转原则",[2460],{"type":565,"value":2458},{"type":560,"tag":561,"props":2462,"children":2463},{},[2464],{"type":565,"value":2465},"依赖反转原则（Dependency Inversion Principle，DIP） 是 SOLID 原则之一，它强调高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。",{"type":560,"tag":561,"props":2467,"children":2468},{},[2469],{"type":565,"value":2470},"举例说明，考虑一个简单的报告生成系统，有一个高层模块 ReportGenerator 负责生成报告：",{"type":560,"tag":613,"props":2472,"children":2474},{"className":615,"code":2473,"language":617,"meta":554,"style":554},"// 不遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor() {\n    this.pdfGenerator = new PDFGenerator(); // 依赖于具体的 PDF 生成器\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.pdfGenerator.generatePDF();\n  }\n}\n\nclass PDFGenerator {\n  generatePDF() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n",[2475],{"type":560,"tag":620,"props":2476,"children":2477},{"__ignoreMap":554},[2478,2486,2502,2517,2557,2564,2571,2587,2595,2624,2631,2638,2645,2660,2676,2684,2691],{"type":560,"tag":624,"props":2479,"children":2480},{"class":626,"line":627},[2481],{"type":560,"tag":624,"props":2482,"children":2483},{"style":683},[2484],{"type":565,"value":2485},"// 不遵循依赖反转原则的设计\n",{"type":560,"tag":624,"props":2487,"children":2488},{"class":626,"line":649},[2489,2493,2498],{"type":560,"tag":624,"props":2490,"children":2491},{"style":631},[2492],{"type":565,"value":634},{"type":560,"tag":624,"props":2494,"children":2495},{"style":637},[2496],{"type":565,"value":2497}," ReportGenerator",{"type":560,"tag":624,"props":2499,"children":2500},{"style":643},[2501],{"type":565,"value":646},{"type":560,"tag":624,"props":2503,"children":2504},{"class":626,"line":679},[2505,2509,2513],{"type":560,"tag":624,"props":2506,"children":2507},{"style":631},[2508],{"type":565,"value":951},{"type":560,"tag":624,"props":2510,"children":2511},{"style":643},[2512],{"type":565,"value":719},{"type":560,"tag":624,"props":2514,"children":2515},{"style":643},[2516],{"type":565,"value":646},{"type":560,"tag":624,"props":2518,"children":2519},{"class":626,"line":689},[2520,2524,2528,2533,2537,2542,2547,2552],{"type":560,"tag":624,"props":2521,"children":2522},{"style":974},[2523],{"type":565,"value":977},{"type":560,"tag":624,"props":2525,"children":2526},{"style":643},[2527],{"type":565,"value":982},{"type":560,"tag":624,"props":2529,"children":2530},{"style":664},[2531],{"type":565,"value":2532},"pdfGenerator",{"type":560,"tag":624,"props":2534,"children":2535},{"style":643},[2536],{"type":565,"value":991},{"type":560,"tag":624,"props":2538,"children":2539},{"style":631},[2540],{"type":565,"value":2541}," new",{"type":560,"tag":624,"props":2543,"children":2544},{"style":653},[2545],{"type":565,"value":2546}," PDFGenerator",{"type":560,"tag":624,"props":2548,"children":2549},{"style":643},[2550],{"type":565,"value":2551},"();",{"type":560,"tag":624,"props":2553,"children":2554},{"style":683},[2555],{"type":565,"value":2556}," // 依赖于具体的 PDF 生成器\n",{"type":560,"tag":624,"props":2558,"children":2559},{"class":626,"line":698},[2560],{"type":560,"tag":624,"props":2561,"children":2562},{"style":643},[2563],{"type":565,"value":695},{"type":560,"tag":624,"props":2565,"children":2566},{"class":626,"line":708},[2567],{"type":560,"tag":624,"props":2568,"children":2569},{"emptyLinePlaceholder":702},[2570],{"type":565,"value":705},{"type":560,"tag":624,"props":2572,"children":2573},{"class":626,"line":726},[2574,2579,2583],{"type":560,"tag":624,"props":2575,"children":2576},{"style":653},[2577],{"type":565,"value":2578},"  generateReport",{"type":560,"tag":624,"props":2580,"children":2581},{"style":643},[2582],{"type":565,"value":719},{"type":560,"tag":624,"props":2584,"children":2585},{"style":643},[2586],{"type":565,"value":646},{"type":560,"tag":624,"props":2588,"children":2589},{"class":626,"line":735},[2590],{"type":560,"tag":624,"props":2591,"children":2592},{"style":683},[2593],{"type":565,"value":2594},"    // 生成报告的逻辑\n",{"type":560,"tag":624,"props":2596,"children":2597},{"class":626,"line":743},[2598,2602,2606,2610,2614,2619],{"type":560,"tag":624,"props":2599,"children":2600},{"style":974},[2601],{"type":565,"value":977},{"type":560,"tag":624,"props":2603,"children":2604},{"style":643},[2605],{"type":565,"value":982},{"type":560,"tag":624,"props":2607,"children":2608},{"style":664},[2609],{"type":565,"value":2532},{"type":560,"tag":624,"props":2611,"children":2612},{"style":643},[2613],{"type":565,"value":982},{"type":560,"tag":624,"props":2615,"children":2616},{"style":653},[2617],{"type":565,"value":2618},"generatePDF",{"type":560,"tag":624,"props":2620,"children":2621},{"style":643},[2622],{"type":565,"value":2623},"();\n",{"type":560,"tag":624,"props":2625,"children":2626},{"class":626,"line":887},[2627],{"type":560,"tag":624,"props":2628,"children":2629},{"style":643},[2630],{"type":565,"value":695},{"type":560,"tag":624,"props":2632,"children":2633},{"class":626,"line":895},[2634],{"type":560,"tag":624,"props":2635,"children":2636},{"style":643},[2637],{"type":565,"value":749},{"type":560,"tag":624,"props":2639,"children":2640},{"class":626,"line":1105},[2641],{"type":560,"tag":624,"props":2642,"children":2643},{"emptyLinePlaceholder":702},[2644],{"type":565,"value":705},{"type":560,"tag":624,"props":2646,"children":2647},{"class":626,"line":1131},[2648,2652,2656],{"type":560,"tag":624,"props":2649,"children":2650},{"style":631},[2651],{"type":565,"value":634},{"type":560,"tag":624,"props":2653,"children":2654},{"style":637},[2655],{"type":565,"value":2546},{"type":560,"tag":624,"props":2657,"children":2658},{"style":643},[2659],{"type":565,"value":646},{"type":560,"tag":624,"props":2661,"children":2662},{"class":626,"line":1147},[2663,2668,2672],{"type":560,"tag":624,"props":2664,"children":2665},{"style":653},[2666],{"type":565,"value":2667},"  generatePDF",{"type":560,"tag":624,"props":2669,"children":2670},{"style":643},[2671],{"type":565,"value":719},{"type":560,"tag":624,"props":2673,"children":2674},{"style":643},[2675],{"type":565,"value":646},{"type":560,"tag":624,"props":2677,"children":2678},{"class":626,"line":1184},[2679],{"type":560,"tag":624,"props":2680,"children":2681},{"style":683},[2682],{"type":565,"value":2683},"    // 具体的 PDF 生成逻辑\n",{"type":560,"tag":624,"props":2685,"children":2686},{"class":626,"line":1192},[2687],{"type":560,"tag":624,"props":2688,"children":2689},{"style":643},[2690],{"type":565,"value":695},{"type":560,"tag":624,"props":2692,"children":2693},{"class":626,"line":1200},[2694],{"type":560,"tag":624,"props":2695,"children":2696},{"style":643},[2697],{"type":565,"value":749},{"type":560,"tag":561,"props":2699,"children":2700},{},[2701],{"type":565,"value":2702},"在这个设计中，ReportGenerator 直接依赖于具体的 PDFGenerator 类，这违反了依赖反转原则。如果我们想使用其他类型的报告生成器，例如 HTMLGenerator，就需要修改 ReportGenerator 类。",{"type":560,"tag":561,"props":2704,"children":2705},{},[2706],{"type":565,"value":2707},"为了符合依赖反转原则，我们应该通过抽象来解耦高层和低层模块：",{"type":560,"tag":613,"props":2709,"children":2711},{"className":615,"code":2710,"language":617,"meta":554,"style":554},"// 遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor(generator) {\n    this.generator = generator; // 依赖于抽象的报告生成器接口\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.generator.generate();\n  }\n}\n\nclass PDFGenerator {\n  generate() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n\nclass HTMLGenerator {\n  generate() {\n    // 具体的 HTML 生成逻辑\n  }\n}\n",[2712],{"type":560,"tag":620,"props":2713,"children":2714},{"__ignoreMap":554},[2715,2723,2738,2762,2796,2803,2810,2825,2832,2860,2867,2874,2881,2896,2912,2919,2926,2933,2940,2956,2971,2979,2986],{"type":560,"tag":624,"props":2716,"children":2717},{"class":626,"line":627},[2718],{"type":560,"tag":624,"props":2719,"children":2720},{"style":683},[2721],{"type":565,"value":2722},"// 遵循依赖反转原则的设计\n",{"type":560,"tag":624,"props":2724,"children":2725},{"class":626,"line":649},[2726,2730,2734],{"type":560,"tag":624,"props":2727,"children":2728},{"style":631},[2729],{"type":565,"value":634},{"type":560,"tag":624,"props":2731,"children":2732},{"style":637},[2733],{"type":565,"value":2497},{"type":560,"tag":624,"props":2735,"children":2736},{"style":643},[2737],{"type":565,"value":646},{"type":560,"tag":624,"props":2739,"children":2740},{"class":626,"line":679},[2741,2745,2749,2754,2758],{"type":560,"tag":624,"props":2742,"children":2743},{"style":631},[2744],{"type":565,"value":951},{"type":560,"tag":624,"props":2746,"children":2747},{"style":643},[2748],{"type":565,"value":661},{"type":560,"tag":624,"props":2750,"children":2751},{"style":664},[2752],{"type":565,"value":2753},"generator",{"type":560,"tag":624,"props":2755,"children":2756},{"style":643},[2757],{"type":565,"value":672},{"type":560,"tag":624,"props":2759,"children":2760},{"style":643},[2761],{"type":565,"value":646},{"type":560,"tag":624,"props":2763,"children":2764},{"class":626,"line":689},[2765,2769,2773,2777,2781,2786,2791],{"type":560,"tag":624,"props":2766,"children":2767},{"style":974},[2768],{"type":565,"value":977},{"type":560,"tag":624,"props":2770,"children":2771},{"style":643},[2772],{"type":565,"value":982},{"type":560,"tag":624,"props":2774,"children":2775},{"style":664},[2776],{"type":565,"value":2753},{"type":560,"tag":624,"props":2778,"children":2779},{"style":643},[2780],{"type":565,"value":991},{"type":560,"tag":624,"props":2782,"children":2783},{"style":664},[2784],{"type":565,"value":2785}," generator",{"type":560,"tag":624,"props":2787,"children":2788},{"style":643},[2789],{"type":565,"value":2790},";",{"type":560,"tag":624,"props":2792,"children":2793},{"style":683},[2794],{"type":565,"value":2795}," // 依赖于抽象的报告生成器接口\n",{"type":560,"tag":624,"props":2797,"children":2798},{"class":626,"line":698},[2799],{"type":560,"tag":624,"props":2800,"children":2801},{"style":643},[2802],{"type":565,"value":695},{"type":560,"tag":624,"props":2804,"children":2805},{"class":626,"line":708},[2806],{"type":560,"tag":624,"props":2807,"children":2808},{"emptyLinePlaceholder":702},[2809],{"type":565,"value":705},{"type":560,"tag":624,"props":2811,"children":2812},{"class":626,"line":726},[2813,2817,2821],{"type":560,"tag":624,"props":2814,"children":2815},{"style":653},[2816],{"type":565,"value":2578},{"type":560,"tag":624,"props":2818,"children":2819},{"style":643},[2820],{"type":565,"value":719},{"type":560,"tag":624,"props":2822,"children":2823},{"style":643},[2824],{"type":565,"value":646},{"type":560,"tag":624,"props":2826,"children":2827},{"class":626,"line":735},[2828],{"type":560,"tag":624,"props":2829,"children":2830},{"style":683},[2831],{"type":565,"value":2594},{"type":560,"tag":624,"props":2833,"children":2834},{"class":626,"line":743},[2835,2839,2843,2847,2851,2856],{"type":560,"tag":624,"props":2836,"children":2837},{"style":974},[2838],{"type":565,"value":977},{"type":560,"tag":624,"props":2840,"children":2841},{"style":643},[2842],{"type":565,"value":982},{"type":560,"tag":624,"props":2844,"children":2845},{"style":664},[2846],{"type":565,"value":2753},{"type":560,"tag":624,"props":2848,"children":2849},{"style":643},[2850],{"type":565,"value":982},{"type":560,"tag":624,"props":2852,"children":2853},{"style":653},[2854],{"type":565,"value":2855},"generate",{"type":560,"tag":624,"props":2857,"children":2858},{"style":643},[2859],{"type":565,"value":2623},{"type":560,"tag":624,"props":2861,"children":2862},{"class":626,"line":887},[2863],{"type":560,"tag":624,"props":2864,"children":2865},{"style":643},[2866],{"type":565,"value":695},{"type":560,"tag":624,"props":2868,"children":2869},{"class":626,"line":895},[2870],{"type":560,"tag":624,"props":2871,"children":2872},{"style":643},[2873],{"type":565,"value":749},{"type":560,"tag":624,"props":2875,"children":2876},{"class":626,"line":1105},[2877],{"type":560,"tag":624,"props":2878,"children":2879},{"emptyLinePlaceholder":702},[2880],{"type":565,"value":705},{"type":560,"tag":624,"props":2882,"children":2883},{"class":626,"line":1131},[2884,2888,2892],{"type":560,"tag":624,"props":2885,"children":2886},{"style":631},[2887],{"type":565,"value":634},{"type":560,"tag":624,"props":2889,"children":2890},{"style":637},[2891],{"type":565,"value":2546},{"type":560,"tag":624,"props":2893,"children":2894},{"style":643},[2895],{"type":565,"value":646},{"type":560,"tag":624,"props":2897,"children":2898},{"class":626,"line":1147},[2899,2904,2908],{"type":560,"tag":624,"props":2900,"children":2901},{"style":653},[2902],{"type":565,"value":2903},"  generate",{"type":560,"tag":624,"props":2905,"children":2906},{"style":643},[2907],{"type":565,"value":719},{"type":560,"tag":624,"props":2909,"children":2910},{"style":643},[2911],{"type":565,"value":646},{"type":560,"tag":624,"props":2913,"children":2914},{"class":626,"line":1184},[2915],{"type":560,"tag":624,"props":2916,"children":2917},{"style":683},[2918],{"type":565,"value":2683},{"type":560,"tag":624,"props":2920,"children":2921},{"class":626,"line":1192},[2922],{"type":560,"tag":624,"props":2923,"children":2924},{"style":643},[2925],{"type":565,"value":695},{"type":560,"tag":624,"props":2927,"children":2928},{"class":626,"line":1200},[2929],{"type":560,"tag":624,"props":2930,"children":2931},{"style":643},[2932],{"type":565,"value":749},{"type":560,"tag":624,"props":2934,"children":2935},{"class":626,"line":1208},[2936],{"type":560,"tag":624,"props":2937,"children":2938},{"emptyLinePlaceholder":702},[2939],{"type":565,"value":705},{"type":560,"tag":624,"props":2941,"children":2942},{"class":626,"line":1233},[2943,2947,2952],{"type":560,"tag":624,"props":2944,"children":2945},{"style":631},[2946],{"type":565,"value":634},{"type":560,"tag":624,"props":2948,"children":2949},{"style":637},[2950],{"type":565,"value":2951}," HTMLGenerator",{"type":560,"tag":624,"props":2953,"children":2954},{"style":643},[2955],{"type":565,"value":646},{"type":560,"tag":624,"props":2957,"children":2958},{"class":626,"line":1249},[2959,2963,2967],{"type":560,"tag":624,"props":2960,"children":2961},{"style":653},[2962],{"type":565,"value":2903},{"type":560,"tag":624,"props":2964,"children":2965},{"style":643},[2966],{"type":565,"value":719},{"type":560,"tag":624,"props":2968,"children":2969},{"style":643},[2970],{"type":565,"value":646},{"type":560,"tag":624,"props":2972,"children":2973},{"class":626,"line":1286},[2974],{"type":560,"tag":624,"props":2975,"children":2976},{"style":683},[2977],{"type":565,"value":2978},"    // 具体的 HTML 生成逻辑\n",{"type":560,"tag":624,"props":2980,"children":2981},{"class":626,"line":1294},[2982],{"type":560,"tag":624,"props":2983,"children":2984},{"style":643},[2985],{"type":565,"value":695},{"type":560,"tag":624,"props":2987,"children":2989},{"class":626,"line":2988},23,[2990],{"type":560,"tag":624,"props":2991,"children":2992},{"style":643},[2993],{"type":565,"value":749},{"type":560,"tag":561,"props":2995,"children":2996},{},[2997],{"type":565,"value":2998},"现在，ReportGenerator 不再直接依赖于具体的实现，而是依赖于抽象的报告生成器接口。这使得我们可以轻松地扩展系统，例如添加新的报告生成器，而不需要修改 ReportGenerator 类。这样的设计更加灵活，符合依赖反转原则。",{"type":560,"tag":3000,"props":3001,"children":3002},"style",{},[3003],{"type":565,"value":3004},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":554,"searchDepth":698,"depth":698,"links":3006},[3007,3008,3009,3010,3011],{"id":604,"depth":649,"text":604},{"id":908,"depth":649,"text":908},{"id":1514,"depth":649,"text":1514},{"id":2095,"depth":649,"text":2095},{"id":2458,"depth":649,"text":2458},"markdown","content:4.design-mode:1.thoughts-principles.md","content","4.design-mode/1.thoughts-principles.md","md",[3018,3019],{"_path":529,"title":528,"description":554},{"_path":546,"title":545,"description":554},1715093638718]