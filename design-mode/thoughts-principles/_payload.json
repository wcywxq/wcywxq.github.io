[{"data":1,"prerenderedAt":3012},["Reactive",2],{"navigation":3,"/design-mode/thoughts-principles":543,"/design-mode/thoughts-principles-surround":3009},[4,269,298,511,519,528],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":510},"代码考核","/code-assessment",[302,404,503],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,337,353,381,388,395,398,401],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328,331,334],{"title":311,"_path":312},"polyfill","/code-assessment/source/native-api/polyfill",{"title":314,"_path":315},"ajax","/code-assessment/source/native-api/ajax",{"title":317,"_path":318},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":320,"_path":321},"new 操作符","/code-assessment/source/native-api/new",{"title":323,"_path":324},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":326,"_path":327},"定时器","/code-assessment/source/native-api/timer",{"title":329,"_path":330},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":332,"_path":333},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":335,"_path":336},"extends","/code-assessment/source/native-api/extends",{"title":338,"_path":339,"children":340},"函数 Function","/code-assessment/source/function",[341,344,347,350],{"title":342,"_path":343},"函数防抖","/code-assessment/source/function/debounce",{"title":345,"_path":346},"函数节流","/code-assessment/source/function/throttle",{"title":348,"_path":349},"函数柯理化","/code-assessment/source/function/curry",{"title":351,"_path":352},"函数睡眠","/code-assessment/source/function/sleep",{"title":354,"_path":355,"children":356},"数组 Array","/code-assessment/source/array",[357,360,363,366,369,372,375,378],{"title":358,"_path":359},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":361,"_path":362},"数组扁平化","/code-assessment/source/array/flat",{"title":364,"_path":365},"原型方法","/code-assessment/source/array/prototype-method",{"title":367,"_path":368},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":370,"_path":371},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":373,"_path":374},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":376,"_path":377},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":379,"_path":380},"二维数组","/code-assessment/source/array/2d-array",{"title":382,"_path":383,"children":384},"字符串 String","/code-assessment/source/string",[385],{"title":386,"_path":387},"repeat()","/code-assessment/source/string/repeat",{"title":389,"_path":390,"children":391},"集合 Set","/code-assessment/source/set",[392],{"title":393,"_path":394},"遍历集合","/code-assessment/source/set/traverse",{"title":396,"_path":397},"获取通用类型","/code-assessment/source/get-generic-type",{"title":399,"_path":400},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":402,"_path":403},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":405,"_path":406,"children":407},"业务场景","/code-assessment/scene",[408,439,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500],{"title":409,"_path":410,"children":411},"Promise","/code-assessment/scene/promise",[412,415,418,421,424,427,430,433,436],{"title":413,"_path":414},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":416,"_path":417},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":419,"_path":420},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":422,"_path":423},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":425,"_path":426},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":428,"_path":429},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":431,"_path":432},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":434,"_path":435},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":437,"_path":438},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":440,"_path":441,"children":442},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[443,446],{"title":444,"_path":445},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":447,"_path":448},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":450,"_path":451},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":453,"_path":454},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":456,"_path":457},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":459,"_path":460},"倒计时","/code-assessment/scene/countdown",{"title":462,"_path":463},"日期格式化","/code-assessment/scene/date-format",{"title":465,"_path":466},"实现前端路由","/code-assessment/scene/frontend-route",{"title":468,"_path":469},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":471,"_path":472},"lodash.get","/code-assessment/scene/lodash-get",{"title":474,"_path":475},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":477,"_path":478},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":480,"_path":481},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":483,"_path":484},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":486,"_path":487},"随机数","/code-assessment/scene/random-number",{"title":489,"_path":490},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":492,"_path":493},"sku 算法实现","/code-assessment/scene/sku",{"title":495,"_path":496},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":498,"_path":499},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":501,"_path":502},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":504,"_path":505,"children":506},"Ts 类型挑战","/code-assessment/type-challeges",[507],{"title":508,"_path":509},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":512,"_path":513,"children":514,"icon":518},"项目","/project",[515],{"title":516,"_path":517},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":520,"_path":521,"children":522,"icon":527},"设计模式","/design-mode",[523,524],{"title":520,"_path":521},{"title":525,"_path":526},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":529,"_path":530,"children":531,"icon":542},"后端语言","/backend-languages",[532],{"title":533,"_path":534,"children":535},"Python","/backend-languages/python",[536,539],{"title":537,"_path":538},"基础","/backend-languages/python/base",{"title":540,"_path":541},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":526,"_dir":544,"_draft":545,"_partial":545,"_locale":546,"title":525,"description":547,"body":548,"_type":3004,"_id":3005,"_source":3006,"_file":3007,"_extension":3008},"design-mode",false,"","SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。这些原则由 Robert C. Martin 等人提出，它们包括以下五个原则：",{"type":549,"children":550,"toc":2997},"root",[551,558,588,593,599,604,742,747,761,766,893,898,903,908,913,1292,1297,1302,1494,1499,1504,1509,1514,1519,1524,1854,1859,2075,2080,2085,2090,2095,2100,2105,2309,2314,2319,2443,2448,2453,2458,2463,2690,2695,2700,2986,2991],{"type":552,"tag":553,"props":554,"children":555},"element","p",{},[556],{"type":557,"value":547},"text",{"type":552,"tag":559,"props":560,"children":561},"ul",{},[562,568,573,578,583],{"type":552,"tag":563,"props":564,"children":565},"li",{},[566],{"type":557,"value":567},"单一职责原则（Single Responsibility Principle，SRP）",{"type":552,"tag":563,"props":569,"children":570},{},[571],{"type":557,"value":572},"开放/封闭原则（Open/Closed Principle，OCP）",{"type":552,"tag":563,"props":574,"children":575},{},[576],{"type":557,"value":577},"里氏替换原则（Liskov Substitution Principle，LSP）",{"type":552,"tag":563,"props":579,"children":580},{},[581],{"type":557,"value":582},"接口隔离原则（Interface Segregation Principle，ISP）",{"type":552,"tag":563,"props":584,"children":585},{},[586],{"type":557,"value":587},"依赖反转原则（Dependency Inversion Principle，DIP）",{"type":552,"tag":553,"props":589,"children":590},{},[591],{"type":557,"value":592},"这些原则共同促使开发者创建具有高内聚、低耦合、易扩展和易维护性的软件系统。遵循这些原则有助于构建更健壮的面向对象系统，提高代码质量和可维护性。",{"type":552,"tag":594,"props":595,"children":597},"h2",{"id":596},"单一职责原则",[598],{"type":557,"value":596},{"type":552,"tag":553,"props":600,"children":601},{},[602],{"type":557,"value":603},"单一职责原则（Single Responsibility Principle，SRP）要求一个类或者模块只负责完成一个职责（或者功能）。 假设我们有一个简单的厨师类，它负责烹饪和洗碗两个职责：",{"type":552,"tag":605,"props":606,"children":610},"pre",{"className":607,"code":608,"language":609,"meta":546,"style":546},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n","js",[611],{"type":552,"tag":612,"props":613,"children":614},"code",{"__ignoreMap":546},[615,639,669,679,688,698,716,725,733],{"type":552,"tag":616,"props":617,"children":620},"span",{"class":618,"line":619},"line",1,[621,627,633],{"type":552,"tag":616,"props":622,"children":624},{"style":623},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[625],{"type":557,"value":626},"class",{"type":552,"tag":616,"props":628,"children":630},{"style":629},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[631],{"type":557,"value":632}," Chef",{"type":552,"tag":616,"props":634,"children":636},{"style":635},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[637],{"type":557,"value":638}," {\n",{"type":552,"tag":616,"props":640,"children":642},{"class":618,"line":641},2,[643,649,654,660,665],{"type":552,"tag":616,"props":644,"children":646},{"style":645},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[647],{"type":557,"value":648},"  cookDish",{"type":552,"tag":616,"props":650,"children":651},{"style":635},[652],{"type":557,"value":653},"(",{"type":552,"tag":616,"props":655,"children":657},{"style":656},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[658],{"type":557,"value":659},"dish",{"type":552,"tag":616,"props":661,"children":662},{"style":635},[663],{"type":557,"value":664},")",{"type":552,"tag":616,"props":666,"children":667},{"style":635},[668],{"type":557,"value":638},{"type":552,"tag":616,"props":670,"children":672},{"class":618,"line":671},3,[673],{"type":552,"tag":616,"props":674,"children":676},{"style":675},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[677],{"type":557,"value":678},"    // 烹饪菜品的具体实现\n",{"type":552,"tag":616,"props":680,"children":682},{"class":618,"line":681},4,[683],{"type":552,"tag":616,"props":684,"children":685},{"style":635},[686],{"type":557,"value":687},"  }\n",{"type":552,"tag":616,"props":689,"children":691},{"class":618,"line":690},5,[692],{"type":552,"tag":616,"props":693,"children":695},{"emptyLinePlaceholder":694},true,[696],{"type":557,"value":697},"\n",{"type":552,"tag":616,"props":699,"children":701},{"class":618,"line":700},6,[702,707,712],{"type":552,"tag":616,"props":703,"children":704},{"style":645},[705],{"type":557,"value":706},"  washDishes",{"type":552,"tag":616,"props":708,"children":709},{"style":635},[710],{"type":557,"value":711},"()",{"type":552,"tag":616,"props":713,"children":714},{"style":635},[715],{"type":557,"value":638},{"type":552,"tag":616,"props":717,"children":719},{"class":618,"line":718},7,[720],{"type":552,"tag":616,"props":721,"children":722},{"style":675},[723],{"type":557,"value":724},"    // 洗碗的具体实现\n",{"type":552,"tag":616,"props":726,"children":728},{"class":618,"line":727},8,[729],{"type":552,"tag":616,"props":730,"children":731},{"style":635},[732],{"type":557,"value":687},{"type":552,"tag":616,"props":734,"children":736},{"class":618,"line":735},9,[737],{"type":552,"tag":616,"props":738,"children":739},{"style":635},[740],{"type":557,"value":741},"}\n",{"type":552,"tag":553,"props":743,"children":744},{},[745],{"type":557,"value":746},"这个类违反了单一职责原则，因为它有两个职责：烹饪和洗碗。这样的设计可能导致以下问题：",{"type":552,"tag":748,"props":749,"children":750},"ol",{},[751,756],{"type":552,"tag":563,"props":752,"children":753},{},[754],{"type":557,"value":755},"如果厨师的烹饪逻辑变化，需要修改 cookDish 方法，这可能会影响洗碗的部分。",{"type":552,"tag":563,"props":757,"children":758},{},[759],{"type":557,"value":760},"如果洗碗的逻辑变化，需要修改 washDishes 方法，这可能会影响烹饪的部分。",{"type":552,"tag":553,"props":762,"children":763},{},[764],{"type":557,"value":765},"按照单一职责原则，我们应该将这两个职责分开，分别由不同的类负责：",{"type":552,"tag":605,"props":767,"children":769},{"className":607,"code":768,"language":609,"meta":546,"style":546},"class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n}\n\nclass Dishwasher {\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n",[770],{"type":552,"tag":612,"props":771,"children":772},{"__ignoreMap":546},[773,788,811,818,825,832,839,855,870,877,885],{"type":552,"tag":616,"props":774,"children":775},{"class":618,"line":619},[776,780,784],{"type":552,"tag":616,"props":777,"children":778},{"style":623},[779],{"type":557,"value":626},{"type":552,"tag":616,"props":781,"children":782},{"style":629},[783],{"type":557,"value":632},{"type":552,"tag":616,"props":785,"children":786},{"style":635},[787],{"type":557,"value":638},{"type":552,"tag":616,"props":789,"children":790},{"class":618,"line":641},[791,795,799,803,807],{"type":552,"tag":616,"props":792,"children":793},{"style":645},[794],{"type":557,"value":648},{"type":552,"tag":616,"props":796,"children":797},{"style":635},[798],{"type":557,"value":653},{"type":552,"tag":616,"props":800,"children":801},{"style":656},[802],{"type":557,"value":659},{"type":552,"tag":616,"props":804,"children":805},{"style":635},[806],{"type":557,"value":664},{"type":552,"tag":616,"props":808,"children":809},{"style":635},[810],{"type":557,"value":638},{"type":552,"tag":616,"props":812,"children":813},{"class":618,"line":671},[814],{"type":552,"tag":616,"props":815,"children":816},{"style":675},[817],{"type":557,"value":678},{"type":552,"tag":616,"props":819,"children":820},{"class":618,"line":681},[821],{"type":552,"tag":616,"props":822,"children":823},{"style":635},[824],{"type":557,"value":687},{"type":552,"tag":616,"props":826,"children":827},{"class":618,"line":690},[828],{"type":552,"tag":616,"props":829,"children":830},{"style":635},[831],{"type":557,"value":741},{"type":552,"tag":616,"props":833,"children":834},{"class":618,"line":700},[835],{"type":552,"tag":616,"props":836,"children":837},{"emptyLinePlaceholder":694},[838],{"type":557,"value":697},{"type":552,"tag":616,"props":840,"children":841},{"class":618,"line":718},[842,846,851],{"type":552,"tag":616,"props":843,"children":844},{"style":623},[845],{"type":557,"value":626},{"type":552,"tag":616,"props":847,"children":848},{"style":629},[849],{"type":557,"value":850}," Dishwasher",{"type":552,"tag":616,"props":852,"children":853},{"style":635},[854],{"type":557,"value":638},{"type":552,"tag":616,"props":856,"children":857},{"class":618,"line":727},[858,862,866],{"type":552,"tag":616,"props":859,"children":860},{"style":645},[861],{"type":557,"value":706},{"type":552,"tag":616,"props":863,"children":864},{"style":635},[865],{"type":557,"value":711},{"type":552,"tag":616,"props":867,"children":868},{"style":635},[869],{"type":557,"value":638},{"type":552,"tag":616,"props":871,"children":872},{"class":618,"line":735},[873],{"type":552,"tag":616,"props":874,"children":875},{"style":675},[876],{"type":557,"value":724},{"type":552,"tag":616,"props":878,"children":880},{"class":618,"line":879},10,[881],{"type":552,"tag":616,"props":882,"children":883},{"style":635},[884],{"type":557,"value":687},{"type":552,"tag":616,"props":886,"children":888},{"class":618,"line":887},11,[889],{"type":552,"tag":616,"props":890,"children":891},{"style":635},[892],{"type":557,"value":741},{"type":552,"tag":553,"props":894,"children":895},{},[896],{"type":557,"value":897},"这样，Chef 类专注于烹饪，而 Dishwasher 类专注于洗碗。每个类都有一个单一的职责，使得代码更清晰、易于理解，并且在未来的变更中更具弹性。",{"type":552,"tag":594,"props":899,"children":901},{"id":900},"开放封闭原则",[902],{"type":557,"value":900},{"type":552,"tag":553,"props":904,"children":905},{},[906],{"type":557,"value":907},"开关封闭原则（Open/Closed Principle，OCP）要求软件实体（例如类、模块、函数等）应该对扩展开放，对修改关闭。简而言之，一个模块在扩展新功能时不应该修改原有的代码，而是通过添加新的代码来实现扩展。",{"type":552,"tag":553,"props":909,"children":910},{},[911],{"type":557,"value":912},"考虑一个动物园的场景。我们有一些动物，每个动物都会发出叫声。初始设计如下：",{"type":552,"tag":605,"props":914,"children":916},{"className":607,"code":915,"language":609,"meta":546,"style":546},"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    // 默认的叫声\n    console.log(\"Some generic animal sound\");\n  }\n}\n\nclass Lion extends Animal {\n  makeSound() {\n    console.log(\"Roar!\");\n  }\n}\n\nclass Elephant extends Animal {\n  makeSound() {\n    console.log(\"Trumpet!\");\n  }\n}\n",[917],{"type":552,"tag":612,"props":918,"children":919},{"__ignoreMap":546},[920,936,961,994,1001,1008,1024,1032,1074,1081,1088,1095,1121,1137,1174,1182,1190,1198,1223,1239,1276,1284],{"type":552,"tag":616,"props":921,"children":922},{"class":618,"line":619},[923,927,932],{"type":552,"tag":616,"props":924,"children":925},{"style":623},[926],{"type":557,"value":626},{"type":552,"tag":616,"props":928,"children":929},{"style":629},[930],{"type":557,"value":931}," Animal",{"type":552,"tag":616,"props":933,"children":934},{"style":635},[935],{"type":557,"value":638},{"type":552,"tag":616,"props":937,"children":938},{"class":618,"line":641},[939,944,948,953,957],{"type":552,"tag":616,"props":940,"children":941},{"style":623},[942],{"type":557,"value":943},"  constructor",{"type":552,"tag":616,"props":945,"children":946},{"style":635},[947],{"type":557,"value":653},{"type":552,"tag":616,"props":949,"children":950},{"style":656},[951],{"type":557,"value":952},"name",{"type":552,"tag":616,"props":954,"children":955},{"style":635},[956],{"type":557,"value":664},{"type":552,"tag":616,"props":958,"children":959},{"style":635},[960],{"type":557,"value":638},{"type":552,"tag":616,"props":962,"children":963},{"class":618,"line":671},[964,970,975,979,984,989],{"type":552,"tag":616,"props":965,"children":967},{"style":966},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[968],{"type":557,"value":969},"    this",{"type":552,"tag":616,"props":971,"children":972},{"style":635},[973],{"type":557,"value":974},".",{"type":552,"tag":616,"props":976,"children":977},{"style":656},[978],{"type":557,"value":952},{"type":552,"tag":616,"props":980,"children":981},{"style":635},[982],{"type":557,"value":983}," =",{"type":552,"tag":616,"props":985,"children":986},{"style":656},[987],{"type":557,"value":988}," name",{"type":552,"tag":616,"props":990,"children":991},{"style":635},[992],{"type":557,"value":993},";\n",{"type":552,"tag":616,"props":995,"children":996},{"class":618,"line":681},[997],{"type":552,"tag":616,"props":998,"children":999},{"style":635},[1000],{"type":557,"value":687},{"type":552,"tag":616,"props":1002,"children":1003},{"class":618,"line":690},[1004],{"type":552,"tag":616,"props":1005,"children":1006},{"emptyLinePlaceholder":694},[1007],{"type":557,"value":697},{"type":552,"tag":616,"props":1009,"children":1010},{"class":618,"line":700},[1011,1016,1020],{"type":552,"tag":616,"props":1012,"children":1013},{"style":645},[1014],{"type":557,"value":1015},"  makeSound",{"type":552,"tag":616,"props":1017,"children":1018},{"style":635},[1019],{"type":557,"value":711},{"type":552,"tag":616,"props":1021,"children":1022},{"style":635},[1023],{"type":557,"value":638},{"type":552,"tag":616,"props":1025,"children":1026},{"class":618,"line":718},[1027],{"type":552,"tag":616,"props":1028,"children":1029},{"style":675},[1030],{"type":557,"value":1031},"    // 默认的叫声\n",{"type":552,"tag":616,"props":1033,"children":1034},{"class":618,"line":727},[1035,1040,1044,1049,1053,1059,1065,1069],{"type":552,"tag":616,"props":1036,"children":1037},{"style":656},[1038],{"type":557,"value":1039},"    console",{"type":552,"tag":616,"props":1041,"children":1042},{"style":635},[1043],{"type":557,"value":974},{"type":552,"tag":616,"props":1045,"children":1046},{"style":645},[1047],{"type":557,"value":1048},"log",{"type":552,"tag":616,"props":1050,"children":1051},{"style":635},[1052],{"type":557,"value":653},{"type":552,"tag":616,"props":1054,"children":1056},{"style":1055},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1057],{"type":557,"value":1058},"\"",{"type":552,"tag":616,"props":1060,"children":1062},{"style":1061},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1063],{"type":557,"value":1064},"Some generic animal sound",{"type":552,"tag":616,"props":1066,"children":1067},{"style":1055},[1068],{"type":557,"value":1058},{"type":552,"tag":616,"props":1070,"children":1071},{"style":635},[1072],{"type":557,"value":1073},");\n",{"type":552,"tag":616,"props":1075,"children":1076},{"class":618,"line":735},[1077],{"type":552,"tag":616,"props":1078,"children":1079},{"style":635},[1080],{"type":557,"value":687},{"type":552,"tag":616,"props":1082,"children":1083},{"class":618,"line":879},[1084],{"type":552,"tag":616,"props":1085,"children":1086},{"style":635},[1087],{"type":557,"value":741},{"type":552,"tag":616,"props":1089,"children":1090},{"class":618,"line":887},[1091],{"type":552,"tag":616,"props":1092,"children":1093},{"emptyLinePlaceholder":694},[1094],{"type":557,"value":697},{"type":552,"tag":616,"props":1096,"children":1098},{"class":618,"line":1097},12,[1099,1103,1108,1113,1117],{"type":552,"tag":616,"props":1100,"children":1101},{"style":623},[1102],{"type":557,"value":626},{"type":552,"tag":616,"props":1104,"children":1105},{"style":629},[1106],{"type":557,"value":1107}," Lion",{"type":552,"tag":616,"props":1109,"children":1110},{"style":623},[1111],{"type":557,"value":1112}," extends",{"type":552,"tag":616,"props":1114,"children":1115},{"style":645},[1116],{"type":557,"value":931},{"type":552,"tag":616,"props":1118,"children":1119},{"style":635},[1120],{"type":557,"value":638},{"type":552,"tag":616,"props":1122,"children":1124},{"class":618,"line":1123},13,[1125,1129,1133],{"type":552,"tag":616,"props":1126,"children":1127},{"style":645},[1128],{"type":557,"value":1015},{"type":552,"tag":616,"props":1130,"children":1131},{"style":635},[1132],{"type":557,"value":711},{"type":552,"tag":616,"props":1134,"children":1135},{"style":635},[1136],{"type":557,"value":638},{"type":552,"tag":616,"props":1138,"children":1140},{"class":618,"line":1139},14,[1141,1145,1149,1153,1157,1161,1166,1170],{"type":552,"tag":616,"props":1142,"children":1143},{"style":656},[1144],{"type":557,"value":1039},{"type":552,"tag":616,"props":1146,"children":1147},{"style":635},[1148],{"type":557,"value":974},{"type":552,"tag":616,"props":1150,"children":1151},{"style":645},[1152],{"type":557,"value":1048},{"type":552,"tag":616,"props":1154,"children":1155},{"style":635},[1156],{"type":557,"value":653},{"type":552,"tag":616,"props":1158,"children":1159},{"style":1055},[1160],{"type":557,"value":1058},{"type":552,"tag":616,"props":1162,"children":1163},{"style":1061},[1164],{"type":557,"value":1165},"Roar!",{"type":552,"tag":616,"props":1167,"children":1168},{"style":1055},[1169],{"type":557,"value":1058},{"type":552,"tag":616,"props":1171,"children":1172},{"style":635},[1173],{"type":557,"value":1073},{"type":552,"tag":616,"props":1175,"children":1177},{"class":618,"line":1176},15,[1178],{"type":552,"tag":616,"props":1179,"children":1180},{"style":635},[1181],{"type":557,"value":687},{"type":552,"tag":616,"props":1183,"children":1185},{"class":618,"line":1184},16,[1186],{"type":552,"tag":616,"props":1187,"children":1188},{"style":635},[1189],{"type":557,"value":741},{"type":552,"tag":616,"props":1191,"children":1193},{"class":618,"line":1192},17,[1194],{"type":552,"tag":616,"props":1195,"children":1196},{"emptyLinePlaceholder":694},[1197],{"type":557,"value":697},{"type":552,"tag":616,"props":1199,"children":1201},{"class":618,"line":1200},18,[1202,1206,1211,1215,1219],{"type":552,"tag":616,"props":1203,"children":1204},{"style":623},[1205],{"type":557,"value":626},{"type":552,"tag":616,"props":1207,"children":1208},{"style":629},[1209],{"type":557,"value":1210}," Elephant",{"type":552,"tag":616,"props":1212,"children":1213},{"style":623},[1214],{"type":557,"value":1112},{"type":552,"tag":616,"props":1216,"children":1217},{"style":645},[1218],{"type":557,"value":931},{"type":552,"tag":616,"props":1220,"children":1221},{"style":635},[1222],{"type":557,"value":638},{"type":552,"tag":616,"props":1224,"children":1226},{"class":618,"line":1225},19,[1227,1231,1235],{"type":552,"tag":616,"props":1228,"children":1229},{"style":645},[1230],{"type":557,"value":1015},{"type":552,"tag":616,"props":1232,"children":1233},{"style":635},[1234],{"type":557,"value":711},{"type":552,"tag":616,"props":1236,"children":1237},{"style":635},[1238],{"type":557,"value":638},{"type":552,"tag":616,"props":1240,"children":1242},{"class":618,"line":1241},20,[1243,1247,1251,1255,1259,1263,1268,1272],{"type":552,"tag":616,"props":1244,"children":1245},{"style":656},[1246],{"type":557,"value":1039},{"type":552,"tag":616,"props":1248,"children":1249},{"style":635},[1250],{"type":557,"value":974},{"type":552,"tag":616,"props":1252,"children":1253},{"style":645},[1254],{"type":557,"value":1048},{"type":552,"tag":616,"props":1256,"children":1257},{"style":635},[1258],{"type":557,"value":653},{"type":552,"tag":616,"props":1260,"children":1261},{"style":1055},[1262],{"type":557,"value":1058},{"type":552,"tag":616,"props":1264,"children":1265},{"style":1061},[1266],{"type":557,"value":1267},"Trumpet!",{"type":552,"tag":616,"props":1269,"children":1270},{"style":1055},[1271],{"type":557,"value":1058},{"type":552,"tag":616,"props":1273,"children":1274},{"style":635},[1275],{"type":557,"value":1073},{"type":552,"tag":616,"props":1277,"children":1279},{"class":618,"line":1278},21,[1280],{"type":552,"tag":616,"props":1281,"children":1282},{"style":635},[1283],{"type":557,"value":687},{"type":552,"tag":616,"props":1285,"children":1287},{"class":618,"line":1286},22,[1288],{"type":552,"tag":616,"props":1289,"children":1290},{"style":635},[1291],{"type":557,"value":741},{"type":552,"tag":553,"props":1293,"children":1294},{},[1295],{"type":557,"value":1296},"在这个设计中，Animal 类是一个基类，而 Lion 和 Elephant 是它的子类。每个动物都有自己的叫声，通过重写 makeSound 方法来实现。",{"type":552,"tag":553,"props":1298,"children":1299},{},[1300],{"type":557,"value":1301},"现在，假设我们要添加一些新的动物，比如鹦鹉和狗，按照开放/封闭原则，我们应该扩展而不是修改现有的代码：",{"type":552,"tag":605,"props":1303,"children":1305},{"className":607,"code":1304,"language":609,"meta":546,"style":546},"class Parrot extends Animal {\n  makeSound() {\n    console.log(\"Squawk!\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Bark!\");\n  }\n}\n",[1306],{"type":552,"tag":612,"props":1307,"children":1308},{"__ignoreMap":546},[1309,1333,1348,1384,1391,1398,1405,1429,1444,1480,1487],{"type":552,"tag":616,"props":1310,"children":1311},{"class":618,"line":619},[1312,1316,1321,1325,1329],{"type":552,"tag":616,"props":1313,"children":1314},{"style":623},[1315],{"type":557,"value":626},{"type":552,"tag":616,"props":1317,"children":1318},{"style":629},[1319],{"type":557,"value":1320}," Parrot",{"type":552,"tag":616,"props":1322,"children":1323},{"style":623},[1324],{"type":557,"value":1112},{"type":552,"tag":616,"props":1326,"children":1327},{"style":645},[1328],{"type":557,"value":931},{"type":552,"tag":616,"props":1330,"children":1331},{"style":635},[1332],{"type":557,"value":638},{"type":552,"tag":616,"props":1334,"children":1335},{"class":618,"line":641},[1336,1340,1344],{"type":552,"tag":616,"props":1337,"children":1338},{"style":645},[1339],{"type":557,"value":1015},{"type":552,"tag":616,"props":1341,"children":1342},{"style":635},[1343],{"type":557,"value":711},{"type":552,"tag":616,"props":1345,"children":1346},{"style":635},[1347],{"type":557,"value":638},{"type":552,"tag":616,"props":1349,"children":1350},{"class":618,"line":671},[1351,1355,1359,1363,1367,1371,1376,1380],{"type":552,"tag":616,"props":1352,"children":1353},{"style":656},[1354],{"type":557,"value":1039},{"type":552,"tag":616,"props":1356,"children":1357},{"style":635},[1358],{"type":557,"value":974},{"type":552,"tag":616,"props":1360,"children":1361},{"style":645},[1362],{"type":557,"value":1048},{"type":552,"tag":616,"props":1364,"children":1365},{"style":635},[1366],{"type":557,"value":653},{"type":552,"tag":616,"props":1368,"children":1369},{"style":1055},[1370],{"type":557,"value":1058},{"type":552,"tag":616,"props":1372,"children":1373},{"style":1061},[1374],{"type":557,"value":1375},"Squawk!",{"type":552,"tag":616,"props":1377,"children":1378},{"style":1055},[1379],{"type":557,"value":1058},{"type":552,"tag":616,"props":1381,"children":1382},{"style":635},[1383],{"type":557,"value":1073},{"type":552,"tag":616,"props":1385,"children":1386},{"class":618,"line":681},[1387],{"type":552,"tag":616,"props":1388,"children":1389},{"style":635},[1390],{"type":557,"value":687},{"type":552,"tag":616,"props":1392,"children":1393},{"class":618,"line":690},[1394],{"type":552,"tag":616,"props":1395,"children":1396},{"style":635},[1397],{"type":557,"value":741},{"type":552,"tag":616,"props":1399,"children":1400},{"class":618,"line":700},[1401],{"type":552,"tag":616,"props":1402,"children":1403},{"emptyLinePlaceholder":694},[1404],{"type":557,"value":697},{"type":552,"tag":616,"props":1406,"children":1407},{"class":618,"line":718},[1408,1412,1417,1421,1425],{"type":552,"tag":616,"props":1409,"children":1410},{"style":623},[1411],{"type":557,"value":626},{"type":552,"tag":616,"props":1413,"children":1414},{"style":629},[1415],{"type":557,"value":1416}," Dog",{"type":552,"tag":616,"props":1418,"children":1419},{"style":623},[1420],{"type":557,"value":1112},{"type":552,"tag":616,"props":1422,"children":1423},{"style":645},[1424],{"type":557,"value":931},{"type":552,"tag":616,"props":1426,"children":1427},{"style":635},[1428],{"type":557,"value":638},{"type":552,"tag":616,"props":1430,"children":1431},{"class":618,"line":727},[1432,1436,1440],{"type":552,"tag":616,"props":1433,"children":1434},{"style":645},[1435],{"type":557,"value":1015},{"type":552,"tag":616,"props":1437,"children":1438},{"style":635},[1439],{"type":557,"value":711},{"type":552,"tag":616,"props":1441,"children":1442},{"style":635},[1443],{"type":557,"value":638},{"type":552,"tag":616,"props":1445,"children":1446},{"class":618,"line":735},[1447,1451,1455,1459,1463,1467,1472,1476],{"type":552,"tag":616,"props":1448,"children":1449},{"style":656},[1450],{"type":557,"value":1039},{"type":552,"tag":616,"props":1452,"children":1453},{"style":635},[1454],{"type":557,"value":974},{"type":552,"tag":616,"props":1456,"children":1457},{"style":645},[1458],{"type":557,"value":1048},{"type":552,"tag":616,"props":1460,"children":1461},{"style":635},[1462],{"type":557,"value":653},{"type":552,"tag":616,"props":1464,"children":1465},{"style":1055},[1466],{"type":557,"value":1058},{"type":552,"tag":616,"props":1468,"children":1469},{"style":1061},[1470],{"type":557,"value":1471},"Bark!",{"type":552,"tag":616,"props":1473,"children":1474},{"style":1055},[1475],{"type":557,"value":1058},{"type":552,"tag":616,"props":1477,"children":1478},{"style":635},[1479],{"type":557,"value":1073},{"type":552,"tag":616,"props":1481,"children":1482},{"class":618,"line":879},[1483],{"type":552,"tag":616,"props":1484,"children":1485},{"style":635},[1486],{"type":557,"value":687},{"type":552,"tag":616,"props":1488,"children":1489},{"class":618,"line":887},[1490],{"type":552,"tag":616,"props":1491,"children":1492},{"style":635},[1493],{"type":557,"value":741},{"type":552,"tag":553,"props":1495,"children":1496},{},[1497],{"type":557,"value":1498},"这样，我们通过扩展 Animal 类，而不是修改它，来添加新的功能（新的动物）。这符合开放/封闭原则，因为我们对于现有代码的修改是关闭的，我们只是通过扩展来引入新的功能。",{"type":552,"tag":553,"props":1500,"children":1501},{},[1502],{"type":557,"value":1503},"使用开放/封闭原则可以使代码更加稳定，降低对现有代码的影响，同时也更容易应对变化和扩展。",{"type":552,"tag":594,"props":1505,"children":1507},{"id":1506},"里式替换原则",[1508],{"type":557,"value":1506},{"type":552,"tag":553,"props":1510,"children":1511},{},[1512],{"type":557,"value":1513},"里氏替换原则（Liskov Substitution Principle，LSP） 是 SOLID 原则之一，它强调子类型（派生类或子类）必须能够替换掉它们的基类型（基类或父类）并出现在基类能够工作的任何地方，而不破坏程序的正确性。",{"type":552,"tag":553,"props":1515,"children":1516},{},[1517],{"type":557,"value":1518},"通俗地说，如果一个类是基类的子类，那么在任何需要基类的地方，都可以使用这个子类而不产生错误。子类应该保持基类的行为，并且可以扩展或修改基类的行为，但不应该破坏基类原有的约定。",{"type":552,"tag":553,"props":1520,"children":1521},{},[1522],{"type":557,"value":1523},"假设我们有一个表示矩形的基类 Rectangle：",{"type":552,"tag":605,"props":1525,"children":1527},{"className":607,"code":1526,"language":609,"meta":546,"style":546},"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n",[1528],{"type":552,"tag":612,"props":1529,"children":1530},{"__ignoreMap":546},[1531,1547,1581,1609,1637,1644,1651,1675,1702,1709,1716,1740,1767,1774,1781,1797,1840,1847],{"type":552,"tag":616,"props":1532,"children":1533},{"class":618,"line":619},[1534,1538,1543],{"type":552,"tag":616,"props":1535,"children":1536},{"style":623},[1537],{"type":557,"value":626},{"type":552,"tag":616,"props":1539,"children":1540},{"style":629},[1541],{"type":557,"value":1542}," Rectangle",{"type":552,"tag":616,"props":1544,"children":1545},{"style":635},[1546],{"type":557,"value":638},{"type":552,"tag":616,"props":1548,"children":1549},{"class":618,"line":641},[1550,1554,1558,1563,1568,1573,1577],{"type":552,"tag":616,"props":1551,"children":1552},{"style":623},[1553],{"type":557,"value":943},{"type":552,"tag":616,"props":1555,"children":1556},{"style":635},[1557],{"type":557,"value":653},{"type":552,"tag":616,"props":1559,"children":1560},{"style":656},[1561],{"type":557,"value":1562},"width",{"type":552,"tag":616,"props":1564,"children":1565},{"style":635},[1566],{"type":557,"value":1567},",",{"type":552,"tag":616,"props":1569,"children":1570},{"style":656},[1571],{"type":557,"value":1572}," height",{"type":552,"tag":616,"props":1574,"children":1575},{"style":635},[1576],{"type":557,"value":664},{"type":552,"tag":616,"props":1578,"children":1579},{"style":635},[1580],{"type":557,"value":638},{"type":552,"tag":616,"props":1582,"children":1583},{"class":618,"line":671},[1584,1588,1592,1596,1600,1605],{"type":552,"tag":616,"props":1585,"children":1586},{"style":966},[1587],{"type":557,"value":969},{"type":552,"tag":616,"props":1589,"children":1590},{"style":635},[1591],{"type":557,"value":974},{"type":552,"tag":616,"props":1593,"children":1594},{"style":656},[1595],{"type":557,"value":1562},{"type":552,"tag":616,"props":1597,"children":1598},{"style":635},[1599],{"type":557,"value":983},{"type":552,"tag":616,"props":1601,"children":1602},{"style":656},[1603],{"type":557,"value":1604}," width",{"type":552,"tag":616,"props":1606,"children":1607},{"style":635},[1608],{"type":557,"value":993},{"type":552,"tag":616,"props":1610,"children":1611},{"class":618,"line":681},[1612,1616,1620,1625,1629,1633],{"type":552,"tag":616,"props":1613,"children":1614},{"style":966},[1615],{"type":557,"value":969},{"type":552,"tag":616,"props":1617,"children":1618},{"style":635},[1619],{"type":557,"value":974},{"type":552,"tag":616,"props":1621,"children":1622},{"style":656},[1623],{"type":557,"value":1624},"height",{"type":552,"tag":616,"props":1626,"children":1627},{"style":635},[1628],{"type":557,"value":983},{"type":552,"tag":616,"props":1630,"children":1631},{"style":656},[1632],{"type":557,"value":1572},{"type":552,"tag":616,"props":1634,"children":1635},{"style":635},[1636],{"type":557,"value":993},{"type":552,"tag":616,"props":1638,"children":1639},{"class":618,"line":690},[1640],{"type":552,"tag":616,"props":1641,"children":1642},{"style":635},[1643],{"type":557,"value":687},{"type":552,"tag":616,"props":1645,"children":1646},{"class":618,"line":700},[1647],{"type":552,"tag":616,"props":1648,"children":1649},{"emptyLinePlaceholder":694},[1650],{"type":557,"value":697},{"type":552,"tag":616,"props":1652,"children":1653},{"class":618,"line":718},[1654,1659,1663,1667,1671],{"type":552,"tag":616,"props":1655,"children":1656},{"style":645},[1657],{"type":557,"value":1658},"  setWidth",{"type":552,"tag":616,"props":1660,"children":1661},{"style":635},[1662],{"type":557,"value":653},{"type":552,"tag":616,"props":1664,"children":1665},{"style":656},[1666],{"type":557,"value":1562},{"type":552,"tag":616,"props":1668,"children":1669},{"style":635},[1670],{"type":557,"value":664},{"type":552,"tag":616,"props":1672,"children":1673},{"style":635},[1674],{"type":557,"value":638},{"type":552,"tag":616,"props":1676,"children":1677},{"class":618,"line":727},[1678,1682,1686,1690,1694,1698],{"type":552,"tag":616,"props":1679,"children":1680},{"style":966},[1681],{"type":557,"value":969},{"type":552,"tag":616,"props":1683,"children":1684},{"style":635},[1685],{"type":557,"value":974},{"type":552,"tag":616,"props":1687,"children":1688},{"style":656},[1689],{"type":557,"value":1562},{"type":552,"tag":616,"props":1691,"children":1692},{"style":635},[1693],{"type":557,"value":983},{"type":552,"tag":616,"props":1695,"children":1696},{"style":656},[1697],{"type":557,"value":1604},{"type":552,"tag":616,"props":1699,"children":1700},{"style":635},[1701],{"type":557,"value":993},{"type":552,"tag":616,"props":1703,"children":1704},{"class":618,"line":735},[1705],{"type":552,"tag":616,"props":1706,"children":1707},{"style":635},[1708],{"type":557,"value":687},{"type":552,"tag":616,"props":1710,"children":1711},{"class":618,"line":879},[1712],{"type":552,"tag":616,"props":1713,"children":1714},{"emptyLinePlaceholder":694},[1715],{"type":557,"value":697},{"type":552,"tag":616,"props":1717,"children":1718},{"class":618,"line":887},[1719,1724,1728,1732,1736],{"type":552,"tag":616,"props":1720,"children":1721},{"style":645},[1722],{"type":557,"value":1723},"  setHeight",{"type":552,"tag":616,"props":1725,"children":1726},{"style":635},[1727],{"type":557,"value":653},{"type":552,"tag":616,"props":1729,"children":1730},{"style":656},[1731],{"type":557,"value":1624},{"type":552,"tag":616,"props":1733,"children":1734},{"style":635},[1735],{"type":557,"value":664},{"type":552,"tag":616,"props":1737,"children":1738},{"style":635},[1739],{"type":557,"value":638},{"type":552,"tag":616,"props":1741,"children":1742},{"class":618,"line":1097},[1743,1747,1751,1755,1759,1763],{"type":552,"tag":616,"props":1744,"children":1745},{"style":966},[1746],{"type":557,"value":969},{"type":552,"tag":616,"props":1748,"children":1749},{"style":635},[1750],{"type":557,"value":974},{"type":552,"tag":616,"props":1752,"children":1753},{"style":656},[1754],{"type":557,"value":1624},{"type":552,"tag":616,"props":1756,"children":1757},{"style":635},[1758],{"type":557,"value":983},{"type":552,"tag":616,"props":1760,"children":1761},{"style":656},[1762],{"type":557,"value":1572},{"type":552,"tag":616,"props":1764,"children":1765},{"style":635},[1766],{"type":557,"value":993},{"type":552,"tag":616,"props":1768,"children":1769},{"class":618,"line":1123},[1770],{"type":552,"tag":616,"props":1771,"children":1772},{"style":635},[1773],{"type":557,"value":687},{"type":552,"tag":616,"props":1775,"children":1776},{"class":618,"line":1139},[1777],{"type":552,"tag":616,"props":1778,"children":1779},{"emptyLinePlaceholder":694},[1780],{"type":557,"value":697},{"type":552,"tag":616,"props":1782,"children":1783},{"class":618,"line":1176},[1784,1789,1793],{"type":552,"tag":616,"props":1785,"children":1786},{"style":645},[1787],{"type":557,"value":1788},"  getArea",{"type":552,"tag":616,"props":1790,"children":1791},{"style":635},[1792],{"type":557,"value":711},{"type":552,"tag":616,"props":1794,"children":1795},{"style":635},[1796],{"type":557,"value":638},{"type":552,"tag":616,"props":1798,"children":1799},{"class":618,"line":1184},[1800,1806,1811,1815,1819,1824,1828,1832,1836],{"type":552,"tag":616,"props":1801,"children":1803},{"style":1802},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1804],{"type":557,"value":1805},"    return",{"type":552,"tag":616,"props":1807,"children":1808},{"style":966},[1809],{"type":557,"value":1810}," this",{"type":552,"tag":616,"props":1812,"children":1813},{"style":635},[1814],{"type":557,"value":974},{"type":552,"tag":616,"props":1816,"children":1817},{"style":656},[1818],{"type":557,"value":1562},{"type":552,"tag":616,"props":1820,"children":1821},{"style":623},[1822],{"type":557,"value":1823}," *",{"type":552,"tag":616,"props":1825,"children":1826},{"style":966},[1827],{"type":557,"value":1810},{"type":552,"tag":616,"props":1829,"children":1830},{"style":635},[1831],{"type":557,"value":974},{"type":552,"tag":616,"props":1833,"children":1834},{"style":656},[1835],{"type":557,"value":1624},{"type":552,"tag":616,"props":1837,"children":1838},{"style":635},[1839],{"type":557,"value":993},{"type":552,"tag":616,"props":1841,"children":1842},{"class":618,"line":1192},[1843],{"type":552,"tag":616,"props":1844,"children":1845},{"style":635},[1846],{"type":557,"value":687},{"type":552,"tag":616,"props":1848,"children":1849},{"class":618,"line":1200},[1850],{"type":552,"tag":616,"props":1851,"children":1852},{"style":635},[1853],{"type":557,"value":741},{"type":552,"tag":553,"props":1855,"children":1856},{},[1857],{"type":557,"value":1858},"现在，我们创建了一个子类 Square 继承自 Rectangle，表示正方形。在正方形中，宽和高应该始终相等。",{"type":552,"tag":605,"props":1860,"children":1862},{"className":607,"code":1861,"language":609,"meta":546,"style":546},"class Square extends Rectangle {\n  setWidth(width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  setHeight(height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n",[1863],{"type":552,"tag":612,"props":1864,"children":1865},{"__ignoreMap":546},[1866,1890,1913,1942,1970,1977,1984,2007,2034,2061,2068],{"type":552,"tag":616,"props":1867,"children":1868},{"class":618,"line":619},[1869,1873,1878,1882,1886],{"type":552,"tag":616,"props":1870,"children":1871},{"style":623},[1872],{"type":557,"value":626},{"type":552,"tag":616,"props":1874,"children":1875},{"style":629},[1876],{"type":557,"value":1877}," Square",{"type":552,"tag":616,"props":1879,"children":1880},{"style":623},[1881],{"type":557,"value":1112},{"type":552,"tag":616,"props":1883,"children":1884},{"style":645},[1885],{"type":557,"value":1542},{"type":552,"tag":616,"props":1887,"children":1888},{"style":635},[1889],{"type":557,"value":638},{"type":552,"tag":616,"props":1891,"children":1892},{"class":618,"line":641},[1893,1897,1901,1905,1909],{"type":552,"tag":616,"props":1894,"children":1895},{"style":645},[1896],{"type":557,"value":1658},{"type":552,"tag":616,"props":1898,"children":1899},{"style":635},[1900],{"type":557,"value":653},{"type":552,"tag":616,"props":1902,"children":1903},{"style":656},[1904],{"type":557,"value":1562},{"type":552,"tag":616,"props":1906,"children":1907},{"style":635},[1908],{"type":557,"value":664},{"type":552,"tag":616,"props":1910,"children":1911},{"style":635},[1912],{"type":557,"value":638},{"type":552,"tag":616,"props":1914,"children":1915},{"class":618,"line":671},[1916,1921,1925,1930,1934,1938],{"type":552,"tag":616,"props":1917,"children":1918},{"style":966},[1919],{"type":557,"value":1920},"    super",{"type":552,"tag":616,"props":1922,"children":1923},{"style":635},[1924],{"type":557,"value":974},{"type":552,"tag":616,"props":1926,"children":1927},{"style":645},[1928],{"type":557,"value":1929},"setWidth",{"type":552,"tag":616,"props":1931,"children":1932},{"style":635},[1933],{"type":557,"value":653},{"type":552,"tag":616,"props":1935,"children":1936},{"style":656},[1937],{"type":557,"value":1562},{"type":552,"tag":616,"props":1939,"children":1940},{"style":635},[1941],{"type":557,"value":1073},{"type":552,"tag":616,"props":1943,"children":1944},{"class":618,"line":681},[1945,1949,1953,1958,1962,1966],{"type":552,"tag":616,"props":1946,"children":1947},{"style":966},[1948],{"type":557,"value":1920},{"type":552,"tag":616,"props":1950,"children":1951},{"style":635},[1952],{"type":557,"value":974},{"type":552,"tag":616,"props":1954,"children":1955},{"style":645},[1956],{"type":557,"value":1957},"setHeight",{"type":552,"tag":616,"props":1959,"children":1960},{"style":635},[1961],{"type":557,"value":653},{"type":552,"tag":616,"props":1963,"children":1964},{"style":656},[1965],{"type":557,"value":1562},{"type":552,"tag":616,"props":1967,"children":1968},{"style":635},[1969],{"type":557,"value":1073},{"type":552,"tag":616,"props":1971,"children":1972},{"class":618,"line":690},[1973],{"type":552,"tag":616,"props":1974,"children":1975},{"style":635},[1976],{"type":557,"value":687},{"type":552,"tag":616,"props":1978,"children":1979},{"class":618,"line":700},[1980],{"type":552,"tag":616,"props":1981,"children":1982},{"emptyLinePlaceholder":694},[1983],{"type":557,"value":697},{"type":552,"tag":616,"props":1985,"children":1986},{"class":618,"line":718},[1987,1991,1995,1999,2003],{"type":552,"tag":616,"props":1988,"children":1989},{"style":645},[1990],{"type":557,"value":1723},{"type":552,"tag":616,"props":1992,"children":1993},{"style":635},[1994],{"type":557,"value":653},{"type":552,"tag":616,"props":1996,"children":1997},{"style":656},[1998],{"type":557,"value":1624},{"type":552,"tag":616,"props":2000,"children":2001},{"style":635},[2002],{"type":557,"value":664},{"type":552,"tag":616,"props":2004,"children":2005},{"style":635},[2006],{"type":557,"value":638},{"type":552,"tag":616,"props":2008,"children":2009},{"class":618,"line":727},[2010,2014,2018,2022,2026,2030],{"type":552,"tag":616,"props":2011,"children":2012},{"style":966},[2013],{"type":557,"value":1920},{"type":552,"tag":616,"props":2015,"children":2016},{"style":635},[2017],{"type":557,"value":974},{"type":552,"tag":616,"props":2019,"children":2020},{"style":645},[2021],{"type":557,"value":1929},{"type":552,"tag":616,"props":2023,"children":2024},{"style":635},[2025],{"type":557,"value":653},{"type":552,"tag":616,"props":2027,"children":2028},{"style":656},[2029],{"type":557,"value":1624},{"type":552,"tag":616,"props":2031,"children":2032},{"style":635},[2033],{"type":557,"value":1073},{"type":552,"tag":616,"props":2035,"children":2036},{"class":618,"line":735},[2037,2041,2045,2049,2053,2057],{"type":552,"tag":616,"props":2038,"children":2039},{"style":966},[2040],{"type":557,"value":1920},{"type":552,"tag":616,"props":2042,"children":2043},{"style":635},[2044],{"type":557,"value":974},{"type":552,"tag":616,"props":2046,"children":2047},{"style":645},[2048],{"type":557,"value":1957},{"type":552,"tag":616,"props":2050,"children":2051},{"style":635},[2052],{"type":557,"value":653},{"type":552,"tag":616,"props":2054,"children":2055},{"style":656},[2056],{"type":557,"value":1624},{"type":552,"tag":616,"props":2058,"children":2059},{"style":635},[2060],{"type":557,"value":1073},{"type":552,"tag":616,"props":2062,"children":2063},{"class":618,"line":879},[2064],{"type":552,"tag":616,"props":2065,"children":2066},{"style":635},[2067],{"type":557,"value":687},{"type":552,"tag":616,"props":2069,"children":2070},{"class":618,"line":887},[2071],{"type":552,"tag":616,"props":2072,"children":2073},{"style":635},[2074],{"type":557,"value":741},{"type":552,"tag":553,"props":2076,"children":2077},{},[2078],{"type":557,"value":2079},"这里的问题是，Square 子类在修改宽度或高度时，通过覆写 setWidth 和 setHeight 方法，强制宽和高相等，这与基类的行为不一致。如果在需要 Rectangle 的地方使用了 Square，可能会导致程序逻辑错误。",{"type":552,"tag":553,"props":2081,"children":2082},{},[2083],{"type":557,"value":2084},"这违反了里氏替换原则，因为子类修改了父类的预期行为。为了符合里氏替换原则，可能需要重新设计类的继承结构，或者使用更精确的命名来表达实际意图。",{"type":552,"tag":594,"props":2086,"children":2088},{"id":2087},"接口隔离原则",[2089],{"type":557,"value":2087},{"type":552,"tag":553,"props":2091,"children":2092},{},[2093],{"type":557,"value":2094},"接口隔离原则（Interface Segregation Principle，ISP） 是 SOLID 原则之一，它强调一个类不应该被强迫实现它不需要的接口。简而言之，一个类对另一个类的依赖应该建立在最小的接口上。",{"type":552,"tag":553,"props":2096,"children":2097},{},[2098],{"type":557,"value":2099},"在通俗的语言中，接口隔离原则告诉我们不应该让一个类依赖它不需要的接口，否则会导致类需要实现一些它根本不需要的方法。",{"type":552,"tag":553,"props":2101,"children":2102},{},[2103],{"type":557,"value":2104},"举例说明，假设我们有一个动物园的系统，其中有两种动物，一种会飞，一种会游泳：",{"type":552,"tag":605,"props":2106,"children":2108},{"className":607,"code":2107,"language":609,"meta":546,"style":546},"// 不遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n\n  swim() {\n    // 这是一个鸟类不需要的方法，违反接口隔离原则\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n\n  fly() {\n    // 这是一个鱼类不需要的方法，违反接口隔离原则\n  }\n}\n",[2109],{"type":552,"tag":612,"props":2110,"children":2111},{"__ignoreMap":546},[2112,2120,2136,2152,2160,2167,2174,2190,2198,2205,2212,2219,2235,2250,2258,2265,2272,2287,2295,2302],{"type":552,"tag":616,"props":2113,"children":2114},{"class":618,"line":619},[2115],{"type":552,"tag":616,"props":2116,"children":2117},{"style":675},[2118],{"type":557,"value":2119},"// 不遵循接口隔离原则的设计\n",{"type":552,"tag":616,"props":2121,"children":2122},{"class":618,"line":641},[2123,2127,2132],{"type":552,"tag":616,"props":2124,"children":2125},{"style":623},[2126],{"type":557,"value":626},{"type":552,"tag":616,"props":2128,"children":2129},{"style":629},[2130],{"type":557,"value":2131}," Bird",{"type":552,"tag":616,"props":2133,"children":2134},{"style":635},[2135],{"type":557,"value":638},{"type":552,"tag":616,"props":2137,"children":2138},{"class":618,"line":671},[2139,2144,2148],{"type":552,"tag":616,"props":2140,"children":2141},{"style":645},[2142],{"type":557,"value":2143},"  fly",{"type":552,"tag":616,"props":2145,"children":2146},{"style":635},[2147],{"type":557,"value":711},{"type":552,"tag":616,"props":2149,"children":2150},{"style":635},[2151],{"type":557,"value":638},{"type":552,"tag":616,"props":2153,"children":2154},{"class":618,"line":681},[2155],{"type":552,"tag":616,"props":2156,"children":2157},{"style":675},[2158],{"type":557,"value":2159},"    // 实现飞行逻辑\n",{"type":552,"tag":616,"props":2161,"children":2162},{"class":618,"line":690},[2163],{"type":552,"tag":616,"props":2164,"children":2165},{"style":635},[2166],{"type":557,"value":687},{"type":552,"tag":616,"props":2168,"children":2169},{"class":618,"line":700},[2170],{"type":552,"tag":616,"props":2171,"children":2172},{"emptyLinePlaceholder":694},[2173],{"type":557,"value":697},{"type":552,"tag":616,"props":2175,"children":2176},{"class":618,"line":718},[2177,2182,2186],{"type":552,"tag":616,"props":2178,"children":2179},{"style":645},[2180],{"type":557,"value":2181},"  swim",{"type":552,"tag":616,"props":2183,"children":2184},{"style":635},[2185],{"type":557,"value":711},{"type":552,"tag":616,"props":2187,"children":2188},{"style":635},[2189],{"type":557,"value":638},{"type":552,"tag":616,"props":2191,"children":2192},{"class":618,"line":727},[2193],{"type":552,"tag":616,"props":2194,"children":2195},{"style":675},[2196],{"type":557,"value":2197},"    // 这是一个鸟类不需要的方法，违反接口隔离原则\n",{"type":552,"tag":616,"props":2199,"children":2200},{"class":618,"line":735},[2201],{"type":552,"tag":616,"props":2202,"children":2203},{"style":635},[2204],{"type":557,"value":687},{"type":552,"tag":616,"props":2206,"children":2207},{"class":618,"line":879},[2208],{"type":552,"tag":616,"props":2209,"children":2210},{"style":635},[2211],{"type":557,"value":741},{"type":552,"tag":616,"props":2213,"children":2214},{"class":618,"line":887},[2215],{"type":552,"tag":616,"props":2216,"children":2217},{"emptyLinePlaceholder":694},[2218],{"type":557,"value":697},{"type":552,"tag":616,"props":2220,"children":2221},{"class":618,"line":1097},[2222,2226,2231],{"type":552,"tag":616,"props":2223,"children":2224},{"style":623},[2225],{"type":557,"value":626},{"type":552,"tag":616,"props":2227,"children":2228},{"style":629},[2229],{"type":557,"value":2230}," Fish",{"type":552,"tag":616,"props":2232,"children":2233},{"style":635},[2234],{"type":557,"value":638},{"type":552,"tag":616,"props":2236,"children":2237},{"class":618,"line":1123},[2238,2242,2246],{"type":552,"tag":616,"props":2239,"children":2240},{"style":645},[2241],{"type":557,"value":2181},{"type":552,"tag":616,"props":2243,"children":2244},{"style":635},[2245],{"type":557,"value":711},{"type":552,"tag":616,"props":2247,"children":2248},{"style":635},[2249],{"type":557,"value":638},{"type":552,"tag":616,"props":2251,"children":2252},{"class":618,"line":1139},[2253],{"type":552,"tag":616,"props":2254,"children":2255},{"style":675},[2256],{"type":557,"value":2257},"    // 实现游泳逻辑\n",{"type":552,"tag":616,"props":2259,"children":2260},{"class":618,"line":1176},[2261],{"type":552,"tag":616,"props":2262,"children":2263},{"style":635},[2264],{"type":557,"value":687},{"type":552,"tag":616,"props":2266,"children":2267},{"class":618,"line":1184},[2268],{"type":552,"tag":616,"props":2269,"children":2270},{"emptyLinePlaceholder":694},[2271],{"type":557,"value":697},{"type":552,"tag":616,"props":2273,"children":2274},{"class":618,"line":1192},[2275,2279,2283],{"type":552,"tag":616,"props":2276,"children":2277},{"style":645},[2278],{"type":557,"value":2143},{"type":552,"tag":616,"props":2280,"children":2281},{"style":635},[2282],{"type":557,"value":711},{"type":552,"tag":616,"props":2284,"children":2285},{"style":635},[2286],{"type":557,"value":638},{"type":552,"tag":616,"props":2288,"children":2289},{"class":618,"line":1200},[2290],{"type":552,"tag":616,"props":2291,"children":2292},{"style":675},[2293],{"type":557,"value":2294},"    // 这是一个鱼类不需要的方法，违反接口隔离原则\n",{"type":552,"tag":616,"props":2296,"children":2297},{"class":618,"line":1225},[2298],{"type":552,"tag":616,"props":2299,"children":2300},{"style":635},[2301],{"type":557,"value":687},{"type":552,"tag":616,"props":2303,"children":2304},{"class":618,"line":1241},[2305],{"type":552,"tag":616,"props":2306,"children":2307},{"style":635},[2308],{"type":557,"value":741},{"type":552,"tag":553,"props":2310,"children":2311},{},[2312],{"type":557,"value":2313},"在这个例子中，Bird 类实现了 fly 和 swim 两个方法，而 Fish 类也实现了 swim 和 fly 两个方法。这违反了接口隔离原则，因为每个类都被迫实现了它们不需要的方法。",{"type":552,"tag":553,"props":2315,"children":2316},{},[2317],{"type":557,"value":2318},"为了符合接口隔离原则，我们可以将接口拆分成更小的部分，让每个类只实现它们需要的方法：",{"type":552,"tag":605,"props":2320,"children":2322},{"className":607,"code":2321,"language":609,"meta":546,"style":546},"// 遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n}\n",[2323],{"type":552,"tag":612,"props":2324,"children":2325},{"__ignoreMap":546},[2326,2334,2349,2364,2371,2378,2385,2392,2407,2422,2429,2436],{"type":552,"tag":616,"props":2327,"children":2328},{"class":618,"line":619},[2329],{"type":552,"tag":616,"props":2330,"children":2331},{"style":675},[2332],{"type":557,"value":2333},"// 遵循接口隔离原则的设计\n",{"type":552,"tag":616,"props":2335,"children":2336},{"class":618,"line":641},[2337,2341,2345],{"type":552,"tag":616,"props":2338,"children":2339},{"style":623},[2340],{"type":557,"value":626},{"type":552,"tag":616,"props":2342,"children":2343},{"style":629},[2344],{"type":557,"value":2131},{"type":552,"tag":616,"props":2346,"children":2347},{"style":635},[2348],{"type":557,"value":638},{"type":552,"tag":616,"props":2350,"children":2351},{"class":618,"line":671},[2352,2356,2360],{"type":552,"tag":616,"props":2353,"children":2354},{"style":645},[2355],{"type":557,"value":2143},{"type":552,"tag":616,"props":2357,"children":2358},{"style":635},[2359],{"type":557,"value":711},{"type":552,"tag":616,"props":2361,"children":2362},{"style":635},[2363],{"type":557,"value":638},{"type":552,"tag":616,"props":2365,"children":2366},{"class":618,"line":681},[2367],{"type":552,"tag":616,"props":2368,"children":2369},{"style":675},[2370],{"type":557,"value":2159},{"type":552,"tag":616,"props":2372,"children":2373},{"class":618,"line":690},[2374],{"type":552,"tag":616,"props":2375,"children":2376},{"style":635},[2377],{"type":557,"value":687},{"type":552,"tag":616,"props":2379,"children":2380},{"class":618,"line":700},[2381],{"type":552,"tag":616,"props":2382,"children":2383},{"style":635},[2384],{"type":557,"value":741},{"type":552,"tag":616,"props":2386,"children":2387},{"class":618,"line":718},[2388],{"type":552,"tag":616,"props":2389,"children":2390},{"emptyLinePlaceholder":694},[2391],{"type":557,"value":697},{"type":552,"tag":616,"props":2393,"children":2394},{"class":618,"line":727},[2395,2399,2403],{"type":552,"tag":616,"props":2396,"children":2397},{"style":623},[2398],{"type":557,"value":626},{"type":552,"tag":616,"props":2400,"children":2401},{"style":629},[2402],{"type":557,"value":2230},{"type":552,"tag":616,"props":2404,"children":2405},{"style":635},[2406],{"type":557,"value":638},{"type":552,"tag":616,"props":2408,"children":2409},{"class":618,"line":735},[2410,2414,2418],{"type":552,"tag":616,"props":2411,"children":2412},{"style":645},[2413],{"type":557,"value":2181},{"type":552,"tag":616,"props":2415,"children":2416},{"style":635},[2417],{"type":557,"value":711},{"type":552,"tag":616,"props":2419,"children":2420},{"style":635},[2421],{"type":557,"value":638},{"type":552,"tag":616,"props":2423,"children":2424},{"class":618,"line":879},[2425],{"type":552,"tag":616,"props":2426,"children":2427},{"style":675},[2428],{"type":557,"value":2257},{"type":552,"tag":616,"props":2430,"children":2431},{"class":618,"line":887},[2432],{"type":552,"tag":616,"props":2433,"children":2434},{"style":635},[2435],{"type":557,"value":687},{"type":552,"tag":616,"props":2437,"children":2438},{"class":618,"line":1097},[2439],{"type":552,"tag":616,"props":2440,"children":2441},{"style":635},[2442],{"type":557,"value":741},{"type":552,"tag":553,"props":2444,"children":2445},{},[2446],{"type":557,"value":2447},"这样，每个类都只依赖于它们需要的接口，不再强迫实现不必要的方法。接口隔离原则的目标是使接口更具体，更贴近类的实际需求，从而提高系统的灵活性和可维护性。",{"type":552,"tag":594,"props":2449,"children":2451},{"id":2450},"依赖反转原则",[2452],{"type":557,"value":2450},{"type":552,"tag":553,"props":2454,"children":2455},{},[2456],{"type":557,"value":2457},"依赖反转原则（Dependency Inversion Principle，DIP） 是 SOLID 原则之一，它强调高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。",{"type":552,"tag":553,"props":2459,"children":2460},{},[2461],{"type":557,"value":2462},"举例说明，考虑一个简单的报告生成系统，有一个高层模块 ReportGenerator 负责生成报告：",{"type":552,"tag":605,"props":2464,"children":2466},{"className":607,"code":2465,"language":609,"meta":546,"style":546},"// 不遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor() {\n    this.pdfGenerator = new PDFGenerator(); // 依赖于具体的 PDF 生成器\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.pdfGenerator.generatePDF();\n  }\n}\n\nclass PDFGenerator {\n  generatePDF() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n",[2467],{"type":552,"tag":612,"props":2468,"children":2469},{"__ignoreMap":546},[2470,2478,2494,2509,2549,2556,2563,2579,2587,2616,2623,2630,2637,2652,2668,2676,2683],{"type":552,"tag":616,"props":2471,"children":2472},{"class":618,"line":619},[2473],{"type":552,"tag":616,"props":2474,"children":2475},{"style":675},[2476],{"type":557,"value":2477},"// 不遵循依赖反转原则的设计\n",{"type":552,"tag":616,"props":2479,"children":2480},{"class":618,"line":641},[2481,2485,2490],{"type":552,"tag":616,"props":2482,"children":2483},{"style":623},[2484],{"type":557,"value":626},{"type":552,"tag":616,"props":2486,"children":2487},{"style":629},[2488],{"type":557,"value":2489}," ReportGenerator",{"type":552,"tag":616,"props":2491,"children":2492},{"style":635},[2493],{"type":557,"value":638},{"type":552,"tag":616,"props":2495,"children":2496},{"class":618,"line":671},[2497,2501,2505],{"type":552,"tag":616,"props":2498,"children":2499},{"style":623},[2500],{"type":557,"value":943},{"type":552,"tag":616,"props":2502,"children":2503},{"style":635},[2504],{"type":557,"value":711},{"type":552,"tag":616,"props":2506,"children":2507},{"style":635},[2508],{"type":557,"value":638},{"type":552,"tag":616,"props":2510,"children":2511},{"class":618,"line":681},[2512,2516,2520,2525,2529,2534,2539,2544],{"type":552,"tag":616,"props":2513,"children":2514},{"style":966},[2515],{"type":557,"value":969},{"type":552,"tag":616,"props":2517,"children":2518},{"style":635},[2519],{"type":557,"value":974},{"type":552,"tag":616,"props":2521,"children":2522},{"style":656},[2523],{"type":557,"value":2524},"pdfGenerator",{"type":552,"tag":616,"props":2526,"children":2527},{"style":635},[2528],{"type":557,"value":983},{"type":552,"tag":616,"props":2530,"children":2531},{"style":623},[2532],{"type":557,"value":2533}," new",{"type":552,"tag":616,"props":2535,"children":2536},{"style":645},[2537],{"type":557,"value":2538}," PDFGenerator",{"type":552,"tag":616,"props":2540,"children":2541},{"style":635},[2542],{"type":557,"value":2543},"();",{"type":552,"tag":616,"props":2545,"children":2546},{"style":675},[2547],{"type":557,"value":2548}," // 依赖于具体的 PDF 生成器\n",{"type":552,"tag":616,"props":2550,"children":2551},{"class":618,"line":690},[2552],{"type":552,"tag":616,"props":2553,"children":2554},{"style":635},[2555],{"type":557,"value":687},{"type":552,"tag":616,"props":2557,"children":2558},{"class":618,"line":700},[2559],{"type":552,"tag":616,"props":2560,"children":2561},{"emptyLinePlaceholder":694},[2562],{"type":557,"value":697},{"type":552,"tag":616,"props":2564,"children":2565},{"class":618,"line":718},[2566,2571,2575],{"type":552,"tag":616,"props":2567,"children":2568},{"style":645},[2569],{"type":557,"value":2570},"  generateReport",{"type":552,"tag":616,"props":2572,"children":2573},{"style":635},[2574],{"type":557,"value":711},{"type":552,"tag":616,"props":2576,"children":2577},{"style":635},[2578],{"type":557,"value":638},{"type":552,"tag":616,"props":2580,"children":2581},{"class":618,"line":727},[2582],{"type":552,"tag":616,"props":2583,"children":2584},{"style":675},[2585],{"type":557,"value":2586},"    // 生成报告的逻辑\n",{"type":552,"tag":616,"props":2588,"children":2589},{"class":618,"line":735},[2590,2594,2598,2602,2606,2611],{"type":552,"tag":616,"props":2591,"children":2592},{"style":966},[2593],{"type":557,"value":969},{"type":552,"tag":616,"props":2595,"children":2596},{"style":635},[2597],{"type":557,"value":974},{"type":552,"tag":616,"props":2599,"children":2600},{"style":656},[2601],{"type":557,"value":2524},{"type":552,"tag":616,"props":2603,"children":2604},{"style":635},[2605],{"type":557,"value":974},{"type":552,"tag":616,"props":2607,"children":2608},{"style":645},[2609],{"type":557,"value":2610},"generatePDF",{"type":552,"tag":616,"props":2612,"children":2613},{"style":635},[2614],{"type":557,"value":2615},"();\n",{"type":552,"tag":616,"props":2617,"children":2618},{"class":618,"line":879},[2619],{"type":552,"tag":616,"props":2620,"children":2621},{"style":635},[2622],{"type":557,"value":687},{"type":552,"tag":616,"props":2624,"children":2625},{"class":618,"line":887},[2626],{"type":552,"tag":616,"props":2627,"children":2628},{"style":635},[2629],{"type":557,"value":741},{"type":552,"tag":616,"props":2631,"children":2632},{"class":618,"line":1097},[2633],{"type":552,"tag":616,"props":2634,"children":2635},{"emptyLinePlaceholder":694},[2636],{"type":557,"value":697},{"type":552,"tag":616,"props":2638,"children":2639},{"class":618,"line":1123},[2640,2644,2648],{"type":552,"tag":616,"props":2641,"children":2642},{"style":623},[2643],{"type":557,"value":626},{"type":552,"tag":616,"props":2645,"children":2646},{"style":629},[2647],{"type":557,"value":2538},{"type":552,"tag":616,"props":2649,"children":2650},{"style":635},[2651],{"type":557,"value":638},{"type":552,"tag":616,"props":2653,"children":2654},{"class":618,"line":1139},[2655,2660,2664],{"type":552,"tag":616,"props":2656,"children":2657},{"style":645},[2658],{"type":557,"value":2659},"  generatePDF",{"type":552,"tag":616,"props":2661,"children":2662},{"style":635},[2663],{"type":557,"value":711},{"type":552,"tag":616,"props":2665,"children":2666},{"style":635},[2667],{"type":557,"value":638},{"type":552,"tag":616,"props":2669,"children":2670},{"class":618,"line":1176},[2671],{"type":552,"tag":616,"props":2672,"children":2673},{"style":675},[2674],{"type":557,"value":2675},"    // 具体的 PDF 生成逻辑\n",{"type":552,"tag":616,"props":2677,"children":2678},{"class":618,"line":1184},[2679],{"type":552,"tag":616,"props":2680,"children":2681},{"style":635},[2682],{"type":557,"value":687},{"type":552,"tag":616,"props":2684,"children":2685},{"class":618,"line":1192},[2686],{"type":552,"tag":616,"props":2687,"children":2688},{"style":635},[2689],{"type":557,"value":741},{"type":552,"tag":553,"props":2691,"children":2692},{},[2693],{"type":557,"value":2694},"在这个设计中，ReportGenerator 直接依赖于具体的 PDFGenerator 类，这违反了依赖反转原则。如果我们想使用其他类型的报告生成器，例如 HTMLGenerator，就需要修改 ReportGenerator 类。",{"type":552,"tag":553,"props":2696,"children":2697},{},[2698],{"type":557,"value":2699},"为了符合依赖反转原则，我们应该通过抽象来解耦高层和低层模块：",{"type":552,"tag":605,"props":2701,"children":2703},{"className":607,"code":2702,"language":609,"meta":546,"style":546},"// 遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor(generator) {\n    this.generator = generator; // 依赖于抽象的报告生成器接口\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.generator.generate();\n  }\n}\n\nclass PDFGenerator {\n  generate() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n\nclass HTMLGenerator {\n  generate() {\n    // 具体的 HTML 生成逻辑\n  }\n}\n",[2704],{"type":552,"tag":612,"props":2705,"children":2706},{"__ignoreMap":546},[2707,2715,2730,2754,2788,2795,2802,2817,2824,2852,2859,2866,2873,2888,2904,2911,2918,2925,2932,2948,2963,2971,2978],{"type":552,"tag":616,"props":2708,"children":2709},{"class":618,"line":619},[2710],{"type":552,"tag":616,"props":2711,"children":2712},{"style":675},[2713],{"type":557,"value":2714},"// 遵循依赖反转原则的设计\n",{"type":552,"tag":616,"props":2716,"children":2717},{"class":618,"line":641},[2718,2722,2726],{"type":552,"tag":616,"props":2719,"children":2720},{"style":623},[2721],{"type":557,"value":626},{"type":552,"tag":616,"props":2723,"children":2724},{"style":629},[2725],{"type":557,"value":2489},{"type":552,"tag":616,"props":2727,"children":2728},{"style":635},[2729],{"type":557,"value":638},{"type":552,"tag":616,"props":2731,"children":2732},{"class":618,"line":671},[2733,2737,2741,2746,2750],{"type":552,"tag":616,"props":2734,"children":2735},{"style":623},[2736],{"type":557,"value":943},{"type":552,"tag":616,"props":2738,"children":2739},{"style":635},[2740],{"type":557,"value":653},{"type":552,"tag":616,"props":2742,"children":2743},{"style":656},[2744],{"type":557,"value":2745},"generator",{"type":552,"tag":616,"props":2747,"children":2748},{"style":635},[2749],{"type":557,"value":664},{"type":552,"tag":616,"props":2751,"children":2752},{"style":635},[2753],{"type":557,"value":638},{"type":552,"tag":616,"props":2755,"children":2756},{"class":618,"line":681},[2757,2761,2765,2769,2773,2778,2783],{"type":552,"tag":616,"props":2758,"children":2759},{"style":966},[2760],{"type":557,"value":969},{"type":552,"tag":616,"props":2762,"children":2763},{"style":635},[2764],{"type":557,"value":974},{"type":552,"tag":616,"props":2766,"children":2767},{"style":656},[2768],{"type":557,"value":2745},{"type":552,"tag":616,"props":2770,"children":2771},{"style":635},[2772],{"type":557,"value":983},{"type":552,"tag":616,"props":2774,"children":2775},{"style":656},[2776],{"type":557,"value":2777}," generator",{"type":552,"tag":616,"props":2779,"children":2780},{"style":635},[2781],{"type":557,"value":2782},";",{"type":552,"tag":616,"props":2784,"children":2785},{"style":675},[2786],{"type":557,"value":2787}," // 依赖于抽象的报告生成器接口\n",{"type":552,"tag":616,"props":2789,"children":2790},{"class":618,"line":690},[2791],{"type":552,"tag":616,"props":2792,"children":2793},{"style":635},[2794],{"type":557,"value":687},{"type":552,"tag":616,"props":2796,"children":2797},{"class":618,"line":700},[2798],{"type":552,"tag":616,"props":2799,"children":2800},{"emptyLinePlaceholder":694},[2801],{"type":557,"value":697},{"type":552,"tag":616,"props":2803,"children":2804},{"class":618,"line":718},[2805,2809,2813],{"type":552,"tag":616,"props":2806,"children":2807},{"style":645},[2808],{"type":557,"value":2570},{"type":552,"tag":616,"props":2810,"children":2811},{"style":635},[2812],{"type":557,"value":711},{"type":552,"tag":616,"props":2814,"children":2815},{"style":635},[2816],{"type":557,"value":638},{"type":552,"tag":616,"props":2818,"children":2819},{"class":618,"line":727},[2820],{"type":552,"tag":616,"props":2821,"children":2822},{"style":675},[2823],{"type":557,"value":2586},{"type":552,"tag":616,"props":2825,"children":2826},{"class":618,"line":735},[2827,2831,2835,2839,2843,2848],{"type":552,"tag":616,"props":2828,"children":2829},{"style":966},[2830],{"type":557,"value":969},{"type":552,"tag":616,"props":2832,"children":2833},{"style":635},[2834],{"type":557,"value":974},{"type":552,"tag":616,"props":2836,"children":2837},{"style":656},[2838],{"type":557,"value":2745},{"type":552,"tag":616,"props":2840,"children":2841},{"style":635},[2842],{"type":557,"value":974},{"type":552,"tag":616,"props":2844,"children":2845},{"style":645},[2846],{"type":557,"value":2847},"generate",{"type":552,"tag":616,"props":2849,"children":2850},{"style":635},[2851],{"type":557,"value":2615},{"type":552,"tag":616,"props":2853,"children":2854},{"class":618,"line":879},[2855],{"type":552,"tag":616,"props":2856,"children":2857},{"style":635},[2858],{"type":557,"value":687},{"type":552,"tag":616,"props":2860,"children":2861},{"class":618,"line":887},[2862],{"type":552,"tag":616,"props":2863,"children":2864},{"style":635},[2865],{"type":557,"value":741},{"type":552,"tag":616,"props":2867,"children":2868},{"class":618,"line":1097},[2869],{"type":552,"tag":616,"props":2870,"children":2871},{"emptyLinePlaceholder":694},[2872],{"type":557,"value":697},{"type":552,"tag":616,"props":2874,"children":2875},{"class":618,"line":1123},[2876,2880,2884],{"type":552,"tag":616,"props":2877,"children":2878},{"style":623},[2879],{"type":557,"value":626},{"type":552,"tag":616,"props":2881,"children":2882},{"style":629},[2883],{"type":557,"value":2538},{"type":552,"tag":616,"props":2885,"children":2886},{"style":635},[2887],{"type":557,"value":638},{"type":552,"tag":616,"props":2889,"children":2890},{"class":618,"line":1139},[2891,2896,2900],{"type":552,"tag":616,"props":2892,"children":2893},{"style":645},[2894],{"type":557,"value":2895},"  generate",{"type":552,"tag":616,"props":2897,"children":2898},{"style":635},[2899],{"type":557,"value":711},{"type":552,"tag":616,"props":2901,"children":2902},{"style":635},[2903],{"type":557,"value":638},{"type":552,"tag":616,"props":2905,"children":2906},{"class":618,"line":1176},[2907],{"type":552,"tag":616,"props":2908,"children":2909},{"style":675},[2910],{"type":557,"value":2675},{"type":552,"tag":616,"props":2912,"children":2913},{"class":618,"line":1184},[2914],{"type":552,"tag":616,"props":2915,"children":2916},{"style":635},[2917],{"type":557,"value":687},{"type":552,"tag":616,"props":2919,"children":2920},{"class":618,"line":1192},[2921],{"type":552,"tag":616,"props":2922,"children":2923},{"style":635},[2924],{"type":557,"value":741},{"type":552,"tag":616,"props":2926,"children":2927},{"class":618,"line":1200},[2928],{"type":552,"tag":616,"props":2929,"children":2930},{"emptyLinePlaceholder":694},[2931],{"type":557,"value":697},{"type":552,"tag":616,"props":2933,"children":2934},{"class":618,"line":1225},[2935,2939,2944],{"type":552,"tag":616,"props":2936,"children":2937},{"style":623},[2938],{"type":557,"value":626},{"type":552,"tag":616,"props":2940,"children":2941},{"style":629},[2942],{"type":557,"value":2943}," HTMLGenerator",{"type":552,"tag":616,"props":2945,"children":2946},{"style":635},[2947],{"type":557,"value":638},{"type":552,"tag":616,"props":2949,"children":2950},{"class":618,"line":1241},[2951,2955,2959],{"type":552,"tag":616,"props":2952,"children":2953},{"style":645},[2954],{"type":557,"value":2895},{"type":552,"tag":616,"props":2956,"children":2957},{"style":635},[2958],{"type":557,"value":711},{"type":552,"tag":616,"props":2960,"children":2961},{"style":635},[2962],{"type":557,"value":638},{"type":552,"tag":616,"props":2964,"children":2965},{"class":618,"line":1278},[2966],{"type":552,"tag":616,"props":2967,"children":2968},{"style":675},[2969],{"type":557,"value":2970},"    // 具体的 HTML 生成逻辑\n",{"type":552,"tag":616,"props":2972,"children":2973},{"class":618,"line":1286},[2974],{"type":552,"tag":616,"props":2975,"children":2976},{"style":635},[2977],{"type":557,"value":687},{"type":552,"tag":616,"props":2979,"children":2981},{"class":618,"line":2980},23,[2982],{"type":552,"tag":616,"props":2983,"children":2984},{"style":635},[2985],{"type":557,"value":741},{"type":552,"tag":553,"props":2987,"children":2988},{},[2989],{"type":557,"value":2990},"现在，ReportGenerator 不再直接依赖于具体的实现，而是依赖于抽象的报告生成器接口。这使得我们可以轻松地扩展系统，例如添加新的报告生成器，而不需要修改 ReportGenerator 类。这样的设计更加灵活，符合依赖反转原则。",{"type":552,"tag":2992,"props":2993,"children":2994},"style",{},[2995],{"type":557,"value":2996},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":546,"searchDepth":690,"depth":690,"links":2998},[2999,3000,3001,3002,3003],{"id":596,"depth":641,"text":596},{"id":900,"depth":641,"text":900},{"id":1506,"depth":641,"text":1506},{"id":2087,"depth":641,"text":2087},{"id":2450,"depth":641,"text":2450},"markdown","content:4.design-mode:1.thoughts-principles.md","content","4.design-mode/1.thoughts-principles.md","md",[3010,3011],{"_path":521,"title":520,"description":546},{"_path":538,"title":537,"description":546},1714099681542]