[{"data":1,"prerenderedAt":2947},["Reactive",2],{"navigation":3,"/design-mode/thoughts-principles":478,"/design-mode/thoughts-principles-surround":2944},[4,269,298,446,454,463],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":445},"代码考核","/code-assessment",[302,351,438],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,331,344],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328],{"title":311,"_path":312},"ajax","/code-assessment/source/native-api/ajax",{"title":314,"_path":315},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":317,"_path":318},"new 操作符","/code-assessment/source/native-api/new",{"title":320,"_path":321},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":323,"_path":324},"定时器","/code-assessment/source/native-api/timer",{"title":326,"_path":327},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":329,"_path":330},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":332,"_path":333,"children":334},"数组 Array","/code-assessment/source/array",[335,338,341],{"title":336,"_path":337},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":339,"_path":340},"数组扁平化","/code-assessment/source/array/flat",{"title":342,"_path":343},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":345,"_path":346,"children":347},"字符串 String","/code-assessment/source/string",[348],{"title":349,"_path":350},"repeat()","/code-assessment/source/string/repeat",{"title":352,"_path":353,"children":354},"业务场景","/code-assessment/scene",[355,377,387,390,393,396,399,402,405,408,411,414,417,420,423,426,429,432,435],{"title":356,"_path":357,"children":358},"Promise","/code-assessment/scene/promise",[359,362,365,368,371,374],{"title":360,"_path":361},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":363,"_path":364},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":366,"_path":367},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":369,"_path":370},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":372,"_path":373},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":375,"_path":376},"promise 每隔 1s 输出","/code-assessment/scene/promise/promise-output-every-1s",{"title":378,"_path":379,"children":380},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[381,384],{"title":382,"_path":383},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":385,"_path":386},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":388,"_path":389},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":391,"_path":392},"倒计时","/code-assessment/scene/countdown",{"title":394,"_path":395},"日期格式化","/code-assessment/scene/date-format",{"title":397,"_path":398},"实现前端路由","/code-assessment/scene/frontend-route",{"title":400,"_path":401},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":403,"_path":404},"lodash.get","/code-assessment/scene/lodash-get",{"title":406,"_path":407},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":409,"_path":410},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":412,"_path":413},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":415,"_path":416},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":418,"_path":419},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":421,"_path":422},"随机数","/code-assessment/scene/random-number",{"title":424,"_path":425},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":427,"_path":428},"sku 算法实现","/code-assessment/scene/sku",{"title":430,"_path":431},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":433,"_path":434},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":436,"_path":437},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":439,"_path":440,"children":441},"Ts 类型挑战","/code-assessment/type-challeges",[442],{"title":443,"_path":444},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":447,"_path":448,"children":449,"icon":453},"项目","/project",[450],{"title":451,"_path":452},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":455,"_path":456,"children":457,"icon":462},"设计模式","/design-mode",[458,459],{"title":455,"_path":456},{"title":460,"_path":461},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":464,"_path":465,"children":466,"icon":477},"后端语言","/backend-languages",[467],{"title":468,"_path":469,"children":470},"Python","/backend-languages/python",[471,474],{"title":472,"_path":473},"基础","/backend-languages/python/base",{"title":475,"_path":476},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":461,"_dir":479,"_draft":480,"_partial":480,"_locale":481,"title":460,"description":482,"body":483,"_type":2939,"_id":2940,"_source":2941,"_file":2942,"_extension":2943},"design-mode",false,"","SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。这些原则由 Robert C. Martin 等人提出，它们包括以下五个原则：",{"type":484,"children":485,"toc":2932},"root",[486,493,523,528,534,539,677,682,696,701,828,833,838,843,848,1227,1232,1237,1429,1434,1439,1444,1449,1454,1459,1789,1794,2010,2015,2020,2025,2030,2035,2040,2244,2249,2254,2378,2383,2388,2393,2398,2625,2630,2635,2921,2926],{"type":487,"tag":488,"props":489,"children":490},"element","p",{},[491],{"type":492,"value":482},"text",{"type":487,"tag":494,"props":495,"children":496},"ul",{},[497,503,508,513,518],{"type":487,"tag":498,"props":499,"children":500},"li",{},[501],{"type":492,"value":502},"单一职责原则（Single Responsibility Principle，SRP）",{"type":487,"tag":498,"props":504,"children":505},{},[506],{"type":492,"value":507},"开放/封闭原则（Open/Closed Principle，OCP）",{"type":487,"tag":498,"props":509,"children":510},{},[511],{"type":492,"value":512},"里氏替换原则（Liskov Substitution Principle，LSP）",{"type":487,"tag":498,"props":514,"children":515},{},[516],{"type":492,"value":517},"接口隔离原则（Interface Segregation Principle，ISP）",{"type":487,"tag":498,"props":519,"children":520},{},[521],{"type":492,"value":522},"依赖反转原则（Dependency Inversion Principle，DIP）",{"type":487,"tag":488,"props":524,"children":525},{},[526],{"type":492,"value":527},"这些原则共同促使开发者创建具有高内聚、低耦合、易扩展和易维护性的软件系统。遵循这些原则有助于构建更健壮的面向对象系统，提高代码质量和可维护性。",{"type":487,"tag":529,"props":530,"children":532},"h2",{"id":531},"单一职责原则",[533],{"type":492,"value":531},{"type":487,"tag":488,"props":535,"children":536},{},[537],{"type":492,"value":538},"单一职责原则（Single Responsibility Principle，SRP）要求一个类或者模块只负责完成一个职责（或者功能）。 假设我们有一个简单的厨师类，它负责烹饪和洗碗两个职责：",{"type":487,"tag":540,"props":541,"children":545},"pre",{"className":542,"code":543,"language":544,"meta":481,"style":481},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n","js",[546],{"type":487,"tag":547,"props":548,"children":549},"code",{"__ignoreMap":481},[550,574,604,614,623,633,651,660,668],{"type":487,"tag":551,"props":552,"children":555},"span",{"class":553,"line":554},"line",1,[556,562,568],{"type":487,"tag":551,"props":557,"children":559},{"style":558},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[560],{"type":492,"value":561},"class",{"type":487,"tag":551,"props":563,"children":565},{"style":564},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[566],{"type":492,"value":567}," Chef",{"type":487,"tag":551,"props":569,"children":571},{"style":570},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[572],{"type":492,"value":573}," {\n",{"type":487,"tag":551,"props":575,"children":577},{"class":553,"line":576},2,[578,584,589,595,600],{"type":487,"tag":551,"props":579,"children":581},{"style":580},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[582],{"type":492,"value":583},"  cookDish",{"type":487,"tag":551,"props":585,"children":586},{"style":570},[587],{"type":492,"value":588},"(",{"type":487,"tag":551,"props":590,"children":592},{"style":591},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[593],{"type":492,"value":594},"dish",{"type":487,"tag":551,"props":596,"children":597},{"style":570},[598],{"type":492,"value":599},")",{"type":487,"tag":551,"props":601,"children":602},{"style":570},[603],{"type":492,"value":573},{"type":487,"tag":551,"props":605,"children":607},{"class":553,"line":606},3,[608],{"type":487,"tag":551,"props":609,"children":611},{"style":610},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[612],{"type":492,"value":613},"    // 烹饪菜品的具体实现\n",{"type":487,"tag":551,"props":615,"children":617},{"class":553,"line":616},4,[618],{"type":487,"tag":551,"props":619,"children":620},{"style":570},[621],{"type":492,"value":622},"  }\n",{"type":487,"tag":551,"props":624,"children":626},{"class":553,"line":625},5,[627],{"type":487,"tag":551,"props":628,"children":630},{"emptyLinePlaceholder":629},true,[631],{"type":492,"value":632},"\n",{"type":487,"tag":551,"props":634,"children":636},{"class":553,"line":635},6,[637,642,647],{"type":487,"tag":551,"props":638,"children":639},{"style":580},[640],{"type":492,"value":641},"  washDishes",{"type":487,"tag":551,"props":643,"children":644},{"style":570},[645],{"type":492,"value":646},"()",{"type":487,"tag":551,"props":648,"children":649},{"style":570},[650],{"type":492,"value":573},{"type":487,"tag":551,"props":652,"children":654},{"class":553,"line":653},7,[655],{"type":487,"tag":551,"props":656,"children":657},{"style":610},[658],{"type":492,"value":659},"    // 洗碗的具体实现\n",{"type":487,"tag":551,"props":661,"children":663},{"class":553,"line":662},8,[664],{"type":487,"tag":551,"props":665,"children":666},{"style":570},[667],{"type":492,"value":622},{"type":487,"tag":551,"props":669,"children":671},{"class":553,"line":670},9,[672],{"type":487,"tag":551,"props":673,"children":674},{"style":570},[675],{"type":492,"value":676},"}\n",{"type":487,"tag":488,"props":678,"children":679},{},[680],{"type":492,"value":681},"这个类违反了单一职责原则，因为它有两个职责：烹饪和洗碗。这样的设计可能导致以下问题：",{"type":487,"tag":683,"props":684,"children":685},"ol",{},[686,691],{"type":487,"tag":498,"props":687,"children":688},{},[689],{"type":492,"value":690},"如果厨师的烹饪逻辑变化，需要修改 cookDish 方法，这可能会影响洗碗的部分。",{"type":487,"tag":498,"props":692,"children":693},{},[694],{"type":492,"value":695},"如果洗碗的逻辑变化，需要修改 washDishes 方法，这可能会影响烹饪的部分。",{"type":487,"tag":488,"props":697,"children":698},{},[699],{"type":492,"value":700},"按照单一职责原则，我们应该将这两个职责分开，分别由不同的类负责：",{"type":487,"tag":540,"props":702,"children":704},{"className":542,"code":703,"language":544,"meta":481,"style":481},"class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n}\n\nclass Dishwasher {\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n",[705],{"type":487,"tag":547,"props":706,"children":707},{"__ignoreMap":481},[708,723,746,753,760,767,774,790,805,812,820],{"type":487,"tag":551,"props":709,"children":710},{"class":553,"line":554},[711,715,719],{"type":487,"tag":551,"props":712,"children":713},{"style":558},[714],{"type":492,"value":561},{"type":487,"tag":551,"props":716,"children":717},{"style":564},[718],{"type":492,"value":567},{"type":487,"tag":551,"props":720,"children":721},{"style":570},[722],{"type":492,"value":573},{"type":487,"tag":551,"props":724,"children":725},{"class":553,"line":576},[726,730,734,738,742],{"type":487,"tag":551,"props":727,"children":728},{"style":580},[729],{"type":492,"value":583},{"type":487,"tag":551,"props":731,"children":732},{"style":570},[733],{"type":492,"value":588},{"type":487,"tag":551,"props":735,"children":736},{"style":591},[737],{"type":492,"value":594},{"type":487,"tag":551,"props":739,"children":740},{"style":570},[741],{"type":492,"value":599},{"type":487,"tag":551,"props":743,"children":744},{"style":570},[745],{"type":492,"value":573},{"type":487,"tag":551,"props":747,"children":748},{"class":553,"line":606},[749],{"type":487,"tag":551,"props":750,"children":751},{"style":610},[752],{"type":492,"value":613},{"type":487,"tag":551,"props":754,"children":755},{"class":553,"line":616},[756],{"type":487,"tag":551,"props":757,"children":758},{"style":570},[759],{"type":492,"value":622},{"type":487,"tag":551,"props":761,"children":762},{"class":553,"line":625},[763],{"type":487,"tag":551,"props":764,"children":765},{"style":570},[766],{"type":492,"value":676},{"type":487,"tag":551,"props":768,"children":769},{"class":553,"line":635},[770],{"type":487,"tag":551,"props":771,"children":772},{"emptyLinePlaceholder":629},[773],{"type":492,"value":632},{"type":487,"tag":551,"props":775,"children":776},{"class":553,"line":653},[777,781,786],{"type":487,"tag":551,"props":778,"children":779},{"style":558},[780],{"type":492,"value":561},{"type":487,"tag":551,"props":782,"children":783},{"style":564},[784],{"type":492,"value":785}," Dishwasher",{"type":487,"tag":551,"props":787,"children":788},{"style":570},[789],{"type":492,"value":573},{"type":487,"tag":551,"props":791,"children":792},{"class":553,"line":662},[793,797,801],{"type":487,"tag":551,"props":794,"children":795},{"style":580},[796],{"type":492,"value":641},{"type":487,"tag":551,"props":798,"children":799},{"style":570},[800],{"type":492,"value":646},{"type":487,"tag":551,"props":802,"children":803},{"style":570},[804],{"type":492,"value":573},{"type":487,"tag":551,"props":806,"children":807},{"class":553,"line":670},[808],{"type":487,"tag":551,"props":809,"children":810},{"style":610},[811],{"type":492,"value":659},{"type":487,"tag":551,"props":813,"children":815},{"class":553,"line":814},10,[816],{"type":487,"tag":551,"props":817,"children":818},{"style":570},[819],{"type":492,"value":622},{"type":487,"tag":551,"props":821,"children":823},{"class":553,"line":822},11,[824],{"type":487,"tag":551,"props":825,"children":826},{"style":570},[827],{"type":492,"value":676},{"type":487,"tag":488,"props":829,"children":830},{},[831],{"type":492,"value":832},"这样，Chef 类专注于烹饪，而 Dishwasher 类专注于洗碗。每个类都有一个单一的职责，使得代码更清晰、易于理解，并且在未来的变更中更具弹性。",{"type":487,"tag":529,"props":834,"children":836},{"id":835},"开放封闭原则",[837],{"type":492,"value":835},{"type":487,"tag":488,"props":839,"children":840},{},[841],{"type":492,"value":842},"开关封闭原则（Open/Closed Principle，OCP）要求软件实体（例如类、模块、函数等）应该对扩展开放，对修改关闭。简而言之，一个模块在扩展新功能时不应该修改原有的代码，而是通过添加新的代码来实现扩展。",{"type":487,"tag":488,"props":844,"children":845},{},[846],{"type":492,"value":847},"考虑一个动物园的场景。我们有一些动物，每个动物都会发出叫声。初始设计如下：",{"type":487,"tag":540,"props":849,"children":851},{"className":542,"code":850,"language":544,"meta":481,"style":481},"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    // 默认的叫声\n    console.log(\"Some generic animal sound\");\n  }\n}\n\nclass Lion extends Animal {\n  makeSound() {\n    console.log(\"Roar!\");\n  }\n}\n\nclass Elephant extends Animal {\n  makeSound() {\n    console.log(\"Trumpet!\");\n  }\n}\n",[852],{"type":487,"tag":547,"props":853,"children":854},{"__ignoreMap":481},[855,871,896,929,936,943,959,967,1009,1016,1023,1030,1056,1072,1109,1117,1125,1133,1158,1174,1211,1219],{"type":487,"tag":551,"props":856,"children":857},{"class":553,"line":554},[858,862,867],{"type":487,"tag":551,"props":859,"children":860},{"style":558},[861],{"type":492,"value":561},{"type":487,"tag":551,"props":863,"children":864},{"style":564},[865],{"type":492,"value":866}," Animal",{"type":487,"tag":551,"props":868,"children":869},{"style":570},[870],{"type":492,"value":573},{"type":487,"tag":551,"props":872,"children":873},{"class":553,"line":576},[874,879,883,888,892],{"type":487,"tag":551,"props":875,"children":876},{"style":558},[877],{"type":492,"value":878},"  constructor",{"type":487,"tag":551,"props":880,"children":881},{"style":570},[882],{"type":492,"value":588},{"type":487,"tag":551,"props":884,"children":885},{"style":591},[886],{"type":492,"value":887},"name",{"type":487,"tag":551,"props":889,"children":890},{"style":570},[891],{"type":492,"value":599},{"type":487,"tag":551,"props":893,"children":894},{"style":570},[895],{"type":492,"value":573},{"type":487,"tag":551,"props":897,"children":898},{"class":553,"line":606},[899,905,910,914,919,924],{"type":487,"tag":551,"props":900,"children":902},{"style":901},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[903],{"type":492,"value":904},"    this",{"type":487,"tag":551,"props":906,"children":907},{"style":570},[908],{"type":492,"value":909},".",{"type":487,"tag":551,"props":911,"children":912},{"style":591},[913],{"type":492,"value":887},{"type":487,"tag":551,"props":915,"children":916},{"style":570},[917],{"type":492,"value":918}," =",{"type":487,"tag":551,"props":920,"children":921},{"style":591},[922],{"type":492,"value":923}," name",{"type":487,"tag":551,"props":925,"children":926},{"style":570},[927],{"type":492,"value":928},";\n",{"type":487,"tag":551,"props":930,"children":931},{"class":553,"line":616},[932],{"type":487,"tag":551,"props":933,"children":934},{"style":570},[935],{"type":492,"value":622},{"type":487,"tag":551,"props":937,"children":938},{"class":553,"line":625},[939],{"type":487,"tag":551,"props":940,"children":941},{"emptyLinePlaceholder":629},[942],{"type":492,"value":632},{"type":487,"tag":551,"props":944,"children":945},{"class":553,"line":635},[946,951,955],{"type":487,"tag":551,"props":947,"children":948},{"style":580},[949],{"type":492,"value":950},"  makeSound",{"type":487,"tag":551,"props":952,"children":953},{"style":570},[954],{"type":492,"value":646},{"type":487,"tag":551,"props":956,"children":957},{"style":570},[958],{"type":492,"value":573},{"type":487,"tag":551,"props":960,"children":961},{"class":553,"line":653},[962],{"type":487,"tag":551,"props":963,"children":964},{"style":610},[965],{"type":492,"value":966},"    // 默认的叫声\n",{"type":487,"tag":551,"props":968,"children":969},{"class":553,"line":662},[970,975,979,984,988,994,1000,1004],{"type":487,"tag":551,"props":971,"children":972},{"style":591},[973],{"type":492,"value":974},"    console",{"type":487,"tag":551,"props":976,"children":977},{"style":570},[978],{"type":492,"value":909},{"type":487,"tag":551,"props":980,"children":981},{"style":580},[982],{"type":492,"value":983},"log",{"type":487,"tag":551,"props":985,"children":986},{"style":570},[987],{"type":492,"value":588},{"type":487,"tag":551,"props":989,"children":991},{"style":990},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[992],{"type":492,"value":993},"\"",{"type":487,"tag":551,"props":995,"children":997},{"style":996},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[998],{"type":492,"value":999},"Some generic animal sound",{"type":487,"tag":551,"props":1001,"children":1002},{"style":990},[1003],{"type":492,"value":993},{"type":487,"tag":551,"props":1005,"children":1006},{"style":570},[1007],{"type":492,"value":1008},");\n",{"type":487,"tag":551,"props":1010,"children":1011},{"class":553,"line":670},[1012],{"type":487,"tag":551,"props":1013,"children":1014},{"style":570},[1015],{"type":492,"value":622},{"type":487,"tag":551,"props":1017,"children":1018},{"class":553,"line":814},[1019],{"type":487,"tag":551,"props":1020,"children":1021},{"style":570},[1022],{"type":492,"value":676},{"type":487,"tag":551,"props":1024,"children":1025},{"class":553,"line":822},[1026],{"type":487,"tag":551,"props":1027,"children":1028},{"emptyLinePlaceholder":629},[1029],{"type":492,"value":632},{"type":487,"tag":551,"props":1031,"children":1033},{"class":553,"line":1032},12,[1034,1038,1043,1048,1052],{"type":487,"tag":551,"props":1035,"children":1036},{"style":558},[1037],{"type":492,"value":561},{"type":487,"tag":551,"props":1039,"children":1040},{"style":564},[1041],{"type":492,"value":1042}," Lion",{"type":487,"tag":551,"props":1044,"children":1045},{"style":558},[1046],{"type":492,"value":1047}," extends",{"type":487,"tag":551,"props":1049,"children":1050},{"style":580},[1051],{"type":492,"value":866},{"type":487,"tag":551,"props":1053,"children":1054},{"style":570},[1055],{"type":492,"value":573},{"type":487,"tag":551,"props":1057,"children":1059},{"class":553,"line":1058},13,[1060,1064,1068],{"type":487,"tag":551,"props":1061,"children":1062},{"style":580},[1063],{"type":492,"value":950},{"type":487,"tag":551,"props":1065,"children":1066},{"style":570},[1067],{"type":492,"value":646},{"type":487,"tag":551,"props":1069,"children":1070},{"style":570},[1071],{"type":492,"value":573},{"type":487,"tag":551,"props":1073,"children":1075},{"class":553,"line":1074},14,[1076,1080,1084,1088,1092,1096,1101,1105],{"type":487,"tag":551,"props":1077,"children":1078},{"style":591},[1079],{"type":492,"value":974},{"type":487,"tag":551,"props":1081,"children":1082},{"style":570},[1083],{"type":492,"value":909},{"type":487,"tag":551,"props":1085,"children":1086},{"style":580},[1087],{"type":492,"value":983},{"type":487,"tag":551,"props":1089,"children":1090},{"style":570},[1091],{"type":492,"value":588},{"type":487,"tag":551,"props":1093,"children":1094},{"style":990},[1095],{"type":492,"value":993},{"type":487,"tag":551,"props":1097,"children":1098},{"style":996},[1099],{"type":492,"value":1100},"Roar!",{"type":487,"tag":551,"props":1102,"children":1103},{"style":990},[1104],{"type":492,"value":993},{"type":487,"tag":551,"props":1106,"children":1107},{"style":570},[1108],{"type":492,"value":1008},{"type":487,"tag":551,"props":1110,"children":1112},{"class":553,"line":1111},15,[1113],{"type":487,"tag":551,"props":1114,"children":1115},{"style":570},[1116],{"type":492,"value":622},{"type":487,"tag":551,"props":1118,"children":1120},{"class":553,"line":1119},16,[1121],{"type":487,"tag":551,"props":1122,"children":1123},{"style":570},[1124],{"type":492,"value":676},{"type":487,"tag":551,"props":1126,"children":1128},{"class":553,"line":1127},17,[1129],{"type":487,"tag":551,"props":1130,"children":1131},{"emptyLinePlaceholder":629},[1132],{"type":492,"value":632},{"type":487,"tag":551,"props":1134,"children":1136},{"class":553,"line":1135},18,[1137,1141,1146,1150,1154],{"type":487,"tag":551,"props":1138,"children":1139},{"style":558},[1140],{"type":492,"value":561},{"type":487,"tag":551,"props":1142,"children":1143},{"style":564},[1144],{"type":492,"value":1145}," Elephant",{"type":487,"tag":551,"props":1147,"children":1148},{"style":558},[1149],{"type":492,"value":1047},{"type":487,"tag":551,"props":1151,"children":1152},{"style":580},[1153],{"type":492,"value":866},{"type":487,"tag":551,"props":1155,"children":1156},{"style":570},[1157],{"type":492,"value":573},{"type":487,"tag":551,"props":1159,"children":1161},{"class":553,"line":1160},19,[1162,1166,1170],{"type":487,"tag":551,"props":1163,"children":1164},{"style":580},[1165],{"type":492,"value":950},{"type":487,"tag":551,"props":1167,"children":1168},{"style":570},[1169],{"type":492,"value":646},{"type":487,"tag":551,"props":1171,"children":1172},{"style":570},[1173],{"type":492,"value":573},{"type":487,"tag":551,"props":1175,"children":1177},{"class":553,"line":1176},20,[1178,1182,1186,1190,1194,1198,1203,1207],{"type":487,"tag":551,"props":1179,"children":1180},{"style":591},[1181],{"type":492,"value":974},{"type":487,"tag":551,"props":1183,"children":1184},{"style":570},[1185],{"type":492,"value":909},{"type":487,"tag":551,"props":1187,"children":1188},{"style":580},[1189],{"type":492,"value":983},{"type":487,"tag":551,"props":1191,"children":1192},{"style":570},[1193],{"type":492,"value":588},{"type":487,"tag":551,"props":1195,"children":1196},{"style":990},[1197],{"type":492,"value":993},{"type":487,"tag":551,"props":1199,"children":1200},{"style":996},[1201],{"type":492,"value":1202},"Trumpet!",{"type":487,"tag":551,"props":1204,"children":1205},{"style":990},[1206],{"type":492,"value":993},{"type":487,"tag":551,"props":1208,"children":1209},{"style":570},[1210],{"type":492,"value":1008},{"type":487,"tag":551,"props":1212,"children":1214},{"class":553,"line":1213},21,[1215],{"type":487,"tag":551,"props":1216,"children":1217},{"style":570},[1218],{"type":492,"value":622},{"type":487,"tag":551,"props":1220,"children":1222},{"class":553,"line":1221},22,[1223],{"type":487,"tag":551,"props":1224,"children":1225},{"style":570},[1226],{"type":492,"value":676},{"type":487,"tag":488,"props":1228,"children":1229},{},[1230],{"type":492,"value":1231},"在这个设计中，Animal 类是一个基类，而 Lion 和 Elephant 是它的子类。每个动物都有自己的叫声，通过重写 makeSound 方法来实现。",{"type":487,"tag":488,"props":1233,"children":1234},{},[1235],{"type":492,"value":1236},"现在，假设我们要添加一些新的动物，比如鹦鹉和狗，按照开放/封闭原则，我们应该扩展而不是修改现有的代码：",{"type":487,"tag":540,"props":1238,"children":1240},{"className":542,"code":1239,"language":544,"meta":481,"style":481},"class Parrot extends Animal {\n  makeSound() {\n    console.log(\"Squawk!\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Bark!\");\n  }\n}\n",[1241],{"type":487,"tag":547,"props":1242,"children":1243},{"__ignoreMap":481},[1244,1268,1283,1319,1326,1333,1340,1364,1379,1415,1422],{"type":487,"tag":551,"props":1245,"children":1246},{"class":553,"line":554},[1247,1251,1256,1260,1264],{"type":487,"tag":551,"props":1248,"children":1249},{"style":558},[1250],{"type":492,"value":561},{"type":487,"tag":551,"props":1252,"children":1253},{"style":564},[1254],{"type":492,"value":1255}," Parrot",{"type":487,"tag":551,"props":1257,"children":1258},{"style":558},[1259],{"type":492,"value":1047},{"type":487,"tag":551,"props":1261,"children":1262},{"style":580},[1263],{"type":492,"value":866},{"type":487,"tag":551,"props":1265,"children":1266},{"style":570},[1267],{"type":492,"value":573},{"type":487,"tag":551,"props":1269,"children":1270},{"class":553,"line":576},[1271,1275,1279],{"type":487,"tag":551,"props":1272,"children":1273},{"style":580},[1274],{"type":492,"value":950},{"type":487,"tag":551,"props":1276,"children":1277},{"style":570},[1278],{"type":492,"value":646},{"type":487,"tag":551,"props":1280,"children":1281},{"style":570},[1282],{"type":492,"value":573},{"type":487,"tag":551,"props":1284,"children":1285},{"class":553,"line":606},[1286,1290,1294,1298,1302,1306,1311,1315],{"type":487,"tag":551,"props":1287,"children":1288},{"style":591},[1289],{"type":492,"value":974},{"type":487,"tag":551,"props":1291,"children":1292},{"style":570},[1293],{"type":492,"value":909},{"type":487,"tag":551,"props":1295,"children":1296},{"style":580},[1297],{"type":492,"value":983},{"type":487,"tag":551,"props":1299,"children":1300},{"style":570},[1301],{"type":492,"value":588},{"type":487,"tag":551,"props":1303,"children":1304},{"style":990},[1305],{"type":492,"value":993},{"type":487,"tag":551,"props":1307,"children":1308},{"style":996},[1309],{"type":492,"value":1310},"Squawk!",{"type":487,"tag":551,"props":1312,"children":1313},{"style":990},[1314],{"type":492,"value":993},{"type":487,"tag":551,"props":1316,"children":1317},{"style":570},[1318],{"type":492,"value":1008},{"type":487,"tag":551,"props":1320,"children":1321},{"class":553,"line":616},[1322],{"type":487,"tag":551,"props":1323,"children":1324},{"style":570},[1325],{"type":492,"value":622},{"type":487,"tag":551,"props":1327,"children":1328},{"class":553,"line":625},[1329],{"type":487,"tag":551,"props":1330,"children":1331},{"style":570},[1332],{"type":492,"value":676},{"type":487,"tag":551,"props":1334,"children":1335},{"class":553,"line":635},[1336],{"type":487,"tag":551,"props":1337,"children":1338},{"emptyLinePlaceholder":629},[1339],{"type":492,"value":632},{"type":487,"tag":551,"props":1341,"children":1342},{"class":553,"line":653},[1343,1347,1352,1356,1360],{"type":487,"tag":551,"props":1344,"children":1345},{"style":558},[1346],{"type":492,"value":561},{"type":487,"tag":551,"props":1348,"children":1349},{"style":564},[1350],{"type":492,"value":1351}," Dog",{"type":487,"tag":551,"props":1353,"children":1354},{"style":558},[1355],{"type":492,"value":1047},{"type":487,"tag":551,"props":1357,"children":1358},{"style":580},[1359],{"type":492,"value":866},{"type":487,"tag":551,"props":1361,"children":1362},{"style":570},[1363],{"type":492,"value":573},{"type":487,"tag":551,"props":1365,"children":1366},{"class":553,"line":662},[1367,1371,1375],{"type":487,"tag":551,"props":1368,"children":1369},{"style":580},[1370],{"type":492,"value":950},{"type":487,"tag":551,"props":1372,"children":1373},{"style":570},[1374],{"type":492,"value":646},{"type":487,"tag":551,"props":1376,"children":1377},{"style":570},[1378],{"type":492,"value":573},{"type":487,"tag":551,"props":1380,"children":1381},{"class":553,"line":670},[1382,1386,1390,1394,1398,1402,1407,1411],{"type":487,"tag":551,"props":1383,"children":1384},{"style":591},[1385],{"type":492,"value":974},{"type":487,"tag":551,"props":1387,"children":1388},{"style":570},[1389],{"type":492,"value":909},{"type":487,"tag":551,"props":1391,"children":1392},{"style":580},[1393],{"type":492,"value":983},{"type":487,"tag":551,"props":1395,"children":1396},{"style":570},[1397],{"type":492,"value":588},{"type":487,"tag":551,"props":1399,"children":1400},{"style":990},[1401],{"type":492,"value":993},{"type":487,"tag":551,"props":1403,"children":1404},{"style":996},[1405],{"type":492,"value":1406},"Bark!",{"type":487,"tag":551,"props":1408,"children":1409},{"style":990},[1410],{"type":492,"value":993},{"type":487,"tag":551,"props":1412,"children":1413},{"style":570},[1414],{"type":492,"value":1008},{"type":487,"tag":551,"props":1416,"children":1417},{"class":553,"line":814},[1418],{"type":487,"tag":551,"props":1419,"children":1420},{"style":570},[1421],{"type":492,"value":622},{"type":487,"tag":551,"props":1423,"children":1424},{"class":553,"line":822},[1425],{"type":487,"tag":551,"props":1426,"children":1427},{"style":570},[1428],{"type":492,"value":676},{"type":487,"tag":488,"props":1430,"children":1431},{},[1432],{"type":492,"value":1433},"这样，我们通过扩展 Animal 类，而不是修改它，来添加新的功能（新的动物）。这符合开放/封闭原则，因为我们对于现有代码的修改是关闭的，我们只是通过扩展来引入新的功能。",{"type":487,"tag":488,"props":1435,"children":1436},{},[1437],{"type":492,"value":1438},"使用开放/封闭原则可以使代码更加稳定，降低对现有代码的影响，同时也更容易应对变化和扩展。",{"type":487,"tag":529,"props":1440,"children":1442},{"id":1441},"里式替换原则",[1443],{"type":492,"value":1441},{"type":487,"tag":488,"props":1445,"children":1446},{},[1447],{"type":492,"value":1448},"里氏替换原则（Liskov Substitution Principle，LSP） 是 SOLID 原则之一，它强调子类型（派生类或子类）必须能够替换掉它们的基类型（基类或父类）并出现在基类能够工作的任何地方，而不破坏程序的正确性。",{"type":487,"tag":488,"props":1450,"children":1451},{},[1452],{"type":492,"value":1453},"通俗地说，如果一个类是基类的子类，那么在任何需要基类的地方，都可以使用这个子类而不产生错误。子类应该保持基类的行为，并且可以扩展或修改基类的行为，但不应该破坏基类原有的约定。",{"type":487,"tag":488,"props":1455,"children":1456},{},[1457],{"type":492,"value":1458},"假设我们有一个表示矩形的基类 Rectangle：",{"type":487,"tag":540,"props":1460,"children":1462},{"className":542,"code":1461,"language":544,"meta":481,"style":481},"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n",[1463],{"type":487,"tag":547,"props":1464,"children":1465},{"__ignoreMap":481},[1466,1482,1516,1544,1572,1579,1586,1610,1637,1644,1651,1675,1702,1709,1716,1732,1775,1782],{"type":487,"tag":551,"props":1467,"children":1468},{"class":553,"line":554},[1469,1473,1478],{"type":487,"tag":551,"props":1470,"children":1471},{"style":558},[1472],{"type":492,"value":561},{"type":487,"tag":551,"props":1474,"children":1475},{"style":564},[1476],{"type":492,"value":1477}," Rectangle",{"type":487,"tag":551,"props":1479,"children":1480},{"style":570},[1481],{"type":492,"value":573},{"type":487,"tag":551,"props":1483,"children":1484},{"class":553,"line":576},[1485,1489,1493,1498,1503,1508,1512],{"type":487,"tag":551,"props":1486,"children":1487},{"style":558},[1488],{"type":492,"value":878},{"type":487,"tag":551,"props":1490,"children":1491},{"style":570},[1492],{"type":492,"value":588},{"type":487,"tag":551,"props":1494,"children":1495},{"style":591},[1496],{"type":492,"value":1497},"width",{"type":487,"tag":551,"props":1499,"children":1500},{"style":570},[1501],{"type":492,"value":1502},",",{"type":487,"tag":551,"props":1504,"children":1505},{"style":591},[1506],{"type":492,"value":1507}," height",{"type":487,"tag":551,"props":1509,"children":1510},{"style":570},[1511],{"type":492,"value":599},{"type":487,"tag":551,"props":1513,"children":1514},{"style":570},[1515],{"type":492,"value":573},{"type":487,"tag":551,"props":1517,"children":1518},{"class":553,"line":606},[1519,1523,1527,1531,1535,1540],{"type":487,"tag":551,"props":1520,"children":1521},{"style":901},[1522],{"type":492,"value":904},{"type":487,"tag":551,"props":1524,"children":1525},{"style":570},[1526],{"type":492,"value":909},{"type":487,"tag":551,"props":1528,"children":1529},{"style":591},[1530],{"type":492,"value":1497},{"type":487,"tag":551,"props":1532,"children":1533},{"style":570},[1534],{"type":492,"value":918},{"type":487,"tag":551,"props":1536,"children":1537},{"style":591},[1538],{"type":492,"value":1539}," width",{"type":487,"tag":551,"props":1541,"children":1542},{"style":570},[1543],{"type":492,"value":928},{"type":487,"tag":551,"props":1545,"children":1546},{"class":553,"line":616},[1547,1551,1555,1560,1564,1568],{"type":487,"tag":551,"props":1548,"children":1549},{"style":901},[1550],{"type":492,"value":904},{"type":487,"tag":551,"props":1552,"children":1553},{"style":570},[1554],{"type":492,"value":909},{"type":487,"tag":551,"props":1556,"children":1557},{"style":591},[1558],{"type":492,"value":1559},"height",{"type":487,"tag":551,"props":1561,"children":1562},{"style":570},[1563],{"type":492,"value":918},{"type":487,"tag":551,"props":1565,"children":1566},{"style":591},[1567],{"type":492,"value":1507},{"type":487,"tag":551,"props":1569,"children":1570},{"style":570},[1571],{"type":492,"value":928},{"type":487,"tag":551,"props":1573,"children":1574},{"class":553,"line":625},[1575],{"type":487,"tag":551,"props":1576,"children":1577},{"style":570},[1578],{"type":492,"value":622},{"type":487,"tag":551,"props":1580,"children":1581},{"class":553,"line":635},[1582],{"type":487,"tag":551,"props":1583,"children":1584},{"emptyLinePlaceholder":629},[1585],{"type":492,"value":632},{"type":487,"tag":551,"props":1587,"children":1588},{"class":553,"line":653},[1589,1594,1598,1602,1606],{"type":487,"tag":551,"props":1590,"children":1591},{"style":580},[1592],{"type":492,"value":1593},"  setWidth",{"type":487,"tag":551,"props":1595,"children":1596},{"style":570},[1597],{"type":492,"value":588},{"type":487,"tag":551,"props":1599,"children":1600},{"style":591},[1601],{"type":492,"value":1497},{"type":487,"tag":551,"props":1603,"children":1604},{"style":570},[1605],{"type":492,"value":599},{"type":487,"tag":551,"props":1607,"children":1608},{"style":570},[1609],{"type":492,"value":573},{"type":487,"tag":551,"props":1611,"children":1612},{"class":553,"line":662},[1613,1617,1621,1625,1629,1633],{"type":487,"tag":551,"props":1614,"children":1615},{"style":901},[1616],{"type":492,"value":904},{"type":487,"tag":551,"props":1618,"children":1619},{"style":570},[1620],{"type":492,"value":909},{"type":487,"tag":551,"props":1622,"children":1623},{"style":591},[1624],{"type":492,"value":1497},{"type":487,"tag":551,"props":1626,"children":1627},{"style":570},[1628],{"type":492,"value":918},{"type":487,"tag":551,"props":1630,"children":1631},{"style":591},[1632],{"type":492,"value":1539},{"type":487,"tag":551,"props":1634,"children":1635},{"style":570},[1636],{"type":492,"value":928},{"type":487,"tag":551,"props":1638,"children":1639},{"class":553,"line":670},[1640],{"type":487,"tag":551,"props":1641,"children":1642},{"style":570},[1643],{"type":492,"value":622},{"type":487,"tag":551,"props":1645,"children":1646},{"class":553,"line":814},[1647],{"type":487,"tag":551,"props":1648,"children":1649},{"emptyLinePlaceholder":629},[1650],{"type":492,"value":632},{"type":487,"tag":551,"props":1652,"children":1653},{"class":553,"line":822},[1654,1659,1663,1667,1671],{"type":487,"tag":551,"props":1655,"children":1656},{"style":580},[1657],{"type":492,"value":1658},"  setHeight",{"type":487,"tag":551,"props":1660,"children":1661},{"style":570},[1662],{"type":492,"value":588},{"type":487,"tag":551,"props":1664,"children":1665},{"style":591},[1666],{"type":492,"value":1559},{"type":487,"tag":551,"props":1668,"children":1669},{"style":570},[1670],{"type":492,"value":599},{"type":487,"tag":551,"props":1672,"children":1673},{"style":570},[1674],{"type":492,"value":573},{"type":487,"tag":551,"props":1676,"children":1677},{"class":553,"line":1032},[1678,1682,1686,1690,1694,1698],{"type":487,"tag":551,"props":1679,"children":1680},{"style":901},[1681],{"type":492,"value":904},{"type":487,"tag":551,"props":1683,"children":1684},{"style":570},[1685],{"type":492,"value":909},{"type":487,"tag":551,"props":1687,"children":1688},{"style":591},[1689],{"type":492,"value":1559},{"type":487,"tag":551,"props":1691,"children":1692},{"style":570},[1693],{"type":492,"value":918},{"type":487,"tag":551,"props":1695,"children":1696},{"style":591},[1697],{"type":492,"value":1507},{"type":487,"tag":551,"props":1699,"children":1700},{"style":570},[1701],{"type":492,"value":928},{"type":487,"tag":551,"props":1703,"children":1704},{"class":553,"line":1058},[1705],{"type":487,"tag":551,"props":1706,"children":1707},{"style":570},[1708],{"type":492,"value":622},{"type":487,"tag":551,"props":1710,"children":1711},{"class":553,"line":1074},[1712],{"type":487,"tag":551,"props":1713,"children":1714},{"emptyLinePlaceholder":629},[1715],{"type":492,"value":632},{"type":487,"tag":551,"props":1717,"children":1718},{"class":553,"line":1111},[1719,1724,1728],{"type":487,"tag":551,"props":1720,"children":1721},{"style":580},[1722],{"type":492,"value":1723},"  getArea",{"type":487,"tag":551,"props":1725,"children":1726},{"style":570},[1727],{"type":492,"value":646},{"type":487,"tag":551,"props":1729,"children":1730},{"style":570},[1731],{"type":492,"value":573},{"type":487,"tag":551,"props":1733,"children":1734},{"class":553,"line":1119},[1735,1741,1746,1750,1754,1759,1763,1767,1771],{"type":487,"tag":551,"props":1736,"children":1738},{"style":1737},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1739],{"type":492,"value":1740},"    return",{"type":487,"tag":551,"props":1742,"children":1743},{"style":901},[1744],{"type":492,"value":1745}," this",{"type":487,"tag":551,"props":1747,"children":1748},{"style":570},[1749],{"type":492,"value":909},{"type":487,"tag":551,"props":1751,"children":1752},{"style":591},[1753],{"type":492,"value":1497},{"type":487,"tag":551,"props":1755,"children":1756},{"style":558},[1757],{"type":492,"value":1758}," *",{"type":487,"tag":551,"props":1760,"children":1761},{"style":901},[1762],{"type":492,"value":1745},{"type":487,"tag":551,"props":1764,"children":1765},{"style":570},[1766],{"type":492,"value":909},{"type":487,"tag":551,"props":1768,"children":1769},{"style":591},[1770],{"type":492,"value":1559},{"type":487,"tag":551,"props":1772,"children":1773},{"style":570},[1774],{"type":492,"value":928},{"type":487,"tag":551,"props":1776,"children":1777},{"class":553,"line":1127},[1778],{"type":487,"tag":551,"props":1779,"children":1780},{"style":570},[1781],{"type":492,"value":622},{"type":487,"tag":551,"props":1783,"children":1784},{"class":553,"line":1135},[1785],{"type":487,"tag":551,"props":1786,"children":1787},{"style":570},[1788],{"type":492,"value":676},{"type":487,"tag":488,"props":1790,"children":1791},{},[1792],{"type":492,"value":1793},"现在，我们创建了一个子类 Square 继承自 Rectangle，表示正方形。在正方形中，宽和高应该始终相等。",{"type":487,"tag":540,"props":1795,"children":1797},{"className":542,"code":1796,"language":544,"meta":481,"style":481},"class Square extends Rectangle {\n  setWidth(width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  setHeight(height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n",[1798],{"type":487,"tag":547,"props":1799,"children":1800},{"__ignoreMap":481},[1801,1825,1848,1877,1905,1912,1919,1942,1969,1996,2003],{"type":487,"tag":551,"props":1802,"children":1803},{"class":553,"line":554},[1804,1808,1813,1817,1821],{"type":487,"tag":551,"props":1805,"children":1806},{"style":558},[1807],{"type":492,"value":561},{"type":487,"tag":551,"props":1809,"children":1810},{"style":564},[1811],{"type":492,"value":1812}," Square",{"type":487,"tag":551,"props":1814,"children":1815},{"style":558},[1816],{"type":492,"value":1047},{"type":487,"tag":551,"props":1818,"children":1819},{"style":580},[1820],{"type":492,"value":1477},{"type":487,"tag":551,"props":1822,"children":1823},{"style":570},[1824],{"type":492,"value":573},{"type":487,"tag":551,"props":1826,"children":1827},{"class":553,"line":576},[1828,1832,1836,1840,1844],{"type":487,"tag":551,"props":1829,"children":1830},{"style":580},[1831],{"type":492,"value":1593},{"type":487,"tag":551,"props":1833,"children":1834},{"style":570},[1835],{"type":492,"value":588},{"type":487,"tag":551,"props":1837,"children":1838},{"style":591},[1839],{"type":492,"value":1497},{"type":487,"tag":551,"props":1841,"children":1842},{"style":570},[1843],{"type":492,"value":599},{"type":487,"tag":551,"props":1845,"children":1846},{"style":570},[1847],{"type":492,"value":573},{"type":487,"tag":551,"props":1849,"children":1850},{"class":553,"line":606},[1851,1856,1860,1865,1869,1873],{"type":487,"tag":551,"props":1852,"children":1853},{"style":901},[1854],{"type":492,"value":1855},"    super",{"type":487,"tag":551,"props":1857,"children":1858},{"style":570},[1859],{"type":492,"value":909},{"type":487,"tag":551,"props":1861,"children":1862},{"style":580},[1863],{"type":492,"value":1864},"setWidth",{"type":487,"tag":551,"props":1866,"children":1867},{"style":570},[1868],{"type":492,"value":588},{"type":487,"tag":551,"props":1870,"children":1871},{"style":591},[1872],{"type":492,"value":1497},{"type":487,"tag":551,"props":1874,"children":1875},{"style":570},[1876],{"type":492,"value":1008},{"type":487,"tag":551,"props":1878,"children":1879},{"class":553,"line":616},[1880,1884,1888,1893,1897,1901],{"type":487,"tag":551,"props":1881,"children":1882},{"style":901},[1883],{"type":492,"value":1855},{"type":487,"tag":551,"props":1885,"children":1886},{"style":570},[1887],{"type":492,"value":909},{"type":487,"tag":551,"props":1889,"children":1890},{"style":580},[1891],{"type":492,"value":1892},"setHeight",{"type":487,"tag":551,"props":1894,"children":1895},{"style":570},[1896],{"type":492,"value":588},{"type":487,"tag":551,"props":1898,"children":1899},{"style":591},[1900],{"type":492,"value":1497},{"type":487,"tag":551,"props":1902,"children":1903},{"style":570},[1904],{"type":492,"value":1008},{"type":487,"tag":551,"props":1906,"children":1907},{"class":553,"line":625},[1908],{"type":487,"tag":551,"props":1909,"children":1910},{"style":570},[1911],{"type":492,"value":622},{"type":487,"tag":551,"props":1913,"children":1914},{"class":553,"line":635},[1915],{"type":487,"tag":551,"props":1916,"children":1917},{"emptyLinePlaceholder":629},[1918],{"type":492,"value":632},{"type":487,"tag":551,"props":1920,"children":1921},{"class":553,"line":653},[1922,1926,1930,1934,1938],{"type":487,"tag":551,"props":1923,"children":1924},{"style":580},[1925],{"type":492,"value":1658},{"type":487,"tag":551,"props":1927,"children":1928},{"style":570},[1929],{"type":492,"value":588},{"type":487,"tag":551,"props":1931,"children":1932},{"style":591},[1933],{"type":492,"value":1559},{"type":487,"tag":551,"props":1935,"children":1936},{"style":570},[1937],{"type":492,"value":599},{"type":487,"tag":551,"props":1939,"children":1940},{"style":570},[1941],{"type":492,"value":573},{"type":487,"tag":551,"props":1943,"children":1944},{"class":553,"line":662},[1945,1949,1953,1957,1961,1965],{"type":487,"tag":551,"props":1946,"children":1947},{"style":901},[1948],{"type":492,"value":1855},{"type":487,"tag":551,"props":1950,"children":1951},{"style":570},[1952],{"type":492,"value":909},{"type":487,"tag":551,"props":1954,"children":1955},{"style":580},[1956],{"type":492,"value":1864},{"type":487,"tag":551,"props":1958,"children":1959},{"style":570},[1960],{"type":492,"value":588},{"type":487,"tag":551,"props":1962,"children":1963},{"style":591},[1964],{"type":492,"value":1559},{"type":487,"tag":551,"props":1966,"children":1967},{"style":570},[1968],{"type":492,"value":1008},{"type":487,"tag":551,"props":1970,"children":1971},{"class":553,"line":670},[1972,1976,1980,1984,1988,1992],{"type":487,"tag":551,"props":1973,"children":1974},{"style":901},[1975],{"type":492,"value":1855},{"type":487,"tag":551,"props":1977,"children":1978},{"style":570},[1979],{"type":492,"value":909},{"type":487,"tag":551,"props":1981,"children":1982},{"style":580},[1983],{"type":492,"value":1892},{"type":487,"tag":551,"props":1985,"children":1986},{"style":570},[1987],{"type":492,"value":588},{"type":487,"tag":551,"props":1989,"children":1990},{"style":591},[1991],{"type":492,"value":1559},{"type":487,"tag":551,"props":1993,"children":1994},{"style":570},[1995],{"type":492,"value":1008},{"type":487,"tag":551,"props":1997,"children":1998},{"class":553,"line":814},[1999],{"type":487,"tag":551,"props":2000,"children":2001},{"style":570},[2002],{"type":492,"value":622},{"type":487,"tag":551,"props":2004,"children":2005},{"class":553,"line":822},[2006],{"type":487,"tag":551,"props":2007,"children":2008},{"style":570},[2009],{"type":492,"value":676},{"type":487,"tag":488,"props":2011,"children":2012},{},[2013],{"type":492,"value":2014},"这里的问题是，Square 子类在修改宽度或高度时，通过覆写 setWidth 和 setHeight 方法，强制宽和高相等，这与基类的行为不一致。如果在需要 Rectangle 的地方使用了 Square，可能会导致程序逻辑错误。",{"type":487,"tag":488,"props":2016,"children":2017},{},[2018],{"type":492,"value":2019},"这违反了里氏替换原则，因为子类修改了父类的预期行为。为了符合里氏替换原则，可能需要重新设计类的继承结构，或者使用更精确的命名来表达实际意图。",{"type":487,"tag":529,"props":2021,"children":2023},{"id":2022},"接口隔离原则",[2024],{"type":492,"value":2022},{"type":487,"tag":488,"props":2026,"children":2027},{},[2028],{"type":492,"value":2029},"接口隔离原则（Interface Segregation Principle，ISP） 是 SOLID 原则之一，它强调一个类不应该被强迫实现它不需要的接口。简而言之，一个类对另一个类的依赖应该建立在最小的接口上。",{"type":487,"tag":488,"props":2031,"children":2032},{},[2033],{"type":492,"value":2034},"在通俗的语言中，接口隔离原则告诉我们不应该让一个类依赖它不需要的接口，否则会导致类需要实现一些它根本不需要的方法。",{"type":487,"tag":488,"props":2036,"children":2037},{},[2038],{"type":492,"value":2039},"举例说明，假设我们有一个动物园的系统，其中有两种动物，一种会飞，一种会游泳：",{"type":487,"tag":540,"props":2041,"children":2043},{"className":542,"code":2042,"language":544,"meta":481,"style":481},"// 不遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n\n  swim() {\n    // 这是一个鸟类不需要的方法，违反接口隔离原则\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n\n  fly() {\n    // 这是一个鱼类不需要的方法，违反接口隔离原则\n  }\n}\n",[2044],{"type":487,"tag":547,"props":2045,"children":2046},{"__ignoreMap":481},[2047,2055,2071,2087,2095,2102,2109,2125,2133,2140,2147,2154,2170,2185,2193,2200,2207,2222,2230,2237],{"type":487,"tag":551,"props":2048,"children":2049},{"class":553,"line":554},[2050],{"type":487,"tag":551,"props":2051,"children":2052},{"style":610},[2053],{"type":492,"value":2054},"// 不遵循接口隔离原则的设计\n",{"type":487,"tag":551,"props":2056,"children":2057},{"class":553,"line":576},[2058,2062,2067],{"type":487,"tag":551,"props":2059,"children":2060},{"style":558},[2061],{"type":492,"value":561},{"type":487,"tag":551,"props":2063,"children":2064},{"style":564},[2065],{"type":492,"value":2066}," Bird",{"type":487,"tag":551,"props":2068,"children":2069},{"style":570},[2070],{"type":492,"value":573},{"type":487,"tag":551,"props":2072,"children":2073},{"class":553,"line":606},[2074,2079,2083],{"type":487,"tag":551,"props":2075,"children":2076},{"style":580},[2077],{"type":492,"value":2078},"  fly",{"type":487,"tag":551,"props":2080,"children":2081},{"style":570},[2082],{"type":492,"value":646},{"type":487,"tag":551,"props":2084,"children":2085},{"style":570},[2086],{"type":492,"value":573},{"type":487,"tag":551,"props":2088,"children":2089},{"class":553,"line":616},[2090],{"type":487,"tag":551,"props":2091,"children":2092},{"style":610},[2093],{"type":492,"value":2094},"    // 实现飞行逻辑\n",{"type":487,"tag":551,"props":2096,"children":2097},{"class":553,"line":625},[2098],{"type":487,"tag":551,"props":2099,"children":2100},{"style":570},[2101],{"type":492,"value":622},{"type":487,"tag":551,"props":2103,"children":2104},{"class":553,"line":635},[2105],{"type":487,"tag":551,"props":2106,"children":2107},{"emptyLinePlaceholder":629},[2108],{"type":492,"value":632},{"type":487,"tag":551,"props":2110,"children":2111},{"class":553,"line":653},[2112,2117,2121],{"type":487,"tag":551,"props":2113,"children":2114},{"style":580},[2115],{"type":492,"value":2116},"  swim",{"type":487,"tag":551,"props":2118,"children":2119},{"style":570},[2120],{"type":492,"value":646},{"type":487,"tag":551,"props":2122,"children":2123},{"style":570},[2124],{"type":492,"value":573},{"type":487,"tag":551,"props":2126,"children":2127},{"class":553,"line":662},[2128],{"type":487,"tag":551,"props":2129,"children":2130},{"style":610},[2131],{"type":492,"value":2132},"    // 这是一个鸟类不需要的方法，违反接口隔离原则\n",{"type":487,"tag":551,"props":2134,"children":2135},{"class":553,"line":670},[2136],{"type":487,"tag":551,"props":2137,"children":2138},{"style":570},[2139],{"type":492,"value":622},{"type":487,"tag":551,"props":2141,"children":2142},{"class":553,"line":814},[2143],{"type":487,"tag":551,"props":2144,"children":2145},{"style":570},[2146],{"type":492,"value":676},{"type":487,"tag":551,"props":2148,"children":2149},{"class":553,"line":822},[2150],{"type":487,"tag":551,"props":2151,"children":2152},{"emptyLinePlaceholder":629},[2153],{"type":492,"value":632},{"type":487,"tag":551,"props":2155,"children":2156},{"class":553,"line":1032},[2157,2161,2166],{"type":487,"tag":551,"props":2158,"children":2159},{"style":558},[2160],{"type":492,"value":561},{"type":487,"tag":551,"props":2162,"children":2163},{"style":564},[2164],{"type":492,"value":2165}," Fish",{"type":487,"tag":551,"props":2167,"children":2168},{"style":570},[2169],{"type":492,"value":573},{"type":487,"tag":551,"props":2171,"children":2172},{"class":553,"line":1058},[2173,2177,2181],{"type":487,"tag":551,"props":2174,"children":2175},{"style":580},[2176],{"type":492,"value":2116},{"type":487,"tag":551,"props":2178,"children":2179},{"style":570},[2180],{"type":492,"value":646},{"type":487,"tag":551,"props":2182,"children":2183},{"style":570},[2184],{"type":492,"value":573},{"type":487,"tag":551,"props":2186,"children":2187},{"class":553,"line":1074},[2188],{"type":487,"tag":551,"props":2189,"children":2190},{"style":610},[2191],{"type":492,"value":2192},"    // 实现游泳逻辑\n",{"type":487,"tag":551,"props":2194,"children":2195},{"class":553,"line":1111},[2196],{"type":487,"tag":551,"props":2197,"children":2198},{"style":570},[2199],{"type":492,"value":622},{"type":487,"tag":551,"props":2201,"children":2202},{"class":553,"line":1119},[2203],{"type":487,"tag":551,"props":2204,"children":2205},{"emptyLinePlaceholder":629},[2206],{"type":492,"value":632},{"type":487,"tag":551,"props":2208,"children":2209},{"class":553,"line":1127},[2210,2214,2218],{"type":487,"tag":551,"props":2211,"children":2212},{"style":580},[2213],{"type":492,"value":2078},{"type":487,"tag":551,"props":2215,"children":2216},{"style":570},[2217],{"type":492,"value":646},{"type":487,"tag":551,"props":2219,"children":2220},{"style":570},[2221],{"type":492,"value":573},{"type":487,"tag":551,"props":2223,"children":2224},{"class":553,"line":1135},[2225],{"type":487,"tag":551,"props":2226,"children":2227},{"style":610},[2228],{"type":492,"value":2229},"    // 这是一个鱼类不需要的方法，违反接口隔离原则\n",{"type":487,"tag":551,"props":2231,"children":2232},{"class":553,"line":1160},[2233],{"type":487,"tag":551,"props":2234,"children":2235},{"style":570},[2236],{"type":492,"value":622},{"type":487,"tag":551,"props":2238,"children":2239},{"class":553,"line":1176},[2240],{"type":487,"tag":551,"props":2241,"children":2242},{"style":570},[2243],{"type":492,"value":676},{"type":487,"tag":488,"props":2245,"children":2246},{},[2247],{"type":492,"value":2248},"在这个例子中，Bird 类实现了 fly 和 swim 两个方法，而 Fish 类也实现了 swim 和 fly 两个方法。这违反了接口隔离原则，因为每个类都被迫实现了它们不需要的方法。",{"type":487,"tag":488,"props":2250,"children":2251},{},[2252],{"type":492,"value":2253},"为了符合接口隔离原则，我们可以将接口拆分成更小的部分，让每个类只实现它们需要的方法：",{"type":487,"tag":540,"props":2255,"children":2257},{"className":542,"code":2256,"language":544,"meta":481,"style":481},"// 遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n}\n",[2258],{"type":487,"tag":547,"props":2259,"children":2260},{"__ignoreMap":481},[2261,2269,2284,2299,2306,2313,2320,2327,2342,2357,2364,2371],{"type":487,"tag":551,"props":2262,"children":2263},{"class":553,"line":554},[2264],{"type":487,"tag":551,"props":2265,"children":2266},{"style":610},[2267],{"type":492,"value":2268},"// 遵循接口隔离原则的设计\n",{"type":487,"tag":551,"props":2270,"children":2271},{"class":553,"line":576},[2272,2276,2280],{"type":487,"tag":551,"props":2273,"children":2274},{"style":558},[2275],{"type":492,"value":561},{"type":487,"tag":551,"props":2277,"children":2278},{"style":564},[2279],{"type":492,"value":2066},{"type":487,"tag":551,"props":2281,"children":2282},{"style":570},[2283],{"type":492,"value":573},{"type":487,"tag":551,"props":2285,"children":2286},{"class":553,"line":606},[2287,2291,2295],{"type":487,"tag":551,"props":2288,"children":2289},{"style":580},[2290],{"type":492,"value":2078},{"type":487,"tag":551,"props":2292,"children":2293},{"style":570},[2294],{"type":492,"value":646},{"type":487,"tag":551,"props":2296,"children":2297},{"style":570},[2298],{"type":492,"value":573},{"type":487,"tag":551,"props":2300,"children":2301},{"class":553,"line":616},[2302],{"type":487,"tag":551,"props":2303,"children":2304},{"style":610},[2305],{"type":492,"value":2094},{"type":487,"tag":551,"props":2307,"children":2308},{"class":553,"line":625},[2309],{"type":487,"tag":551,"props":2310,"children":2311},{"style":570},[2312],{"type":492,"value":622},{"type":487,"tag":551,"props":2314,"children":2315},{"class":553,"line":635},[2316],{"type":487,"tag":551,"props":2317,"children":2318},{"style":570},[2319],{"type":492,"value":676},{"type":487,"tag":551,"props":2321,"children":2322},{"class":553,"line":653},[2323],{"type":487,"tag":551,"props":2324,"children":2325},{"emptyLinePlaceholder":629},[2326],{"type":492,"value":632},{"type":487,"tag":551,"props":2328,"children":2329},{"class":553,"line":662},[2330,2334,2338],{"type":487,"tag":551,"props":2331,"children":2332},{"style":558},[2333],{"type":492,"value":561},{"type":487,"tag":551,"props":2335,"children":2336},{"style":564},[2337],{"type":492,"value":2165},{"type":487,"tag":551,"props":2339,"children":2340},{"style":570},[2341],{"type":492,"value":573},{"type":487,"tag":551,"props":2343,"children":2344},{"class":553,"line":670},[2345,2349,2353],{"type":487,"tag":551,"props":2346,"children":2347},{"style":580},[2348],{"type":492,"value":2116},{"type":487,"tag":551,"props":2350,"children":2351},{"style":570},[2352],{"type":492,"value":646},{"type":487,"tag":551,"props":2354,"children":2355},{"style":570},[2356],{"type":492,"value":573},{"type":487,"tag":551,"props":2358,"children":2359},{"class":553,"line":814},[2360],{"type":487,"tag":551,"props":2361,"children":2362},{"style":610},[2363],{"type":492,"value":2192},{"type":487,"tag":551,"props":2365,"children":2366},{"class":553,"line":822},[2367],{"type":487,"tag":551,"props":2368,"children":2369},{"style":570},[2370],{"type":492,"value":622},{"type":487,"tag":551,"props":2372,"children":2373},{"class":553,"line":1032},[2374],{"type":487,"tag":551,"props":2375,"children":2376},{"style":570},[2377],{"type":492,"value":676},{"type":487,"tag":488,"props":2379,"children":2380},{},[2381],{"type":492,"value":2382},"这样，每个类都只依赖于它们需要的接口，不再强迫实现不必要的方法。接口隔离原则的目标是使接口更具体，更贴近类的实际需求，从而提高系统的灵活性和可维护性。",{"type":487,"tag":529,"props":2384,"children":2386},{"id":2385},"依赖反转原则",[2387],{"type":492,"value":2385},{"type":487,"tag":488,"props":2389,"children":2390},{},[2391],{"type":492,"value":2392},"依赖反转原则（Dependency Inversion Principle，DIP） 是 SOLID 原则之一，它强调高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。",{"type":487,"tag":488,"props":2394,"children":2395},{},[2396],{"type":492,"value":2397},"举例说明，考虑一个简单的报告生成系统，有一个高层模块 ReportGenerator 负责生成报告：",{"type":487,"tag":540,"props":2399,"children":2401},{"className":542,"code":2400,"language":544,"meta":481,"style":481},"// 不遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor() {\n    this.pdfGenerator = new PDFGenerator(); // 依赖于具体的 PDF 生成器\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.pdfGenerator.generatePDF();\n  }\n}\n\nclass PDFGenerator {\n  generatePDF() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n",[2402],{"type":487,"tag":547,"props":2403,"children":2404},{"__ignoreMap":481},[2405,2413,2429,2444,2484,2491,2498,2514,2522,2551,2558,2565,2572,2587,2603,2611,2618],{"type":487,"tag":551,"props":2406,"children":2407},{"class":553,"line":554},[2408],{"type":487,"tag":551,"props":2409,"children":2410},{"style":610},[2411],{"type":492,"value":2412},"// 不遵循依赖反转原则的设计\n",{"type":487,"tag":551,"props":2414,"children":2415},{"class":553,"line":576},[2416,2420,2425],{"type":487,"tag":551,"props":2417,"children":2418},{"style":558},[2419],{"type":492,"value":561},{"type":487,"tag":551,"props":2421,"children":2422},{"style":564},[2423],{"type":492,"value":2424}," ReportGenerator",{"type":487,"tag":551,"props":2426,"children":2427},{"style":570},[2428],{"type":492,"value":573},{"type":487,"tag":551,"props":2430,"children":2431},{"class":553,"line":606},[2432,2436,2440],{"type":487,"tag":551,"props":2433,"children":2434},{"style":558},[2435],{"type":492,"value":878},{"type":487,"tag":551,"props":2437,"children":2438},{"style":570},[2439],{"type":492,"value":646},{"type":487,"tag":551,"props":2441,"children":2442},{"style":570},[2443],{"type":492,"value":573},{"type":487,"tag":551,"props":2445,"children":2446},{"class":553,"line":616},[2447,2451,2455,2460,2464,2469,2474,2479],{"type":487,"tag":551,"props":2448,"children":2449},{"style":901},[2450],{"type":492,"value":904},{"type":487,"tag":551,"props":2452,"children":2453},{"style":570},[2454],{"type":492,"value":909},{"type":487,"tag":551,"props":2456,"children":2457},{"style":591},[2458],{"type":492,"value":2459},"pdfGenerator",{"type":487,"tag":551,"props":2461,"children":2462},{"style":570},[2463],{"type":492,"value":918},{"type":487,"tag":551,"props":2465,"children":2466},{"style":558},[2467],{"type":492,"value":2468}," new",{"type":487,"tag":551,"props":2470,"children":2471},{"style":580},[2472],{"type":492,"value":2473}," PDFGenerator",{"type":487,"tag":551,"props":2475,"children":2476},{"style":570},[2477],{"type":492,"value":2478},"();",{"type":487,"tag":551,"props":2480,"children":2481},{"style":610},[2482],{"type":492,"value":2483}," // 依赖于具体的 PDF 生成器\n",{"type":487,"tag":551,"props":2485,"children":2486},{"class":553,"line":625},[2487],{"type":487,"tag":551,"props":2488,"children":2489},{"style":570},[2490],{"type":492,"value":622},{"type":487,"tag":551,"props":2492,"children":2493},{"class":553,"line":635},[2494],{"type":487,"tag":551,"props":2495,"children":2496},{"emptyLinePlaceholder":629},[2497],{"type":492,"value":632},{"type":487,"tag":551,"props":2499,"children":2500},{"class":553,"line":653},[2501,2506,2510],{"type":487,"tag":551,"props":2502,"children":2503},{"style":580},[2504],{"type":492,"value":2505},"  generateReport",{"type":487,"tag":551,"props":2507,"children":2508},{"style":570},[2509],{"type":492,"value":646},{"type":487,"tag":551,"props":2511,"children":2512},{"style":570},[2513],{"type":492,"value":573},{"type":487,"tag":551,"props":2515,"children":2516},{"class":553,"line":662},[2517],{"type":487,"tag":551,"props":2518,"children":2519},{"style":610},[2520],{"type":492,"value":2521},"    // 生成报告的逻辑\n",{"type":487,"tag":551,"props":2523,"children":2524},{"class":553,"line":670},[2525,2529,2533,2537,2541,2546],{"type":487,"tag":551,"props":2526,"children":2527},{"style":901},[2528],{"type":492,"value":904},{"type":487,"tag":551,"props":2530,"children":2531},{"style":570},[2532],{"type":492,"value":909},{"type":487,"tag":551,"props":2534,"children":2535},{"style":591},[2536],{"type":492,"value":2459},{"type":487,"tag":551,"props":2538,"children":2539},{"style":570},[2540],{"type":492,"value":909},{"type":487,"tag":551,"props":2542,"children":2543},{"style":580},[2544],{"type":492,"value":2545},"generatePDF",{"type":487,"tag":551,"props":2547,"children":2548},{"style":570},[2549],{"type":492,"value":2550},"();\n",{"type":487,"tag":551,"props":2552,"children":2553},{"class":553,"line":814},[2554],{"type":487,"tag":551,"props":2555,"children":2556},{"style":570},[2557],{"type":492,"value":622},{"type":487,"tag":551,"props":2559,"children":2560},{"class":553,"line":822},[2561],{"type":487,"tag":551,"props":2562,"children":2563},{"style":570},[2564],{"type":492,"value":676},{"type":487,"tag":551,"props":2566,"children":2567},{"class":553,"line":1032},[2568],{"type":487,"tag":551,"props":2569,"children":2570},{"emptyLinePlaceholder":629},[2571],{"type":492,"value":632},{"type":487,"tag":551,"props":2573,"children":2574},{"class":553,"line":1058},[2575,2579,2583],{"type":487,"tag":551,"props":2576,"children":2577},{"style":558},[2578],{"type":492,"value":561},{"type":487,"tag":551,"props":2580,"children":2581},{"style":564},[2582],{"type":492,"value":2473},{"type":487,"tag":551,"props":2584,"children":2585},{"style":570},[2586],{"type":492,"value":573},{"type":487,"tag":551,"props":2588,"children":2589},{"class":553,"line":1074},[2590,2595,2599],{"type":487,"tag":551,"props":2591,"children":2592},{"style":580},[2593],{"type":492,"value":2594},"  generatePDF",{"type":487,"tag":551,"props":2596,"children":2597},{"style":570},[2598],{"type":492,"value":646},{"type":487,"tag":551,"props":2600,"children":2601},{"style":570},[2602],{"type":492,"value":573},{"type":487,"tag":551,"props":2604,"children":2605},{"class":553,"line":1111},[2606],{"type":487,"tag":551,"props":2607,"children":2608},{"style":610},[2609],{"type":492,"value":2610},"    // 具体的 PDF 生成逻辑\n",{"type":487,"tag":551,"props":2612,"children":2613},{"class":553,"line":1119},[2614],{"type":487,"tag":551,"props":2615,"children":2616},{"style":570},[2617],{"type":492,"value":622},{"type":487,"tag":551,"props":2619,"children":2620},{"class":553,"line":1127},[2621],{"type":487,"tag":551,"props":2622,"children":2623},{"style":570},[2624],{"type":492,"value":676},{"type":487,"tag":488,"props":2626,"children":2627},{},[2628],{"type":492,"value":2629},"在这个设计中，ReportGenerator 直接依赖于具体的 PDFGenerator 类，这违反了依赖反转原则。如果我们想使用其他类型的报告生成器，例如 HTMLGenerator，就需要修改 ReportGenerator 类。",{"type":487,"tag":488,"props":2631,"children":2632},{},[2633],{"type":492,"value":2634},"为了符合依赖反转原则，我们应该通过抽象来解耦高层和低层模块：",{"type":487,"tag":540,"props":2636,"children":2638},{"className":542,"code":2637,"language":544,"meta":481,"style":481},"// 遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor(generator) {\n    this.generator = generator; // 依赖于抽象的报告生成器接口\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.generator.generate();\n  }\n}\n\nclass PDFGenerator {\n  generate() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n\nclass HTMLGenerator {\n  generate() {\n    // 具体的 HTML 生成逻辑\n  }\n}\n",[2639],{"type":487,"tag":547,"props":2640,"children":2641},{"__ignoreMap":481},[2642,2650,2665,2689,2723,2730,2737,2752,2759,2787,2794,2801,2808,2823,2839,2846,2853,2860,2867,2883,2898,2906,2913],{"type":487,"tag":551,"props":2643,"children":2644},{"class":553,"line":554},[2645],{"type":487,"tag":551,"props":2646,"children":2647},{"style":610},[2648],{"type":492,"value":2649},"// 遵循依赖反转原则的设计\n",{"type":487,"tag":551,"props":2651,"children":2652},{"class":553,"line":576},[2653,2657,2661],{"type":487,"tag":551,"props":2654,"children":2655},{"style":558},[2656],{"type":492,"value":561},{"type":487,"tag":551,"props":2658,"children":2659},{"style":564},[2660],{"type":492,"value":2424},{"type":487,"tag":551,"props":2662,"children":2663},{"style":570},[2664],{"type":492,"value":573},{"type":487,"tag":551,"props":2666,"children":2667},{"class":553,"line":606},[2668,2672,2676,2681,2685],{"type":487,"tag":551,"props":2669,"children":2670},{"style":558},[2671],{"type":492,"value":878},{"type":487,"tag":551,"props":2673,"children":2674},{"style":570},[2675],{"type":492,"value":588},{"type":487,"tag":551,"props":2677,"children":2678},{"style":591},[2679],{"type":492,"value":2680},"generator",{"type":487,"tag":551,"props":2682,"children":2683},{"style":570},[2684],{"type":492,"value":599},{"type":487,"tag":551,"props":2686,"children":2687},{"style":570},[2688],{"type":492,"value":573},{"type":487,"tag":551,"props":2690,"children":2691},{"class":553,"line":616},[2692,2696,2700,2704,2708,2713,2718],{"type":487,"tag":551,"props":2693,"children":2694},{"style":901},[2695],{"type":492,"value":904},{"type":487,"tag":551,"props":2697,"children":2698},{"style":570},[2699],{"type":492,"value":909},{"type":487,"tag":551,"props":2701,"children":2702},{"style":591},[2703],{"type":492,"value":2680},{"type":487,"tag":551,"props":2705,"children":2706},{"style":570},[2707],{"type":492,"value":918},{"type":487,"tag":551,"props":2709,"children":2710},{"style":591},[2711],{"type":492,"value":2712}," generator",{"type":487,"tag":551,"props":2714,"children":2715},{"style":570},[2716],{"type":492,"value":2717},";",{"type":487,"tag":551,"props":2719,"children":2720},{"style":610},[2721],{"type":492,"value":2722}," // 依赖于抽象的报告生成器接口\n",{"type":487,"tag":551,"props":2724,"children":2725},{"class":553,"line":625},[2726],{"type":487,"tag":551,"props":2727,"children":2728},{"style":570},[2729],{"type":492,"value":622},{"type":487,"tag":551,"props":2731,"children":2732},{"class":553,"line":635},[2733],{"type":487,"tag":551,"props":2734,"children":2735},{"emptyLinePlaceholder":629},[2736],{"type":492,"value":632},{"type":487,"tag":551,"props":2738,"children":2739},{"class":553,"line":653},[2740,2744,2748],{"type":487,"tag":551,"props":2741,"children":2742},{"style":580},[2743],{"type":492,"value":2505},{"type":487,"tag":551,"props":2745,"children":2746},{"style":570},[2747],{"type":492,"value":646},{"type":487,"tag":551,"props":2749,"children":2750},{"style":570},[2751],{"type":492,"value":573},{"type":487,"tag":551,"props":2753,"children":2754},{"class":553,"line":662},[2755],{"type":487,"tag":551,"props":2756,"children":2757},{"style":610},[2758],{"type":492,"value":2521},{"type":487,"tag":551,"props":2760,"children":2761},{"class":553,"line":670},[2762,2766,2770,2774,2778,2783],{"type":487,"tag":551,"props":2763,"children":2764},{"style":901},[2765],{"type":492,"value":904},{"type":487,"tag":551,"props":2767,"children":2768},{"style":570},[2769],{"type":492,"value":909},{"type":487,"tag":551,"props":2771,"children":2772},{"style":591},[2773],{"type":492,"value":2680},{"type":487,"tag":551,"props":2775,"children":2776},{"style":570},[2777],{"type":492,"value":909},{"type":487,"tag":551,"props":2779,"children":2780},{"style":580},[2781],{"type":492,"value":2782},"generate",{"type":487,"tag":551,"props":2784,"children":2785},{"style":570},[2786],{"type":492,"value":2550},{"type":487,"tag":551,"props":2788,"children":2789},{"class":553,"line":814},[2790],{"type":487,"tag":551,"props":2791,"children":2792},{"style":570},[2793],{"type":492,"value":622},{"type":487,"tag":551,"props":2795,"children":2796},{"class":553,"line":822},[2797],{"type":487,"tag":551,"props":2798,"children":2799},{"style":570},[2800],{"type":492,"value":676},{"type":487,"tag":551,"props":2802,"children":2803},{"class":553,"line":1032},[2804],{"type":487,"tag":551,"props":2805,"children":2806},{"emptyLinePlaceholder":629},[2807],{"type":492,"value":632},{"type":487,"tag":551,"props":2809,"children":2810},{"class":553,"line":1058},[2811,2815,2819],{"type":487,"tag":551,"props":2812,"children":2813},{"style":558},[2814],{"type":492,"value":561},{"type":487,"tag":551,"props":2816,"children":2817},{"style":564},[2818],{"type":492,"value":2473},{"type":487,"tag":551,"props":2820,"children":2821},{"style":570},[2822],{"type":492,"value":573},{"type":487,"tag":551,"props":2824,"children":2825},{"class":553,"line":1074},[2826,2831,2835],{"type":487,"tag":551,"props":2827,"children":2828},{"style":580},[2829],{"type":492,"value":2830},"  generate",{"type":487,"tag":551,"props":2832,"children":2833},{"style":570},[2834],{"type":492,"value":646},{"type":487,"tag":551,"props":2836,"children":2837},{"style":570},[2838],{"type":492,"value":573},{"type":487,"tag":551,"props":2840,"children":2841},{"class":553,"line":1111},[2842],{"type":487,"tag":551,"props":2843,"children":2844},{"style":610},[2845],{"type":492,"value":2610},{"type":487,"tag":551,"props":2847,"children":2848},{"class":553,"line":1119},[2849],{"type":487,"tag":551,"props":2850,"children":2851},{"style":570},[2852],{"type":492,"value":622},{"type":487,"tag":551,"props":2854,"children":2855},{"class":553,"line":1127},[2856],{"type":487,"tag":551,"props":2857,"children":2858},{"style":570},[2859],{"type":492,"value":676},{"type":487,"tag":551,"props":2861,"children":2862},{"class":553,"line":1135},[2863],{"type":487,"tag":551,"props":2864,"children":2865},{"emptyLinePlaceholder":629},[2866],{"type":492,"value":632},{"type":487,"tag":551,"props":2868,"children":2869},{"class":553,"line":1160},[2870,2874,2879],{"type":487,"tag":551,"props":2871,"children":2872},{"style":558},[2873],{"type":492,"value":561},{"type":487,"tag":551,"props":2875,"children":2876},{"style":564},[2877],{"type":492,"value":2878}," HTMLGenerator",{"type":487,"tag":551,"props":2880,"children":2881},{"style":570},[2882],{"type":492,"value":573},{"type":487,"tag":551,"props":2884,"children":2885},{"class":553,"line":1176},[2886,2890,2894],{"type":487,"tag":551,"props":2887,"children":2888},{"style":580},[2889],{"type":492,"value":2830},{"type":487,"tag":551,"props":2891,"children":2892},{"style":570},[2893],{"type":492,"value":646},{"type":487,"tag":551,"props":2895,"children":2896},{"style":570},[2897],{"type":492,"value":573},{"type":487,"tag":551,"props":2899,"children":2900},{"class":553,"line":1213},[2901],{"type":487,"tag":551,"props":2902,"children":2903},{"style":610},[2904],{"type":492,"value":2905},"    // 具体的 HTML 生成逻辑\n",{"type":487,"tag":551,"props":2907,"children":2908},{"class":553,"line":1221},[2909],{"type":487,"tag":551,"props":2910,"children":2911},{"style":570},[2912],{"type":492,"value":622},{"type":487,"tag":551,"props":2914,"children":2916},{"class":553,"line":2915},23,[2917],{"type":487,"tag":551,"props":2918,"children":2919},{"style":570},[2920],{"type":492,"value":676},{"type":487,"tag":488,"props":2922,"children":2923},{},[2924],{"type":492,"value":2925},"现在，ReportGenerator 不再直接依赖于具体的实现，而是依赖于抽象的报告生成器接口。这使得我们可以轻松地扩展系统，例如添加新的报告生成器，而不需要修改 ReportGenerator 类。这样的设计更加灵活，符合依赖反转原则。",{"type":487,"tag":2927,"props":2928,"children":2929},"style",{},[2930],{"type":492,"value":2931},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":481,"searchDepth":625,"depth":625,"links":2933},[2934,2935,2936,2937,2938],{"id":531,"depth":576,"text":531},{"id":835,"depth":576,"text":835},{"id":1441,"depth":576,"text":1441},{"id":2022,"depth":576,"text":2022},{"id":2385,"depth":576,"text":2385},"markdown","content:4.design-mode:1.thoughts-principles.md","content","4.design-mode/1.thoughts-principles.md","md",[2945,2946],{"_path":456,"title":455,"description":481},{"_path":473,"title":472,"description":481},1714046228540]