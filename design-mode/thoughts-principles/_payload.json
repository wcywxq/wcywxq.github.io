[{"data":1,"prerenderedAt":3009},["Reactive",2],{"navigation":3,"/design-mode/thoughts-principles":540,"/design-mode/thoughts-principles-surround":3006},[4,269,298,508,516,525],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":507},"代码考核","/code-assessment",[302,401,500],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,334,350,378,385,392,395,398],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328,331],{"title":311,"_path":312},"ajax","/code-assessment/source/native-api/ajax",{"title":314,"_path":315},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":317,"_path":318},"new 操作符","/code-assessment/source/native-api/new",{"title":320,"_path":321},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":323,"_path":324},"定时器","/code-assessment/source/native-api/timer",{"title":326,"_path":327},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":329,"_path":330},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":332,"_path":333},"extends","/code-assessment/source/native-api/extends",{"title":335,"_path":336,"children":337},"函数 Function","/code-assessment/source/function",[338,341,344,347],{"title":339,"_path":340},"函数防抖","/code-assessment/source/function/debounce",{"title":342,"_path":343},"函数节流","/code-assessment/source/function/throttle",{"title":345,"_path":346},"函数柯理化","/code-assessment/source/function/curry",{"title":348,"_path":349},"函数睡眠","/code-assessment/source/function/sleep",{"title":351,"_path":352,"children":353},"数组 Array","/code-assessment/source/array",[354,357,360,363,366,369,372,375],{"title":355,"_path":356},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":358,"_path":359},"数组扁平化","/code-assessment/source/array/flat",{"title":361,"_path":362},"原型方法","/code-assessment/source/array/prototype-method",{"title":364,"_path":365},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":367,"_path":368},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":370,"_path":371},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":373,"_path":374},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":376,"_path":377},"二维数组","/code-assessment/source/array/2d-array",{"title":379,"_path":380,"children":381},"字符串 String","/code-assessment/source/string",[382],{"title":383,"_path":384},"repeat()","/code-assessment/source/string/repeat",{"title":386,"_path":387,"children":388},"集合 Set","/code-assessment/source/set",[389],{"title":390,"_path":391},"遍历集合","/code-assessment/source/set/traverse",{"title":393,"_path":394},"获取通用类型","/code-assessment/source/get-generic-type",{"title":396,"_path":397},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":399,"_path":400},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":402,"_path":403,"children":404},"业务场景","/code-assessment/scene",[405,436,446,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497],{"title":406,"_path":407,"children":408},"Promise","/code-assessment/scene/promise",[409,412,415,418,421,424,427,430,433],{"title":410,"_path":411},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":413,"_path":414},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":416,"_path":417},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":419,"_path":420},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":422,"_path":423},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":425,"_path":426},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":428,"_path":429},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":431,"_path":432},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":434,"_path":435},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":437,"_path":438,"children":439},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[440,443],{"title":441,"_path":442},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":444,"_path":445},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":447,"_path":448},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":450,"_path":451},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":453,"_path":454},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":456,"_path":457},"倒计时","/code-assessment/scene/countdown",{"title":459,"_path":460},"日期格式化","/code-assessment/scene/date-format",{"title":462,"_path":463},"实现前端路由","/code-assessment/scene/frontend-route",{"title":465,"_path":466},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":468,"_path":469},"lodash.get","/code-assessment/scene/lodash-get",{"title":471,"_path":472},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":474,"_path":475},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":477,"_path":478},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":480,"_path":481},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":483,"_path":484},"随机数","/code-assessment/scene/random-number",{"title":486,"_path":487},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":489,"_path":490},"sku 算法实现","/code-assessment/scene/sku",{"title":492,"_path":493},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":495,"_path":496},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":498,"_path":499},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":501,"_path":502,"children":503},"Ts 类型挑战","/code-assessment/type-challeges",[504],{"title":505,"_path":506},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":509,"_path":510,"children":511,"icon":515},"项目","/project",[512],{"title":513,"_path":514},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":517,"_path":518,"children":519,"icon":524},"设计模式","/design-mode",[520,521],{"title":517,"_path":518},{"title":522,"_path":523},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":526,"_path":527,"children":528,"icon":539},"后端语言","/backend-languages",[529],{"title":530,"_path":531,"children":532},"Python","/backend-languages/python",[533,536],{"title":534,"_path":535},"基础","/backend-languages/python/base",{"title":537,"_path":538},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":523,"_dir":541,"_draft":542,"_partial":542,"_locale":543,"title":522,"description":544,"body":545,"_type":3001,"_id":3002,"_source":3003,"_file":3004,"_extension":3005},"design-mode",false,"","SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。这些原则由 Robert C. Martin 等人提出，它们包括以下五个原则：",{"type":546,"children":547,"toc":2994},"root",[548,555,585,590,596,601,739,744,758,763,890,895,900,905,910,1289,1294,1299,1491,1496,1501,1506,1511,1516,1521,1851,1856,2072,2077,2082,2087,2092,2097,2102,2306,2311,2316,2440,2445,2450,2455,2460,2687,2692,2697,2983,2988],{"type":549,"tag":550,"props":551,"children":552},"element","p",{},[553],{"type":554,"value":544},"text",{"type":549,"tag":556,"props":557,"children":558},"ul",{},[559,565,570,575,580],{"type":549,"tag":560,"props":561,"children":562},"li",{},[563],{"type":554,"value":564},"单一职责原则（Single Responsibility Principle，SRP）",{"type":549,"tag":560,"props":566,"children":567},{},[568],{"type":554,"value":569},"开放/封闭原则（Open/Closed Principle，OCP）",{"type":549,"tag":560,"props":571,"children":572},{},[573],{"type":554,"value":574},"里氏替换原则（Liskov Substitution Principle，LSP）",{"type":549,"tag":560,"props":576,"children":577},{},[578],{"type":554,"value":579},"接口隔离原则（Interface Segregation Principle，ISP）",{"type":549,"tag":560,"props":581,"children":582},{},[583],{"type":554,"value":584},"依赖反转原则（Dependency Inversion Principle，DIP）",{"type":549,"tag":550,"props":586,"children":587},{},[588],{"type":554,"value":589},"这些原则共同促使开发者创建具有高内聚、低耦合、易扩展和易维护性的软件系统。遵循这些原则有助于构建更健壮的面向对象系统，提高代码质量和可维护性。",{"type":549,"tag":591,"props":592,"children":594},"h2",{"id":593},"单一职责原则",[595],{"type":554,"value":593},{"type":549,"tag":550,"props":597,"children":598},{},[599],{"type":554,"value":600},"单一职责原则（Single Responsibility Principle，SRP）要求一个类或者模块只负责完成一个职责（或者功能）。 假设我们有一个简单的厨师类，它负责烹饪和洗碗两个职责：",{"type":549,"tag":602,"props":603,"children":607},"pre",{"className":604,"code":605,"language":606,"meta":543,"style":543},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n","js",[608],{"type":549,"tag":609,"props":610,"children":611},"code",{"__ignoreMap":543},[612,636,666,676,685,695,713,722,730],{"type":549,"tag":613,"props":614,"children":617},"span",{"class":615,"line":616},"line",1,[618,624,630],{"type":549,"tag":613,"props":619,"children":621},{"style":620},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[622],{"type":554,"value":623},"class",{"type":549,"tag":613,"props":625,"children":627},{"style":626},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[628],{"type":554,"value":629}," Chef",{"type":549,"tag":613,"props":631,"children":633},{"style":632},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[634],{"type":554,"value":635}," {\n",{"type":549,"tag":613,"props":637,"children":639},{"class":615,"line":638},2,[640,646,651,657,662],{"type":549,"tag":613,"props":641,"children":643},{"style":642},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[644],{"type":554,"value":645},"  cookDish",{"type":549,"tag":613,"props":647,"children":648},{"style":632},[649],{"type":554,"value":650},"(",{"type":549,"tag":613,"props":652,"children":654},{"style":653},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[655],{"type":554,"value":656},"dish",{"type":549,"tag":613,"props":658,"children":659},{"style":632},[660],{"type":554,"value":661},")",{"type":549,"tag":613,"props":663,"children":664},{"style":632},[665],{"type":554,"value":635},{"type":549,"tag":613,"props":667,"children":669},{"class":615,"line":668},3,[670],{"type":549,"tag":613,"props":671,"children":673},{"style":672},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[674],{"type":554,"value":675},"    // 烹饪菜品的具体实现\n",{"type":549,"tag":613,"props":677,"children":679},{"class":615,"line":678},4,[680],{"type":549,"tag":613,"props":681,"children":682},{"style":632},[683],{"type":554,"value":684},"  }\n",{"type":549,"tag":613,"props":686,"children":688},{"class":615,"line":687},5,[689],{"type":549,"tag":613,"props":690,"children":692},{"emptyLinePlaceholder":691},true,[693],{"type":554,"value":694},"\n",{"type":549,"tag":613,"props":696,"children":698},{"class":615,"line":697},6,[699,704,709],{"type":549,"tag":613,"props":700,"children":701},{"style":642},[702],{"type":554,"value":703},"  washDishes",{"type":549,"tag":613,"props":705,"children":706},{"style":632},[707],{"type":554,"value":708},"()",{"type":549,"tag":613,"props":710,"children":711},{"style":632},[712],{"type":554,"value":635},{"type":549,"tag":613,"props":714,"children":716},{"class":615,"line":715},7,[717],{"type":549,"tag":613,"props":718,"children":719},{"style":672},[720],{"type":554,"value":721},"    // 洗碗的具体实现\n",{"type":549,"tag":613,"props":723,"children":725},{"class":615,"line":724},8,[726],{"type":549,"tag":613,"props":727,"children":728},{"style":632},[729],{"type":554,"value":684},{"type":549,"tag":613,"props":731,"children":733},{"class":615,"line":732},9,[734],{"type":549,"tag":613,"props":735,"children":736},{"style":632},[737],{"type":554,"value":738},"}\n",{"type":549,"tag":550,"props":740,"children":741},{},[742],{"type":554,"value":743},"这个类违反了单一职责原则，因为它有两个职责：烹饪和洗碗。这样的设计可能导致以下问题：",{"type":549,"tag":745,"props":746,"children":747},"ol",{},[748,753],{"type":549,"tag":560,"props":749,"children":750},{},[751],{"type":554,"value":752},"如果厨师的烹饪逻辑变化，需要修改 cookDish 方法，这可能会影响洗碗的部分。",{"type":549,"tag":560,"props":754,"children":755},{},[756],{"type":554,"value":757},"如果洗碗的逻辑变化，需要修改 washDishes 方法，这可能会影响烹饪的部分。",{"type":549,"tag":550,"props":759,"children":760},{},[761],{"type":554,"value":762},"按照单一职责原则，我们应该将这两个职责分开，分别由不同的类负责：",{"type":549,"tag":602,"props":764,"children":766},{"className":604,"code":765,"language":606,"meta":543,"style":543},"class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n}\n\nclass Dishwasher {\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n",[767],{"type":549,"tag":609,"props":768,"children":769},{"__ignoreMap":543},[770,785,808,815,822,829,836,852,867,874,882],{"type":549,"tag":613,"props":771,"children":772},{"class":615,"line":616},[773,777,781],{"type":549,"tag":613,"props":774,"children":775},{"style":620},[776],{"type":554,"value":623},{"type":549,"tag":613,"props":778,"children":779},{"style":626},[780],{"type":554,"value":629},{"type":549,"tag":613,"props":782,"children":783},{"style":632},[784],{"type":554,"value":635},{"type":549,"tag":613,"props":786,"children":787},{"class":615,"line":638},[788,792,796,800,804],{"type":549,"tag":613,"props":789,"children":790},{"style":642},[791],{"type":554,"value":645},{"type":549,"tag":613,"props":793,"children":794},{"style":632},[795],{"type":554,"value":650},{"type":549,"tag":613,"props":797,"children":798},{"style":653},[799],{"type":554,"value":656},{"type":549,"tag":613,"props":801,"children":802},{"style":632},[803],{"type":554,"value":661},{"type":549,"tag":613,"props":805,"children":806},{"style":632},[807],{"type":554,"value":635},{"type":549,"tag":613,"props":809,"children":810},{"class":615,"line":668},[811],{"type":549,"tag":613,"props":812,"children":813},{"style":672},[814],{"type":554,"value":675},{"type":549,"tag":613,"props":816,"children":817},{"class":615,"line":678},[818],{"type":549,"tag":613,"props":819,"children":820},{"style":632},[821],{"type":554,"value":684},{"type":549,"tag":613,"props":823,"children":824},{"class":615,"line":687},[825],{"type":549,"tag":613,"props":826,"children":827},{"style":632},[828],{"type":554,"value":738},{"type":549,"tag":613,"props":830,"children":831},{"class":615,"line":697},[832],{"type":549,"tag":613,"props":833,"children":834},{"emptyLinePlaceholder":691},[835],{"type":554,"value":694},{"type":549,"tag":613,"props":837,"children":838},{"class":615,"line":715},[839,843,848],{"type":549,"tag":613,"props":840,"children":841},{"style":620},[842],{"type":554,"value":623},{"type":549,"tag":613,"props":844,"children":845},{"style":626},[846],{"type":554,"value":847}," Dishwasher",{"type":549,"tag":613,"props":849,"children":850},{"style":632},[851],{"type":554,"value":635},{"type":549,"tag":613,"props":853,"children":854},{"class":615,"line":724},[855,859,863],{"type":549,"tag":613,"props":856,"children":857},{"style":642},[858],{"type":554,"value":703},{"type":549,"tag":613,"props":860,"children":861},{"style":632},[862],{"type":554,"value":708},{"type":549,"tag":613,"props":864,"children":865},{"style":632},[866],{"type":554,"value":635},{"type":549,"tag":613,"props":868,"children":869},{"class":615,"line":732},[870],{"type":549,"tag":613,"props":871,"children":872},{"style":672},[873],{"type":554,"value":721},{"type":549,"tag":613,"props":875,"children":877},{"class":615,"line":876},10,[878],{"type":549,"tag":613,"props":879,"children":880},{"style":632},[881],{"type":554,"value":684},{"type":549,"tag":613,"props":883,"children":885},{"class":615,"line":884},11,[886],{"type":549,"tag":613,"props":887,"children":888},{"style":632},[889],{"type":554,"value":738},{"type":549,"tag":550,"props":891,"children":892},{},[893],{"type":554,"value":894},"这样，Chef 类专注于烹饪，而 Dishwasher 类专注于洗碗。每个类都有一个单一的职责，使得代码更清晰、易于理解，并且在未来的变更中更具弹性。",{"type":549,"tag":591,"props":896,"children":898},{"id":897},"开放封闭原则",[899],{"type":554,"value":897},{"type":549,"tag":550,"props":901,"children":902},{},[903],{"type":554,"value":904},"开关封闭原则（Open/Closed Principle，OCP）要求软件实体（例如类、模块、函数等）应该对扩展开放，对修改关闭。简而言之，一个模块在扩展新功能时不应该修改原有的代码，而是通过添加新的代码来实现扩展。",{"type":549,"tag":550,"props":906,"children":907},{},[908],{"type":554,"value":909},"考虑一个动物园的场景。我们有一些动物，每个动物都会发出叫声。初始设计如下：",{"type":549,"tag":602,"props":911,"children":913},{"className":604,"code":912,"language":606,"meta":543,"style":543},"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    // 默认的叫声\n    console.log(\"Some generic animal sound\");\n  }\n}\n\nclass Lion extends Animal {\n  makeSound() {\n    console.log(\"Roar!\");\n  }\n}\n\nclass Elephant extends Animal {\n  makeSound() {\n    console.log(\"Trumpet!\");\n  }\n}\n",[914],{"type":549,"tag":609,"props":915,"children":916},{"__ignoreMap":543},[917,933,958,991,998,1005,1021,1029,1071,1078,1085,1092,1118,1134,1171,1179,1187,1195,1220,1236,1273,1281],{"type":549,"tag":613,"props":918,"children":919},{"class":615,"line":616},[920,924,929],{"type":549,"tag":613,"props":921,"children":922},{"style":620},[923],{"type":554,"value":623},{"type":549,"tag":613,"props":925,"children":926},{"style":626},[927],{"type":554,"value":928}," Animal",{"type":549,"tag":613,"props":930,"children":931},{"style":632},[932],{"type":554,"value":635},{"type":549,"tag":613,"props":934,"children":935},{"class":615,"line":638},[936,941,945,950,954],{"type":549,"tag":613,"props":937,"children":938},{"style":620},[939],{"type":554,"value":940},"  constructor",{"type":549,"tag":613,"props":942,"children":943},{"style":632},[944],{"type":554,"value":650},{"type":549,"tag":613,"props":946,"children":947},{"style":653},[948],{"type":554,"value":949},"name",{"type":549,"tag":613,"props":951,"children":952},{"style":632},[953],{"type":554,"value":661},{"type":549,"tag":613,"props":955,"children":956},{"style":632},[957],{"type":554,"value":635},{"type":549,"tag":613,"props":959,"children":960},{"class":615,"line":668},[961,967,972,976,981,986],{"type":549,"tag":613,"props":962,"children":964},{"style":963},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[965],{"type":554,"value":966},"    this",{"type":549,"tag":613,"props":968,"children":969},{"style":632},[970],{"type":554,"value":971},".",{"type":549,"tag":613,"props":973,"children":974},{"style":653},[975],{"type":554,"value":949},{"type":549,"tag":613,"props":977,"children":978},{"style":632},[979],{"type":554,"value":980}," =",{"type":549,"tag":613,"props":982,"children":983},{"style":653},[984],{"type":554,"value":985}," name",{"type":549,"tag":613,"props":987,"children":988},{"style":632},[989],{"type":554,"value":990},";\n",{"type":549,"tag":613,"props":992,"children":993},{"class":615,"line":678},[994],{"type":549,"tag":613,"props":995,"children":996},{"style":632},[997],{"type":554,"value":684},{"type":549,"tag":613,"props":999,"children":1000},{"class":615,"line":687},[1001],{"type":549,"tag":613,"props":1002,"children":1003},{"emptyLinePlaceholder":691},[1004],{"type":554,"value":694},{"type":549,"tag":613,"props":1006,"children":1007},{"class":615,"line":697},[1008,1013,1017],{"type":549,"tag":613,"props":1009,"children":1010},{"style":642},[1011],{"type":554,"value":1012},"  makeSound",{"type":549,"tag":613,"props":1014,"children":1015},{"style":632},[1016],{"type":554,"value":708},{"type":549,"tag":613,"props":1018,"children":1019},{"style":632},[1020],{"type":554,"value":635},{"type":549,"tag":613,"props":1022,"children":1023},{"class":615,"line":715},[1024],{"type":549,"tag":613,"props":1025,"children":1026},{"style":672},[1027],{"type":554,"value":1028},"    // 默认的叫声\n",{"type":549,"tag":613,"props":1030,"children":1031},{"class":615,"line":724},[1032,1037,1041,1046,1050,1056,1062,1066],{"type":549,"tag":613,"props":1033,"children":1034},{"style":653},[1035],{"type":554,"value":1036},"    console",{"type":549,"tag":613,"props":1038,"children":1039},{"style":632},[1040],{"type":554,"value":971},{"type":549,"tag":613,"props":1042,"children":1043},{"style":642},[1044],{"type":554,"value":1045},"log",{"type":549,"tag":613,"props":1047,"children":1048},{"style":632},[1049],{"type":554,"value":650},{"type":549,"tag":613,"props":1051,"children":1053},{"style":1052},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1054],{"type":554,"value":1055},"\"",{"type":549,"tag":613,"props":1057,"children":1059},{"style":1058},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1060],{"type":554,"value":1061},"Some generic animal sound",{"type":549,"tag":613,"props":1063,"children":1064},{"style":1052},[1065],{"type":554,"value":1055},{"type":549,"tag":613,"props":1067,"children":1068},{"style":632},[1069],{"type":554,"value":1070},");\n",{"type":549,"tag":613,"props":1072,"children":1073},{"class":615,"line":732},[1074],{"type":549,"tag":613,"props":1075,"children":1076},{"style":632},[1077],{"type":554,"value":684},{"type":549,"tag":613,"props":1079,"children":1080},{"class":615,"line":876},[1081],{"type":549,"tag":613,"props":1082,"children":1083},{"style":632},[1084],{"type":554,"value":738},{"type":549,"tag":613,"props":1086,"children":1087},{"class":615,"line":884},[1088],{"type":549,"tag":613,"props":1089,"children":1090},{"emptyLinePlaceholder":691},[1091],{"type":554,"value":694},{"type":549,"tag":613,"props":1093,"children":1095},{"class":615,"line":1094},12,[1096,1100,1105,1110,1114],{"type":549,"tag":613,"props":1097,"children":1098},{"style":620},[1099],{"type":554,"value":623},{"type":549,"tag":613,"props":1101,"children":1102},{"style":626},[1103],{"type":554,"value":1104}," Lion",{"type":549,"tag":613,"props":1106,"children":1107},{"style":620},[1108],{"type":554,"value":1109}," extends",{"type":549,"tag":613,"props":1111,"children":1112},{"style":642},[1113],{"type":554,"value":928},{"type":549,"tag":613,"props":1115,"children":1116},{"style":632},[1117],{"type":554,"value":635},{"type":549,"tag":613,"props":1119,"children":1121},{"class":615,"line":1120},13,[1122,1126,1130],{"type":549,"tag":613,"props":1123,"children":1124},{"style":642},[1125],{"type":554,"value":1012},{"type":549,"tag":613,"props":1127,"children":1128},{"style":632},[1129],{"type":554,"value":708},{"type":549,"tag":613,"props":1131,"children":1132},{"style":632},[1133],{"type":554,"value":635},{"type":549,"tag":613,"props":1135,"children":1137},{"class":615,"line":1136},14,[1138,1142,1146,1150,1154,1158,1163,1167],{"type":549,"tag":613,"props":1139,"children":1140},{"style":653},[1141],{"type":554,"value":1036},{"type":549,"tag":613,"props":1143,"children":1144},{"style":632},[1145],{"type":554,"value":971},{"type":549,"tag":613,"props":1147,"children":1148},{"style":642},[1149],{"type":554,"value":1045},{"type":549,"tag":613,"props":1151,"children":1152},{"style":632},[1153],{"type":554,"value":650},{"type":549,"tag":613,"props":1155,"children":1156},{"style":1052},[1157],{"type":554,"value":1055},{"type":549,"tag":613,"props":1159,"children":1160},{"style":1058},[1161],{"type":554,"value":1162},"Roar!",{"type":549,"tag":613,"props":1164,"children":1165},{"style":1052},[1166],{"type":554,"value":1055},{"type":549,"tag":613,"props":1168,"children":1169},{"style":632},[1170],{"type":554,"value":1070},{"type":549,"tag":613,"props":1172,"children":1174},{"class":615,"line":1173},15,[1175],{"type":549,"tag":613,"props":1176,"children":1177},{"style":632},[1178],{"type":554,"value":684},{"type":549,"tag":613,"props":1180,"children":1182},{"class":615,"line":1181},16,[1183],{"type":549,"tag":613,"props":1184,"children":1185},{"style":632},[1186],{"type":554,"value":738},{"type":549,"tag":613,"props":1188,"children":1190},{"class":615,"line":1189},17,[1191],{"type":549,"tag":613,"props":1192,"children":1193},{"emptyLinePlaceholder":691},[1194],{"type":554,"value":694},{"type":549,"tag":613,"props":1196,"children":1198},{"class":615,"line":1197},18,[1199,1203,1208,1212,1216],{"type":549,"tag":613,"props":1200,"children":1201},{"style":620},[1202],{"type":554,"value":623},{"type":549,"tag":613,"props":1204,"children":1205},{"style":626},[1206],{"type":554,"value":1207}," Elephant",{"type":549,"tag":613,"props":1209,"children":1210},{"style":620},[1211],{"type":554,"value":1109},{"type":549,"tag":613,"props":1213,"children":1214},{"style":642},[1215],{"type":554,"value":928},{"type":549,"tag":613,"props":1217,"children":1218},{"style":632},[1219],{"type":554,"value":635},{"type":549,"tag":613,"props":1221,"children":1223},{"class":615,"line":1222},19,[1224,1228,1232],{"type":549,"tag":613,"props":1225,"children":1226},{"style":642},[1227],{"type":554,"value":1012},{"type":549,"tag":613,"props":1229,"children":1230},{"style":632},[1231],{"type":554,"value":708},{"type":549,"tag":613,"props":1233,"children":1234},{"style":632},[1235],{"type":554,"value":635},{"type":549,"tag":613,"props":1237,"children":1239},{"class":615,"line":1238},20,[1240,1244,1248,1252,1256,1260,1265,1269],{"type":549,"tag":613,"props":1241,"children":1242},{"style":653},[1243],{"type":554,"value":1036},{"type":549,"tag":613,"props":1245,"children":1246},{"style":632},[1247],{"type":554,"value":971},{"type":549,"tag":613,"props":1249,"children":1250},{"style":642},[1251],{"type":554,"value":1045},{"type":549,"tag":613,"props":1253,"children":1254},{"style":632},[1255],{"type":554,"value":650},{"type":549,"tag":613,"props":1257,"children":1258},{"style":1052},[1259],{"type":554,"value":1055},{"type":549,"tag":613,"props":1261,"children":1262},{"style":1058},[1263],{"type":554,"value":1264},"Trumpet!",{"type":549,"tag":613,"props":1266,"children":1267},{"style":1052},[1268],{"type":554,"value":1055},{"type":549,"tag":613,"props":1270,"children":1271},{"style":632},[1272],{"type":554,"value":1070},{"type":549,"tag":613,"props":1274,"children":1276},{"class":615,"line":1275},21,[1277],{"type":549,"tag":613,"props":1278,"children":1279},{"style":632},[1280],{"type":554,"value":684},{"type":549,"tag":613,"props":1282,"children":1284},{"class":615,"line":1283},22,[1285],{"type":549,"tag":613,"props":1286,"children":1287},{"style":632},[1288],{"type":554,"value":738},{"type":549,"tag":550,"props":1290,"children":1291},{},[1292],{"type":554,"value":1293},"在这个设计中，Animal 类是一个基类，而 Lion 和 Elephant 是它的子类。每个动物都有自己的叫声，通过重写 makeSound 方法来实现。",{"type":549,"tag":550,"props":1295,"children":1296},{},[1297],{"type":554,"value":1298},"现在，假设我们要添加一些新的动物，比如鹦鹉和狗，按照开放/封闭原则，我们应该扩展而不是修改现有的代码：",{"type":549,"tag":602,"props":1300,"children":1302},{"className":604,"code":1301,"language":606,"meta":543,"style":543},"class Parrot extends Animal {\n  makeSound() {\n    console.log(\"Squawk!\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Bark!\");\n  }\n}\n",[1303],{"type":549,"tag":609,"props":1304,"children":1305},{"__ignoreMap":543},[1306,1330,1345,1381,1388,1395,1402,1426,1441,1477,1484],{"type":549,"tag":613,"props":1307,"children":1308},{"class":615,"line":616},[1309,1313,1318,1322,1326],{"type":549,"tag":613,"props":1310,"children":1311},{"style":620},[1312],{"type":554,"value":623},{"type":549,"tag":613,"props":1314,"children":1315},{"style":626},[1316],{"type":554,"value":1317}," Parrot",{"type":549,"tag":613,"props":1319,"children":1320},{"style":620},[1321],{"type":554,"value":1109},{"type":549,"tag":613,"props":1323,"children":1324},{"style":642},[1325],{"type":554,"value":928},{"type":549,"tag":613,"props":1327,"children":1328},{"style":632},[1329],{"type":554,"value":635},{"type":549,"tag":613,"props":1331,"children":1332},{"class":615,"line":638},[1333,1337,1341],{"type":549,"tag":613,"props":1334,"children":1335},{"style":642},[1336],{"type":554,"value":1012},{"type":549,"tag":613,"props":1338,"children":1339},{"style":632},[1340],{"type":554,"value":708},{"type":549,"tag":613,"props":1342,"children":1343},{"style":632},[1344],{"type":554,"value":635},{"type":549,"tag":613,"props":1346,"children":1347},{"class":615,"line":668},[1348,1352,1356,1360,1364,1368,1373,1377],{"type":549,"tag":613,"props":1349,"children":1350},{"style":653},[1351],{"type":554,"value":1036},{"type":549,"tag":613,"props":1353,"children":1354},{"style":632},[1355],{"type":554,"value":971},{"type":549,"tag":613,"props":1357,"children":1358},{"style":642},[1359],{"type":554,"value":1045},{"type":549,"tag":613,"props":1361,"children":1362},{"style":632},[1363],{"type":554,"value":650},{"type":549,"tag":613,"props":1365,"children":1366},{"style":1052},[1367],{"type":554,"value":1055},{"type":549,"tag":613,"props":1369,"children":1370},{"style":1058},[1371],{"type":554,"value":1372},"Squawk!",{"type":549,"tag":613,"props":1374,"children":1375},{"style":1052},[1376],{"type":554,"value":1055},{"type":549,"tag":613,"props":1378,"children":1379},{"style":632},[1380],{"type":554,"value":1070},{"type":549,"tag":613,"props":1382,"children":1383},{"class":615,"line":678},[1384],{"type":549,"tag":613,"props":1385,"children":1386},{"style":632},[1387],{"type":554,"value":684},{"type":549,"tag":613,"props":1389,"children":1390},{"class":615,"line":687},[1391],{"type":549,"tag":613,"props":1392,"children":1393},{"style":632},[1394],{"type":554,"value":738},{"type":549,"tag":613,"props":1396,"children":1397},{"class":615,"line":697},[1398],{"type":549,"tag":613,"props":1399,"children":1400},{"emptyLinePlaceholder":691},[1401],{"type":554,"value":694},{"type":549,"tag":613,"props":1403,"children":1404},{"class":615,"line":715},[1405,1409,1414,1418,1422],{"type":549,"tag":613,"props":1406,"children":1407},{"style":620},[1408],{"type":554,"value":623},{"type":549,"tag":613,"props":1410,"children":1411},{"style":626},[1412],{"type":554,"value":1413}," Dog",{"type":549,"tag":613,"props":1415,"children":1416},{"style":620},[1417],{"type":554,"value":1109},{"type":549,"tag":613,"props":1419,"children":1420},{"style":642},[1421],{"type":554,"value":928},{"type":549,"tag":613,"props":1423,"children":1424},{"style":632},[1425],{"type":554,"value":635},{"type":549,"tag":613,"props":1427,"children":1428},{"class":615,"line":724},[1429,1433,1437],{"type":549,"tag":613,"props":1430,"children":1431},{"style":642},[1432],{"type":554,"value":1012},{"type":549,"tag":613,"props":1434,"children":1435},{"style":632},[1436],{"type":554,"value":708},{"type":549,"tag":613,"props":1438,"children":1439},{"style":632},[1440],{"type":554,"value":635},{"type":549,"tag":613,"props":1442,"children":1443},{"class":615,"line":732},[1444,1448,1452,1456,1460,1464,1469,1473],{"type":549,"tag":613,"props":1445,"children":1446},{"style":653},[1447],{"type":554,"value":1036},{"type":549,"tag":613,"props":1449,"children":1450},{"style":632},[1451],{"type":554,"value":971},{"type":549,"tag":613,"props":1453,"children":1454},{"style":642},[1455],{"type":554,"value":1045},{"type":549,"tag":613,"props":1457,"children":1458},{"style":632},[1459],{"type":554,"value":650},{"type":549,"tag":613,"props":1461,"children":1462},{"style":1052},[1463],{"type":554,"value":1055},{"type":549,"tag":613,"props":1465,"children":1466},{"style":1058},[1467],{"type":554,"value":1468},"Bark!",{"type":549,"tag":613,"props":1470,"children":1471},{"style":1052},[1472],{"type":554,"value":1055},{"type":549,"tag":613,"props":1474,"children":1475},{"style":632},[1476],{"type":554,"value":1070},{"type":549,"tag":613,"props":1478,"children":1479},{"class":615,"line":876},[1480],{"type":549,"tag":613,"props":1481,"children":1482},{"style":632},[1483],{"type":554,"value":684},{"type":549,"tag":613,"props":1485,"children":1486},{"class":615,"line":884},[1487],{"type":549,"tag":613,"props":1488,"children":1489},{"style":632},[1490],{"type":554,"value":738},{"type":549,"tag":550,"props":1492,"children":1493},{},[1494],{"type":554,"value":1495},"这样，我们通过扩展 Animal 类，而不是修改它，来添加新的功能（新的动物）。这符合开放/封闭原则，因为我们对于现有代码的修改是关闭的，我们只是通过扩展来引入新的功能。",{"type":549,"tag":550,"props":1497,"children":1498},{},[1499],{"type":554,"value":1500},"使用开放/封闭原则可以使代码更加稳定，降低对现有代码的影响，同时也更容易应对变化和扩展。",{"type":549,"tag":591,"props":1502,"children":1504},{"id":1503},"里式替换原则",[1505],{"type":554,"value":1503},{"type":549,"tag":550,"props":1507,"children":1508},{},[1509],{"type":554,"value":1510},"里氏替换原则（Liskov Substitution Principle，LSP） 是 SOLID 原则之一，它强调子类型（派生类或子类）必须能够替换掉它们的基类型（基类或父类）并出现在基类能够工作的任何地方，而不破坏程序的正确性。",{"type":549,"tag":550,"props":1512,"children":1513},{},[1514],{"type":554,"value":1515},"通俗地说，如果一个类是基类的子类，那么在任何需要基类的地方，都可以使用这个子类而不产生错误。子类应该保持基类的行为，并且可以扩展或修改基类的行为，但不应该破坏基类原有的约定。",{"type":549,"tag":550,"props":1517,"children":1518},{},[1519],{"type":554,"value":1520},"假设我们有一个表示矩形的基类 Rectangle：",{"type":549,"tag":602,"props":1522,"children":1524},{"className":604,"code":1523,"language":606,"meta":543,"style":543},"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n",[1525],{"type":549,"tag":609,"props":1526,"children":1527},{"__ignoreMap":543},[1528,1544,1578,1606,1634,1641,1648,1672,1699,1706,1713,1737,1764,1771,1778,1794,1837,1844],{"type":549,"tag":613,"props":1529,"children":1530},{"class":615,"line":616},[1531,1535,1540],{"type":549,"tag":613,"props":1532,"children":1533},{"style":620},[1534],{"type":554,"value":623},{"type":549,"tag":613,"props":1536,"children":1537},{"style":626},[1538],{"type":554,"value":1539}," Rectangle",{"type":549,"tag":613,"props":1541,"children":1542},{"style":632},[1543],{"type":554,"value":635},{"type":549,"tag":613,"props":1545,"children":1546},{"class":615,"line":638},[1547,1551,1555,1560,1565,1570,1574],{"type":549,"tag":613,"props":1548,"children":1549},{"style":620},[1550],{"type":554,"value":940},{"type":549,"tag":613,"props":1552,"children":1553},{"style":632},[1554],{"type":554,"value":650},{"type":549,"tag":613,"props":1556,"children":1557},{"style":653},[1558],{"type":554,"value":1559},"width",{"type":549,"tag":613,"props":1561,"children":1562},{"style":632},[1563],{"type":554,"value":1564},",",{"type":549,"tag":613,"props":1566,"children":1567},{"style":653},[1568],{"type":554,"value":1569}," height",{"type":549,"tag":613,"props":1571,"children":1572},{"style":632},[1573],{"type":554,"value":661},{"type":549,"tag":613,"props":1575,"children":1576},{"style":632},[1577],{"type":554,"value":635},{"type":549,"tag":613,"props":1579,"children":1580},{"class":615,"line":668},[1581,1585,1589,1593,1597,1602],{"type":549,"tag":613,"props":1582,"children":1583},{"style":963},[1584],{"type":554,"value":966},{"type":549,"tag":613,"props":1586,"children":1587},{"style":632},[1588],{"type":554,"value":971},{"type":549,"tag":613,"props":1590,"children":1591},{"style":653},[1592],{"type":554,"value":1559},{"type":549,"tag":613,"props":1594,"children":1595},{"style":632},[1596],{"type":554,"value":980},{"type":549,"tag":613,"props":1598,"children":1599},{"style":653},[1600],{"type":554,"value":1601}," width",{"type":549,"tag":613,"props":1603,"children":1604},{"style":632},[1605],{"type":554,"value":990},{"type":549,"tag":613,"props":1607,"children":1608},{"class":615,"line":678},[1609,1613,1617,1622,1626,1630],{"type":549,"tag":613,"props":1610,"children":1611},{"style":963},[1612],{"type":554,"value":966},{"type":549,"tag":613,"props":1614,"children":1615},{"style":632},[1616],{"type":554,"value":971},{"type":549,"tag":613,"props":1618,"children":1619},{"style":653},[1620],{"type":554,"value":1621},"height",{"type":549,"tag":613,"props":1623,"children":1624},{"style":632},[1625],{"type":554,"value":980},{"type":549,"tag":613,"props":1627,"children":1628},{"style":653},[1629],{"type":554,"value":1569},{"type":549,"tag":613,"props":1631,"children":1632},{"style":632},[1633],{"type":554,"value":990},{"type":549,"tag":613,"props":1635,"children":1636},{"class":615,"line":687},[1637],{"type":549,"tag":613,"props":1638,"children":1639},{"style":632},[1640],{"type":554,"value":684},{"type":549,"tag":613,"props":1642,"children":1643},{"class":615,"line":697},[1644],{"type":549,"tag":613,"props":1645,"children":1646},{"emptyLinePlaceholder":691},[1647],{"type":554,"value":694},{"type":549,"tag":613,"props":1649,"children":1650},{"class":615,"line":715},[1651,1656,1660,1664,1668],{"type":549,"tag":613,"props":1652,"children":1653},{"style":642},[1654],{"type":554,"value":1655},"  setWidth",{"type":549,"tag":613,"props":1657,"children":1658},{"style":632},[1659],{"type":554,"value":650},{"type":549,"tag":613,"props":1661,"children":1662},{"style":653},[1663],{"type":554,"value":1559},{"type":549,"tag":613,"props":1665,"children":1666},{"style":632},[1667],{"type":554,"value":661},{"type":549,"tag":613,"props":1669,"children":1670},{"style":632},[1671],{"type":554,"value":635},{"type":549,"tag":613,"props":1673,"children":1674},{"class":615,"line":724},[1675,1679,1683,1687,1691,1695],{"type":549,"tag":613,"props":1676,"children":1677},{"style":963},[1678],{"type":554,"value":966},{"type":549,"tag":613,"props":1680,"children":1681},{"style":632},[1682],{"type":554,"value":971},{"type":549,"tag":613,"props":1684,"children":1685},{"style":653},[1686],{"type":554,"value":1559},{"type":549,"tag":613,"props":1688,"children":1689},{"style":632},[1690],{"type":554,"value":980},{"type":549,"tag":613,"props":1692,"children":1693},{"style":653},[1694],{"type":554,"value":1601},{"type":549,"tag":613,"props":1696,"children":1697},{"style":632},[1698],{"type":554,"value":990},{"type":549,"tag":613,"props":1700,"children":1701},{"class":615,"line":732},[1702],{"type":549,"tag":613,"props":1703,"children":1704},{"style":632},[1705],{"type":554,"value":684},{"type":549,"tag":613,"props":1707,"children":1708},{"class":615,"line":876},[1709],{"type":549,"tag":613,"props":1710,"children":1711},{"emptyLinePlaceholder":691},[1712],{"type":554,"value":694},{"type":549,"tag":613,"props":1714,"children":1715},{"class":615,"line":884},[1716,1721,1725,1729,1733],{"type":549,"tag":613,"props":1717,"children":1718},{"style":642},[1719],{"type":554,"value":1720},"  setHeight",{"type":549,"tag":613,"props":1722,"children":1723},{"style":632},[1724],{"type":554,"value":650},{"type":549,"tag":613,"props":1726,"children":1727},{"style":653},[1728],{"type":554,"value":1621},{"type":549,"tag":613,"props":1730,"children":1731},{"style":632},[1732],{"type":554,"value":661},{"type":549,"tag":613,"props":1734,"children":1735},{"style":632},[1736],{"type":554,"value":635},{"type":549,"tag":613,"props":1738,"children":1739},{"class":615,"line":1094},[1740,1744,1748,1752,1756,1760],{"type":549,"tag":613,"props":1741,"children":1742},{"style":963},[1743],{"type":554,"value":966},{"type":549,"tag":613,"props":1745,"children":1746},{"style":632},[1747],{"type":554,"value":971},{"type":549,"tag":613,"props":1749,"children":1750},{"style":653},[1751],{"type":554,"value":1621},{"type":549,"tag":613,"props":1753,"children":1754},{"style":632},[1755],{"type":554,"value":980},{"type":549,"tag":613,"props":1757,"children":1758},{"style":653},[1759],{"type":554,"value":1569},{"type":549,"tag":613,"props":1761,"children":1762},{"style":632},[1763],{"type":554,"value":990},{"type":549,"tag":613,"props":1765,"children":1766},{"class":615,"line":1120},[1767],{"type":549,"tag":613,"props":1768,"children":1769},{"style":632},[1770],{"type":554,"value":684},{"type":549,"tag":613,"props":1772,"children":1773},{"class":615,"line":1136},[1774],{"type":549,"tag":613,"props":1775,"children":1776},{"emptyLinePlaceholder":691},[1777],{"type":554,"value":694},{"type":549,"tag":613,"props":1779,"children":1780},{"class":615,"line":1173},[1781,1786,1790],{"type":549,"tag":613,"props":1782,"children":1783},{"style":642},[1784],{"type":554,"value":1785},"  getArea",{"type":549,"tag":613,"props":1787,"children":1788},{"style":632},[1789],{"type":554,"value":708},{"type":549,"tag":613,"props":1791,"children":1792},{"style":632},[1793],{"type":554,"value":635},{"type":549,"tag":613,"props":1795,"children":1796},{"class":615,"line":1181},[1797,1803,1808,1812,1816,1821,1825,1829,1833],{"type":549,"tag":613,"props":1798,"children":1800},{"style":1799},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1801],{"type":554,"value":1802},"    return",{"type":549,"tag":613,"props":1804,"children":1805},{"style":963},[1806],{"type":554,"value":1807}," this",{"type":549,"tag":613,"props":1809,"children":1810},{"style":632},[1811],{"type":554,"value":971},{"type":549,"tag":613,"props":1813,"children":1814},{"style":653},[1815],{"type":554,"value":1559},{"type":549,"tag":613,"props":1817,"children":1818},{"style":620},[1819],{"type":554,"value":1820}," *",{"type":549,"tag":613,"props":1822,"children":1823},{"style":963},[1824],{"type":554,"value":1807},{"type":549,"tag":613,"props":1826,"children":1827},{"style":632},[1828],{"type":554,"value":971},{"type":549,"tag":613,"props":1830,"children":1831},{"style":653},[1832],{"type":554,"value":1621},{"type":549,"tag":613,"props":1834,"children":1835},{"style":632},[1836],{"type":554,"value":990},{"type":549,"tag":613,"props":1838,"children":1839},{"class":615,"line":1189},[1840],{"type":549,"tag":613,"props":1841,"children":1842},{"style":632},[1843],{"type":554,"value":684},{"type":549,"tag":613,"props":1845,"children":1846},{"class":615,"line":1197},[1847],{"type":549,"tag":613,"props":1848,"children":1849},{"style":632},[1850],{"type":554,"value":738},{"type":549,"tag":550,"props":1852,"children":1853},{},[1854],{"type":554,"value":1855},"现在，我们创建了一个子类 Square 继承自 Rectangle，表示正方形。在正方形中，宽和高应该始终相等。",{"type":549,"tag":602,"props":1857,"children":1859},{"className":604,"code":1858,"language":606,"meta":543,"style":543},"class Square extends Rectangle {\n  setWidth(width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  setHeight(height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n",[1860],{"type":549,"tag":609,"props":1861,"children":1862},{"__ignoreMap":543},[1863,1887,1910,1939,1967,1974,1981,2004,2031,2058,2065],{"type":549,"tag":613,"props":1864,"children":1865},{"class":615,"line":616},[1866,1870,1875,1879,1883],{"type":549,"tag":613,"props":1867,"children":1868},{"style":620},[1869],{"type":554,"value":623},{"type":549,"tag":613,"props":1871,"children":1872},{"style":626},[1873],{"type":554,"value":1874}," Square",{"type":549,"tag":613,"props":1876,"children":1877},{"style":620},[1878],{"type":554,"value":1109},{"type":549,"tag":613,"props":1880,"children":1881},{"style":642},[1882],{"type":554,"value":1539},{"type":549,"tag":613,"props":1884,"children":1885},{"style":632},[1886],{"type":554,"value":635},{"type":549,"tag":613,"props":1888,"children":1889},{"class":615,"line":638},[1890,1894,1898,1902,1906],{"type":549,"tag":613,"props":1891,"children":1892},{"style":642},[1893],{"type":554,"value":1655},{"type":549,"tag":613,"props":1895,"children":1896},{"style":632},[1897],{"type":554,"value":650},{"type":549,"tag":613,"props":1899,"children":1900},{"style":653},[1901],{"type":554,"value":1559},{"type":549,"tag":613,"props":1903,"children":1904},{"style":632},[1905],{"type":554,"value":661},{"type":549,"tag":613,"props":1907,"children":1908},{"style":632},[1909],{"type":554,"value":635},{"type":549,"tag":613,"props":1911,"children":1912},{"class":615,"line":668},[1913,1918,1922,1927,1931,1935],{"type":549,"tag":613,"props":1914,"children":1915},{"style":963},[1916],{"type":554,"value":1917},"    super",{"type":549,"tag":613,"props":1919,"children":1920},{"style":632},[1921],{"type":554,"value":971},{"type":549,"tag":613,"props":1923,"children":1924},{"style":642},[1925],{"type":554,"value":1926},"setWidth",{"type":549,"tag":613,"props":1928,"children":1929},{"style":632},[1930],{"type":554,"value":650},{"type":549,"tag":613,"props":1932,"children":1933},{"style":653},[1934],{"type":554,"value":1559},{"type":549,"tag":613,"props":1936,"children":1937},{"style":632},[1938],{"type":554,"value":1070},{"type":549,"tag":613,"props":1940,"children":1941},{"class":615,"line":678},[1942,1946,1950,1955,1959,1963],{"type":549,"tag":613,"props":1943,"children":1944},{"style":963},[1945],{"type":554,"value":1917},{"type":549,"tag":613,"props":1947,"children":1948},{"style":632},[1949],{"type":554,"value":971},{"type":549,"tag":613,"props":1951,"children":1952},{"style":642},[1953],{"type":554,"value":1954},"setHeight",{"type":549,"tag":613,"props":1956,"children":1957},{"style":632},[1958],{"type":554,"value":650},{"type":549,"tag":613,"props":1960,"children":1961},{"style":653},[1962],{"type":554,"value":1559},{"type":549,"tag":613,"props":1964,"children":1965},{"style":632},[1966],{"type":554,"value":1070},{"type":549,"tag":613,"props":1968,"children":1969},{"class":615,"line":687},[1970],{"type":549,"tag":613,"props":1971,"children":1972},{"style":632},[1973],{"type":554,"value":684},{"type":549,"tag":613,"props":1975,"children":1976},{"class":615,"line":697},[1977],{"type":549,"tag":613,"props":1978,"children":1979},{"emptyLinePlaceholder":691},[1980],{"type":554,"value":694},{"type":549,"tag":613,"props":1982,"children":1983},{"class":615,"line":715},[1984,1988,1992,1996,2000],{"type":549,"tag":613,"props":1985,"children":1986},{"style":642},[1987],{"type":554,"value":1720},{"type":549,"tag":613,"props":1989,"children":1990},{"style":632},[1991],{"type":554,"value":650},{"type":549,"tag":613,"props":1993,"children":1994},{"style":653},[1995],{"type":554,"value":1621},{"type":549,"tag":613,"props":1997,"children":1998},{"style":632},[1999],{"type":554,"value":661},{"type":549,"tag":613,"props":2001,"children":2002},{"style":632},[2003],{"type":554,"value":635},{"type":549,"tag":613,"props":2005,"children":2006},{"class":615,"line":724},[2007,2011,2015,2019,2023,2027],{"type":549,"tag":613,"props":2008,"children":2009},{"style":963},[2010],{"type":554,"value":1917},{"type":549,"tag":613,"props":2012,"children":2013},{"style":632},[2014],{"type":554,"value":971},{"type":549,"tag":613,"props":2016,"children":2017},{"style":642},[2018],{"type":554,"value":1926},{"type":549,"tag":613,"props":2020,"children":2021},{"style":632},[2022],{"type":554,"value":650},{"type":549,"tag":613,"props":2024,"children":2025},{"style":653},[2026],{"type":554,"value":1621},{"type":549,"tag":613,"props":2028,"children":2029},{"style":632},[2030],{"type":554,"value":1070},{"type":549,"tag":613,"props":2032,"children":2033},{"class":615,"line":732},[2034,2038,2042,2046,2050,2054],{"type":549,"tag":613,"props":2035,"children":2036},{"style":963},[2037],{"type":554,"value":1917},{"type":549,"tag":613,"props":2039,"children":2040},{"style":632},[2041],{"type":554,"value":971},{"type":549,"tag":613,"props":2043,"children":2044},{"style":642},[2045],{"type":554,"value":1954},{"type":549,"tag":613,"props":2047,"children":2048},{"style":632},[2049],{"type":554,"value":650},{"type":549,"tag":613,"props":2051,"children":2052},{"style":653},[2053],{"type":554,"value":1621},{"type":549,"tag":613,"props":2055,"children":2056},{"style":632},[2057],{"type":554,"value":1070},{"type":549,"tag":613,"props":2059,"children":2060},{"class":615,"line":876},[2061],{"type":549,"tag":613,"props":2062,"children":2063},{"style":632},[2064],{"type":554,"value":684},{"type":549,"tag":613,"props":2066,"children":2067},{"class":615,"line":884},[2068],{"type":549,"tag":613,"props":2069,"children":2070},{"style":632},[2071],{"type":554,"value":738},{"type":549,"tag":550,"props":2073,"children":2074},{},[2075],{"type":554,"value":2076},"这里的问题是，Square 子类在修改宽度或高度时，通过覆写 setWidth 和 setHeight 方法，强制宽和高相等，这与基类的行为不一致。如果在需要 Rectangle 的地方使用了 Square，可能会导致程序逻辑错误。",{"type":549,"tag":550,"props":2078,"children":2079},{},[2080],{"type":554,"value":2081},"这违反了里氏替换原则，因为子类修改了父类的预期行为。为了符合里氏替换原则，可能需要重新设计类的继承结构，或者使用更精确的命名来表达实际意图。",{"type":549,"tag":591,"props":2083,"children":2085},{"id":2084},"接口隔离原则",[2086],{"type":554,"value":2084},{"type":549,"tag":550,"props":2088,"children":2089},{},[2090],{"type":554,"value":2091},"接口隔离原则（Interface Segregation Principle，ISP） 是 SOLID 原则之一，它强调一个类不应该被强迫实现它不需要的接口。简而言之，一个类对另一个类的依赖应该建立在最小的接口上。",{"type":549,"tag":550,"props":2093,"children":2094},{},[2095],{"type":554,"value":2096},"在通俗的语言中，接口隔离原则告诉我们不应该让一个类依赖它不需要的接口，否则会导致类需要实现一些它根本不需要的方法。",{"type":549,"tag":550,"props":2098,"children":2099},{},[2100],{"type":554,"value":2101},"举例说明，假设我们有一个动物园的系统，其中有两种动物，一种会飞，一种会游泳：",{"type":549,"tag":602,"props":2103,"children":2105},{"className":604,"code":2104,"language":606,"meta":543,"style":543},"// 不遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n\n  swim() {\n    // 这是一个鸟类不需要的方法，违反接口隔离原则\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n\n  fly() {\n    // 这是一个鱼类不需要的方法，违反接口隔离原则\n  }\n}\n",[2106],{"type":549,"tag":609,"props":2107,"children":2108},{"__ignoreMap":543},[2109,2117,2133,2149,2157,2164,2171,2187,2195,2202,2209,2216,2232,2247,2255,2262,2269,2284,2292,2299],{"type":549,"tag":613,"props":2110,"children":2111},{"class":615,"line":616},[2112],{"type":549,"tag":613,"props":2113,"children":2114},{"style":672},[2115],{"type":554,"value":2116},"// 不遵循接口隔离原则的设计\n",{"type":549,"tag":613,"props":2118,"children":2119},{"class":615,"line":638},[2120,2124,2129],{"type":549,"tag":613,"props":2121,"children":2122},{"style":620},[2123],{"type":554,"value":623},{"type":549,"tag":613,"props":2125,"children":2126},{"style":626},[2127],{"type":554,"value":2128}," Bird",{"type":549,"tag":613,"props":2130,"children":2131},{"style":632},[2132],{"type":554,"value":635},{"type":549,"tag":613,"props":2134,"children":2135},{"class":615,"line":668},[2136,2141,2145],{"type":549,"tag":613,"props":2137,"children":2138},{"style":642},[2139],{"type":554,"value":2140},"  fly",{"type":549,"tag":613,"props":2142,"children":2143},{"style":632},[2144],{"type":554,"value":708},{"type":549,"tag":613,"props":2146,"children":2147},{"style":632},[2148],{"type":554,"value":635},{"type":549,"tag":613,"props":2150,"children":2151},{"class":615,"line":678},[2152],{"type":549,"tag":613,"props":2153,"children":2154},{"style":672},[2155],{"type":554,"value":2156},"    // 实现飞行逻辑\n",{"type":549,"tag":613,"props":2158,"children":2159},{"class":615,"line":687},[2160],{"type":549,"tag":613,"props":2161,"children":2162},{"style":632},[2163],{"type":554,"value":684},{"type":549,"tag":613,"props":2165,"children":2166},{"class":615,"line":697},[2167],{"type":549,"tag":613,"props":2168,"children":2169},{"emptyLinePlaceholder":691},[2170],{"type":554,"value":694},{"type":549,"tag":613,"props":2172,"children":2173},{"class":615,"line":715},[2174,2179,2183],{"type":549,"tag":613,"props":2175,"children":2176},{"style":642},[2177],{"type":554,"value":2178},"  swim",{"type":549,"tag":613,"props":2180,"children":2181},{"style":632},[2182],{"type":554,"value":708},{"type":549,"tag":613,"props":2184,"children":2185},{"style":632},[2186],{"type":554,"value":635},{"type":549,"tag":613,"props":2188,"children":2189},{"class":615,"line":724},[2190],{"type":549,"tag":613,"props":2191,"children":2192},{"style":672},[2193],{"type":554,"value":2194},"    // 这是一个鸟类不需要的方法，违反接口隔离原则\n",{"type":549,"tag":613,"props":2196,"children":2197},{"class":615,"line":732},[2198],{"type":549,"tag":613,"props":2199,"children":2200},{"style":632},[2201],{"type":554,"value":684},{"type":549,"tag":613,"props":2203,"children":2204},{"class":615,"line":876},[2205],{"type":549,"tag":613,"props":2206,"children":2207},{"style":632},[2208],{"type":554,"value":738},{"type":549,"tag":613,"props":2210,"children":2211},{"class":615,"line":884},[2212],{"type":549,"tag":613,"props":2213,"children":2214},{"emptyLinePlaceholder":691},[2215],{"type":554,"value":694},{"type":549,"tag":613,"props":2217,"children":2218},{"class":615,"line":1094},[2219,2223,2228],{"type":549,"tag":613,"props":2220,"children":2221},{"style":620},[2222],{"type":554,"value":623},{"type":549,"tag":613,"props":2224,"children":2225},{"style":626},[2226],{"type":554,"value":2227}," Fish",{"type":549,"tag":613,"props":2229,"children":2230},{"style":632},[2231],{"type":554,"value":635},{"type":549,"tag":613,"props":2233,"children":2234},{"class":615,"line":1120},[2235,2239,2243],{"type":549,"tag":613,"props":2236,"children":2237},{"style":642},[2238],{"type":554,"value":2178},{"type":549,"tag":613,"props":2240,"children":2241},{"style":632},[2242],{"type":554,"value":708},{"type":549,"tag":613,"props":2244,"children":2245},{"style":632},[2246],{"type":554,"value":635},{"type":549,"tag":613,"props":2248,"children":2249},{"class":615,"line":1136},[2250],{"type":549,"tag":613,"props":2251,"children":2252},{"style":672},[2253],{"type":554,"value":2254},"    // 实现游泳逻辑\n",{"type":549,"tag":613,"props":2256,"children":2257},{"class":615,"line":1173},[2258],{"type":549,"tag":613,"props":2259,"children":2260},{"style":632},[2261],{"type":554,"value":684},{"type":549,"tag":613,"props":2263,"children":2264},{"class":615,"line":1181},[2265],{"type":549,"tag":613,"props":2266,"children":2267},{"emptyLinePlaceholder":691},[2268],{"type":554,"value":694},{"type":549,"tag":613,"props":2270,"children":2271},{"class":615,"line":1189},[2272,2276,2280],{"type":549,"tag":613,"props":2273,"children":2274},{"style":642},[2275],{"type":554,"value":2140},{"type":549,"tag":613,"props":2277,"children":2278},{"style":632},[2279],{"type":554,"value":708},{"type":549,"tag":613,"props":2281,"children":2282},{"style":632},[2283],{"type":554,"value":635},{"type":549,"tag":613,"props":2285,"children":2286},{"class":615,"line":1197},[2287],{"type":549,"tag":613,"props":2288,"children":2289},{"style":672},[2290],{"type":554,"value":2291},"    // 这是一个鱼类不需要的方法，违反接口隔离原则\n",{"type":549,"tag":613,"props":2293,"children":2294},{"class":615,"line":1222},[2295],{"type":549,"tag":613,"props":2296,"children":2297},{"style":632},[2298],{"type":554,"value":684},{"type":549,"tag":613,"props":2300,"children":2301},{"class":615,"line":1238},[2302],{"type":549,"tag":613,"props":2303,"children":2304},{"style":632},[2305],{"type":554,"value":738},{"type":549,"tag":550,"props":2307,"children":2308},{},[2309],{"type":554,"value":2310},"在这个例子中，Bird 类实现了 fly 和 swim 两个方法，而 Fish 类也实现了 swim 和 fly 两个方法。这违反了接口隔离原则，因为每个类都被迫实现了它们不需要的方法。",{"type":549,"tag":550,"props":2312,"children":2313},{},[2314],{"type":554,"value":2315},"为了符合接口隔离原则，我们可以将接口拆分成更小的部分，让每个类只实现它们需要的方法：",{"type":549,"tag":602,"props":2317,"children":2319},{"className":604,"code":2318,"language":606,"meta":543,"style":543},"// 遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n}\n",[2320],{"type":549,"tag":609,"props":2321,"children":2322},{"__ignoreMap":543},[2323,2331,2346,2361,2368,2375,2382,2389,2404,2419,2426,2433],{"type":549,"tag":613,"props":2324,"children":2325},{"class":615,"line":616},[2326],{"type":549,"tag":613,"props":2327,"children":2328},{"style":672},[2329],{"type":554,"value":2330},"// 遵循接口隔离原则的设计\n",{"type":549,"tag":613,"props":2332,"children":2333},{"class":615,"line":638},[2334,2338,2342],{"type":549,"tag":613,"props":2335,"children":2336},{"style":620},[2337],{"type":554,"value":623},{"type":549,"tag":613,"props":2339,"children":2340},{"style":626},[2341],{"type":554,"value":2128},{"type":549,"tag":613,"props":2343,"children":2344},{"style":632},[2345],{"type":554,"value":635},{"type":549,"tag":613,"props":2347,"children":2348},{"class":615,"line":668},[2349,2353,2357],{"type":549,"tag":613,"props":2350,"children":2351},{"style":642},[2352],{"type":554,"value":2140},{"type":549,"tag":613,"props":2354,"children":2355},{"style":632},[2356],{"type":554,"value":708},{"type":549,"tag":613,"props":2358,"children":2359},{"style":632},[2360],{"type":554,"value":635},{"type":549,"tag":613,"props":2362,"children":2363},{"class":615,"line":678},[2364],{"type":549,"tag":613,"props":2365,"children":2366},{"style":672},[2367],{"type":554,"value":2156},{"type":549,"tag":613,"props":2369,"children":2370},{"class":615,"line":687},[2371],{"type":549,"tag":613,"props":2372,"children":2373},{"style":632},[2374],{"type":554,"value":684},{"type":549,"tag":613,"props":2376,"children":2377},{"class":615,"line":697},[2378],{"type":549,"tag":613,"props":2379,"children":2380},{"style":632},[2381],{"type":554,"value":738},{"type":549,"tag":613,"props":2383,"children":2384},{"class":615,"line":715},[2385],{"type":549,"tag":613,"props":2386,"children":2387},{"emptyLinePlaceholder":691},[2388],{"type":554,"value":694},{"type":549,"tag":613,"props":2390,"children":2391},{"class":615,"line":724},[2392,2396,2400],{"type":549,"tag":613,"props":2393,"children":2394},{"style":620},[2395],{"type":554,"value":623},{"type":549,"tag":613,"props":2397,"children":2398},{"style":626},[2399],{"type":554,"value":2227},{"type":549,"tag":613,"props":2401,"children":2402},{"style":632},[2403],{"type":554,"value":635},{"type":549,"tag":613,"props":2405,"children":2406},{"class":615,"line":732},[2407,2411,2415],{"type":549,"tag":613,"props":2408,"children":2409},{"style":642},[2410],{"type":554,"value":2178},{"type":549,"tag":613,"props":2412,"children":2413},{"style":632},[2414],{"type":554,"value":708},{"type":549,"tag":613,"props":2416,"children":2417},{"style":632},[2418],{"type":554,"value":635},{"type":549,"tag":613,"props":2420,"children":2421},{"class":615,"line":876},[2422],{"type":549,"tag":613,"props":2423,"children":2424},{"style":672},[2425],{"type":554,"value":2254},{"type":549,"tag":613,"props":2427,"children":2428},{"class":615,"line":884},[2429],{"type":549,"tag":613,"props":2430,"children":2431},{"style":632},[2432],{"type":554,"value":684},{"type":549,"tag":613,"props":2434,"children":2435},{"class":615,"line":1094},[2436],{"type":549,"tag":613,"props":2437,"children":2438},{"style":632},[2439],{"type":554,"value":738},{"type":549,"tag":550,"props":2441,"children":2442},{},[2443],{"type":554,"value":2444},"这样，每个类都只依赖于它们需要的接口，不再强迫实现不必要的方法。接口隔离原则的目标是使接口更具体，更贴近类的实际需求，从而提高系统的灵活性和可维护性。",{"type":549,"tag":591,"props":2446,"children":2448},{"id":2447},"依赖反转原则",[2449],{"type":554,"value":2447},{"type":549,"tag":550,"props":2451,"children":2452},{},[2453],{"type":554,"value":2454},"依赖反转原则（Dependency Inversion Principle，DIP） 是 SOLID 原则之一，它强调高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。",{"type":549,"tag":550,"props":2456,"children":2457},{},[2458],{"type":554,"value":2459},"举例说明，考虑一个简单的报告生成系统，有一个高层模块 ReportGenerator 负责生成报告：",{"type":549,"tag":602,"props":2461,"children":2463},{"className":604,"code":2462,"language":606,"meta":543,"style":543},"// 不遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor() {\n    this.pdfGenerator = new PDFGenerator(); // 依赖于具体的 PDF 生成器\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.pdfGenerator.generatePDF();\n  }\n}\n\nclass PDFGenerator {\n  generatePDF() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n",[2464],{"type":549,"tag":609,"props":2465,"children":2466},{"__ignoreMap":543},[2467,2475,2491,2506,2546,2553,2560,2576,2584,2613,2620,2627,2634,2649,2665,2673,2680],{"type":549,"tag":613,"props":2468,"children":2469},{"class":615,"line":616},[2470],{"type":549,"tag":613,"props":2471,"children":2472},{"style":672},[2473],{"type":554,"value":2474},"// 不遵循依赖反转原则的设计\n",{"type":549,"tag":613,"props":2476,"children":2477},{"class":615,"line":638},[2478,2482,2487],{"type":549,"tag":613,"props":2479,"children":2480},{"style":620},[2481],{"type":554,"value":623},{"type":549,"tag":613,"props":2483,"children":2484},{"style":626},[2485],{"type":554,"value":2486}," ReportGenerator",{"type":549,"tag":613,"props":2488,"children":2489},{"style":632},[2490],{"type":554,"value":635},{"type":549,"tag":613,"props":2492,"children":2493},{"class":615,"line":668},[2494,2498,2502],{"type":549,"tag":613,"props":2495,"children":2496},{"style":620},[2497],{"type":554,"value":940},{"type":549,"tag":613,"props":2499,"children":2500},{"style":632},[2501],{"type":554,"value":708},{"type":549,"tag":613,"props":2503,"children":2504},{"style":632},[2505],{"type":554,"value":635},{"type":549,"tag":613,"props":2507,"children":2508},{"class":615,"line":678},[2509,2513,2517,2522,2526,2531,2536,2541],{"type":549,"tag":613,"props":2510,"children":2511},{"style":963},[2512],{"type":554,"value":966},{"type":549,"tag":613,"props":2514,"children":2515},{"style":632},[2516],{"type":554,"value":971},{"type":549,"tag":613,"props":2518,"children":2519},{"style":653},[2520],{"type":554,"value":2521},"pdfGenerator",{"type":549,"tag":613,"props":2523,"children":2524},{"style":632},[2525],{"type":554,"value":980},{"type":549,"tag":613,"props":2527,"children":2528},{"style":620},[2529],{"type":554,"value":2530}," new",{"type":549,"tag":613,"props":2532,"children":2533},{"style":642},[2534],{"type":554,"value":2535}," PDFGenerator",{"type":549,"tag":613,"props":2537,"children":2538},{"style":632},[2539],{"type":554,"value":2540},"();",{"type":549,"tag":613,"props":2542,"children":2543},{"style":672},[2544],{"type":554,"value":2545}," // 依赖于具体的 PDF 生成器\n",{"type":549,"tag":613,"props":2547,"children":2548},{"class":615,"line":687},[2549],{"type":549,"tag":613,"props":2550,"children":2551},{"style":632},[2552],{"type":554,"value":684},{"type":549,"tag":613,"props":2554,"children":2555},{"class":615,"line":697},[2556],{"type":549,"tag":613,"props":2557,"children":2558},{"emptyLinePlaceholder":691},[2559],{"type":554,"value":694},{"type":549,"tag":613,"props":2561,"children":2562},{"class":615,"line":715},[2563,2568,2572],{"type":549,"tag":613,"props":2564,"children":2565},{"style":642},[2566],{"type":554,"value":2567},"  generateReport",{"type":549,"tag":613,"props":2569,"children":2570},{"style":632},[2571],{"type":554,"value":708},{"type":549,"tag":613,"props":2573,"children":2574},{"style":632},[2575],{"type":554,"value":635},{"type":549,"tag":613,"props":2577,"children":2578},{"class":615,"line":724},[2579],{"type":549,"tag":613,"props":2580,"children":2581},{"style":672},[2582],{"type":554,"value":2583},"    // 生成报告的逻辑\n",{"type":549,"tag":613,"props":2585,"children":2586},{"class":615,"line":732},[2587,2591,2595,2599,2603,2608],{"type":549,"tag":613,"props":2588,"children":2589},{"style":963},[2590],{"type":554,"value":966},{"type":549,"tag":613,"props":2592,"children":2593},{"style":632},[2594],{"type":554,"value":971},{"type":549,"tag":613,"props":2596,"children":2597},{"style":653},[2598],{"type":554,"value":2521},{"type":549,"tag":613,"props":2600,"children":2601},{"style":632},[2602],{"type":554,"value":971},{"type":549,"tag":613,"props":2604,"children":2605},{"style":642},[2606],{"type":554,"value":2607},"generatePDF",{"type":549,"tag":613,"props":2609,"children":2610},{"style":632},[2611],{"type":554,"value":2612},"();\n",{"type":549,"tag":613,"props":2614,"children":2615},{"class":615,"line":876},[2616],{"type":549,"tag":613,"props":2617,"children":2618},{"style":632},[2619],{"type":554,"value":684},{"type":549,"tag":613,"props":2621,"children":2622},{"class":615,"line":884},[2623],{"type":549,"tag":613,"props":2624,"children":2625},{"style":632},[2626],{"type":554,"value":738},{"type":549,"tag":613,"props":2628,"children":2629},{"class":615,"line":1094},[2630],{"type":549,"tag":613,"props":2631,"children":2632},{"emptyLinePlaceholder":691},[2633],{"type":554,"value":694},{"type":549,"tag":613,"props":2635,"children":2636},{"class":615,"line":1120},[2637,2641,2645],{"type":549,"tag":613,"props":2638,"children":2639},{"style":620},[2640],{"type":554,"value":623},{"type":549,"tag":613,"props":2642,"children":2643},{"style":626},[2644],{"type":554,"value":2535},{"type":549,"tag":613,"props":2646,"children":2647},{"style":632},[2648],{"type":554,"value":635},{"type":549,"tag":613,"props":2650,"children":2651},{"class":615,"line":1136},[2652,2657,2661],{"type":549,"tag":613,"props":2653,"children":2654},{"style":642},[2655],{"type":554,"value":2656},"  generatePDF",{"type":549,"tag":613,"props":2658,"children":2659},{"style":632},[2660],{"type":554,"value":708},{"type":549,"tag":613,"props":2662,"children":2663},{"style":632},[2664],{"type":554,"value":635},{"type":549,"tag":613,"props":2666,"children":2667},{"class":615,"line":1173},[2668],{"type":549,"tag":613,"props":2669,"children":2670},{"style":672},[2671],{"type":554,"value":2672},"    // 具体的 PDF 生成逻辑\n",{"type":549,"tag":613,"props":2674,"children":2675},{"class":615,"line":1181},[2676],{"type":549,"tag":613,"props":2677,"children":2678},{"style":632},[2679],{"type":554,"value":684},{"type":549,"tag":613,"props":2681,"children":2682},{"class":615,"line":1189},[2683],{"type":549,"tag":613,"props":2684,"children":2685},{"style":632},[2686],{"type":554,"value":738},{"type":549,"tag":550,"props":2688,"children":2689},{},[2690],{"type":554,"value":2691},"在这个设计中，ReportGenerator 直接依赖于具体的 PDFGenerator 类，这违反了依赖反转原则。如果我们想使用其他类型的报告生成器，例如 HTMLGenerator，就需要修改 ReportGenerator 类。",{"type":549,"tag":550,"props":2693,"children":2694},{},[2695],{"type":554,"value":2696},"为了符合依赖反转原则，我们应该通过抽象来解耦高层和低层模块：",{"type":549,"tag":602,"props":2698,"children":2700},{"className":604,"code":2699,"language":606,"meta":543,"style":543},"// 遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor(generator) {\n    this.generator = generator; // 依赖于抽象的报告生成器接口\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.generator.generate();\n  }\n}\n\nclass PDFGenerator {\n  generate() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n\nclass HTMLGenerator {\n  generate() {\n    // 具体的 HTML 生成逻辑\n  }\n}\n",[2701],{"type":549,"tag":609,"props":2702,"children":2703},{"__ignoreMap":543},[2704,2712,2727,2751,2785,2792,2799,2814,2821,2849,2856,2863,2870,2885,2901,2908,2915,2922,2929,2945,2960,2968,2975],{"type":549,"tag":613,"props":2705,"children":2706},{"class":615,"line":616},[2707],{"type":549,"tag":613,"props":2708,"children":2709},{"style":672},[2710],{"type":554,"value":2711},"// 遵循依赖反转原则的设计\n",{"type":549,"tag":613,"props":2713,"children":2714},{"class":615,"line":638},[2715,2719,2723],{"type":549,"tag":613,"props":2716,"children":2717},{"style":620},[2718],{"type":554,"value":623},{"type":549,"tag":613,"props":2720,"children":2721},{"style":626},[2722],{"type":554,"value":2486},{"type":549,"tag":613,"props":2724,"children":2725},{"style":632},[2726],{"type":554,"value":635},{"type":549,"tag":613,"props":2728,"children":2729},{"class":615,"line":668},[2730,2734,2738,2743,2747],{"type":549,"tag":613,"props":2731,"children":2732},{"style":620},[2733],{"type":554,"value":940},{"type":549,"tag":613,"props":2735,"children":2736},{"style":632},[2737],{"type":554,"value":650},{"type":549,"tag":613,"props":2739,"children":2740},{"style":653},[2741],{"type":554,"value":2742},"generator",{"type":549,"tag":613,"props":2744,"children":2745},{"style":632},[2746],{"type":554,"value":661},{"type":549,"tag":613,"props":2748,"children":2749},{"style":632},[2750],{"type":554,"value":635},{"type":549,"tag":613,"props":2752,"children":2753},{"class":615,"line":678},[2754,2758,2762,2766,2770,2775,2780],{"type":549,"tag":613,"props":2755,"children":2756},{"style":963},[2757],{"type":554,"value":966},{"type":549,"tag":613,"props":2759,"children":2760},{"style":632},[2761],{"type":554,"value":971},{"type":549,"tag":613,"props":2763,"children":2764},{"style":653},[2765],{"type":554,"value":2742},{"type":549,"tag":613,"props":2767,"children":2768},{"style":632},[2769],{"type":554,"value":980},{"type":549,"tag":613,"props":2771,"children":2772},{"style":653},[2773],{"type":554,"value":2774}," generator",{"type":549,"tag":613,"props":2776,"children":2777},{"style":632},[2778],{"type":554,"value":2779},";",{"type":549,"tag":613,"props":2781,"children":2782},{"style":672},[2783],{"type":554,"value":2784}," // 依赖于抽象的报告生成器接口\n",{"type":549,"tag":613,"props":2786,"children":2787},{"class":615,"line":687},[2788],{"type":549,"tag":613,"props":2789,"children":2790},{"style":632},[2791],{"type":554,"value":684},{"type":549,"tag":613,"props":2793,"children":2794},{"class":615,"line":697},[2795],{"type":549,"tag":613,"props":2796,"children":2797},{"emptyLinePlaceholder":691},[2798],{"type":554,"value":694},{"type":549,"tag":613,"props":2800,"children":2801},{"class":615,"line":715},[2802,2806,2810],{"type":549,"tag":613,"props":2803,"children":2804},{"style":642},[2805],{"type":554,"value":2567},{"type":549,"tag":613,"props":2807,"children":2808},{"style":632},[2809],{"type":554,"value":708},{"type":549,"tag":613,"props":2811,"children":2812},{"style":632},[2813],{"type":554,"value":635},{"type":549,"tag":613,"props":2815,"children":2816},{"class":615,"line":724},[2817],{"type":549,"tag":613,"props":2818,"children":2819},{"style":672},[2820],{"type":554,"value":2583},{"type":549,"tag":613,"props":2822,"children":2823},{"class":615,"line":732},[2824,2828,2832,2836,2840,2845],{"type":549,"tag":613,"props":2825,"children":2826},{"style":963},[2827],{"type":554,"value":966},{"type":549,"tag":613,"props":2829,"children":2830},{"style":632},[2831],{"type":554,"value":971},{"type":549,"tag":613,"props":2833,"children":2834},{"style":653},[2835],{"type":554,"value":2742},{"type":549,"tag":613,"props":2837,"children":2838},{"style":632},[2839],{"type":554,"value":971},{"type":549,"tag":613,"props":2841,"children":2842},{"style":642},[2843],{"type":554,"value":2844},"generate",{"type":549,"tag":613,"props":2846,"children":2847},{"style":632},[2848],{"type":554,"value":2612},{"type":549,"tag":613,"props":2850,"children":2851},{"class":615,"line":876},[2852],{"type":549,"tag":613,"props":2853,"children":2854},{"style":632},[2855],{"type":554,"value":684},{"type":549,"tag":613,"props":2857,"children":2858},{"class":615,"line":884},[2859],{"type":549,"tag":613,"props":2860,"children":2861},{"style":632},[2862],{"type":554,"value":738},{"type":549,"tag":613,"props":2864,"children":2865},{"class":615,"line":1094},[2866],{"type":549,"tag":613,"props":2867,"children":2868},{"emptyLinePlaceholder":691},[2869],{"type":554,"value":694},{"type":549,"tag":613,"props":2871,"children":2872},{"class":615,"line":1120},[2873,2877,2881],{"type":549,"tag":613,"props":2874,"children":2875},{"style":620},[2876],{"type":554,"value":623},{"type":549,"tag":613,"props":2878,"children":2879},{"style":626},[2880],{"type":554,"value":2535},{"type":549,"tag":613,"props":2882,"children":2883},{"style":632},[2884],{"type":554,"value":635},{"type":549,"tag":613,"props":2886,"children":2887},{"class":615,"line":1136},[2888,2893,2897],{"type":549,"tag":613,"props":2889,"children":2890},{"style":642},[2891],{"type":554,"value":2892},"  generate",{"type":549,"tag":613,"props":2894,"children":2895},{"style":632},[2896],{"type":554,"value":708},{"type":549,"tag":613,"props":2898,"children":2899},{"style":632},[2900],{"type":554,"value":635},{"type":549,"tag":613,"props":2902,"children":2903},{"class":615,"line":1173},[2904],{"type":549,"tag":613,"props":2905,"children":2906},{"style":672},[2907],{"type":554,"value":2672},{"type":549,"tag":613,"props":2909,"children":2910},{"class":615,"line":1181},[2911],{"type":549,"tag":613,"props":2912,"children":2913},{"style":632},[2914],{"type":554,"value":684},{"type":549,"tag":613,"props":2916,"children":2917},{"class":615,"line":1189},[2918],{"type":549,"tag":613,"props":2919,"children":2920},{"style":632},[2921],{"type":554,"value":738},{"type":549,"tag":613,"props":2923,"children":2924},{"class":615,"line":1197},[2925],{"type":549,"tag":613,"props":2926,"children":2927},{"emptyLinePlaceholder":691},[2928],{"type":554,"value":694},{"type":549,"tag":613,"props":2930,"children":2931},{"class":615,"line":1222},[2932,2936,2941],{"type":549,"tag":613,"props":2933,"children":2934},{"style":620},[2935],{"type":554,"value":623},{"type":549,"tag":613,"props":2937,"children":2938},{"style":626},[2939],{"type":554,"value":2940}," HTMLGenerator",{"type":549,"tag":613,"props":2942,"children":2943},{"style":632},[2944],{"type":554,"value":635},{"type":549,"tag":613,"props":2946,"children":2947},{"class":615,"line":1238},[2948,2952,2956],{"type":549,"tag":613,"props":2949,"children":2950},{"style":642},[2951],{"type":554,"value":2892},{"type":549,"tag":613,"props":2953,"children":2954},{"style":632},[2955],{"type":554,"value":708},{"type":549,"tag":613,"props":2957,"children":2958},{"style":632},[2959],{"type":554,"value":635},{"type":549,"tag":613,"props":2961,"children":2962},{"class":615,"line":1275},[2963],{"type":549,"tag":613,"props":2964,"children":2965},{"style":672},[2966],{"type":554,"value":2967},"    // 具体的 HTML 生成逻辑\n",{"type":549,"tag":613,"props":2969,"children":2970},{"class":615,"line":1283},[2971],{"type":549,"tag":613,"props":2972,"children":2973},{"style":632},[2974],{"type":554,"value":684},{"type":549,"tag":613,"props":2976,"children":2978},{"class":615,"line":2977},23,[2979],{"type":549,"tag":613,"props":2980,"children":2981},{"style":632},[2982],{"type":554,"value":738},{"type":549,"tag":550,"props":2984,"children":2985},{},[2986],{"type":554,"value":2987},"现在，ReportGenerator 不再直接依赖于具体的实现，而是依赖于抽象的报告生成器接口。这使得我们可以轻松地扩展系统，例如添加新的报告生成器，而不需要修改 ReportGenerator 类。这样的设计更加灵活，符合依赖反转原则。",{"type":549,"tag":2989,"props":2990,"children":2991},"style",{},[2992],{"type":554,"value":2993},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":543,"searchDepth":687,"depth":687,"links":2995},[2996,2997,2998,2999,3000],{"id":593,"depth":638,"text":593},{"id":897,"depth":638,"text":897},{"id":1503,"depth":638,"text":1503},{"id":2084,"depth":638,"text":2084},{"id":2447,"depth":638,"text":2447},"markdown","content:4.design-mode:1.thoughts-principles.md","content","4.design-mode/1.thoughts-principles.md","md",[3007,3008],{"_path":518,"title":517,"description":543},{"_path":535,"title":534,"description":543},1714099217808]