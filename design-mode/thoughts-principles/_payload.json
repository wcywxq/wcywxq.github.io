[{"data":1,"prerenderedAt":3018},["Reactive",2],{"navigation":3,"/design-mode/thoughts-principles":549,"/design-mode/thoughts-principles-surround":3015},[4,272,301,517,525,534],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":300},"八股文","/endorsement",[276,287],{"title":277,"_path":278,"children":279},"构建工具","/endorsement/build-tools",[280],{"title":281,"_path":282,"children":283},"Webpack","/endorsement/build-tools/webpack",[284],{"title":285,"_path":286},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":288,"_path":289,"children":290},"Html","/endorsement/html",[291,294,297],{"title":292,"_path":293},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":295,"_path":296},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":298,"_path":299},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":302,"_path":303,"children":304,"icon":516},"代码考核","/code-assessment",[305,407,509],{"title":306,"_path":307,"children":308},"源码实现","/code-assessment/source",[309,340,356,384,391,398,401,404],{"title":310,"_path":311,"children":312},"原生 api","/code-assessment/source/native-api",[313,316,319,322,325,328,331,334,337],{"title":314,"_path":315},"polyfill","/code-assessment/source/native-api/polyfill",{"title":317,"_path":318},"ajax","/code-assessment/source/native-api/ajax",{"title":320,"_path":321},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":323,"_path":324},"new 操作符","/code-assessment/source/native-api/new",{"title":326,"_path":327},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":329,"_path":330},"定时器","/code-assessment/source/native-api/timer",{"title":332,"_path":333},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":335,"_path":336},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":338,"_path":339},"extends","/code-assessment/source/native-api/extends",{"title":341,"_path":342,"children":343},"函数 Function","/code-assessment/source/function",[344,347,350,353],{"title":345,"_path":346},"函数防抖","/code-assessment/source/function/debounce",{"title":348,"_path":349},"函数节流","/code-assessment/source/function/throttle",{"title":351,"_path":352},"函数柯理化","/code-assessment/source/function/curry",{"title":354,"_path":355},"函数睡眠","/code-assessment/source/function/sleep",{"title":357,"_path":358,"children":359},"数组 Array","/code-assessment/source/array",[360,363,366,369,372,375,378,381],{"title":361,"_path":362},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":364,"_path":365},"数组扁平化","/code-assessment/source/array/flat",{"title":367,"_path":368},"原型方法","/code-assessment/source/array/prototype-method",{"title":370,"_path":371},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":373,"_path":374},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":376,"_path":377},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":379,"_path":380},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":382,"_path":383},"二维数组","/code-assessment/source/array/2d-array",{"title":385,"_path":386,"children":387},"字符串 String","/code-assessment/source/string",[388],{"title":389,"_path":390},"repeat()","/code-assessment/source/string/repeat",{"title":392,"_path":393,"children":394},"集合 Set","/code-assessment/source/set",[395],{"title":396,"_path":397},"遍历集合","/code-assessment/source/set/traverse",{"title":399,"_path":400},"获取通用类型","/code-assessment/source/get-generic-type",{"title":402,"_path":403},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":405,"_path":406},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":408,"_path":409,"children":410},"业务场景","/code-assessment/scene",[411,442,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506],{"title":412,"_path":413,"children":414},"Promise","/code-assessment/scene/promise",[415,418,421,424,427,430,433,436,439],{"title":416,"_path":417},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":419,"_path":420},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":422,"_path":423},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":425,"_path":426},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":428,"_path":429},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":431,"_path":432},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":434,"_path":435},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":437,"_path":438},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":440,"_path":441},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":443,"_path":444,"children":445},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[446,449],{"title":447,"_path":448},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":450,"_path":451},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":453,"_path":454},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":456,"_path":457},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":459,"_path":460},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":462,"_path":463},"倒计时","/code-assessment/scene/countdown",{"title":465,"_path":466},"日期格式化","/code-assessment/scene/date-format",{"title":468,"_path":469},"实现前端路由","/code-assessment/scene/frontend-route",{"title":471,"_path":472},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":474,"_path":475},"lodash.get","/code-assessment/scene/lodash-get",{"title":477,"_path":478},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":480,"_path":481},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":483,"_path":484},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":486,"_path":487},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":489,"_path":490},"随机数","/code-assessment/scene/random-number",{"title":492,"_path":493},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":495,"_path":496},"sku 算法实现","/code-assessment/scene/sku",{"title":498,"_path":499},"整数分割","/code-assessment/scene/split-number",{"title":501,"_path":502},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":504,"_path":505},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":507,"_path":508},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":510,"_path":511,"children":512},"Ts 类型挑战","/code-assessment/type-challeges",[513],{"title":514,"_path":515},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":518,"_path":519,"children":520,"icon":524},"项目","/project",[521],{"title":522,"_path":523},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":526,"_path":527,"children":528,"icon":533},"设计模式","/design-mode",[529,530],{"title":526,"_path":527},{"title":531,"_path":532},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":535,"_path":536,"children":537,"icon":548},"后端语言","/backend-languages",[538],{"title":539,"_path":540,"children":541},"Python","/backend-languages/python",[542,545],{"title":543,"_path":544},"基础","/backend-languages/python/base",{"title":546,"_path":547},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":532,"_dir":550,"_draft":551,"_partial":551,"_locale":552,"title":531,"description":553,"body":554,"_type":3010,"_id":3011,"_source":3012,"_file":3013,"_extension":3014},"design-mode",false,"","SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。这些原则由 Robert C. Martin 等人提出，它们包括以下五个原则：",{"type":555,"children":556,"toc":3003},"root",[557,564,594,599,605,610,748,753,767,772,899,904,909,914,919,1298,1303,1308,1500,1505,1510,1515,1520,1525,1530,1860,1865,2081,2086,2091,2096,2101,2106,2111,2315,2320,2325,2449,2454,2459,2464,2469,2696,2701,2706,2992,2997],{"type":558,"tag":559,"props":560,"children":561},"element","p",{},[562],{"type":563,"value":553},"text",{"type":558,"tag":565,"props":566,"children":567},"ul",{},[568,574,579,584,589],{"type":558,"tag":569,"props":570,"children":571},"li",{},[572],{"type":563,"value":573},"单一职责原则（Single Responsibility Principle，SRP）",{"type":558,"tag":569,"props":575,"children":576},{},[577],{"type":563,"value":578},"开放/封闭原则（Open/Closed Principle，OCP）",{"type":558,"tag":569,"props":580,"children":581},{},[582],{"type":563,"value":583},"里氏替换原则（Liskov Substitution Principle，LSP）",{"type":558,"tag":569,"props":585,"children":586},{},[587],{"type":563,"value":588},"接口隔离原则（Interface Segregation Principle，ISP）",{"type":558,"tag":569,"props":590,"children":591},{},[592],{"type":563,"value":593},"依赖反转原则（Dependency Inversion Principle，DIP）",{"type":558,"tag":559,"props":595,"children":596},{},[597],{"type":563,"value":598},"这些原则共同促使开发者创建具有高内聚、低耦合、易扩展和易维护性的软件系统。遵循这些原则有助于构建更健壮的面向对象系统，提高代码质量和可维护性。",{"type":558,"tag":600,"props":601,"children":603},"h2",{"id":602},"单一职责原则",[604],{"type":563,"value":602},{"type":558,"tag":559,"props":606,"children":607},{},[608],{"type":563,"value":609},"单一职责原则（Single Responsibility Principle，SRP）要求一个类或者模块只负责完成一个职责（或者功能）。 假设我们有一个简单的厨师类，它负责烹饪和洗碗两个职责：",{"type":558,"tag":611,"props":612,"children":616},"pre",{"className":613,"code":614,"language":615,"meta":552,"style":552},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n","js",[617],{"type":558,"tag":618,"props":619,"children":620},"code",{"__ignoreMap":552},[621,645,675,685,694,704,722,731,739],{"type":558,"tag":622,"props":623,"children":626},"span",{"class":624,"line":625},"line",1,[627,633,639],{"type":558,"tag":622,"props":628,"children":630},{"style":629},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[631],{"type":563,"value":632},"class",{"type":558,"tag":622,"props":634,"children":636},{"style":635},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[637],{"type":563,"value":638}," Chef",{"type":558,"tag":622,"props":640,"children":642},{"style":641},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[643],{"type":563,"value":644}," {\n",{"type":558,"tag":622,"props":646,"children":648},{"class":624,"line":647},2,[649,655,660,666,671],{"type":558,"tag":622,"props":650,"children":652},{"style":651},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[653],{"type":563,"value":654},"  cookDish",{"type":558,"tag":622,"props":656,"children":657},{"style":641},[658],{"type":563,"value":659},"(",{"type":558,"tag":622,"props":661,"children":663},{"style":662},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[664],{"type":563,"value":665},"dish",{"type":558,"tag":622,"props":667,"children":668},{"style":641},[669],{"type":563,"value":670},")",{"type":558,"tag":622,"props":672,"children":673},{"style":641},[674],{"type":563,"value":644},{"type":558,"tag":622,"props":676,"children":678},{"class":624,"line":677},3,[679],{"type":558,"tag":622,"props":680,"children":682},{"style":681},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[683],{"type":563,"value":684},"    // 烹饪菜品的具体实现\n",{"type":558,"tag":622,"props":686,"children":688},{"class":624,"line":687},4,[689],{"type":558,"tag":622,"props":690,"children":691},{"style":641},[692],{"type":563,"value":693},"  }\n",{"type":558,"tag":622,"props":695,"children":697},{"class":624,"line":696},5,[698],{"type":558,"tag":622,"props":699,"children":701},{"emptyLinePlaceholder":700},true,[702],{"type":563,"value":703},"\n",{"type":558,"tag":622,"props":705,"children":707},{"class":624,"line":706},6,[708,713,718],{"type":558,"tag":622,"props":709,"children":710},{"style":651},[711],{"type":563,"value":712},"  washDishes",{"type":558,"tag":622,"props":714,"children":715},{"style":641},[716],{"type":563,"value":717},"()",{"type":558,"tag":622,"props":719,"children":720},{"style":641},[721],{"type":563,"value":644},{"type":558,"tag":622,"props":723,"children":725},{"class":624,"line":724},7,[726],{"type":558,"tag":622,"props":727,"children":728},{"style":681},[729],{"type":563,"value":730},"    // 洗碗的具体实现\n",{"type":558,"tag":622,"props":732,"children":734},{"class":624,"line":733},8,[735],{"type":558,"tag":622,"props":736,"children":737},{"style":641},[738],{"type":563,"value":693},{"type":558,"tag":622,"props":740,"children":742},{"class":624,"line":741},9,[743],{"type":558,"tag":622,"props":744,"children":745},{"style":641},[746],{"type":563,"value":747},"}\n",{"type":558,"tag":559,"props":749,"children":750},{},[751],{"type":563,"value":752},"这个类违反了单一职责原则，因为它有两个职责：烹饪和洗碗。这样的设计可能导致以下问题：",{"type":558,"tag":754,"props":755,"children":756},"ol",{},[757,762],{"type":558,"tag":569,"props":758,"children":759},{},[760],{"type":563,"value":761},"如果厨师的烹饪逻辑变化，需要修改 cookDish 方法，这可能会影响洗碗的部分。",{"type":558,"tag":569,"props":763,"children":764},{},[765],{"type":563,"value":766},"如果洗碗的逻辑变化，需要修改 washDishes 方法，这可能会影响烹饪的部分。",{"type":558,"tag":559,"props":768,"children":769},{},[770],{"type":563,"value":771},"按照单一职责原则，我们应该将这两个职责分开，分别由不同的类负责：",{"type":558,"tag":611,"props":773,"children":775},{"className":613,"code":774,"language":615,"meta":552,"style":552},"class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n}\n\nclass Dishwasher {\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n",[776],{"type":558,"tag":618,"props":777,"children":778},{"__ignoreMap":552},[779,794,817,824,831,838,845,861,876,883,891],{"type":558,"tag":622,"props":780,"children":781},{"class":624,"line":625},[782,786,790],{"type":558,"tag":622,"props":783,"children":784},{"style":629},[785],{"type":563,"value":632},{"type":558,"tag":622,"props":787,"children":788},{"style":635},[789],{"type":563,"value":638},{"type":558,"tag":622,"props":791,"children":792},{"style":641},[793],{"type":563,"value":644},{"type":558,"tag":622,"props":795,"children":796},{"class":624,"line":647},[797,801,805,809,813],{"type":558,"tag":622,"props":798,"children":799},{"style":651},[800],{"type":563,"value":654},{"type":558,"tag":622,"props":802,"children":803},{"style":641},[804],{"type":563,"value":659},{"type":558,"tag":622,"props":806,"children":807},{"style":662},[808],{"type":563,"value":665},{"type":558,"tag":622,"props":810,"children":811},{"style":641},[812],{"type":563,"value":670},{"type":558,"tag":622,"props":814,"children":815},{"style":641},[816],{"type":563,"value":644},{"type":558,"tag":622,"props":818,"children":819},{"class":624,"line":677},[820],{"type":558,"tag":622,"props":821,"children":822},{"style":681},[823],{"type":563,"value":684},{"type":558,"tag":622,"props":825,"children":826},{"class":624,"line":687},[827],{"type":558,"tag":622,"props":828,"children":829},{"style":641},[830],{"type":563,"value":693},{"type":558,"tag":622,"props":832,"children":833},{"class":624,"line":696},[834],{"type":558,"tag":622,"props":835,"children":836},{"style":641},[837],{"type":563,"value":747},{"type":558,"tag":622,"props":839,"children":840},{"class":624,"line":706},[841],{"type":558,"tag":622,"props":842,"children":843},{"emptyLinePlaceholder":700},[844],{"type":563,"value":703},{"type":558,"tag":622,"props":846,"children":847},{"class":624,"line":724},[848,852,857],{"type":558,"tag":622,"props":849,"children":850},{"style":629},[851],{"type":563,"value":632},{"type":558,"tag":622,"props":853,"children":854},{"style":635},[855],{"type":563,"value":856}," Dishwasher",{"type":558,"tag":622,"props":858,"children":859},{"style":641},[860],{"type":563,"value":644},{"type":558,"tag":622,"props":862,"children":863},{"class":624,"line":733},[864,868,872],{"type":558,"tag":622,"props":865,"children":866},{"style":651},[867],{"type":563,"value":712},{"type":558,"tag":622,"props":869,"children":870},{"style":641},[871],{"type":563,"value":717},{"type":558,"tag":622,"props":873,"children":874},{"style":641},[875],{"type":563,"value":644},{"type":558,"tag":622,"props":877,"children":878},{"class":624,"line":741},[879],{"type":558,"tag":622,"props":880,"children":881},{"style":681},[882],{"type":563,"value":730},{"type":558,"tag":622,"props":884,"children":886},{"class":624,"line":885},10,[887],{"type":558,"tag":622,"props":888,"children":889},{"style":641},[890],{"type":563,"value":693},{"type":558,"tag":622,"props":892,"children":894},{"class":624,"line":893},11,[895],{"type":558,"tag":622,"props":896,"children":897},{"style":641},[898],{"type":563,"value":747},{"type":558,"tag":559,"props":900,"children":901},{},[902],{"type":563,"value":903},"这样，Chef 类专注于烹饪，而 Dishwasher 类专注于洗碗。每个类都有一个单一的职责，使得代码更清晰、易于理解，并且在未来的变更中更具弹性。",{"type":558,"tag":600,"props":905,"children":907},{"id":906},"开放封闭原则",[908],{"type":563,"value":906},{"type":558,"tag":559,"props":910,"children":911},{},[912],{"type":563,"value":913},"开关封闭原则（Open/Closed Principle，OCP）要求软件实体（例如类、模块、函数等）应该对扩展开放，对修改关闭。简而言之，一个模块在扩展新功能时不应该修改原有的代码，而是通过添加新的代码来实现扩展。",{"type":558,"tag":559,"props":915,"children":916},{},[917],{"type":563,"value":918},"考虑一个动物园的场景。我们有一些动物，每个动物都会发出叫声。初始设计如下：",{"type":558,"tag":611,"props":920,"children":922},{"className":613,"code":921,"language":615,"meta":552,"style":552},"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    // 默认的叫声\n    console.log(\"Some generic animal sound\");\n  }\n}\n\nclass Lion extends Animal {\n  makeSound() {\n    console.log(\"Roar!\");\n  }\n}\n\nclass Elephant extends Animal {\n  makeSound() {\n    console.log(\"Trumpet!\");\n  }\n}\n",[923],{"type":558,"tag":618,"props":924,"children":925},{"__ignoreMap":552},[926,942,967,1000,1007,1014,1030,1038,1080,1087,1094,1101,1127,1143,1180,1188,1196,1204,1229,1245,1282,1290],{"type":558,"tag":622,"props":927,"children":928},{"class":624,"line":625},[929,933,938],{"type":558,"tag":622,"props":930,"children":931},{"style":629},[932],{"type":563,"value":632},{"type":558,"tag":622,"props":934,"children":935},{"style":635},[936],{"type":563,"value":937}," Animal",{"type":558,"tag":622,"props":939,"children":940},{"style":641},[941],{"type":563,"value":644},{"type":558,"tag":622,"props":943,"children":944},{"class":624,"line":647},[945,950,954,959,963],{"type":558,"tag":622,"props":946,"children":947},{"style":629},[948],{"type":563,"value":949},"  constructor",{"type":558,"tag":622,"props":951,"children":952},{"style":641},[953],{"type":563,"value":659},{"type":558,"tag":622,"props":955,"children":956},{"style":662},[957],{"type":563,"value":958},"name",{"type":558,"tag":622,"props":960,"children":961},{"style":641},[962],{"type":563,"value":670},{"type":558,"tag":622,"props":964,"children":965},{"style":641},[966],{"type":563,"value":644},{"type":558,"tag":622,"props":968,"children":969},{"class":624,"line":677},[970,976,981,985,990,995],{"type":558,"tag":622,"props":971,"children":973},{"style":972},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[974],{"type":563,"value":975},"    this",{"type":558,"tag":622,"props":977,"children":978},{"style":641},[979],{"type":563,"value":980},".",{"type":558,"tag":622,"props":982,"children":983},{"style":662},[984],{"type":563,"value":958},{"type":558,"tag":622,"props":986,"children":987},{"style":641},[988],{"type":563,"value":989}," =",{"type":558,"tag":622,"props":991,"children":992},{"style":662},[993],{"type":563,"value":994}," name",{"type":558,"tag":622,"props":996,"children":997},{"style":641},[998],{"type":563,"value":999},";\n",{"type":558,"tag":622,"props":1001,"children":1002},{"class":624,"line":687},[1003],{"type":558,"tag":622,"props":1004,"children":1005},{"style":641},[1006],{"type":563,"value":693},{"type":558,"tag":622,"props":1008,"children":1009},{"class":624,"line":696},[1010],{"type":558,"tag":622,"props":1011,"children":1012},{"emptyLinePlaceholder":700},[1013],{"type":563,"value":703},{"type":558,"tag":622,"props":1015,"children":1016},{"class":624,"line":706},[1017,1022,1026],{"type":558,"tag":622,"props":1018,"children":1019},{"style":651},[1020],{"type":563,"value":1021},"  makeSound",{"type":558,"tag":622,"props":1023,"children":1024},{"style":641},[1025],{"type":563,"value":717},{"type":558,"tag":622,"props":1027,"children":1028},{"style":641},[1029],{"type":563,"value":644},{"type":558,"tag":622,"props":1031,"children":1032},{"class":624,"line":724},[1033],{"type":558,"tag":622,"props":1034,"children":1035},{"style":681},[1036],{"type":563,"value":1037},"    // 默认的叫声\n",{"type":558,"tag":622,"props":1039,"children":1040},{"class":624,"line":733},[1041,1046,1050,1055,1059,1065,1071,1075],{"type":558,"tag":622,"props":1042,"children":1043},{"style":662},[1044],{"type":563,"value":1045},"    console",{"type":558,"tag":622,"props":1047,"children":1048},{"style":641},[1049],{"type":563,"value":980},{"type":558,"tag":622,"props":1051,"children":1052},{"style":651},[1053],{"type":563,"value":1054},"log",{"type":558,"tag":622,"props":1056,"children":1057},{"style":641},[1058],{"type":563,"value":659},{"type":558,"tag":622,"props":1060,"children":1062},{"style":1061},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1063],{"type":563,"value":1064},"\"",{"type":558,"tag":622,"props":1066,"children":1068},{"style":1067},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1069],{"type":563,"value":1070},"Some generic animal sound",{"type":558,"tag":622,"props":1072,"children":1073},{"style":1061},[1074],{"type":563,"value":1064},{"type":558,"tag":622,"props":1076,"children":1077},{"style":641},[1078],{"type":563,"value":1079},");\n",{"type":558,"tag":622,"props":1081,"children":1082},{"class":624,"line":741},[1083],{"type":558,"tag":622,"props":1084,"children":1085},{"style":641},[1086],{"type":563,"value":693},{"type":558,"tag":622,"props":1088,"children":1089},{"class":624,"line":885},[1090],{"type":558,"tag":622,"props":1091,"children":1092},{"style":641},[1093],{"type":563,"value":747},{"type":558,"tag":622,"props":1095,"children":1096},{"class":624,"line":893},[1097],{"type":558,"tag":622,"props":1098,"children":1099},{"emptyLinePlaceholder":700},[1100],{"type":563,"value":703},{"type":558,"tag":622,"props":1102,"children":1104},{"class":624,"line":1103},12,[1105,1109,1114,1119,1123],{"type":558,"tag":622,"props":1106,"children":1107},{"style":629},[1108],{"type":563,"value":632},{"type":558,"tag":622,"props":1110,"children":1111},{"style":635},[1112],{"type":563,"value":1113}," Lion",{"type":558,"tag":622,"props":1115,"children":1116},{"style":629},[1117],{"type":563,"value":1118}," extends",{"type":558,"tag":622,"props":1120,"children":1121},{"style":651},[1122],{"type":563,"value":937},{"type":558,"tag":622,"props":1124,"children":1125},{"style":641},[1126],{"type":563,"value":644},{"type":558,"tag":622,"props":1128,"children":1130},{"class":624,"line":1129},13,[1131,1135,1139],{"type":558,"tag":622,"props":1132,"children":1133},{"style":651},[1134],{"type":563,"value":1021},{"type":558,"tag":622,"props":1136,"children":1137},{"style":641},[1138],{"type":563,"value":717},{"type":558,"tag":622,"props":1140,"children":1141},{"style":641},[1142],{"type":563,"value":644},{"type":558,"tag":622,"props":1144,"children":1146},{"class":624,"line":1145},14,[1147,1151,1155,1159,1163,1167,1172,1176],{"type":558,"tag":622,"props":1148,"children":1149},{"style":662},[1150],{"type":563,"value":1045},{"type":558,"tag":622,"props":1152,"children":1153},{"style":641},[1154],{"type":563,"value":980},{"type":558,"tag":622,"props":1156,"children":1157},{"style":651},[1158],{"type":563,"value":1054},{"type":558,"tag":622,"props":1160,"children":1161},{"style":641},[1162],{"type":563,"value":659},{"type":558,"tag":622,"props":1164,"children":1165},{"style":1061},[1166],{"type":563,"value":1064},{"type":558,"tag":622,"props":1168,"children":1169},{"style":1067},[1170],{"type":563,"value":1171},"Roar!",{"type":558,"tag":622,"props":1173,"children":1174},{"style":1061},[1175],{"type":563,"value":1064},{"type":558,"tag":622,"props":1177,"children":1178},{"style":641},[1179],{"type":563,"value":1079},{"type":558,"tag":622,"props":1181,"children":1183},{"class":624,"line":1182},15,[1184],{"type":558,"tag":622,"props":1185,"children":1186},{"style":641},[1187],{"type":563,"value":693},{"type":558,"tag":622,"props":1189,"children":1191},{"class":624,"line":1190},16,[1192],{"type":558,"tag":622,"props":1193,"children":1194},{"style":641},[1195],{"type":563,"value":747},{"type":558,"tag":622,"props":1197,"children":1199},{"class":624,"line":1198},17,[1200],{"type":558,"tag":622,"props":1201,"children":1202},{"emptyLinePlaceholder":700},[1203],{"type":563,"value":703},{"type":558,"tag":622,"props":1205,"children":1207},{"class":624,"line":1206},18,[1208,1212,1217,1221,1225],{"type":558,"tag":622,"props":1209,"children":1210},{"style":629},[1211],{"type":563,"value":632},{"type":558,"tag":622,"props":1213,"children":1214},{"style":635},[1215],{"type":563,"value":1216}," Elephant",{"type":558,"tag":622,"props":1218,"children":1219},{"style":629},[1220],{"type":563,"value":1118},{"type":558,"tag":622,"props":1222,"children":1223},{"style":651},[1224],{"type":563,"value":937},{"type":558,"tag":622,"props":1226,"children":1227},{"style":641},[1228],{"type":563,"value":644},{"type":558,"tag":622,"props":1230,"children":1232},{"class":624,"line":1231},19,[1233,1237,1241],{"type":558,"tag":622,"props":1234,"children":1235},{"style":651},[1236],{"type":563,"value":1021},{"type":558,"tag":622,"props":1238,"children":1239},{"style":641},[1240],{"type":563,"value":717},{"type":558,"tag":622,"props":1242,"children":1243},{"style":641},[1244],{"type":563,"value":644},{"type":558,"tag":622,"props":1246,"children":1248},{"class":624,"line":1247},20,[1249,1253,1257,1261,1265,1269,1274,1278],{"type":558,"tag":622,"props":1250,"children":1251},{"style":662},[1252],{"type":563,"value":1045},{"type":558,"tag":622,"props":1254,"children":1255},{"style":641},[1256],{"type":563,"value":980},{"type":558,"tag":622,"props":1258,"children":1259},{"style":651},[1260],{"type":563,"value":1054},{"type":558,"tag":622,"props":1262,"children":1263},{"style":641},[1264],{"type":563,"value":659},{"type":558,"tag":622,"props":1266,"children":1267},{"style":1061},[1268],{"type":563,"value":1064},{"type":558,"tag":622,"props":1270,"children":1271},{"style":1067},[1272],{"type":563,"value":1273},"Trumpet!",{"type":558,"tag":622,"props":1275,"children":1276},{"style":1061},[1277],{"type":563,"value":1064},{"type":558,"tag":622,"props":1279,"children":1280},{"style":641},[1281],{"type":563,"value":1079},{"type":558,"tag":622,"props":1283,"children":1285},{"class":624,"line":1284},21,[1286],{"type":558,"tag":622,"props":1287,"children":1288},{"style":641},[1289],{"type":563,"value":693},{"type":558,"tag":622,"props":1291,"children":1293},{"class":624,"line":1292},22,[1294],{"type":558,"tag":622,"props":1295,"children":1296},{"style":641},[1297],{"type":563,"value":747},{"type":558,"tag":559,"props":1299,"children":1300},{},[1301],{"type":563,"value":1302},"在这个设计中，Animal 类是一个基类，而 Lion 和 Elephant 是它的子类。每个动物都有自己的叫声，通过重写 makeSound 方法来实现。",{"type":558,"tag":559,"props":1304,"children":1305},{},[1306],{"type":563,"value":1307},"现在，假设我们要添加一些新的动物，比如鹦鹉和狗，按照开放/封闭原则，我们应该扩展而不是修改现有的代码：",{"type":558,"tag":611,"props":1309,"children":1311},{"className":613,"code":1310,"language":615,"meta":552,"style":552},"class Parrot extends Animal {\n  makeSound() {\n    console.log(\"Squawk!\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Bark!\");\n  }\n}\n",[1312],{"type":558,"tag":618,"props":1313,"children":1314},{"__ignoreMap":552},[1315,1339,1354,1390,1397,1404,1411,1435,1450,1486,1493],{"type":558,"tag":622,"props":1316,"children":1317},{"class":624,"line":625},[1318,1322,1327,1331,1335],{"type":558,"tag":622,"props":1319,"children":1320},{"style":629},[1321],{"type":563,"value":632},{"type":558,"tag":622,"props":1323,"children":1324},{"style":635},[1325],{"type":563,"value":1326}," Parrot",{"type":558,"tag":622,"props":1328,"children":1329},{"style":629},[1330],{"type":563,"value":1118},{"type":558,"tag":622,"props":1332,"children":1333},{"style":651},[1334],{"type":563,"value":937},{"type":558,"tag":622,"props":1336,"children":1337},{"style":641},[1338],{"type":563,"value":644},{"type":558,"tag":622,"props":1340,"children":1341},{"class":624,"line":647},[1342,1346,1350],{"type":558,"tag":622,"props":1343,"children":1344},{"style":651},[1345],{"type":563,"value":1021},{"type":558,"tag":622,"props":1347,"children":1348},{"style":641},[1349],{"type":563,"value":717},{"type":558,"tag":622,"props":1351,"children":1352},{"style":641},[1353],{"type":563,"value":644},{"type":558,"tag":622,"props":1355,"children":1356},{"class":624,"line":677},[1357,1361,1365,1369,1373,1377,1382,1386],{"type":558,"tag":622,"props":1358,"children":1359},{"style":662},[1360],{"type":563,"value":1045},{"type":558,"tag":622,"props":1362,"children":1363},{"style":641},[1364],{"type":563,"value":980},{"type":558,"tag":622,"props":1366,"children":1367},{"style":651},[1368],{"type":563,"value":1054},{"type":558,"tag":622,"props":1370,"children":1371},{"style":641},[1372],{"type":563,"value":659},{"type":558,"tag":622,"props":1374,"children":1375},{"style":1061},[1376],{"type":563,"value":1064},{"type":558,"tag":622,"props":1378,"children":1379},{"style":1067},[1380],{"type":563,"value":1381},"Squawk!",{"type":558,"tag":622,"props":1383,"children":1384},{"style":1061},[1385],{"type":563,"value":1064},{"type":558,"tag":622,"props":1387,"children":1388},{"style":641},[1389],{"type":563,"value":1079},{"type":558,"tag":622,"props":1391,"children":1392},{"class":624,"line":687},[1393],{"type":558,"tag":622,"props":1394,"children":1395},{"style":641},[1396],{"type":563,"value":693},{"type":558,"tag":622,"props":1398,"children":1399},{"class":624,"line":696},[1400],{"type":558,"tag":622,"props":1401,"children":1402},{"style":641},[1403],{"type":563,"value":747},{"type":558,"tag":622,"props":1405,"children":1406},{"class":624,"line":706},[1407],{"type":558,"tag":622,"props":1408,"children":1409},{"emptyLinePlaceholder":700},[1410],{"type":563,"value":703},{"type":558,"tag":622,"props":1412,"children":1413},{"class":624,"line":724},[1414,1418,1423,1427,1431],{"type":558,"tag":622,"props":1415,"children":1416},{"style":629},[1417],{"type":563,"value":632},{"type":558,"tag":622,"props":1419,"children":1420},{"style":635},[1421],{"type":563,"value":1422}," Dog",{"type":558,"tag":622,"props":1424,"children":1425},{"style":629},[1426],{"type":563,"value":1118},{"type":558,"tag":622,"props":1428,"children":1429},{"style":651},[1430],{"type":563,"value":937},{"type":558,"tag":622,"props":1432,"children":1433},{"style":641},[1434],{"type":563,"value":644},{"type":558,"tag":622,"props":1436,"children":1437},{"class":624,"line":733},[1438,1442,1446],{"type":558,"tag":622,"props":1439,"children":1440},{"style":651},[1441],{"type":563,"value":1021},{"type":558,"tag":622,"props":1443,"children":1444},{"style":641},[1445],{"type":563,"value":717},{"type":558,"tag":622,"props":1447,"children":1448},{"style":641},[1449],{"type":563,"value":644},{"type":558,"tag":622,"props":1451,"children":1452},{"class":624,"line":741},[1453,1457,1461,1465,1469,1473,1478,1482],{"type":558,"tag":622,"props":1454,"children":1455},{"style":662},[1456],{"type":563,"value":1045},{"type":558,"tag":622,"props":1458,"children":1459},{"style":641},[1460],{"type":563,"value":980},{"type":558,"tag":622,"props":1462,"children":1463},{"style":651},[1464],{"type":563,"value":1054},{"type":558,"tag":622,"props":1466,"children":1467},{"style":641},[1468],{"type":563,"value":659},{"type":558,"tag":622,"props":1470,"children":1471},{"style":1061},[1472],{"type":563,"value":1064},{"type":558,"tag":622,"props":1474,"children":1475},{"style":1067},[1476],{"type":563,"value":1477},"Bark!",{"type":558,"tag":622,"props":1479,"children":1480},{"style":1061},[1481],{"type":563,"value":1064},{"type":558,"tag":622,"props":1483,"children":1484},{"style":641},[1485],{"type":563,"value":1079},{"type":558,"tag":622,"props":1487,"children":1488},{"class":624,"line":885},[1489],{"type":558,"tag":622,"props":1490,"children":1491},{"style":641},[1492],{"type":563,"value":693},{"type":558,"tag":622,"props":1494,"children":1495},{"class":624,"line":893},[1496],{"type":558,"tag":622,"props":1497,"children":1498},{"style":641},[1499],{"type":563,"value":747},{"type":558,"tag":559,"props":1501,"children":1502},{},[1503],{"type":563,"value":1504},"这样，我们通过扩展 Animal 类，而不是修改它，来添加新的功能（新的动物）。这符合开放/封闭原则，因为我们对于现有代码的修改是关闭的，我们只是通过扩展来引入新的功能。",{"type":558,"tag":559,"props":1506,"children":1507},{},[1508],{"type":563,"value":1509},"使用开放/封闭原则可以使代码更加稳定，降低对现有代码的影响，同时也更容易应对变化和扩展。",{"type":558,"tag":600,"props":1511,"children":1513},{"id":1512},"里式替换原则",[1514],{"type":563,"value":1512},{"type":558,"tag":559,"props":1516,"children":1517},{},[1518],{"type":563,"value":1519},"里氏替换原则（Liskov Substitution Principle，LSP） 是 SOLID 原则之一，它强调子类型（派生类或子类）必须能够替换掉它们的基类型（基类或父类）并出现在基类能够工作的任何地方，而不破坏程序的正确性。",{"type":558,"tag":559,"props":1521,"children":1522},{},[1523],{"type":563,"value":1524},"通俗地说，如果一个类是基类的子类，那么在任何需要基类的地方，都可以使用这个子类而不产生错误。子类应该保持基类的行为，并且可以扩展或修改基类的行为，但不应该破坏基类原有的约定。",{"type":558,"tag":559,"props":1526,"children":1527},{},[1528],{"type":563,"value":1529},"假设我们有一个表示矩形的基类 Rectangle：",{"type":558,"tag":611,"props":1531,"children":1533},{"className":613,"code":1532,"language":615,"meta":552,"style":552},"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n",[1534],{"type":558,"tag":618,"props":1535,"children":1536},{"__ignoreMap":552},[1537,1553,1587,1615,1643,1650,1657,1681,1708,1715,1722,1746,1773,1780,1787,1803,1846,1853],{"type":558,"tag":622,"props":1538,"children":1539},{"class":624,"line":625},[1540,1544,1549],{"type":558,"tag":622,"props":1541,"children":1542},{"style":629},[1543],{"type":563,"value":632},{"type":558,"tag":622,"props":1545,"children":1546},{"style":635},[1547],{"type":563,"value":1548}," Rectangle",{"type":558,"tag":622,"props":1550,"children":1551},{"style":641},[1552],{"type":563,"value":644},{"type":558,"tag":622,"props":1554,"children":1555},{"class":624,"line":647},[1556,1560,1564,1569,1574,1579,1583],{"type":558,"tag":622,"props":1557,"children":1558},{"style":629},[1559],{"type":563,"value":949},{"type":558,"tag":622,"props":1561,"children":1562},{"style":641},[1563],{"type":563,"value":659},{"type":558,"tag":622,"props":1565,"children":1566},{"style":662},[1567],{"type":563,"value":1568},"width",{"type":558,"tag":622,"props":1570,"children":1571},{"style":641},[1572],{"type":563,"value":1573},",",{"type":558,"tag":622,"props":1575,"children":1576},{"style":662},[1577],{"type":563,"value":1578}," height",{"type":558,"tag":622,"props":1580,"children":1581},{"style":641},[1582],{"type":563,"value":670},{"type":558,"tag":622,"props":1584,"children":1585},{"style":641},[1586],{"type":563,"value":644},{"type":558,"tag":622,"props":1588,"children":1589},{"class":624,"line":677},[1590,1594,1598,1602,1606,1611],{"type":558,"tag":622,"props":1591,"children":1592},{"style":972},[1593],{"type":563,"value":975},{"type":558,"tag":622,"props":1595,"children":1596},{"style":641},[1597],{"type":563,"value":980},{"type":558,"tag":622,"props":1599,"children":1600},{"style":662},[1601],{"type":563,"value":1568},{"type":558,"tag":622,"props":1603,"children":1604},{"style":641},[1605],{"type":563,"value":989},{"type":558,"tag":622,"props":1607,"children":1608},{"style":662},[1609],{"type":563,"value":1610}," width",{"type":558,"tag":622,"props":1612,"children":1613},{"style":641},[1614],{"type":563,"value":999},{"type":558,"tag":622,"props":1616,"children":1617},{"class":624,"line":687},[1618,1622,1626,1631,1635,1639],{"type":558,"tag":622,"props":1619,"children":1620},{"style":972},[1621],{"type":563,"value":975},{"type":558,"tag":622,"props":1623,"children":1624},{"style":641},[1625],{"type":563,"value":980},{"type":558,"tag":622,"props":1627,"children":1628},{"style":662},[1629],{"type":563,"value":1630},"height",{"type":558,"tag":622,"props":1632,"children":1633},{"style":641},[1634],{"type":563,"value":989},{"type":558,"tag":622,"props":1636,"children":1637},{"style":662},[1638],{"type":563,"value":1578},{"type":558,"tag":622,"props":1640,"children":1641},{"style":641},[1642],{"type":563,"value":999},{"type":558,"tag":622,"props":1644,"children":1645},{"class":624,"line":696},[1646],{"type":558,"tag":622,"props":1647,"children":1648},{"style":641},[1649],{"type":563,"value":693},{"type":558,"tag":622,"props":1651,"children":1652},{"class":624,"line":706},[1653],{"type":558,"tag":622,"props":1654,"children":1655},{"emptyLinePlaceholder":700},[1656],{"type":563,"value":703},{"type":558,"tag":622,"props":1658,"children":1659},{"class":624,"line":724},[1660,1665,1669,1673,1677],{"type":558,"tag":622,"props":1661,"children":1662},{"style":651},[1663],{"type":563,"value":1664},"  setWidth",{"type":558,"tag":622,"props":1666,"children":1667},{"style":641},[1668],{"type":563,"value":659},{"type":558,"tag":622,"props":1670,"children":1671},{"style":662},[1672],{"type":563,"value":1568},{"type":558,"tag":622,"props":1674,"children":1675},{"style":641},[1676],{"type":563,"value":670},{"type":558,"tag":622,"props":1678,"children":1679},{"style":641},[1680],{"type":563,"value":644},{"type":558,"tag":622,"props":1682,"children":1683},{"class":624,"line":733},[1684,1688,1692,1696,1700,1704],{"type":558,"tag":622,"props":1685,"children":1686},{"style":972},[1687],{"type":563,"value":975},{"type":558,"tag":622,"props":1689,"children":1690},{"style":641},[1691],{"type":563,"value":980},{"type":558,"tag":622,"props":1693,"children":1694},{"style":662},[1695],{"type":563,"value":1568},{"type":558,"tag":622,"props":1697,"children":1698},{"style":641},[1699],{"type":563,"value":989},{"type":558,"tag":622,"props":1701,"children":1702},{"style":662},[1703],{"type":563,"value":1610},{"type":558,"tag":622,"props":1705,"children":1706},{"style":641},[1707],{"type":563,"value":999},{"type":558,"tag":622,"props":1709,"children":1710},{"class":624,"line":741},[1711],{"type":558,"tag":622,"props":1712,"children":1713},{"style":641},[1714],{"type":563,"value":693},{"type":558,"tag":622,"props":1716,"children":1717},{"class":624,"line":885},[1718],{"type":558,"tag":622,"props":1719,"children":1720},{"emptyLinePlaceholder":700},[1721],{"type":563,"value":703},{"type":558,"tag":622,"props":1723,"children":1724},{"class":624,"line":893},[1725,1730,1734,1738,1742],{"type":558,"tag":622,"props":1726,"children":1727},{"style":651},[1728],{"type":563,"value":1729},"  setHeight",{"type":558,"tag":622,"props":1731,"children":1732},{"style":641},[1733],{"type":563,"value":659},{"type":558,"tag":622,"props":1735,"children":1736},{"style":662},[1737],{"type":563,"value":1630},{"type":558,"tag":622,"props":1739,"children":1740},{"style":641},[1741],{"type":563,"value":670},{"type":558,"tag":622,"props":1743,"children":1744},{"style":641},[1745],{"type":563,"value":644},{"type":558,"tag":622,"props":1747,"children":1748},{"class":624,"line":1103},[1749,1753,1757,1761,1765,1769],{"type":558,"tag":622,"props":1750,"children":1751},{"style":972},[1752],{"type":563,"value":975},{"type":558,"tag":622,"props":1754,"children":1755},{"style":641},[1756],{"type":563,"value":980},{"type":558,"tag":622,"props":1758,"children":1759},{"style":662},[1760],{"type":563,"value":1630},{"type":558,"tag":622,"props":1762,"children":1763},{"style":641},[1764],{"type":563,"value":989},{"type":558,"tag":622,"props":1766,"children":1767},{"style":662},[1768],{"type":563,"value":1578},{"type":558,"tag":622,"props":1770,"children":1771},{"style":641},[1772],{"type":563,"value":999},{"type":558,"tag":622,"props":1774,"children":1775},{"class":624,"line":1129},[1776],{"type":558,"tag":622,"props":1777,"children":1778},{"style":641},[1779],{"type":563,"value":693},{"type":558,"tag":622,"props":1781,"children":1782},{"class":624,"line":1145},[1783],{"type":558,"tag":622,"props":1784,"children":1785},{"emptyLinePlaceholder":700},[1786],{"type":563,"value":703},{"type":558,"tag":622,"props":1788,"children":1789},{"class":624,"line":1182},[1790,1795,1799],{"type":558,"tag":622,"props":1791,"children":1792},{"style":651},[1793],{"type":563,"value":1794},"  getArea",{"type":558,"tag":622,"props":1796,"children":1797},{"style":641},[1798],{"type":563,"value":717},{"type":558,"tag":622,"props":1800,"children":1801},{"style":641},[1802],{"type":563,"value":644},{"type":558,"tag":622,"props":1804,"children":1805},{"class":624,"line":1190},[1806,1812,1817,1821,1825,1830,1834,1838,1842],{"type":558,"tag":622,"props":1807,"children":1809},{"style":1808},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1810],{"type":563,"value":1811},"    return",{"type":558,"tag":622,"props":1813,"children":1814},{"style":972},[1815],{"type":563,"value":1816}," this",{"type":558,"tag":622,"props":1818,"children":1819},{"style":641},[1820],{"type":563,"value":980},{"type":558,"tag":622,"props":1822,"children":1823},{"style":662},[1824],{"type":563,"value":1568},{"type":558,"tag":622,"props":1826,"children":1827},{"style":629},[1828],{"type":563,"value":1829}," *",{"type":558,"tag":622,"props":1831,"children":1832},{"style":972},[1833],{"type":563,"value":1816},{"type":558,"tag":622,"props":1835,"children":1836},{"style":641},[1837],{"type":563,"value":980},{"type":558,"tag":622,"props":1839,"children":1840},{"style":662},[1841],{"type":563,"value":1630},{"type":558,"tag":622,"props":1843,"children":1844},{"style":641},[1845],{"type":563,"value":999},{"type":558,"tag":622,"props":1847,"children":1848},{"class":624,"line":1198},[1849],{"type":558,"tag":622,"props":1850,"children":1851},{"style":641},[1852],{"type":563,"value":693},{"type":558,"tag":622,"props":1854,"children":1855},{"class":624,"line":1206},[1856],{"type":558,"tag":622,"props":1857,"children":1858},{"style":641},[1859],{"type":563,"value":747},{"type":558,"tag":559,"props":1861,"children":1862},{},[1863],{"type":563,"value":1864},"现在，我们创建了一个子类 Square 继承自 Rectangle，表示正方形。在正方形中，宽和高应该始终相等。",{"type":558,"tag":611,"props":1866,"children":1868},{"className":613,"code":1867,"language":615,"meta":552,"style":552},"class Square extends Rectangle {\n  setWidth(width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  setHeight(height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n",[1869],{"type":558,"tag":618,"props":1870,"children":1871},{"__ignoreMap":552},[1872,1896,1919,1948,1976,1983,1990,2013,2040,2067,2074],{"type":558,"tag":622,"props":1873,"children":1874},{"class":624,"line":625},[1875,1879,1884,1888,1892],{"type":558,"tag":622,"props":1876,"children":1877},{"style":629},[1878],{"type":563,"value":632},{"type":558,"tag":622,"props":1880,"children":1881},{"style":635},[1882],{"type":563,"value":1883}," Square",{"type":558,"tag":622,"props":1885,"children":1886},{"style":629},[1887],{"type":563,"value":1118},{"type":558,"tag":622,"props":1889,"children":1890},{"style":651},[1891],{"type":563,"value":1548},{"type":558,"tag":622,"props":1893,"children":1894},{"style":641},[1895],{"type":563,"value":644},{"type":558,"tag":622,"props":1897,"children":1898},{"class":624,"line":647},[1899,1903,1907,1911,1915],{"type":558,"tag":622,"props":1900,"children":1901},{"style":651},[1902],{"type":563,"value":1664},{"type":558,"tag":622,"props":1904,"children":1905},{"style":641},[1906],{"type":563,"value":659},{"type":558,"tag":622,"props":1908,"children":1909},{"style":662},[1910],{"type":563,"value":1568},{"type":558,"tag":622,"props":1912,"children":1913},{"style":641},[1914],{"type":563,"value":670},{"type":558,"tag":622,"props":1916,"children":1917},{"style":641},[1918],{"type":563,"value":644},{"type":558,"tag":622,"props":1920,"children":1921},{"class":624,"line":677},[1922,1927,1931,1936,1940,1944],{"type":558,"tag":622,"props":1923,"children":1924},{"style":972},[1925],{"type":563,"value":1926},"    super",{"type":558,"tag":622,"props":1928,"children":1929},{"style":641},[1930],{"type":563,"value":980},{"type":558,"tag":622,"props":1932,"children":1933},{"style":651},[1934],{"type":563,"value":1935},"setWidth",{"type":558,"tag":622,"props":1937,"children":1938},{"style":641},[1939],{"type":563,"value":659},{"type":558,"tag":622,"props":1941,"children":1942},{"style":662},[1943],{"type":563,"value":1568},{"type":558,"tag":622,"props":1945,"children":1946},{"style":641},[1947],{"type":563,"value":1079},{"type":558,"tag":622,"props":1949,"children":1950},{"class":624,"line":687},[1951,1955,1959,1964,1968,1972],{"type":558,"tag":622,"props":1952,"children":1953},{"style":972},[1954],{"type":563,"value":1926},{"type":558,"tag":622,"props":1956,"children":1957},{"style":641},[1958],{"type":563,"value":980},{"type":558,"tag":622,"props":1960,"children":1961},{"style":651},[1962],{"type":563,"value":1963},"setHeight",{"type":558,"tag":622,"props":1965,"children":1966},{"style":641},[1967],{"type":563,"value":659},{"type":558,"tag":622,"props":1969,"children":1970},{"style":662},[1971],{"type":563,"value":1568},{"type":558,"tag":622,"props":1973,"children":1974},{"style":641},[1975],{"type":563,"value":1079},{"type":558,"tag":622,"props":1977,"children":1978},{"class":624,"line":696},[1979],{"type":558,"tag":622,"props":1980,"children":1981},{"style":641},[1982],{"type":563,"value":693},{"type":558,"tag":622,"props":1984,"children":1985},{"class":624,"line":706},[1986],{"type":558,"tag":622,"props":1987,"children":1988},{"emptyLinePlaceholder":700},[1989],{"type":563,"value":703},{"type":558,"tag":622,"props":1991,"children":1992},{"class":624,"line":724},[1993,1997,2001,2005,2009],{"type":558,"tag":622,"props":1994,"children":1995},{"style":651},[1996],{"type":563,"value":1729},{"type":558,"tag":622,"props":1998,"children":1999},{"style":641},[2000],{"type":563,"value":659},{"type":558,"tag":622,"props":2002,"children":2003},{"style":662},[2004],{"type":563,"value":1630},{"type":558,"tag":622,"props":2006,"children":2007},{"style":641},[2008],{"type":563,"value":670},{"type":558,"tag":622,"props":2010,"children":2011},{"style":641},[2012],{"type":563,"value":644},{"type":558,"tag":622,"props":2014,"children":2015},{"class":624,"line":733},[2016,2020,2024,2028,2032,2036],{"type":558,"tag":622,"props":2017,"children":2018},{"style":972},[2019],{"type":563,"value":1926},{"type":558,"tag":622,"props":2021,"children":2022},{"style":641},[2023],{"type":563,"value":980},{"type":558,"tag":622,"props":2025,"children":2026},{"style":651},[2027],{"type":563,"value":1935},{"type":558,"tag":622,"props":2029,"children":2030},{"style":641},[2031],{"type":563,"value":659},{"type":558,"tag":622,"props":2033,"children":2034},{"style":662},[2035],{"type":563,"value":1630},{"type":558,"tag":622,"props":2037,"children":2038},{"style":641},[2039],{"type":563,"value":1079},{"type":558,"tag":622,"props":2041,"children":2042},{"class":624,"line":741},[2043,2047,2051,2055,2059,2063],{"type":558,"tag":622,"props":2044,"children":2045},{"style":972},[2046],{"type":563,"value":1926},{"type":558,"tag":622,"props":2048,"children":2049},{"style":641},[2050],{"type":563,"value":980},{"type":558,"tag":622,"props":2052,"children":2053},{"style":651},[2054],{"type":563,"value":1963},{"type":558,"tag":622,"props":2056,"children":2057},{"style":641},[2058],{"type":563,"value":659},{"type":558,"tag":622,"props":2060,"children":2061},{"style":662},[2062],{"type":563,"value":1630},{"type":558,"tag":622,"props":2064,"children":2065},{"style":641},[2066],{"type":563,"value":1079},{"type":558,"tag":622,"props":2068,"children":2069},{"class":624,"line":885},[2070],{"type":558,"tag":622,"props":2071,"children":2072},{"style":641},[2073],{"type":563,"value":693},{"type":558,"tag":622,"props":2075,"children":2076},{"class":624,"line":893},[2077],{"type":558,"tag":622,"props":2078,"children":2079},{"style":641},[2080],{"type":563,"value":747},{"type":558,"tag":559,"props":2082,"children":2083},{},[2084],{"type":563,"value":2085},"这里的问题是，Square 子类在修改宽度或高度时，通过覆写 setWidth 和 setHeight 方法，强制宽和高相等，这与基类的行为不一致。如果在需要 Rectangle 的地方使用了 Square，可能会导致程序逻辑错误。",{"type":558,"tag":559,"props":2087,"children":2088},{},[2089],{"type":563,"value":2090},"这违反了里氏替换原则，因为子类修改了父类的预期行为。为了符合里氏替换原则，可能需要重新设计类的继承结构，或者使用更精确的命名来表达实际意图。",{"type":558,"tag":600,"props":2092,"children":2094},{"id":2093},"接口隔离原则",[2095],{"type":563,"value":2093},{"type":558,"tag":559,"props":2097,"children":2098},{},[2099],{"type":563,"value":2100},"接口隔离原则（Interface Segregation Principle，ISP） 是 SOLID 原则之一，它强调一个类不应该被强迫实现它不需要的接口。简而言之，一个类对另一个类的依赖应该建立在最小的接口上。",{"type":558,"tag":559,"props":2102,"children":2103},{},[2104],{"type":563,"value":2105},"在通俗的语言中，接口隔离原则告诉我们不应该让一个类依赖它不需要的接口，否则会导致类需要实现一些它根本不需要的方法。",{"type":558,"tag":559,"props":2107,"children":2108},{},[2109],{"type":563,"value":2110},"举例说明，假设我们有一个动物园的系统，其中有两种动物，一种会飞，一种会游泳：",{"type":558,"tag":611,"props":2112,"children":2114},{"className":613,"code":2113,"language":615,"meta":552,"style":552},"// 不遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n\n  swim() {\n    // 这是一个鸟类不需要的方法，违反接口隔离原则\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n\n  fly() {\n    // 这是一个鱼类不需要的方法，违反接口隔离原则\n  }\n}\n",[2115],{"type":558,"tag":618,"props":2116,"children":2117},{"__ignoreMap":552},[2118,2126,2142,2158,2166,2173,2180,2196,2204,2211,2218,2225,2241,2256,2264,2271,2278,2293,2301,2308],{"type":558,"tag":622,"props":2119,"children":2120},{"class":624,"line":625},[2121],{"type":558,"tag":622,"props":2122,"children":2123},{"style":681},[2124],{"type":563,"value":2125},"// 不遵循接口隔离原则的设计\n",{"type":558,"tag":622,"props":2127,"children":2128},{"class":624,"line":647},[2129,2133,2138],{"type":558,"tag":622,"props":2130,"children":2131},{"style":629},[2132],{"type":563,"value":632},{"type":558,"tag":622,"props":2134,"children":2135},{"style":635},[2136],{"type":563,"value":2137}," Bird",{"type":558,"tag":622,"props":2139,"children":2140},{"style":641},[2141],{"type":563,"value":644},{"type":558,"tag":622,"props":2143,"children":2144},{"class":624,"line":677},[2145,2150,2154],{"type":558,"tag":622,"props":2146,"children":2147},{"style":651},[2148],{"type":563,"value":2149},"  fly",{"type":558,"tag":622,"props":2151,"children":2152},{"style":641},[2153],{"type":563,"value":717},{"type":558,"tag":622,"props":2155,"children":2156},{"style":641},[2157],{"type":563,"value":644},{"type":558,"tag":622,"props":2159,"children":2160},{"class":624,"line":687},[2161],{"type":558,"tag":622,"props":2162,"children":2163},{"style":681},[2164],{"type":563,"value":2165},"    // 实现飞行逻辑\n",{"type":558,"tag":622,"props":2167,"children":2168},{"class":624,"line":696},[2169],{"type":558,"tag":622,"props":2170,"children":2171},{"style":641},[2172],{"type":563,"value":693},{"type":558,"tag":622,"props":2174,"children":2175},{"class":624,"line":706},[2176],{"type":558,"tag":622,"props":2177,"children":2178},{"emptyLinePlaceholder":700},[2179],{"type":563,"value":703},{"type":558,"tag":622,"props":2181,"children":2182},{"class":624,"line":724},[2183,2188,2192],{"type":558,"tag":622,"props":2184,"children":2185},{"style":651},[2186],{"type":563,"value":2187},"  swim",{"type":558,"tag":622,"props":2189,"children":2190},{"style":641},[2191],{"type":563,"value":717},{"type":558,"tag":622,"props":2193,"children":2194},{"style":641},[2195],{"type":563,"value":644},{"type":558,"tag":622,"props":2197,"children":2198},{"class":624,"line":733},[2199],{"type":558,"tag":622,"props":2200,"children":2201},{"style":681},[2202],{"type":563,"value":2203},"    // 这是一个鸟类不需要的方法，违反接口隔离原则\n",{"type":558,"tag":622,"props":2205,"children":2206},{"class":624,"line":741},[2207],{"type":558,"tag":622,"props":2208,"children":2209},{"style":641},[2210],{"type":563,"value":693},{"type":558,"tag":622,"props":2212,"children":2213},{"class":624,"line":885},[2214],{"type":558,"tag":622,"props":2215,"children":2216},{"style":641},[2217],{"type":563,"value":747},{"type":558,"tag":622,"props":2219,"children":2220},{"class":624,"line":893},[2221],{"type":558,"tag":622,"props":2222,"children":2223},{"emptyLinePlaceholder":700},[2224],{"type":563,"value":703},{"type":558,"tag":622,"props":2226,"children":2227},{"class":624,"line":1103},[2228,2232,2237],{"type":558,"tag":622,"props":2229,"children":2230},{"style":629},[2231],{"type":563,"value":632},{"type":558,"tag":622,"props":2233,"children":2234},{"style":635},[2235],{"type":563,"value":2236}," Fish",{"type":558,"tag":622,"props":2238,"children":2239},{"style":641},[2240],{"type":563,"value":644},{"type":558,"tag":622,"props":2242,"children":2243},{"class":624,"line":1129},[2244,2248,2252],{"type":558,"tag":622,"props":2245,"children":2246},{"style":651},[2247],{"type":563,"value":2187},{"type":558,"tag":622,"props":2249,"children":2250},{"style":641},[2251],{"type":563,"value":717},{"type":558,"tag":622,"props":2253,"children":2254},{"style":641},[2255],{"type":563,"value":644},{"type":558,"tag":622,"props":2257,"children":2258},{"class":624,"line":1145},[2259],{"type":558,"tag":622,"props":2260,"children":2261},{"style":681},[2262],{"type":563,"value":2263},"    // 实现游泳逻辑\n",{"type":558,"tag":622,"props":2265,"children":2266},{"class":624,"line":1182},[2267],{"type":558,"tag":622,"props":2268,"children":2269},{"style":641},[2270],{"type":563,"value":693},{"type":558,"tag":622,"props":2272,"children":2273},{"class":624,"line":1190},[2274],{"type":558,"tag":622,"props":2275,"children":2276},{"emptyLinePlaceholder":700},[2277],{"type":563,"value":703},{"type":558,"tag":622,"props":2279,"children":2280},{"class":624,"line":1198},[2281,2285,2289],{"type":558,"tag":622,"props":2282,"children":2283},{"style":651},[2284],{"type":563,"value":2149},{"type":558,"tag":622,"props":2286,"children":2287},{"style":641},[2288],{"type":563,"value":717},{"type":558,"tag":622,"props":2290,"children":2291},{"style":641},[2292],{"type":563,"value":644},{"type":558,"tag":622,"props":2294,"children":2295},{"class":624,"line":1206},[2296],{"type":558,"tag":622,"props":2297,"children":2298},{"style":681},[2299],{"type":563,"value":2300},"    // 这是一个鱼类不需要的方法，违反接口隔离原则\n",{"type":558,"tag":622,"props":2302,"children":2303},{"class":624,"line":1231},[2304],{"type":558,"tag":622,"props":2305,"children":2306},{"style":641},[2307],{"type":563,"value":693},{"type":558,"tag":622,"props":2309,"children":2310},{"class":624,"line":1247},[2311],{"type":558,"tag":622,"props":2312,"children":2313},{"style":641},[2314],{"type":563,"value":747},{"type":558,"tag":559,"props":2316,"children":2317},{},[2318],{"type":563,"value":2319},"在这个例子中，Bird 类实现了 fly 和 swim 两个方法，而 Fish 类也实现了 swim 和 fly 两个方法。这违反了接口隔离原则，因为每个类都被迫实现了它们不需要的方法。",{"type":558,"tag":559,"props":2321,"children":2322},{},[2323],{"type":563,"value":2324},"为了符合接口隔离原则，我们可以将接口拆分成更小的部分，让每个类只实现它们需要的方法：",{"type":558,"tag":611,"props":2326,"children":2328},{"className":613,"code":2327,"language":615,"meta":552,"style":552},"// 遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n}\n",[2329],{"type":558,"tag":618,"props":2330,"children":2331},{"__ignoreMap":552},[2332,2340,2355,2370,2377,2384,2391,2398,2413,2428,2435,2442],{"type":558,"tag":622,"props":2333,"children":2334},{"class":624,"line":625},[2335],{"type":558,"tag":622,"props":2336,"children":2337},{"style":681},[2338],{"type":563,"value":2339},"// 遵循接口隔离原则的设计\n",{"type":558,"tag":622,"props":2341,"children":2342},{"class":624,"line":647},[2343,2347,2351],{"type":558,"tag":622,"props":2344,"children":2345},{"style":629},[2346],{"type":563,"value":632},{"type":558,"tag":622,"props":2348,"children":2349},{"style":635},[2350],{"type":563,"value":2137},{"type":558,"tag":622,"props":2352,"children":2353},{"style":641},[2354],{"type":563,"value":644},{"type":558,"tag":622,"props":2356,"children":2357},{"class":624,"line":677},[2358,2362,2366],{"type":558,"tag":622,"props":2359,"children":2360},{"style":651},[2361],{"type":563,"value":2149},{"type":558,"tag":622,"props":2363,"children":2364},{"style":641},[2365],{"type":563,"value":717},{"type":558,"tag":622,"props":2367,"children":2368},{"style":641},[2369],{"type":563,"value":644},{"type":558,"tag":622,"props":2371,"children":2372},{"class":624,"line":687},[2373],{"type":558,"tag":622,"props":2374,"children":2375},{"style":681},[2376],{"type":563,"value":2165},{"type":558,"tag":622,"props":2378,"children":2379},{"class":624,"line":696},[2380],{"type":558,"tag":622,"props":2381,"children":2382},{"style":641},[2383],{"type":563,"value":693},{"type":558,"tag":622,"props":2385,"children":2386},{"class":624,"line":706},[2387],{"type":558,"tag":622,"props":2388,"children":2389},{"style":641},[2390],{"type":563,"value":747},{"type":558,"tag":622,"props":2392,"children":2393},{"class":624,"line":724},[2394],{"type":558,"tag":622,"props":2395,"children":2396},{"emptyLinePlaceholder":700},[2397],{"type":563,"value":703},{"type":558,"tag":622,"props":2399,"children":2400},{"class":624,"line":733},[2401,2405,2409],{"type":558,"tag":622,"props":2402,"children":2403},{"style":629},[2404],{"type":563,"value":632},{"type":558,"tag":622,"props":2406,"children":2407},{"style":635},[2408],{"type":563,"value":2236},{"type":558,"tag":622,"props":2410,"children":2411},{"style":641},[2412],{"type":563,"value":644},{"type":558,"tag":622,"props":2414,"children":2415},{"class":624,"line":741},[2416,2420,2424],{"type":558,"tag":622,"props":2417,"children":2418},{"style":651},[2419],{"type":563,"value":2187},{"type":558,"tag":622,"props":2421,"children":2422},{"style":641},[2423],{"type":563,"value":717},{"type":558,"tag":622,"props":2425,"children":2426},{"style":641},[2427],{"type":563,"value":644},{"type":558,"tag":622,"props":2429,"children":2430},{"class":624,"line":885},[2431],{"type":558,"tag":622,"props":2432,"children":2433},{"style":681},[2434],{"type":563,"value":2263},{"type":558,"tag":622,"props":2436,"children":2437},{"class":624,"line":893},[2438],{"type":558,"tag":622,"props":2439,"children":2440},{"style":641},[2441],{"type":563,"value":693},{"type":558,"tag":622,"props":2443,"children":2444},{"class":624,"line":1103},[2445],{"type":558,"tag":622,"props":2446,"children":2447},{"style":641},[2448],{"type":563,"value":747},{"type":558,"tag":559,"props":2450,"children":2451},{},[2452],{"type":563,"value":2453},"这样，每个类都只依赖于它们需要的接口，不再强迫实现不必要的方法。接口隔离原则的目标是使接口更具体，更贴近类的实际需求，从而提高系统的灵活性和可维护性。",{"type":558,"tag":600,"props":2455,"children":2457},{"id":2456},"依赖反转原则",[2458],{"type":563,"value":2456},{"type":558,"tag":559,"props":2460,"children":2461},{},[2462],{"type":563,"value":2463},"依赖反转原则（Dependency Inversion Principle，DIP） 是 SOLID 原则之一，它强调高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。",{"type":558,"tag":559,"props":2465,"children":2466},{},[2467],{"type":563,"value":2468},"举例说明，考虑一个简单的报告生成系统，有一个高层模块 ReportGenerator 负责生成报告：",{"type":558,"tag":611,"props":2470,"children":2472},{"className":613,"code":2471,"language":615,"meta":552,"style":552},"// 不遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor() {\n    this.pdfGenerator = new PDFGenerator(); // 依赖于具体的 PDF 生成器\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.pdfGenerator.generatePDF();\n  }\n}\n\nclass PDFGenerator {\n  generatePDF() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n",[2473],{"type":558,"tag":618,"props":2474,"children":2475},{"__ignoreMap":552},[2476,2484,2500,2515,2555,2562,2569,2585,2593,2622,2629,2636,2643,2658,2674,2682,2689],{"type":558,"tag":622,"props":2477,"children":2478},{"class":624,"line":625},[2479],{"type":558,"tag":622,"props":2480,"children":2481},{"style":681},[2482],{"type":563,"value":2483},"// 不遵循依赖反转原则的设计\n",{"type":558,"tag":622,"props":2485,"children":2486},{"class":624,"line":647},[2487,2491,2496],{"type":558,"tag":622,"props":2488,"children":2489},{"style":629},[2490],{"type":563,"value":632},{"type":558,"tag":622,"props":2492,"children":2493},{"style":635},[2494],{"type":563,"value":2495}," ReportGenerator",{"type":558,"tag":622,"props":2497,"children":2498},{"style":641},[2499],{"type":563,"value":644},{"type":558,"tag":622,"props":2501,"children":2502},{"class":624,"line":677},[2503,2507,2511],{"type":558,"tag":622,"props":2504,"children":2505},{"style":629},[2506],{"type":563,"value":949},{"type":558,"tag":622,"props":2508,"children":2509},{"style":641},[2510],{"type":563,"value":717},{"type":558,"tag":622,"props":2512,"children":2513},{"style":641},[2514],{"type":563,"value":644},{"type":558,"tag":622,"props":2516,"children":2517},{"class":624,"line":687},[2518,2522,2526,2531,2535,2540,2545,2550],{"type":558,"tag":622,"props":2519,"children":2520},{"style":972},[2521],{"type":563,"value":975},{"type":558,"tag":622,"props":2523,"children":2524},{"style":641},[2525],{"type":563,"value":980},{"type":558,"tag":622,"props":2527,"children":2528},{"style":662},[2529],{"type":563,"value":2530},"pdfGenerator",{"type":558,"tag":622,"props":2532,"children":2533},{"style":641},[2534],{"type":563,"value":989},{"type":558,"tag":622,"props":2536,"children":2537},{"style":629},[2538],{"type":563,"value":2539}," new",{"type":558,"tag":622,"props":2541,"children":2542},{"style":651},[2543],{"type":563,"value":2544}," PDFGenerator",{"type":558,"tag":622,"props":2546,"children":2547},{"style":641},[2548],{"type":563,"value":2549},"();",{"type":558,"tag":622,"props":2551,"children":2552},{"style":681},[2553],{"type":563,"value":2554}," // 依赖于具体的 PDF 生成器\n",{"type":558,"tag":622,"props":2556,"children":2557},{"class":624,"line":696},[2558],{"type":558,"tag":622,"props":2559,"children":2560},{"style":641},[2561],{"type":563,"value":693},{"type":558,"tag":622,"props":2563,"children":2564},{"class":624,"line":706},[2565],{"type":558,"tag":622,"props":2566,"children":2567},{"emptyLinePlaceholder":700},[2568],{"type":563,"value":703},{"type":558,"tag":622,"props":2570,"children":2571},{"class":624,"line":724},[2572,2577,2581],{"type":558,"tag":622,"props":2573,"children":2574},{"style":651},[2575],{"type":563,"value":2576},"  generateReport",{"type":558,"tag":622,"props":2578,"children":2579},{"style":641},[2580],{"type":563,"value":717},{"type":558,"tag":622,"props":2582,"children":2583},{"style":641},[2584],{"type":563,"value":644},{"type":558,"tag":622,"props":2586,"children":2587},{"class":624,"line":733},[2588],{"type":558,"tag":622,"props":2589,"children":2590},{"style":681},[2591],{"type":563,"value":2592},"    // 生成报告的逻辑\n",{"type":558,"tag":622,"props":2594,"children":2595},{"class":624,"line":741},[2596,2600,2604,2608,2612,2617],{"type":558,"tag":622,"props":2597,"children":2598},{"style":972},[2599],{"type":563,"value":975},{"type":558,"tag":622,"props":2601,"children":2602},{"style":641},[2603],{"type":563,"value":980},{"type":558,"tag":622,"props":2605,"children":2606},{"style":662},[2607],{"type":563,"value":2530},{"type":558,"tag":622,"props":2609,"children":2610},{"style":641},[2611],{"type":563,"value":980},{"type":558,"tag":622,"props":2613,"children":2614},{"style":651},[2615],{"type":563,"value":2616},"generatePDF",{"type":558,"tag":622,"props":2618,"children":2619},{"style":641},[2620],{"type":563,"value":2621},"();\n",{"type":558,"tag":622,"props":2623,"children":2624},{"class":624,"line":885},[2625],{"type":558,"tag":622,"props":2626,"children":2627},{"style":641},[2628],{"type":563,"value":693},{"type":558,"tag":622,"props":2630,"children":2631},{"class":624,"line":893},[2632],{"type":558,"tag":622,"props":2633,"children":2634},{"style":641},[2635],{"type":563,"value":747},{"type":558,"tag":622,"props":2637,"children":2638},{"class":624,"line":1103},[2639],{"type":558,"tag":622,"props":2640,"children":2641},{"emptyLinePlaceholder":700},[2642],{"type":563,"value":703},{"type":558,"tag":622,"props":2644,"children":2645},{"class":624,"line":1129},[2646,2650,2654],{"type":558,"tag":622,"props":2647,"children":2648},{"style":629},[2649],{"type":563,"value":632},{"type":558,"tag":622,"props":2651,"children":2652},{"style":635},[2653],{"type":563,"value":2544},{"type":558,"tag":622,"props":2655,"children":2656},{"style":641},[2657],{"type":563,"value":644},{"type":558,"tag":622,"props":2659,"children":2660},{"class":624,"line":1145},[2661,2666,2670],{"type":558,"tag":622,"props":2662,"children":2663},{"style":651},[2664],{"type":563,"value":2665},"  generatePDF",{"type":558,"tag":622,"props":2667,"children":2668},{"style":641},[2669],{"type":563,"value":717},{"type":558,"tag":622,"props":2671,"children":2672},{"style":641},[2673],{"type":563,"value":644},{"type":558,"tag":622,"props":2675,"children":2676},{"class":624,"line":1182},[2677],{"type":558,"tag":622,"props":2678,"children":2679},{"style":681},[2680],{"type":563,"value":2681},"    // 具体的 PDF 生成逻辑\n",{"type":558,"tag":622,"props":2683,"children":2684},{"class":624,"line":1190},[2685],{"type":558,"tag":622,"props":2686,"children":2687},{"style":641},[2688],{"type":563,"value":693},{"type":558,"tag":622,"props":2690,"children":2691},{"class":624,"line":1198},[2692],{"type":558,"tag":622,"props":2693,"children":2694},{"style":641},[2695],{"type":563,"value":747},{"type":558,"tag":559,"props":2697,"children":2698},{},[2699],{"type":563,"value":2700},"在这个设计中，ReportGenerator 直接依赖于具体的 PDFGenerator 类，这违反了依赖反转原则。如果我们想使用其他类型的报告生成器，例如 HTMLGenerator，就需要修改 ReportGenerator 类。",{"type":558,"tag":559,"props":2702,"children":2703},{},[2704],{"type":563,"value":2705},"为了符合依赖反转原则，我们应该通过抽象来解耦高层和低层模块：",{"type":558,"tag":611,"props":2707,"children":2709},{"className":613,"code":2708,"language":615,"meta":552,"style":552},"// 遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor(generator) {\n    this.generator = generator; // 依赖于抽象的报告生成器接口\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.generator.generate();\n  }\n}\n\nclass PDFGenerator {\n  generate() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n\nclass HTMLGenerator {\n  generate() {\n    // 具体的 HTML 生成逻辑\n  }\n}\n",[2710],{"type":558,"tag":618,"props":2711,"children":2712},{"__ignoreMap":552},[2713,2721,2736,2760,2794,2801,2808,2823,2830,2858,2865,2872,2879,2894,2910,2917,2924,2931,2938,2954,2969,2977,2984],{"type":558,"tag":622,"props":2714,"children":2715},{"class":624,"line":625},[2716],{"type":558,"tag":622,"props":2717,"children":2718},{"style":681},[2719],{"type":563,"value":2720},"// 遵循依赖反转原则的设计\n",{"type":558,"tag":622,"props":2722,"children":2723},{"class":624,"line":647},[2724,2728,2732],{"type":558,"tag":622,"props":2725,"children":2726},{"style":629},[2727],{"type":563,"value":632},{"type":558,"tag":622,"props":2729,"children":2730},{"style":635},[2731],{"type":563,"value":2495},{"type":558,"tag":622,"props":2733,"children":2734},{"style":641},[2735],{"type":563,"value":644},{"type":558,"tag":622,"props":2737,"children":2738},{"class":624,"line":677},[2739,2743,2747,2752,2756],{"type":558,"tag":622,"props":2740,"children":2741},{"style":629},[2742],{"type":563,"value":949},{"type":558,"tag":622,"props":2744,"children":2745},{"style":641},[2746],{"type":563,"value":659},{"type":558,"tag":622,"props":2748,"children":2749},{"style":662},[2750],{"type":563,"value":2751},"generator",{"type":558,"tag":622,"props":2753,"children":2754},{"style":641},[2755],{"type":563,"value":670},{"type":558,"tag":622,"props":2757,"children":2758},{"style":641},[2759],{"type":563,"value":644},{"type":558,"tag":622,"props":2761,"children":2762},{"class":624,"line":687},[2763,2767,2771,2775,2779,2784,2789],{"type":558,"tag":622,"props":2764,"children":2765},{"style":972},[2766],{"type":563,"value":975},{"type":558,"tag":622,"props":2768,"children":2769},{"style":641},[2770],{"type":563,"value":980},{"type":558,"tag":622,"props":2772,"children":2773},{"style":662},[2774],{"type":563,"value":2751},{"type":558,"tag":622,"props":2776,"children":2777},{"style":641},[2778],{"type":563,"value":989},{"type":558,"tag":622,"props":2780,"children":2781},{"style":662},[2782],{"type":563,"value":2783}," generator",{"type":558,"tag":622,"props":2785,"children":2786},{"style":641},[2787],{"type":563,"value":2788},";",{"type":558,"tag":622,"props":2790,"children":2791},{"style":681},[2792],{"type":563,"value":2793}," // 依赖于抽象的报告生成器接口\n",{"type":558,"tag":622,"props":2795,"children":2796},{"class":624,"line":696},[2797],{"type":558,"tag":622,"props":2798,"children":2799},{"style":641},[2800],{"type":563,"value":693},{"type":558,"tag":622,"props":2802,"children":2803},{"class":624,"line":706},[2804],{"type":558,"tag":622,"props":2805,"children":2806},{"emptyLinePlaceholder":700},[2807],{"type":563,"value":703},{"type":558,"tag":622,"props":2809,"children":2810},{"class":624,"line":724},[2811,2815,2819],{"type":558,"tag":622,"props":2812,"children":2813},{"style":651},[2814],{"type":563,"value":2576},{"type":558,"tag":622,"props":2816,"children":2817},{"style":641},[2818],{"type":563,"value":717},{"type":558,"tag":622,"props":2820,"children":2821},{"style":641},[2822],{"type":563,"value":644},{"type":558,"tag":622,"props":2824,"children":2825},{"class":624,"line":733},[2826],{"type":558,"tag":622,"props":2827,"children":2828},{"style":681},[2829],{"type":563,"value":2592},{"type":558,"tag":622,"props":2831,"children":2832},{"class":624,"line":741},[2833,2837,2841,2845,2849,2854],{"type":558,"tag":622,"props":2834,"children":2835},{"style":972},[2836],{"type":563,"value":975},{"type":558,"tag":622,"props":2838,"children":2839},{"style":641},[2840],{"type":563,"value":980},{"type":558,"tag":622,"props":2842,"children":2843},{"style":662},[2844],{"type":563,"value":2751},{"type":558,"tag":622,"props":2846,"children":2847},{"style":641},[2848],{"type":563,"value":980},{"type":558,"tag":622,"props":2850,"children":2851},{"style":651},[2852],{"type":563,"value":2853},"generate",{"type":558,"tag":622,"props":2855,"children":2856},{"style":641},[2857],{"type":563,"value":2621},{"type":558,"tag":622,"props":2859,"children":2860},{"class":624,"line":885},[2861],{"type":558,"tag":622,"props":2862,"children":2863},{"style":641},[2864],{"type":563,"value":693},{"type":558,"tag":622,"props":2866,"children":2867},{"class":624,"line":893},[2868],{"type":558,"tag":622,"props":2869,"children":2870},{"style":641},[2871],{"type":563,"value":747},{"type":558,"tag":622,"props":2873,"children":2874},{"class":624,"line":1103},[2875],{"type":558,"tag":622,"props":2876,"children":2877},{"emptyLinePlaceholder":700},[2878],{"type":563,"value":703},{"type":558,"tag":622,"props":2880,"children":2881},{"class":624,"line":1129},[2882,2886,2890],{"type":558,"tag":622,"props":2883,"children":2884},{"style":629},[2885],{"type":563,"value":632},{"type":558,"tag":622,"props":2887,"children":2888},{"style":635},[2889],{"type":563,"value":2544},{"type":558,"tag":622,"props":2891,"children":2892},{"style":641},[2893],{"type":563,"value":644},{"type":558,"tag":622,"props":2895,"children":2896},{"class":624,"line":1145},[2897,2902,2906],{"type":558,"tag":622,"props":2898,"children":2899},{"style":651},[2900],{"type":563,"value":2901},"  generate",{"type":558,"tag":622,"props":2903,"children":2904},{"style":641},[2905],{"type":563,"value":717},{"type":558,"tag":622,"props":2907,"children":2908},{"style":641},[2909],{"type":563,"value":644},{"type":558,"tag":622,"props":2911,"children":2912},{"class":624,"line":1182},[2913],{"type":558,"tag":622,"props":2914,"children":2915},{"style":681},[2916],{"type":563,"value":2681},{"type":558,"tag":622,"props":2918,"children":2919},{"class":624,"line":1190},[2920],{"type":558,"tag":622,"props":2921,"children":2922},{"style":641},[2923],{"type":563,"value":693},{"type":558,"tag":622,"props":2925,"children":2926},{"class":624,"line":1198},[2927],{"type":558,"tag":622,"props":2928,"children":2929},{"style":641},[2930],{"type":563,"value":747},{"type":558,"tag":622,"props":2932,"children":2933},{"class":624,"line":1206},[2934],{"type":558,"tag":622,"props":2935,"children":2936},{"emptyLinePlaceholder":700},[2937],{"type":563,"value":703},{"type":558,"tag":622,"props":2939,"children":2940},{"class":624,"line":1231},[2941,2945,2950],{"type":558,"tag":622,"props":2942,"children":2943},{"style":629},[2944],{"type":563,"value":632},{"type":558,"tag":622,"props":2946,"children":2947},{"style":635},[2948],{"type":563,"value":2949}," HTMLGenerator",{"type":558,"tag":622,"props":2951,"children":2952},{"style":641},[2953],{"type":563,"value":644},{"type":558,"tag":622,"props":2955,"children":2956},{"class":624,"line":1247},[2957,2961,2965],{"type":558,"tag":622,"props":2958,"children":2959},{"style":651},[2960],{"type":563,"value":2901},{"type":558,"tag":622,"props":2962,"children":2963},{"style":641},[2964],{"type":563,"value":717},{"type":558,"tag":622,"props":2966,"children":2967},{"style":641},[2968],{"type":563,"value":644},{"type":558,"tag":622,"props":2970,"children":2971},{"class":624,"line":1284},[2972],{"type":558,"tag":622,"props":2973,"children":2974},{"style":681},[2975],{"type":563,"value":2976},"    // 具体的 HTML 生成逻辑\n",{"type":558,"tag":622,"props":2978,"children":2979},{"class":624,"line":1292},[2980],{"type":558,"tag":622,"props":2981,"children":2982},{"style":641},[2983],{"type":563,"value":693},{"type":558,"tag":622,"props":2985,"children":2987},{"class":624,"line":2986},23,[2988],{"type":558,"tag":622,"props":2989,"children":2990},{"style":641},[2991],{"type":563,"value":747},{"type":558,"tag":559,"props":2993,"children":2994},{},[2995],{"type":563,"value":2996},"现在，ReportGenerator 不再直接依赖于具体的实现，而是依赖于抽象的报告生成器接口。这使得我们可以轻松地扩展系统，例如添加新的报告生成器，而不需要修改 ReportGenerator 类。这样的设计更加灵活，符合依赖反转原则。",{"type":558,"tag":2998,"props":2999,"children":3000},"style",{},[3001],{"type":563,"value":3002},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":552,"searchDepth":696,"depth":696,"links":3004},[3005,3006,3007,3008,3009],{"id":602,"depth":647,"text":602},{"id":906,"depth":647,"text":906},{"id":1512,"depth":647,"text":1512},{"id":2093,"depth":647,"text":2093},{"id":2456,"depth":647,"text":2456},"markdown","content:4.design-mode:1.thoughts-principles.md","content","4.design-mode/1.thoughts-principles.md","md",[3016,3017],{"_path":527,"title":526,"description":552},{"_path":544,"title":543,"description":552},1715008128435]