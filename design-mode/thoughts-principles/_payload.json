[{"data":1,"prerenderedAt":2993},["Reactive",2],{"navigation":3,"/design-mode/thoughts-principles":524,"/design-mode/thoughts-principles-surround":2990},[4,269,298,492,500,509],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":491},"代码考核","/code-assessment",[302,391,484],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,331,347,375,382,385,388],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328],{"title":311,"_path":312},"ajax","/code-assessment/source/native-api/ajax",{"title":314,"_path":315},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":317,"_path":318},"new 操作符","/code-assessment/source/native-api/new",{"title":320,"_path":321},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":323,"_path":324},"定时器","/code-assessment/source/native-api/timer",{"title":326,"_path":327},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":329,"_path":330},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":332,"_path":333,"children":334},"函数 Function","/code-assessment/source/function",[335,338,341,344],{"title":336,"_path":337},"函数防抖","/code-assessment/source/function/debounce",{"title":339,"_path":340},"函数节流","/code-assessment/source/function/throttle",{"title":342,"_path":343},"函数柯理化","/code-assessment/source/function/curry",{"title":345,"_path":346},"函数睡眠","/code-assessment/source/function/sleep",{"title":348,"_path":349,"children":350},"数组 Array","/code-assessment/source/array",[351,354,357,360,363,366,369,372],{"title":352,"_path":353},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":355,"_path":356},"数组扁平化","/code-assessment/source/array/flat",{"title":358,"_path":359},"原型方法","/code-assessment/source/array/prototype-method",{"title":361,"_path":362},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":364,"_path":365},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":367,"_path":368},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":370,"_path":371},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":373,"_path":374},"二维数组","/code-assessment/source/array/2d-array",{"title":376,"_path":377,"children":378},"字符串 String","/code-assessment/source/string",[379],{"title":380,"_path":381},"repeat()","/code-assessment/source/string/repeat",{"title":383,"_path":384},"获取通用类型","/code-assessment/source/get-generic-type",{"title":386,"_path":387},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":389,"_path":390},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":392,"_path":393,"children":394},"业务场景","/code-assessment/scene",[395,420,430,433,436,439,442,445,448,451,454,457,460,463,466,469,472,475,478,481],{"title":396,"_path":397,"children":398},"Promise","/code-assessment/scene/promise",[399,402,405,408,411,414,417],{"title":400,"_path":401},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":403,"_path":404},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":406,"_path":407},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":409,"_path":410},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":412,"_path":413},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":415,"_path":416},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":418,"_path":419},"promise 每隔 1s 输出","/code-assessment/scene/promise/promise-output-every-1s",{"title":421,"_path":422,"children":423},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[424,427],{"title":425,"_path":426},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":428,"_path":429},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":431,"_path":432},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":434,"_path":435},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":437,"_path":438},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":440,"_path":441},"倒计时","/code-assessment/scene/countdown",{"title":443,"_path":444},"日期格式化","/code-assessment/scene/date-format",{"title":446,"_path":447},"实现前端路由","/code-assessment/scene/frontend-route",{"title":449,"_path":450},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":452,"_path":453},"lodash.get","/code-assessment/scene/lodash-get",{"title":455,"_path":456},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":458,"_path":459},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":461,"_path":462},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":464,"_path":465},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":467,"_path":468},"随机数","/code-assessment/scene/random-number",{"title":470,"_path":471},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":473,"_path":474},"sku 算法实现","/code-assessment/scene/sku",{"title":476,"_path":477},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":479,"_path":480},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":482,"_path":483},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":485,"_path":486,"children":487},"Ts 类型挑战","/code-assessment/type-challeges",[488],{"title":489,"_path":490},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":493,"_path":494,"children":495,"icon":499},"项目","/project",[496],{"title":497,"_path":498},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":501,"_path":502,"children":503,"icon":508},"设计模式","/design-mode",[504,505],{"title":501,"_path":502},{"title":506,"_path":507},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":510,"_path":511,"children":512,"icon":523},"后端语言","/backend-languages",[513],{"title":514,"_path":515,"children":516},"Python","/backend-languages/python",[517,520],{"title":518,"_path":519},"基础","/backend-languages/python/base",{"title":521,"_path":522},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":507,"_dir":525,"_draft":526,"_partial":526,"_locale":527,"title":506,"description":528,"body":529,"_type":2985,"_id":2986,"_source":2987,"_file":2988,"_extension":2989},"design-mode",false,"","SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。这些原则由 Robert C. Martin 等人提出，它们包括以下五个原则：",{"type":530,"children":531,"toc":2978},"root",[532,539,569,574,580,585,723,728,742,747,874,879,884,889,894,1273,1278,1283,1475,1480,1485,1490,1495,1500,1505,1835,1840,2056,2061,2066,2071,2076,2081,2086,2290,2295,2300,2424,2429,2434,2439,2444,2671,2676,2681,2967,2972],{"type":533,"tag":534,"props":535,"children":536},"element","p",{},[537],{"type":538,"value":528},"text",{"type":533,"tag":540,"props":541,"children":542},"ul",{},[543,549,554,559,564],{"type":533,"tag":544,"props":545,"children":546},"li",{},[547],{"type":538,"value":548},"单一职责原则（Single Responsibility Principle，SRP）",{"type":533,"tag":544,"props":550,"children":551},{},[552],{"type":538,"value":553},"开放/封闭原则（Open/Closed Principle，OCP）",{"type":533,"tag":544,"props":555,"children":556},{},[557],{"type":538,"value":558},"里氏替换原则（Liskov Substitution Principle，LSP）",{"type":533,"tag":544,"props":560,"children":561},{},[562],{"type":538,"value":563},"接口隔离原则（Interface Segregation Principle，ISP）",{"type":533,"tag":544,"props":565,"children":566},{},[567],{"type":538,"value":568},"依赖反转原则（Dependency Inversion Principle，DIP）",{"type":533,"tag":534,"props":570,"children":571},{},[572],{"type":538,"value":573},"这些原则共同促使开发者创建具有高内聚、低耦合、易扩展和易维护性的软件系统。遵循这些原则有助于构建更健壮的面向对象系统，提高代码质量和可维护性。",{"type":533,"tag":575,"props":576,"children":578},"h2",{"id":577},"单一职责原则",[579],{"type":538,"value":577},{"type":533,"tag":534,"props":581,"children":582},{},[583],{"type":538,"value":584},"单一职责原则（Single Responsibility Principle，SRP）要求一个类或者模块只负责完成一个职责（或者功能）。 假设我们有一个简单的厨师类，它负责烹饪和洗碗两个职责：",{"type":533,"tag":586,"props":587,"children":591},"pre",{"className":588,"code":589,"language":590,"meta":527,"style":527},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n","js",[592],{"type":533,"tag":593,"props":594,"children":595},"code",{"__ignoreMap":527},[596,620,650,660,669,679,697,706,714],{"type":533,"tag":597,"props":598,"children":601},"span",{"class":599,"line":600},"line",1,[602,608,614],{"type":533,"tag":597,"props":603,"children":605},{"style":604},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[606],{"type":538,"value":607},"class",{"type":533,"tag":597,"props":609,"children":611},{"style":610},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[612],{"type":538,"value":613}," Chef",{"type":533,"tag":597,"props":615,"children":617},{"style":616},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[618],{"type":538,"value":619}," {\n",{"type":533,"tag":597,"props":621,"children":623},{"class":599,"line":622},2,[624,630,635,641,646],{"type":533,"tag":597,"props":625,"children":627},{"style":626},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[628],{"type":538,"value":629},"  cookDish",{"type":533,"tag":597,"props":631,"children":632},{"style":616},[633],{"type":538,"value":634},"(",{"type":533,"tag":597,"props":636,"children":638},{"style":637},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[639],{"type":538,"value":640},"dish",{"type":533,"tag":597,"props":642,"children":643},{"style":616},[644],{"type":538,"value":645},")",{"type":533,"tag":597,"props":647,"children":648},{"style":616},[649],{"type":538,"value":619},{"type":533,"tag":597,"props":651,"children":653},{"class":599,"line":652},3,[654],{"type":533,"tag":597,"props":655,"children":657},{"style":656},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[658],{"type":538,"value":659},"    // 烹饪菜品的具体实现\n",{"type":533,"tag":597,"props":661,"children":663},{"class":599,"line":662},4,[664],{"type":533,"tag":597,"props":665,"children":666},{"style":616},[667],{"type":538,"value":668},"  }\n",{"type":533,"tag":597,"props":670,"children":672},{"class":599,"line":671},5,[673],{"type":533,"tag":597,"props":674,"children":676},{"emptyLinePlaceholder":675},true,[677],{"type":538,"value":678},"\n",{"type":533,"tag":597,"props":680,"children":682},{"class":599,"line":681},6,[683,688,693],{"type":533,"tag":597,"props":684,"children":685},{"style":626},[686],{"type":538,"value":687},"  washDishes",{"type":533,"tag":597,"props":689,"children":690},{"style":616},[691],{"type":538,"value":692},"()",{"type":533,"tag":597,"props":694,"children":695},{"style":616},[696],{"type":538,"value":619},{"type":533,"tag":597,"props":698,"children":700},{"class":599,"line":699},7,[701],{"type":533,"tag":597,"props":702,"children":703},{"style":656},[704],{"type":538,"value":705},"    // 洗碗的具体实现\n",{"type":533,"tag":597,"props":707,"children":709},{"class":599,"line":708},8,[710],{"type":533,"tag":597,"props":711,"children":712},{"style":616},[713],{"type":538,"value":668},{"type":533,"tag":597,"props":715,"children":717},{"class":599,"line":716},9,[718],{"type":533,"tag":597,"props":719,"children":720},{"style":616},[721],{"type":538,"value":722},"}\n",{"type":533,"tag":534,"props":724,"children":725},{},[726],{"type":538,"value":727},"这个类违反了单一职责原则，因为它有两个职责：烹饪和洗碗。这样的设计可能导致以下问题：",{"type":533,"tag":729,"props":730,"children":731},"ol",{},[732,737],{"type":533,"tag":544,"props":733,"children":734},{},[735],{"type":538,"value":736},"如果厨师的烹饪逻辑变化，需要修改 cookDish 方法，这可能会影响洗碗的部分。",{"type":533,"tag":544,"props":738,"children":739},{},[740],{"type":538,"value":741},"如果洗碗的逻辑变化，需要修改 washDishes 方法，这可能会影响烹饪的部分。",{"type":533,"tag":534,"props":743,"children":744},{},[745],{"type":538,"value":746},"按照单一职责原则，我们应该将这两个职责分开，分别由不同的类负责：",{"type":533,"tag":586,"props":748,"children":750},{"className":588,"code":749,"language":590,"meta":527,"style":527},"class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n}\n\nclass Dishwasher {\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n",[751],{"type":533,"tag":593,"props":752,"children":753},{"__ignoreMap":527},[754,769,792,799,806,813,820,836,851,858,866],{"type":533,"tag":597,"props":755,"children":756},{"class":599,"line":600},[757,761,765],{"type":533,"tag":597,"props":758,"children":759},{"style":604},[760],{"type":538,"value":607},{"type":533,"tag":597,"props":762,"children":763},{"style":610},[764],{"type":538,"value":613},{"type":533,"tag":597,"props":766,"children":767},{"style":616},[768],{"type":538,"value":619},{"type":533,"tag":597,"props":770,"children":771},{"class":599,"line":622},[772,776,780,784,788],{"type":533,"tag":597,"props":773,"children":774},{"style":626},[775],{"type":538,"value":629},{"type":533,"tag":597,"props":777,"children":778},{"style":616},[779],{"type":538,"value":634},{"type":533,"tag":597,"props":781,"children":782},{"style":637},[783],{"type":538,"value":640},{"type":533,"tag":597,"props":785,"children":786},{"style":616},[787],{"type":538,"value":645},{"type":533,"tag":597,"props":789,"children":790},{"style":616},[791],{"type":538,"value":619},{"type":533,"tag":597,"props":793,"children":794},{"class":599,"line":652},[795],{"type":533,"tag":597,"props":796,"children":797},{"style":656},[798],{"type":538,"value":659},{"type":533,"tag":597,"props":800,"children":801},{"class":599,"line":662},[802],{"type":533,"tag":597,"props":803,"children":804},{"style":616},[805],{"type":538,"value":668},{"type":533,"tag":597,"props":807,"children":808},{"class":599,"line":671},[809],{"type":533,"tag":597,"props":810,"children":811},{"style":616},[812],{"type":538,"value":722},{"type":533,"tag":597,"props":814,"children":815},{"class":599,"line":681},[816],{"type":533,"tag":597,"props":817,"children":818},{"emptyLinePlaceholder":675},[819],{"type":538,"value":678},{"type":533,"tag":597,"props":821,"children":822},{"class":599,"line":699},[823,827,832],{"type":533,"tag":597,"props":824,"children":825},{"style":604},[826],{"type":538,"value":607},{"type":533,"tag":597,"props":828,"children":829},{"style":610},[830],{"type":538,"value":831}," Dishwasher",{"type":533,"tag":597,"props":833,"children":834},{"style":616},[835],{"type":538,"value":619},{"type":533,"tag":597,"props":837,"children":838},{"class":599,"line":708},[839,843,847],{"type":533,"tag":597,"props":840,"children":841},{"style":626},[842],{"type":538,"value":687},{"type":533,"tag":597,"props":844,"children":845},{"style":616},[846],{"type":538,"value":692},{"type":533,"tag":597,"props":848,"children":849},{"style":616},[850],{"type":538,"value":619},{"type":533,"tag":597,"props":852,"children":853},{"class":599,"line":716},[854],{"type":533,"tag":597,"props":855,"children":856},{"style":656},[857],{"type":538,"value":705},{"type":533,"tag":597,"props":859,"children":861},{"class":599,"line":860},10,[862],{"type":533,"tag":597,"props":863,"children":864},{"style":616},[865],{"type":538,"value":668},{"type":533,"tag":597,"props":867,"children":869},{"class":599,"line":868},11,[870],{"type":533,"tag":597,"props":871,"children":872},{"style":616},[873],{"type":538,"value":722},{"type":533,"tag":534,"props":875,"children":876},{},[877],{"type":538,"value":878},"这样，Chef 类专注于烹饪，而 Dishwasher 类专注于洗碗。每个类都有一个单一的职责，使得代码更清晰、易于理解，并且在未来的变更中更具弹性。",{"type":533,"tag":575,"props":880,"children":882},{"id":881},"开放封闭原则",[883],{"type":538,"value":881},{"type":533,"tag":534,"props":885,"children":886},{},[887],{"type":538,"value":888},"开关封闭原则（Open/Closed Principle，OCP）要求软件实体（例如类、模块、函数等）应该对扩展开放，对修改关闭。简而言之，一个模块在扩展新功能时不应该修改原有的代码，而是通过添加新的代码来实现扩展。",{"type":533,"tag":534,"props":890,"children":891},{},[892],{"type":538,"value":893},"考虑一个动物园的场景。我们有一些动物，每个动物都会发出叫声。初始设计如下：",{"type":533,"tag":586,"props":895,"children":897},{"className":588,"code":896,"language":590,"meta":527,"style":527},"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    // 默认的叫声\n    console.log(\"Some generic animal sound\");\n  }\n}\n\nclass Lion extends Animal {\n  makeSound() {\n    console.log(\"Roar!\");\n  }\n}\n\nclass Elephant extends Animal {\n  makeSound() {\n    console.log(\"Trumpet!\");\n  }\n}\n",[898],{"type":533,"tag":593,"props":899,"children":900},{"__ignoreMap":527},[901,917,942,975,982,989,1005,1013,1055,1062,1069,1076,1102,1118,1155,1163,1171,1179,1204,1220,1257,1265],{"type":533,"tag":597,"props":902,"children":903},{"class":599,"line":600},[904,908,913],{"type":533,"tag":597,"props":905,"children":906},{"style":604},[907],{"type":538,"value":607},{"type":533,"tag":597,"props":909,"children":910},{"style":610},[911],{"type":538,"value":912}," Animal",{"type":533,"tag":597,"props":914,"children":915},{"style":616},[916],{"type":538,"value":619},{"type":533,"tag":597,"props":918,"children":919},{"class":599,"line":622},[920,925,929,934,938],{"type":533,"tag":597,"props":921,"children":922},{"style":604},[923],{"type":538,"value":924},"  constructor",{"type":533,"tag":597,"props":926,"children":927},{"style":616},[928],{"type":538,"value":634},{"type":533,"tag":597,"props":930,"children":931},{"style":637},[932],{"type":538,"value":933},"name",{"type":533,"tag":597,"props":935,"children":936},{"style":616},[937],{"type":538,"value":645},{"type":533,"tag":597,"props":939,"children":940},{"style":616},[941],{"type":538,"value":619},{"type":533,"tag":597,"props":943,"children":944},{"class":599,"line":652},[945,951,956,960,965,970],{"type":533,"tag":597,"props":946,"children":948},{"style":947},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[949],{"type":538,"value":950},"    this",{"type":533,"tag":597,"props":952,"children":953},{"style":616},[954],{"type":538,"value":955},".",{"type":533,"tag":597,"props":957,"children":958},{"style":637},[959],{"type":538,"value":933},{"type":533,"tag":597,"props":961,"children":962},{"style":616},[963],{"type":538,"value":964}," =",{"type":533,"tag":597,"props":966,"children":967},{"style":637},[968],{"type":538,"value":969}," name",{"type":533,"tag":597,"props":971,"children":972},{"style":616},[973],{"type":538,"value":974},";\n",{"type":533,"tag":597,"props":976,"children":977},{"class":599,"line":662},[978],{"type":533,"tag":597,"props":979,"children":980},{"style":616},[981],{"type":538,"value":668},{"type":533,"tag":597,"props":983,"children":984},{"class":599,"line":671},[985],{"type":533,"tag":597,"props":986,"children":987},{"emptyLinePlaceholder":675},[988],{"type":538,"value":678},{"type":533,"tag":597,"props":990,"children":991},{"class":599,"line":681},[992,997,1001],{"type":533,"tag":597,"props":993,"children":994},{"style":626},[995],{"type":538,"value":996},"  makeSound",{"type":533,"tag":597,"props":998,"children":999},{"style":616},[1000],{"type":538,"value":692},{"type":533,"tag":597,"props":1002,"children":1003},{"style":616},[1004],{"type":538,"value":619},{"type":533,"tag":597,"props":1006,"children":1007},{"class":599,"line":699},[1008],{"type":533,"tag":597,"props":1009,"children":1010},{"style":656},[1011],{"type":538,"value":1012},"    // 默认的叫声\n",{"type":533,"tag":597,"props":1014,"children":1015},{"class":599,"line":708},[1016,1021,1025,1030,1034,1040,1046,1050],{"type":533,"tag":597,"props":1017,"children":1018},{"style":637},[1019],{"type":538,"value":1020},"    console",{"type":533,"tag":597,"props":1022,"children":1023},{"style":616},[1024],{"type":538,"value":955},{"type":533,"tag":597,"props":1026,"children":1027},{"style":626},[1028],{"type":538,"value":1029},"log",{"type":533,"tag":597,"props":1031,"children":1032},{"style":616},[1033],{"type":538,"value":634},{"type":533,"tag":597,"props":1035,"children":1037},{"style":1036},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1038],{"type":538,"value":1039},"\"",{"type":533,"tag":597,"props":1041,"children":1043},{"style":1042},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1044],{"type":538,"value":1045},"Some generic animal sound",{"type":533,"tag":597,"props":1047,"children":1048},{"style":1036},[1049],{"type":538,"value":1039},{"type":533,"tag":597,"props":1051,"children":1052},{"style":616},[1053],{"type":538,"value":1054},");\n",{"type":533,"tag":597,"props":1056,"children":1057},{"class":599,"line":716},[1058],{"type":533,"tag":597,"props":1059,"children":1060},{"style":616},[1061],{"type":538,"value":668},{"type":533,"tag":597,"props":1063,"children":1064},{"class":599,"line":860},[1065],{"type":533,"tag":597,"props":1066,"children":1067},{"style":616},[1068],{"type":538,"value":722},{"type":533,"tag":597,"props":1070,"children":1071},{"class":599,"line":868},[1072],{"type":533,"tag":597,"props":1073,"children":1074},{"emptyLinePlaceholder":675},[1075],{"type":538,"value":678},{"type":533,"tag":597,"props":1077,"children":1079},{"class":599,"line":1078},12,[1080,1084,1089,1094,1098],{"type":533,"tag":597,"props":1081,"children":1082},{"style":604},[1083],{"type":538,"value":607},{"type":533,"tag":597,"props":1085,"children":1086},{"style":610},[1087],{"type":538,"value":1088}," Lion",{"type":533,"tag":597,"props":1090,"children":1091},{"style":604},[1092],{"type":538,"value":1093}," extends",{"type":533,"tag":597,"props":1095,"children":1096},{"style":626},[1097],{"type":538,"value":912},{"type":533,"tag":597,"props":1099,"children":1100},{"style":616},[1101],{"type":538,"value":619},{"type":533,"tag":597,"props":1103,"children":1105},{"class":599,"line":1104},13,[1106,1110,1114],{"type":533,"tag":597,"props":1107,"children":1108},{"style":626},[1109],{"type":538,"value":996},{"type":533,"tag":597,"props":1111,"children":1112},{"style":616},[1113],{"type":538,"value":692},{"type":533,"tag":597,"props":1115,"children":1116},{"style":616},[1117],{"type":538,"value":619},{"type":533,"tag":597,"props":1119,"children":1121},{"class":599,"line":1120},14,[1122,1126,1130,1134,1138,1142,1147,1151],{"type":533,"tag":597,"props":1123,"children":1124},{"style":637},[1125],{"type":538,"value":1020},{"type":533,"tag":597,"props":1127,"children":1128},{"style":616},[1129],{"type":538,"value":955},{"type":533,"tag":597,"props":1131,"children":1132},{"style":626},[1133],{"type":538,"value":1029},{"type":533,"tag":597,"props":1135,"children":1136},{"style":616},[1137],{"type":538,"value":634},{"type":533,"tag":597,"props":1139,"children":1140},{"style":1036},[1141],{"type":538,"value":1039},{"type":533,"tag":597,"props":1143,"children":1144},{"style":1042},[1145],{"type":538,"value":1146},"Roar!",{"type":533,"tag":597,"props":1148,"children":1149},{"style":1036},[1150],{"type":538,"value":1039},{"type":533,"tag":597,"props":1152,"children":1153},{"style":616},[1154],{"type":538,"value":1054},{"type":533,"tag":597,"props":1156,"children":1158},{"class":599,"line":1157},15,[1159],{"type":533,"tag":597,"props":1160,"children":1161},{"style":616},[1162],{"type":538,"value":668},{"type":533,"tag":597,"props":1164,"children":1166},{"class":599,"line":1165},16,[1167],{"type":533,"tag":597,"props":1168,"children":1169},{"style":616},[1170],{"type":538,"value":722},{"type":533,"tag":597,"props":1172,"children":1174},{"class":599,"line":1173},17,[1175],{"type":533,"tag":597,"props":1176,"children":1177},{"emptyLinePlaceholder":675},[1178],{"type":538,"value":678},{"type":533,"tag":597,"props":1180,"children":1182},{"class":599,"line":1181},18,[1183,1187,1192,1196,1200],{"type":533,"tag":597,"props":1184,"children":1185},{"style":604},[1186],{"type":538,"value":607},{"type":533,"tag":597,"props":1188,"children":1189},{"style":610},[1190],{"type":538,"value":1191}," Elephant",{"type":533,"tag":597,"props":1193,"children":1194},{"style":604},[1195],{"type":538,"value":1093},{"type":533,"tag":597,"props":1197,"children":1198},{"style":626},[1199],{"type":538,"value":912},{"type":533,"tag":597,"props":1201,"children":1202},{"style":616},[1203],{"type":538,"value":619},{"type":533,"tag":597,"props":1205,"children":1207},{"class":599,"line":1206},19,[1208,1212,1216],{"type":533,"tag":597,"props":1209,"children":1210},{"style":626},[1211],{"type":538,"value":996},{"type":533,"tag":597,"props":1213,"children":1214},{"style":616},[1215],{"type":538,"value":692},{"type":533,"tag":597,"props":1217,"children":1218},{"style":616},[1219],{"type":538,"value":619},{"type":533,"tag":597,"props":1221,"children":1223},{"class":599,"line":1222},20,[1224,1228,1232,1236,1240,1244,1249,1253],{"type":533,"tag":597,"props":1225,"children":1226},{"style":637},[1227],{"type":538,"value":1020},{"type":533,"tag":597,"props":1229,"children":1230},{"style":616},[1231],{"type":538,"value":955},{"type":533,"tag":597,"props":1233,"children":1234},{"style":626},[1235],{"type":538,"value":1029},{"type":533,"tag":597,"props":1237,"children":1238},{"style":616},[1239],{"type":538,"value":634},{"type":533,"tag":597,"props":1241,"children":1242},{"style":1036},[1243],{"type":538,"value":1039},{"type":533,"tag":597,"props":1245,"children":1246},{"style":1042},[1247],{"type":538,"value":1248},"Trumpet!",{"type":533,"tag":597,"props":1250,"children":1251},{"style":1036},[1252],{"type":538,"value":1039},{"type":533,"tag":597,"props":1254,"children":1255},{"style":616},[1256],{"type":538,"value":1054},{"type":533,"tag":597,"props":1258,"children":1260},{"class":599,"line":1259},21,[1261],{"type":533,"tag":597,"props":1262,"children":1263},{"style":616},[1264],{"type":538,"value":668},{"type":533,"tag":597,"props":1266,"children":1268},{"class":599,"line":1267},22,[1269],{"type":533,"tag":597,"props":1270,"children":1271},{"style":616},[1272],{"type":538,"value":722},{"type":533,"tag":534,"props":1274,"children":1275},{},[1276],{"type":538,"value":1277},"在这个设计中，Animal 类是一个基类，而 Lion 和 Elephant 是它的子类。每个动物都有自己的叫声，通过重写 makeSound 方法来实现。",{"type":533,"tag":534,"props":1279,"children":1280},{},[1281],{"type":538,"value":1282},"现在，假设我们要添加一些新的动物，比如鹦鹉和狗，按照开放/封闭原则，我们应该扩展而不是修改现有的代码：",{"type":533,"tag":586,"props":1284,"children":1286},{"className":588,"code":1285,"language":590,"meta":527,"style":527},"class Parrot extends Animal {\n  makeSound() {\n    console.log(\"Squawk!\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Bark!\");\n  }\n}\n",[1287],{"type":533,"tag":593,"props":1288,"children":1289},{"__ignoreMap":527},[1290,1314,1329,1365,1372,1379,1386,1410,1425,1461,1468],{"type":533,"tag":597,"props":1291,"children":1292},{"class":599,"line":600},[1293,1297,1302,1306,1310],{"type":533,"tag":597,"props":1294,"children":1295},{"style":604},[1296],{"type":538,"value":607},{"type":533,"tag":597,"props":1298,"children":1299},{"style":610},[1300],{"type":538,"value":1301}," Parrot",{"type":533,"tag":597,"props":1303,"children":1304},{"style":604},[1305],{"type":538,"value":1093},{"type":533,"tag":597,"props":1307,"children":1308},{"style":626},[1309],{"type":538,"value":912},{"type":533,"tag":597,"props":1311,"children":1312},{"style":616},[1313],{"type":538,"value":619},{"type":533,"tag":597,"props":1315,"children":1316},{"class":599,"line":622},[1317,1321,1325],{"type":533,"tag":597,"props":1318,"children":1319},{"style":626},[1320],{"type":538,"value":996},{"type":533,"tag":597,"props":1322,"children":1323},{"style":616},[1324],{"type":538,"value":692},{"type":533,"tag":597,"props":1326,"children":1327},{"style":616},[1328],{"type":538,"value":619},{"type":533,"tag":597,"props":1330,"children":1331},{"class":599,"line":652},[1332,1336,1340,1344,1348,1352,1357,1361],{"type":533,"tag":597,"props":1333,"children":1334},{"style":637},[1335],{"type":538,"value":1020},{"type":533,"tag":597,"props":1337,"children":1338},{"style":616},[1339],{"type":538,"value":955},{"type":533,"tag":597,"props":1341,"children":1342},{"style":626},[1343],{"type":538,"value":1029},{"type":533,"tag":597,"props":1345,"children":1346},{"style":616},[1347],{"type":538,"value":634},{"type":533,"tag":597,"props":1349,"children":1350},{"style":1036},[1351],{"type":538,"value":1039},{"type":533,"tag":597,"props":1353,"children":1354},{"style":1042},[1355],{"type":538,"value":1356},"Squawk!",{"type":533,"tag":597,"props":1358,"children":1359},{"style":1036},[1360],{"type":538,"value":1039},{"type":533,"tag":597,"props":1362,"children":1363},{"style":616},[1364],{"type":538,"value":1054},{"type":533,"tag":597,"props":1366,"children":1367},{"class":599,"line":662},[1368],{"type":533,"tag":597,"props":1369,"children":1370},{"style":616},[1371],{"type":538,"value":668},{"type":533,"tag":597,"props":1373,"children":1374},{"class":599,"line":671},[1375],{"type":533,"tag":597,"props":1376,"children":1377},{"style":616},[1378],{"type":538,"value":722},{"type":533,"tag":597,"props":1380,"children":1381},{"class":599,"line":681},[1382],{"type":533,"tag":597,"props":1383,"children":1384},{"emptyLinePlaceholder":675},[1385],{"type":538,"value":678},{"type":533,"tag":597,"props":1387,"children":1388},{"class":599,"line":699},[1389,1393,1398,1402,1406],{"type":533,"tag":597,"props":1390,"children":1391},{"style":604},[1392],{"type":538,"value":607},{"type":533,"tag":597,"props":1394,"children":1395},{"style":610},[1396],{"type":538,"value":1397}," Dog",{"type":533,"tag":597,"props":1399,"children":1400},{"style":604},[1401],{"type":538,"value":1093},{"type":533,"tag":597,"props":1403,"children":1404},{"style":626},[1405],{"type":538,"value":912},{"type":533,"tag":597,"props":1407,"children":1408},{"style":616},[1409],{"type":538,"value":619},{"type":533,"tag":597,"props":1411,"children":1412},{"class":599,"line":708},[1413,1417,1421],{"type":533,"tag":597,"props":1414,"children":1415},{"style":626},[1416],{"type":538,"value":996},{"type":533,"tag":597,"props":1418,"children":1419},{"style":616},[1420],{"type":538,"value":692},{"type":533,"tag":597,"props":1422,"children":1423},{"style":616},[1424],{"type":538,"value":619},{"type":533,"tag":597,"props":1426,"children":1427},{"class":599,"line":716},[1428,1432,1436,1440,1444,1448,1453,1457],{"type":533,"tag":597,"props":1429,"children":1430},{"style":637},[1431],{"type":538,"value":1020},{"type":533,"tag":597,"props":1433,"children":1434},{"style":616},[1435],{"type":538,"value":955},{"type":533,"tag":597,"props":1437,"children":1438},{"style":626},[1439],{"type":538,"value":1029},{"type":533,"tag":597,"props":1441,"children":1442},{"style":616},[1443],{"type":538,"value":634},{"type":533,"tag":597,"props":1445,"children":1446},{"style":1036},[1447],{"type":538,"value":1039},{"type":533,"tag":597,"props":1449,"children":1450},{"style":1042},[1451],{"type":538,"value":1452},"Bark!",{"type":533,"tag":597,"props":1454,"children":1455},{"style":1036},[1456],{"type":538,"value":1039},{"type":533,"tag":597,"props":1458,"children":1459},{"style":616},[1460],{"type":538,"value":1054},{"type":533,"tag":597,"props":1462,"children":1463},{"class":599,"line":860},[1464],{"type":533,"tag":597,"props":1465,"children":1466},{"style":616},[1467],{"type":538,"value":668},{"type":533,"tag":597,"props":1469,"children":1470},{"class":599,"line":868},[1471],{"type":533,"tag":597,"props":1472,"children":1473},{"style":616},[1474],{"type":538,"value":722},{"type":533,"tag":534,"props":1476,"children":1477},{},[1478],{"type":538,"value":1479},"这样，我们通过扩展 Animal 类，而不是修改它，来添加新的功能（新的动物）。这符合开放/封闭原则，因为我们对于现有代码的修改是关闭的，我们只是通过扩展来引入新的功能。",{"type":533,"tag":534,"props":1481,"children":1482},{},[1483],{"type":538,"value":1484},"使用开放/封闭原则可以使代码更加稳定，降低对现有代码的影响，同时也更容易应对变化和扩展。",{"type":533,"tag":575,"props":1486,"children":1488},{"id":1487},"里式替换原则",[1489],{"type":538,"value":1487},{"type":533,"tag":534,"props":1491,"children":1492},{},[1493],{"type":538,"value":1494},"里氏替换原则（Liskov Substitution Principle，LSP） 是 SOLID 原则之一，它强调子类型（派生类或子类）必须能够替换掉它们的基类型（基类或父类）并出现在基类能够工作的任何地方，而不破坏程序的正确性。",{"type":533,"tag":534,"props":1496,"children":1497},{},[1498],{"type":538,"value":1499},"通俗地说，如果一个类是基类的子类，那么在任何需要基类的地方，都可以使用这个子类而不产生错误。子类应该保持基类的行为，并且可以扩展或修改基类的行为，但不应该破坏基类原有的约定。",{"type":533,"tag":534,"props":1501,"children":1502},{},[1503],{"type":538,"value":1504},"假设我们有一个表示矩形的基类 Rectangle：",{"type":533,"tag":586,"props":1506,"children":1508},{"className":588,"code":1507,"language":590,"meta":527,"style":527},"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n",[1509],{"type":533,"tag":593,"props":1510,"children":1511},{"__ignoreMap":527},[1512,1528,1562,1590,1618,1625,1632,1656,1683,1690,1697,1721,1748,1755,1762,1778,1821,1828],{"type":533,"tag":597,"props":1513,"children":1514},{"class":599,"line":600},[1515,1519,1524],{"type":533,"tag":597,"props":1516,"children":1517},{"style":604},[1518],{"type":538,"value":607},{"type":533,"tag":597,"props":1520,"children":1521},{"style":610},[1522],{"type":538,"value":1523}," Rectangle",{"type":533,"tag":597,"props":1525,"children":1526},{"style":616},[1527],{"type":538,"value":619},{"type":533,"tag":597,"props":1529,"children":1530},{"class":599,"line":622},[1531,1535,1539,1544,1549,1554,1558],{"type":533,"tag":597,"props":1532,"children":1533},{"style":604},[1534],{"type":538,"value":924},{"type":533,"tag":597,"props":1536,"children":1537},{"style":616},[1538],{"type":538,"value":634},{"type":533,"tag":597,"props":1540,"children":1541},{"style":637},[1542],{"type":538,"value":1543},"width",{"type":533,"tag":597,"props":1545,"children":1546},{"style":616},[1547],{"type":538,"value":1548},",",{"type":533,"tag":597,"props":1550,"children":1551},{"style":637},[1552],{"type":538,"value":1553}," height",{"type":533,"tag":597,"props":1555,"children":1556},{"style":616},[1557],{"type":538,"value":645},{"type":533,"tag":597,"props":1559,"children":1560},{"style":616},[1561],{"type":538,"value":619},{"type":533,"tag":597,"props":1563,"children":1564},{"class":599,"line":652},[1565,1569,1573,1577,1581,1586],{"type":533,"tag":597,"props":1566,"children":1567},{"style":947},[1568],{"type":538,"value":950},{"type":533,"tag":597,"props":1570,"children":1571},{"style":616},[1572],{"type":538,"value":955},{"type":533,"tag":597,"props":1574,"children":1575},{"style":637},[1576],{"type":538,"value":1543},{"type":533,"tag":597,"props":1578,"children":1579},{"style":616},[1580],{"type":538,"value":964},{"type":533,"tag":597,"props":1582,"children":1583},{"style":637},[1584],{"type":538,"value":1585}," width",{"type":533,"tag":597,"props":1587,"children":1588},{"style":616},[1589],{"type":538,"value":974},{"type":533,"tag":597,"props":1591,"children":1592},{"class":599,"line":662},[1593,1597,1601,1606,1610,1614],{"type":533,"tag":597,"props":1594,"children":1595},{"style":947},[1596],{"type":538,"value":950},{"type":533,"tag":597,"props":1598,"children":1599},{"style":616},[1600],{"type":538,"value":955},{"type":533,"tag":597,"props":1602,"children":1603},{"style":637},[1604],{"type":538,"value":1605},"height",{"type":533,"tag":597,"props":1607,"children":1608},{"style":616},[1609],{"type":538,"value":964},{"type":533,"tag":597,"props":1611,"children":1612},{"style":637},[1613],{"type":538,"value":1553},{"type":533,"tag":597,"props":1615,"children":1616},{"style":616},[1617],{"type":538,"value":974},{"type":533,"tag":597,"props":1619,"children":1620},{"class":599,"line":671},[1621],{"type":533,"tag":597,"props":1622,"children":1623},{"style":616},[1624],{"type":538,"value":668},{"type":533,"tag":597,"props":1626,"children":1627},{"class":599,"line":681},[1628],{"type":533,"tag":597,"props":1629,"children":1630},{"emptyLinePlaceholder":675},[1631],{"type":538,"value":678},{"type":533,"tag":597,"props":1633,"children":1634},{"class":599,"line":699},[1635,1640,1644,1648,1652],{"type":533,"tag":597,"props":1636,"children":1637},{"style":626},[1638],{"type":538,"value":1639},"  setWidth",{"type":533,"tag":597,"props":1641,"children":1642},{"style":616},[1643],{"type":538,"value":634},{"type":533,"tag":597,"props":1645,"children":1646},{"style":637},[1647],{"type":538,"value":1543},{"type":533,"tag":597,"props":1649,"children":1650},{"style":616},[1651],{"type":538,"value":645},{"type":533,"tag":597,"props":1653,"children":1654},{"style":616},[1655],{"type":538,"value":619},{"type":533,"tag":597,"props":1657,"children":1658},{"class":599,"line":708},[1659,1663,1667,1671,1675,1679],{"type":533,"tag":597,"props":1660,"children":1661},{"style":947},[1662],{"type":538,"value":950},{"type":533,"tag":597,"props":1664,"children":1665},{"style":616},[1666],{"type":538,"value":955},{"type":533,"tag":597,"props":1668,"children":1669},{"style":637},[1670],{"type":538,"value":1543},{"type":533,"tag":597,"props":1672,"children":1673},{"style":616},[1674],{"type":538,"value":964},{"type":533,"tag":597,"props":1676,"children":1677},{"style":637},[1678],{"type":538,"value":1585},{"type":533,"tag":597,"props":1680,"children":1681},{"style":616},[1682],{"type":538,"value":974},{"type":533,"tag":597,"props":1684,"children":1685},{"class":599,"line":716},[1686],{"type":533,"tag":597,"props":1687,"children":1688},{"style":616},[1689],{"type":538,"value":668},{"type":533,"tag":597,"props":1691,"children":1692},{"class":599,"line":860},[1693],{"type":533,"tag":597,"props":1694,"children":1695},{"emptyLinePlaceholder":675},[1696],{"type":538,"value":678},{"type":533,"tag":597,"props":1698,"children":1699},{"class":599,"line":868},[1700,1705,1709,1713,1717],{"type":533,"tag":597,"props":1701,"children":1702},{"style":626},[1703],{"type":538,"value":1704},"  setHeight",{"type":533,"tag":597,"props":1706,"children":1707},{"style":616},[1708],{"type":538,"value":634},{"type":533,"tag":597,"props":1710,"children":1711},{"style":637},[1712],{"type":538,"value":1605},{"type":533,"tag":597,"props":1714,"children":1715},{"style":616},[1716],{"type":538,"value":645},{"type":533,"tag":597,"props":1718,"children":1719},{"style":616},[1720],{"type":538,"value":619},{"type":533,"tag":597,"props":1722,"children":1723},{"class":599,"line":1078},[1724,1728,1732,1736,1740,1744],{"type":533,"tag":597,"props":1725,"children":1726},{"style":947},[1727],{"type":538,"value":950},{"type":533,"tag":597,"props":1729,"children":1730},{"style":616},[1731],{"type":538,"value":955},{"type":533,"tag":597,"props":1733,"children":1734},{"style":637},[1735],{"type":538,"value":1605},{"type":533,"tag":597,"props":1737,"children":1738},{"style":616},[1739],{"type":538,"value":964},{"type":533,"tag":597,"props":1741,"children":1742},{"style":637},[1743],{"type":538,"value":1553},{"type":533,"tag":597,"props":1745,"children":1746},{"style":616},[1747],{"type":538,"value":974},{"type":533,"tag":597,"props":1749,"children":1750},{"class":599,"line":1104},[1751],{"type":533,"tag":597,"props":1752,"children":1753},{"style":616},[1754],{"type":538,"value":668},{"type":533,"tag":597,"props":1756,"children":1757},{"class":599,"line":1120},[1758],{"type":533,"tag":597,"props":1759,"children":1760},{"emptyLinePlaceholder":675},[1761],{"type":538,"value":678},{"type":533,"tag":597,"props":1763,"children":1764},{"class":599,"line":1157},[1765,1770,1774],{"type":533,"tag":597,"props":1766,"children":1767},{"style":626},[1768],{"type":538,"value":1769},"  getArea",{"type":533,"tag":597,"props":1771,"children":1772},{"style":616},[1773],{"type":538,"value":692},{"type":533,"tag":597,"props":1775,"children":1776},{"style":616},[1777],{"type":538,"value":619},{"type":533,"tag":597,"props":1779,"children":1780},{"class":599,"line":1165},[1781,1787,1792,1796,1800,1805,1809,1813,1817],{"type":533,"tag":597,"props":1782,"children":1784},{"style":1783},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1785],{"type":538,"value":1786},"    return",{"type":533,"tag":597,"props":1788,"children":1789},{"style":947},[1790],{"type":538,"value":1791}," this",{"type":533,"tag":597,"props":1793,"children":1794},{"style":616},[1795],{"type":538,"value":955},{"type":533,"tag":597,"props":1797,"children":1798},{"style":637},[1799],{"type":538,"value":1543},{"type":533,"tag":597,"props":1801,"children":1802},{"style":604},[1803],{"type":538,"value":1804}," *",{"type":533,"tag":597,"props":1806,"children":1807},{"style":947},[1808],{"type":538,"value":1791},{"type":533,"tag":597,"props":1810,"children":1811},{"style":616},[1812],{"type":538,"value":955},{"type":533,"tag":597,"props":1814,"children":1815},{"style":637},[1816],{"type":538,"value":1605},{"type":533,"tag":597,"props":1818,"children":1819},{"style":616},[1820],{"type":538,"value":974},{"type":533,"tag":597,"props":1822,"children":1823},{"class":599,"line":1173},[1824],{"type":533,"tag":597,"props":1825,"children":1826},{"style":616},[1827],{"type":538,"value":668},{"type":533,"tag":597,"props":1829,"children":1830},{"class":599,"line":1181},[1831],{"type":533,"tag":597,"props":1832,"children":1833},{"style":616},[1834],{"type":538,"value":722},{"type":533,"tag":534,"props":1836,"children":1837},{},[1838],{"type":538,"value":1839},"现在，我们创建了一个子类 Square 继承自 Rectangle，表示正方形。在正方形中，宽和高应该始终相等。",{"type":533,"tag":586,"props":1841,"children":1843},{"className":588,"code":1842,"language":590,"meta":527,"style":527},"class Square extends Rectangle {\n  setWidth(width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  setHeight(height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n",[1844],{"type":533,"tag":593,"props":1845,"children":1846},{"__ignoreMap":527},[1847,1871,1894,1923,1951,1958,1965,1988,2015,2042,2049],{"type":533,"tag":597,"props":1848,"children":1849},{"class":599,"line":600},[1850,1854,1859,1863,1867],{"type":533,"tag":597,"props":1851,"children":1852},{"style":604},[1853],{"type":538,"value":607},{"type":533,"tag":597,"props":1855,"children":1856},{"style":610},[1857],{"type":538,"value":1858}," Square",{"type":533,"tag":597,"props":1860,"children":1861},{"style":604},[1862],{"type":538,"value":1093},{"type":533,"tag":597,"props":1864,"children":1865},{"style":626},[1866],{"type":538,"value":1523},{"type":533,"tag":597,"props":1868,"children":1869},{"style":616},[1870],{"type":538,"value":619},{"type":533,"tag":597,"props":1872,"children":1873},{"class":599,"line":622},[1874,1878,1882,1886,1890],{"type":533,"tag":597,"props":1875,"children":1876},{"style":626},[1877],{"type":538,"value":1639},{"type":533,"tag":597,"props":1879,"children":1880},{"style":616},[1881],{"type":538,"value":634},{"type":533,"tag":597,"props":1883,"children":1884},{"style":637},[1885],{"type":538,"value":1543},{"type":533,"tag":597,"props":1887,"children":1888},{"style":616},[1889],{"type":538,"value":645},{"type":533,"tag":597,"props":1891,"children":1892},{"style":616},[1893],{"type":538,"value":619},{"type":533,"tag":597,"props":1895,"children":1896},{"class":599,"line":652},[1897,1902,1906,1911,1915,1919],{"type":533,"tag":597,"props":1898,"children":1899},{"style":947},[1900],{"type":538,"value":1901},"    super",{"type":533,"tag":597,"props":1903,"children":1904},{"style":616},[1905],{"type":538,"value":955},{"type":533,"tag":597,"props":1907,"children":1908},{"style":626},[1909],{"type":538,"value":1910},"setWidth",{"type":533,"tag":597,"props":1912,"children":1913},{"style":616},[1914],{"type":538,"value":634},{"type":533,"tag":597,"props":1916,"children":1917},{"style":637},[1918],{"type":538,"value":1543},{"type":533,"tag":597,"props":1920,"children":1921},{"style":616},[1922],{"type":538,"value":1054},{"type":533,"tag":597,"props":1924,"children":1925},{"class":599,"line":662},[1926,1930,1934,1939,1943,1947],{"type":533,"tag":597,"props":1927,"children":1928},{"style":947},[1929],{"type":538,"value":1901},{"type":533,"tag":597,"props":1931,"children":1932},{"style":616},[1933],{"type":538,"value":955},{"type":533,"tag":597,"props":1935,"children":1936},{"style":626},[1937],{"type":538,"value":1938},"setHeight",{"type":533,"tag":597,"props":1940,"children":1941},{"style":616},[1942],{"type":538,"value":634},{"type":533,"tag":597,"props":1944,"children":1945},{"style":637},[1946],{"type":538,"value":1543},{"type":533,"tag":597,"props":1948,"children":1949},{"style":616},[1950],{"type":538,"value":1054},{"type":533,"tag":597,"props":1952,"children":1953},{"class":599,"line":671},[1954],{"type":533,"tag":597,"props":1955,"children":1956},{"style":616},[1957],{"type":538,"value":668},{"type":533,"tag":597,"props":1959,"children":1960},{"class":599,"line":681},[1961],{"type":533,"tag":597,"props":1962,"children":1963},{"emptyLinePlaceholder":675},[1964],{"type":538,"value":678},{"type":533,"tag":597,"props":1966,"children":1967},{"class":599,"line":699},[1968,1972,1976,1980,1984],{"type":533,"tag":597,"props":1969,"children":1970},{"style":626},[1971],{"type":538,"value":1704},{"type":533,"tag":597,"props":1973,"children":1974},{"style":616},[1975],{"type":538,"value":634},{"type":533,"tag":597,"props":1977,"children":1978},{"style":637},[1979],{"type":538,"value":1605},{"type":533,"tag":597,"props":1981,"children":1982},{"style":616},[1983],{"type":538,"value":645},{"type":533,"tag":597,"props":1985,"children":1986},{"style":616},[1987],{"type":538,"value":619},{"type":533,"tag":597,"props":1989,"children":1990},{"class":599,"line":708},[1991,1995,1999,2003,2007,2011],{"type":533,"tag":597,"props":1992,"children":1993},{"style":947},[1994],{"type":538,"value":1901},{"type":533,"tag":597,"props":1996,"children":1997},{"style":616},[1998],{"type":538,"value":955},{"type":533,"tag":597,"props":2000,"children":2001},{"style":626},[2002],{"type":538,"value":1910},{"type":533,"tag":597,"props":2004,"children":2005},{"style":616},[2006],{"type":538,"value":634},{"type":533,"tag":597,"props":2008,"children":2009},{"style":637},[2010],{"type":538,"value":1605},{"type":533,"tag":597,"props":2012,"children":2013},{"style":616},[2014],{"type":538,"value":1054},{"type":533,"tag":597,"props":2016,"children":2017},{"class":599,"line":716},[2018,2022,2026,2030,2034,2038],{"type":533,"tag":597,"props":2019,"children":2020},{"style":947},[2021],{"type":538,"value":1901},{"type":533,"tag":597,"props":2023,"children":2024},{"style":616},[2025],{"type":538,"value":955},{"type":533,"tag":597,"props":2027,"children":2028},{"style":626},[2029],{"type":538,"value":1938},{"type":533,"tag":597,"props":2031,"children":2032},{"style":616},[2033],{"type":538,"value":634},{"type":533,"tag":597,"props":2035,"children":2036},{"style":637},[2037],{"type":538,"value":1605},{"type":533,"tag":597,"props":2039,"children":2040},{"style":616},[2041],{"type":538,"value":1054},{"type":533,"tag":597,"props":2043,"children":2044},{"class":599,"line":860},[2045],{"type":533,"tag":597,"props":2046,"children":2047},{"style":616},[2048],{"type":538,"value":668},{"type":533,"tag":597,"props":2050,"children":2051},{"class":599,"line":868},[2052],{"type":533,"tag":597,"props":2053,"children":2054},{"style":616},[2055],{"type":538,"value":722},{"type":533,"tag":534,"props":2057,"children":2058},{},[2059],{"type":538,"value":2060},"这里的问题是，Square 子类在修改宽度或高度时，通过覆写 setWidth 和 setHeight 方法，强制宽和高相等，这与基类的行为不一致。如果在需要 Rectangle 的地方使用了 Square，可能会导致程序逻辑错误。",{"type":533,"tag":534,"props":2062,"children":2063},{},[2064],{"type":538,"value":2065},"这违反了里氏替换原则，因为子类修改了父类的预期行为。为了符合里氏替换原则，可能需要重新设计类的继承结构，或者使用更精确的命名来表达实际意图。",{"type":533,"tag":575,"props":2067,"children":2069},{"id":2068},"接口隔离原则",[2070],{"type":538,"value":2068},{"type":533,"tag":534,"props":2072,"children":2073},{},[2074],{"type":538,"value":2075},"接口隔离原则（Interface Segregation Principle，ISP） 是 SOLID 原则之一，它强调一个类不应该被强迫实现它不需要的接口。简而言之，一个类对另一个类的依赖应该建立在最小的接口上。",{"type":533,"tag":534,"props":2077,"children":2078},{},[2079],{"type":538,"value":2080},"在通俗的语言中，接口隔离原则告诉我们不应该让一个类依赖它不需要的接口，否则会导致类需要实现一些它根本不需要的方法。",{"type":533,"tag":534,"props":2082,"children":2083},{},[2084],{"type":538,"value":2085},"举例说明，假设我们有一个动物园的系统，其中有两种动物，一种会飞，一种会游泳：",{"type":533,"tag":586,"props":2087,"children":2089},{"className":588,"code":2088,"language":590,"meta":527,"style":527},"// 不遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n\n  swim() {\n    // 这是一个鸟类不需要的方法，违反接口隔离原则\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n\n  fly() {\n    // 这是一个鱼类不需要的方法，违反接口隔离原则\n  }\n}\n",[2090],{"type":533,"tag":593,"props":2091,"children":2092},{"__ignoreMap":527},[2093,2101,2117,2133,2141,2148,2155,2171,2179,2186,2193,2200,2216,2231,2239,2246,2253,2268,2276,2283],{"type":533,"tag":597,"props":2094,"children":2095},{"class":599,"line":600},[2096],{"type":533,"tag":597,"props":2097,"children":2098},{"style":656},[2099],{"type":538,"value":2100},"// 不遵循接口隔离原则的设计\n",{"type":533,"tag":597,"props":2102,"children":2103},{"class":599,"line":622},[2104,2108,2113],{"type":533,"tag":597,"props":2105,"children":2106},{"style":604},[2107],{"type":538,"value":607},{"type":533,"tag":597,"props":2109,"children":2110},{"style":610},[2111],{"type":538,"value":2112}," Bird",{"type":533,"tag":597,"props":2114,"children":2115},{"style":616},[2116],{"type":538,"value":619},{"type":533,"tag":597,"props":2118,"children":2119},{"class":599,"line":652},[2120,2125,2129],{"type":533,"tag":597,"props":2121,"children":2122},{"style":626},[2123],{"type":538,"value":2124},"  fly",{"type":533,"tag":597,"props":2126,"children":2127},{"style":616},[2128],{"type":538,"value":692},{"type":533,"tag":597,"props":2130,"children":2131},{"style":616},[2132],{"type":538,"value":619},{"type":533,"tag":597,"props":2134,"children":2135},{"class":599,"line":662},[2136],{"type":533,"tag":597,"props":2137,"children":2138},{"style":656},[2139],{"type":538,"value":2140},"    // 实现飞行逻辑\n",{"type":533,"tag":597,"props":2142,"children":2143},{"class":599,"line":671},[2144],{"type":533,"tag":597,"props":2145,"children":2146},{"style":616},[2147],{"type":538,"value":668},{"type":533,"tag":597,"props":2149,"children":2150},{"class":599,"line":681},[2151],{"type":533,"tag":597,"props":2152,"children":2153},{"emptyLinePlaceholder":675},[2154],{"type":538,"value":678},{"type":533,"tag":597,"props":2156,"children":2157},{"class":599,"line":699},[2158,2163,2167],{"type":533,"tag":597,"props":2159,"children":2160},{"style":626},[2161],{"type":538,"value":2162},"  swim",{"type":533,"tag":597,"props":2164,"children":2165},{"style":616},[2166],{"type":538,"value":692},{"type":533,"tag":597,"props":2168,"children":2169},{"style":616},[2170],{"type":538,"value":619},{"type":533,"tag":597,"props":2172,"children":2173},{"class":599,"line":708},[2174],{"type":533,"tag":597,"props":2175,"children":2176},{"style":656},[2177],{"type":538,"value":2178},"    // 这是一个鸟类不需要的方法，违反接口隔离原则\n",{"type":533,"tag":597,"props":2180,"children":2181},{"class":599,"line":716},[2182],{"type":533,"tag":597,"props":2183,"children":2184},{"style":616},[2185],{"type":538,"value":668},{"type":533,"tag":597,"props":2187,"children":2188},{"class":599,"line":860},[2189],{"type":533,"tag":597,"props":2190,"children":2191},{"style":616},[2192],{"type":538,"value":722},{"type":533,"tag":597,"props":2194,"children":2195},{"class":599,"line":868},[2196],{"type":533,"tag":597,"props":2197,"children":2198},{"emptyLinePlaceholder":675},[2199],{"type":538,"value":678},{"type":533,"tag":597,"props":2201,"children":2202},{"class":599,"line":1078},[2203,2207,2212],{"type":533,"tag":597,"props":2204,"children":2205},{"style":604},[2206],{"type":538,"value":607},{"type":533,"tag":597,"props":2208,"children":2209},{"style":610},[2210],{"type":538,"value":2211}," Fish",{"type":533,"tag":597,"props":2213,"children":2214},{"style":616},[2215],{"type":538,"value":619},{"type":533,"tag":597,"props":2217,"children":2218},{"class":599,"line":1104},[2219,2223,2227],{"type":533,"tag":597,"props":2220,"children":2221},{"style":626},[2222],{"type":538,"value":2162},{"type":533,"tag":597,"props":2224,"children":2225},{"style":616},[2226],{"type":538,"value":692},{"type":533,"tag":597,"props":2228,"children":2229},{"style":616},[2230],{"type":538,"value":619},{"type":533,"tag":597,"props":2232,"children":2233},{"class":599,"line":1120},[2234],{"type":533,"tag":597,"props":2235,"children":2236},{"style":656},[2237],{"type":538,"value":2238},"    // 实现游泳逻辑\n",{"type":533,"tag":597,"props":2240,"children":2241},{"class":599,"line":1157},[2242],{"type":533,"tag":597,"props":2243,"children":2244},{"style":616},[2245],{"type":538,"value":668},{"type":533,"tag":597,"props":2247,"children":2248},{"class":599,"line":1165},[2249],{"type":533,"tag":597,"props":2250,"children":2251},{"emptyLinePlaceholder":675},[2252],{"type":538,"value":678},{"type":533,"tag":597,"props":2254,"children":2255},{"class":599,"line":1173},[2256,2260,2264],{"type":533,"tag":597,"props":2257,"children":2258},{"style":626},[2259],{"type":538,"value":2124},{"type":533,"tag":597,"props":2261,"children":2262},{"style":616},[2263],{"type":538,"value":692},{"type":533,"tag":597,"props":2265,"children":2266},{"style":616},[2267],{"type":538,"value":619},{"type":533,"tag":597,"props":2269,"children":2270},{"class":599,"line":1181},[2271],{"type":533,"tag":597,"props":2272,"children":2273},{"style":656},[2274],{"type":538,"value":2275},"    // 这是一个鱼类不需要的方法，违反接口隔离原则\n",{"type":533,"tag":597,"props":2277,"children":2278},{"class":599,"line":1206},[2279],{"type":533,"tag":597,"props":2280,"children":2281},{"style":616},[2282],{"type":538,"value":668},{"type":533,"tag":597,"props":2284,"children":2285},{"class":599,"line":1222},[2286],{"type":533,"tag":597,"props":2287,"children":2288},{"style":616},[2289],{"type":538,"value":722},{"type":533,"tag":534,"props":2291,"children":2292},{},[2293],{"type":538,"value":2294},"在这个例子中，Bird 类实现了 fly 和 swim 两个方法，而 Fish 类也实现了 swim 和 fly 两个方法。这违反了接口隔离原则，因为每个类都被迫实现了它们不需要的方法。",{"type":533,"tag":534,"props":2296,"children":2297},{},[2298],{"type":538,"value":2299},"为了符合接口隔离原则，我们可以将接口拆分成更小的部分，让每个类只实现它们需要的方法：",{"type":533,"tag":586,"props":2301,"children":2303},{"className":588,"code":2302,"language":590,"meta":527,"style":527},"// 遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n}\n",[2304],{"type":533,"tag":593,"props":2305,"children":2306},{"__ignoreMap":527},[2307,2315,2330,2345,2352,2359,2366,2373,2388,2403,2410,2417],{"type":533,"tag":597,"props":2308,"children":2309},{"class":599,"line":600},[2310],{"type":533,"tag":597,"props":2311,"children":2312},{"style":656},[2313],{"type":538,"value":2314},"// 遵循接口隔离原则的设计\n",{"type":533,"tag":597,"props":2316,"children":2317},{"class":599,"line":622},[2318,2322,2326],{"type":533,"tag":597,"props":2319,"children":2320},{"style":604},[2321],{"type":538,"value":607},{"type":533,"tag":597,"props":2323,"children":2324},{"style":610},[2325],{"type":538,"value":2112},{"type":533,"tag":597,"props":2327,"children":2328},{"style":616},[2329],{"type":538,"value":619},{"type":533,"tag":597,"props":2331,"children":2332},{"class":599,"line":652},[2333,2337,2341],{"type":533,"tag":597,"props":2334,"children":2335},{"style":626},[2336],{"type":538,"value":2124},{"type":533,"tag":597,"props":2338,"children":2339},{"style":616},[2340],{"type":538,"value":692},{"type":533,"tag":597,"props":2342,"children":2343},{"style":616},[2344],{"type":538,"value":619},{"type":533,"tag":597,"props":2346,"children":2347},{"class":599,"line":662},[2348],{"type":533,"tag":597,"props":2349,"children":2350},{"style":656},[2351],{"type":538,"value":2140},{"type":533,"tag":597,"props":2353,"children":2354},{"class":599,"line":671},[2355],{"type":533,"tag":597,"props":2356,"children":2357},{"style":616},[2358],{"type":538,"value":668},{"type":533,"tag":597,"props":2360,"children":2361},{"class":599,"line":681},[2362],{"type":533,"tag":597,"props":2363,"children":2364},{"style":616},[2365],{"type":538,"value":722},{"type":533,"tag":597,"props":2367,"children":2368},{"class":599,"line":699},[2369],{"type":533,"tag":597,"props":2370,"children":2371},{"emptyLinePlaceholder":675},[2372],{"type":538,"value":678},{"type":533,"tag":597,"props":2374,"children":2375},{"class":599,"line":708},[2376,2380,2384],{"type":533,"tag":597,"props":2377,"children":2378},{"style":604},[2379],{"type":538,"value":607},{"type":533,"tag":597,"props":2381,"children":2382},{"style":610},[2383],{"type":538,"value":2211},{"type":533,"tag":597,"props":2385,"children":2386},{"style":616},[2387],{"type":538,"value":619},{"type":533,"tag":597,"props":2389,"children":2390},{"class":599,"line":716},[2391,2395,2399],{"type":533,"tag":597,"props":2392,"children":2393},{"style":626},[2394],{"type":538,"value":2162},{"type":533,"tag":597,"props":2396,"children":2397},{"style":616},[2398],{"type":538,"value":692},{"type":533,"tag":597,"props":2400,"children":2401},{"style":616},[2402],{"type":538,"value":619},{"type":533,"tag":597,"props":2404,"children":2405},{"class":599,"line":860},[2406],{"type":533,"tag":597,"props":2407,"children":2408},{"style":656},[2409],{"type":538,"value":2238},{"type":533,"tag":597,"props":2411,"children":2412},{"class":599,"line":868},[2413],{"type":533,"tag":597,"props":2414,"children":2415},{"style":616},[2416],{"type":538,"value":668},{"type":533,"tag":597,"props":2418,"children":2419},{"class":599,"line":1078},[2420],{"type":533,"tag":597,"props":2421,"children":2422},{"style":616},[2423],{"type":538,"value":722},{"type":533,"tag":534,"props":2425,"children":2426},{},[2427],{"type":538,"value":2428},"这样，每个类都只依赖于它们需要的接口，不再强迫实现不必要的方法。接口隔离原则的目标是使接口更具体，更贴近类的实际需求，从而提高系统的灵活性和可维护性。",{"type":533,"tag":575,"props":2430,"children":2432},{"id":2431},"依赖反转原则",[2433],{"type":538,"value":2431},{"type":533,"tag":534,"props":2435,"children":2436},{},[2437],{"type":538,"value":2438},"依赖反转原则（Dependency Inversion Principle，DIP） 是 SOLID 原则之一，它强调高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。",{"type":533,"tag":534,"props":2440,"children":2441},{},[2442],{"type":538,"value":2443},"举例说明，考虑一个简单的报告生成系统，有一个高层模块 ReportGenerator 负责生成报告：",{"type":533,"tag":586,"props":2445,"children":2447},{"className":588,"code":2446,"language":590,"meta":527,"style":527},"// 不遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor() {\n    this.pdfGenerator = new PDFGenerator(); // 依赖于具体的 PDF 生成器\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.pdfGenerator.generatePDF();\n  }\n}\n\nclass PDFGenerator {\n  generatePDF() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n",[2448],{"type":533,"tag":593,"props":2449,"children":2450},{"__ignoreMap":527},[2451,2459,2475,2490,2530,2537,2544,2560,2568,2597,2604,2611,2618,2633,2649,2657,2664],{"type":533,"tag":597,"props":2452,"children":2453},{"class":599,"line":600},[2454],{"type":533,"tag":597,"props":2455,"children":2456},{"style":656},[2457],{"type":538,"value":2458},"// 不遵循依赖反转原则的设计\n",{"type":533,"tag":597,"props":2460,"children":2461},{"class":599,"line":622},[2462,2466,2471],{"type":533,"tag":597,"props":2463,"children":2464},{"style":604},[2465],{"type":538,"value":607},{"type":533,"tag":597,"props":2467,"children":2468},{"style":610},[2469],{"type":538,"value":2470}," ReportGenerator",{"type":533,"tag":597,"props":2472,"children":2473},{"style":616},[2474],{"type":538,"value":619},{"type":533,"tag":597,"props":2476,"children":2477},{"class":599,"line":652},[2478,2482,2486],{"type":533,"tag":597,"props":2479,"children":2480},{"style":604},[2481],{"type":538,"value":924},{"type":533,"tag":597,"props":2483,"children":2484},{"style":616},[2485],{"type":538,"value":692},{"type":533,"tag":597,"props":2487,"children":2488},{"style":616},[2489],{"type":538,"value":619},{"type":533,"tag":597,"props":2491,"children":2492},{"class":599,"line":662},[2493,2497,2501,2506,2510,2515,2520,2525],{"type":533,"tag":597,"props":2494,"children":2495},{"style":947},[2496],{"type":538,"value":950},{"type":533,"tag":597,"props":2498,"children":2499},{"style":616},[2500],{"type":538,"value":955},{"type":533,"tag":597,"props":2502,"children":2503},{"style":637},[2504],{"type":538,"value":2505},"pdfGenerator",{"type":533,"tag":597,"props":2507,"children":2508},{"style":616},[2509],{"type":538,"value":964},{"type":533,"tag":597,"props":2511,"children":2512},{"style":604},[2513],{"type":538,"value":2514}," new",{"type":533,"tag":597,"props":2516,"children":2517},{"style":626},[2518],{"type":538,"value":2519}," PDFGenerator",{"type":533,"tag":597,"props":2521,"children":2522},{"style":616},[2523],{"type":538,"value":2524},"();",{"type":533,"tag":597,"props":2526,"children":2527},{"style":656},[2528],{"type":538,"value":2529}," // 依赖于具体的 PDF 生成器\n",{"type":533,"tag":597,"props":2531,"children":2532},{"class":599,"line":671},[2533],{"type":533,"tag":597,"props":2534,"children":2535},{"style":616},[2536],{"type":538,"value":668},{"type":533,"tag":597,"props":2538,"children":2539},{"class":599,"line":681},[2540],{"type":533,"tag":597,"props":2541,"children":2542},{"emptyLinePlaceholder":675},[2543],{"type":538,"value":678},{"type":533,"tag":597,"props":2545,"children":2546},{"class":599,"line":699},[2547,2552,2556],{"type":533,"tag":597,"props":2548,"children":2549},{"style":626},[2550],{"type":538,"value":2551},"  generateReport",{"type":533,"tag":597,"props":2553,"children":2554},{"style":616},[2555],{"type":538,"value":692},{"type":533,"tag":597,"props":2557,"children":2558},{"style":616},[2559],{"type":538,"value":619},{"type":533,"tag":597,"props":2561,"children":2562},{"class":599,"line":708},[2563],{"type":533,"tag":597,"props":2564,"children":2565},{"style":656},[2566],{"type":538,"value":2567},"    // 生成报告的逻辑\n",{"type":533,"tag":597,"props":2569,"children":2570},{"class":599,"line":716},[2571,2575,2579,2583,2587,2592],{"type":533,"tag":597,"props":2572,"children":2573},{"style":947},[2574],{"type":538,"value":950},{"type":533,"tag":597,"props":2576,"children":2577},{"style":616},[2578],{"type":538,"value":955},{"type":533,"tag":597,"props":2580,"children":2581},{"style":637},[2582],{"type":538,"value":2505},{"type":533,"tag":597,"props":2584,"children":2585},{"style":616},[2586],{"type":538,"value":955},{"type":533,"tag":597,"props":2588,"children":2589},{"style":626},[2590],{"type":538,"value":2591},"generatePDF",{"type":533,"tag":597,"props":2593,"children":2594},{"style":616},[2595],{"type":538,"value":2596},"();\n",{"type":533,"tag":597,"props":2598,"children":2599},{"class":599,"line":860},[2600],{"type":533,"tag":597,"props":2601,"children":2602},{"style":616},[2603],{"type":538,"value":668},{"type":533,"tag":597,"props":2605,"children":2606},{"class":599,"line":868},[2607],{"type":533,"tag":597,"props":2608,"children":2609},{"style":616},[2610],{"type":538,"value":722},{"type":533,"tag":597,"props":2612,"children":2613},{"class":599,"line":1078},[2614],{"type":533,"tag":597,"props":2615,"children":2616},{"emptyLinePlaceholder":675},[2617],{"type":538,"value":678},{"type":533,"tag":597,"props":2619,"children":2620},{"class":599,"line":1104},[2621,2625,2629],{"type":533,"tag":597,"props":2622,"children":2623},{"style":604},[2624],{"type":538,"value":607},{"type":533,"tag":597,"props":2626,"children":2627},{"style":610},[2628],{"type":538,"value":2519},{"type":533,"tag":597,"props":2630,"children":2631},{"style":616},[2632],{"type":538,"value":619},{"type":533,"tag":597,"props":2634,"children":2635},{"class":599,"line":1120},[2636,2641,2645],{"type":533,"tag":597,"props":2637,"children":2638},{"style":626},[2639],{"type":538,"value":2640},"  generatePDF",{"type":533,"tag":597,"props":2642,"children":2643},{"style":616},[2644],{"type":538,"value":692},{"type":533,"tag":597,"props":2646,"children":2647},{"style":616},[2648],{"type":538,"value":619},{"type":533,"tag":597,"props":2650,"children":2651},{"class":599,"line":1157},[2652],{"type":533,"tag":597,"props":2653,"children":2654},{"style":656},[2655],{"type":538,"value":2656},"    // 具体的 PDF 生成逻辑\n",{"type":533,"tag":597,"props":2658,"children":2659},{"class":599,"line":1165},[2660],{"type":533,"tag":597,"props":2661,"children":2662},{"style":616},[2663],{"type":538,"value":668},{"type":533,"tag":597,"props":2665,"children":2666},{"class":599,"line":1173},[2667],{"type":533,"tag":597,"props":2668,"children":2669},{"style":616},[2670],{"type":538,"value":722},{"type":533,"tag":534,"props":2672,"children":2673},{},[2674],{"type":538,"value":2675},"在这个设计中，ReportGenerator 直接依赖于具体的 PDFGenerator 类，这违反了依赖反转原则。如果我们想使用其他类型的报告生成器，例如 HTMLGenerator，就需要修改 ReportGenerator 类。",{"type":533,"tag":534,"props":2677,"children":2678},{},[2679],{"type":538,"value":2680},"为了符合依赖反转原则，我们应该通过抽象来解耦高层和低层模块：",{"type":533,"tag":586,"props":2682,"children":2684},{"className":588,"code":2683,"language":590,"meta":527,"style":527},"// 遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor(generator) {\n    this.generator = generator; // 依赖于抽象的报告生成器接口\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.generator.generate();\n  }\n}\n\nclass PDFGenerator {\n  generate() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n\nclass HTMLGenerator {\n  generate() {\n    // 具体的 HTML 生成逻辑\n  }\n}\n",[2685],{"type":533,"tag":593,"props":2686,"children":2687},{"__ignoreMap":527},[2688,2696,2711,2735,2769,2776,2783,2798,2805,2833,2840,2847,2854,2869,2885,2892,2899,2906,2913,2929,2944,2952,2959],{"type":533,"tag":597,"props":2689,"children":2690},{"class":599,"line":600},[2691],{"type":533,"tag":597,"props":2692,"children":2693},{"style":656},[2694],{"type":538,"value":2695},"// 遵循依赖反转原则的设计\n",{"type":533,"tag":597,"props":2697,"children":2698},{"class":599,"line":622},[2699,2703,2707],{"type":533,"tag":597,"props":2700,"children":2701},{"style":604},[2702],{"type":538,"value":607},{"type":533,"tag":597,"props":2704,"children":2705},{"style":610},[2706],{"type":538,"value":2470},{"type":533,"tag":597,"props":2708,"children":2709},{"style":616},[2710],{"type":538,"value":619},{"type":533,"tag":597,"props":2712,"children":2713},{"class":599,"line":652},[2714,2718,2722,2727,2731],{"type":533,"tag":597,"props":2715,"children":2716},{"style":604},[2717],{"type":538,"value":924},{"type":533,"tag":597,"props":2719,"children":2720},{"style":616},[2721],{"type":538,"value":634},{"type":533,"tag":597,"props":2723,"children":2724},{"style":637},[2725],{"type":538,"value":2726},"generator",{"type":533,"tag":597,"props":2728,"children":2729},{"style":616},[2730],{"type":538,"value":645},{"type":533,"tag":597,"props":2732,"children":2733},{"style":616},[2734],{"type":538,"value":619},{"type":533,"tag":597,"props":2736,"children":2737},{"class":599,"line":662},[2738,2742,2746,2750,2754,2759,2764],{"type":533,"tag":597,"props":2739,"children":2740},{"style":947},[2741],{"type":538,"value":950},{"type":533,"tag":597,"props":2743,"children":2744},{"style":616},[2745],{"type":538,"value":955},{"type":533,"tag":597,"props":2747,"children":2748},{"style":637},[2749],{"type":538,"value":2726},{"type":533,"tag":597,"props":2751,"children":2752},{"style":616},[2753],{"type":538,"value":964},{"type":533,"tag":597,"props":2755,"children":2756},{"style":637},[2757],{"type":538,"value":2758}," generator",{"type":533,"tag":597,"props":2760,"children":2761},{"style":616},[2762],{"type":538,"value":2763},";",{"type":533,"tag":597,"props":2765,"children":2766},{"style":656},[2767],{"type":538,"value":2768}," // 依赖于抽象的报告生成器接口\n",{"type":533,"tag":597,"props":2770,"children":2771},{"class":599,"line":671},[2772],{"type":533,"tag":597,"props":2773,"children":2774},{"style":616},[2775],{"type":538,"value":668},{"type":533,"tag":597,"props":2777,"children":2778},{"class":599,"line":681},[2779],{"type":533,"tag":597,"props":2780,"children":2781},{"emptyLinePlaceholder":675},[2782],{"type":538,"value":678},{"type":533,"tag":597,"props":2784,"children":2785},{"class":599,"line":699},[2786,2790,2794],{"type":533,"tag":597,"props":2787,"children":2788},{"style":626},[2789],{"type":538,"value":2551},{"type":533,"tag":597,"props":2791,"children":2792},{"style":616},[2793],{"type":538,"value":692},{"type":533,"tag":597,"props":2795,"children":2796},{"style":616},[2797],{"type":538,"value":619},{"type":533,"tag":597,"props":2799,"children":2800},{"class":599,"line":708},[2801],{"type":533,"tag":597,"props":2802,"children":2803},{"style":656},[2804],{"type":538,"value":2567},{"type":533,"tag":597,"props":2806,"children":2807},{"class":599,"line":716},[2808,2812,2816,2820,2824,2829],{"type":533,"tag":597,"props":2809,"children":2810},{"style":947},[2811],{"type":538,"value":950},{"type":533,"tag":597,"props":2813,"children":2814},{"style":616},[2815],{"type":538,"value":955},{"type":533,"tag":597,"props":2817,"children":2818},{"style":637},[2819],{"type":538,"value":2726},{"type":533,"tag":597,"props":2821,"children":2822},{"style":616},[2823],{"type":538,"value":955},{"type":533,"tag":597,"props":2825,"children":2826},{"style":626},[2827],{"type":538,"value":2828},"generate",{"type":533,"tag":597,"props":2830,"children":2831},{"style":616},[2832],{"type":538,"value":2596},{"type":533,"tag":597,"props":2834,"children":2835},{"class":599,"line":860},[2836],{"type":533,"tag":597,"props":2837,"children":2838},{"style":616},[2839],{"type":538,"value":668},{"type":533,"tag":597,"props":2841,"children":2842},{"class":599,"line":868},[2843],{"type":533,"tag":597,"props":2844,"children":2845},{"style":616},[2846],{"type":538,"value":722},{"type":533,"tag":597,"props":2848,"children":2849},{"class":599,"line":1078},[2850],{"type":533,"tag":597,"props":2851,"children":2852},{"emptyLinePlaceholder":675},[2853],{"type":538,"value":678},{"type":533,"tag":597,"props":2855,"children":2856},{"class":599,"line":1104},[2857,2861,2865],{"type":533,"tag":597,"props":2858,"children":2859},{"style":604},[2860],{"type":538,"value":607},{"type":533,"tag":597,"props":2862,"children":2863},{"style":610},[2864],{"type":538,"value":2519},{"type":533,"tag":597,"props":2866,"children":2867},{"style":616},[2868],{"type":538,"value":619},{"type":533,"tag":597,"props":2870,"children":2871},{"class":599,"line":1120},[2872,2877,2881],{"type":533,"tag":597,"props":2873,"children":2874},{"style":626},[2875],{"type":538,"value":2876},"  generate",{"type":533,"tag":597,"props":2878,"children":2879},{"style":616},[2880],{"type":538,"value":692},{"type":533,"tag":597,"props":2882,"children":2883},{"style":616},[2884],{"type":538,"value":619},{"type":533,"tag":597,"props":2886,"children":2887},{"class":599,"line":1157},[2888],{"type":533,"tag":597,"props":2889,"children":2890},{"style":656},[2891],{"type":538,"value":2656},{"type":533,"tag":597,"props":2893,"children":2894},{"class":599,"line":1165},[2895],{"type":533,"tag":597,"props":2896,"children":2897},{"style":616},[2898],{"type":538,"value":668},{"type":533,"tag":597,"props":2900,"children":2901},{"class":599,"line":1173},[2902],{"type":533,"tag":597,"props":2903,"children":2904},{"style":616},[2905],{"type":538,"value":722},{"type":533,"tag":597,"props":2907,"children":2908},{"class":599,"line":1181},[2909],{"type":533,"tag":597,"props":2910,"children":2911},{"emptyLinePlaceholder":675},[2912],{"type":538,"value":678},{"type":533,"tag":597,"props":2914,"children":2915},{"class":599,"line":1206},[2916,2920,2925],{"type":533,"tag":597,"props":2917,"children":2918},{"style":604},[2919],{"type":538,"value":607},{"type":533,"tag":597,"props":2921,"children":2922},{"style":610},[2923],{"type":538,"value":2924}," HTMLGenerator",{"type":533,"tag":597,"props":2926,"children":2927},{"style":616},[2928],{"type":538,"value":619},{"type":533,"tag":597,"props":2930,"children":2931},{"class":599,"line":1222},[2932,2936,2940],{"type":533,"tag":597,"props":2933,"children":2934},{"style":626},[2935],{"type":538,"value":2876},{"type":533,"tag":597,"props":2937,"children":2938},{"style":616},[2939],{"type":538,"value":692},{"type":533,"tag":597,"props":2941,"children":2942},{"style":616},[2943],{"type":538,"value":619},{"type":533,"tag":597,"props":2945,"children":2946},{"class":599,"line":1259},[2947],{"type":533,"tag":597,"props":2948,"children":2949},{"style":656},[2950],{"type":538,"value":2951},"    // 具体的 HTML 生成逻辑\n",{"type":533,"tag":597,"props":2953,"children":2954},{"class":599,"line":1267},[2955],{"type":533,"tag":597,"props":2956,"children":2957},{"style":616},[2958],{"type":538,"value":668},{"type":533,"tag":597,"props":2960,"children":2962},{"class":599,"line":2961},23,[2963],{"type":533,"tag":597,"props":2964,"children":2965},{"style":616},[2966],{"type":538,"value":722},{"type":533,"tag":534,"props":2968,"children":2969},{},[2970],{"type":538,"value":2971},"现在，ReportGenerator 不再直接依赖于具体的实现，而是依赖于抽象的报告生成器接口。这使得我们可以轻松地扩展系统，例如添加新的报告生成器，而不需要修改 ReportGenerator 类。这样的设计更加灵活，符合依赖反转原则。",{"type":533,"tag":2973,"props":2974,"children":2975},"style",{},[2976],{"type":538,"value":2977},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":527,"searchDepth":671,"depth":671,"links":2979},[2980,2981,2982,2983,2984],{"id":577,"depth":622,"text":577},{"id":881,"depth":622,"text":881},{"id":1487,"depth":622,"text":1487},{"id":2068,"depth":622,"text":2068},{"id":2431,"depth":622,"text":2431},"markdown","content:4.design-mode:1.thoughts-principles.md","content","4.design-mode/1.thoughts-principles.md","md",[2991,2992],{"_path":502,"title":501,"description":527},{"_path":519,"title":518,"description":527},1714096146763]