[{"data":1,"prerenderedAt":3015},["Reactive",2],{"navigation":3,"/design-mode/thoughts-principles":546,"/design-mode/thoughts-principles-surround":3012},[4,269,298,514,522,531],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":513},"代码考核","/code-assessment",[302,404,506],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,337,353,381,388,395,398,401],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328,331,334],{"title":311,"_path":312},"polyfill","/code-assessment/source/native-api/polyfill",{"title":314,"_path":315},"ajax","/code-assessment/source/native-api/ajax",{"title":317,"_path":318},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":320,"_path":321},"new 操作符","/code-assessment/source/native-api/new",{"title":323,"_path":324},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":326,"_path":327},"定时器","/code-assessment/source/native-api/timer",{"title":329,"_path":330},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":332,"_path":333},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":335,"_path":336},"extends","/code-assessment/source/native-api/extends",{"title":338,"_path":339,"children":340},"函数 Function","/code-assessment/source/function",[341,344,347,350],{"title":342,"_path":343},"函数防抖","/code-assessment/source/function/debounce",{"title":345,"_path":346},"函数节流","/code-assessment/source/function/throttle",{"title":348,"_path":349},"函数柯理化","/code-assessment/source/function/curry",{"title":351,"_path":352},"函数睡眠","/code-assessment/source/function/sleep",{"title":354,"_path":355,"children":356},"数组 Array","/code-assessment/source/array",[357,360,363,366,369,372,375,378],{"title":358,"_path":359},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":361,"_path":362},"数组扁平化","/code-assessment/source/array/flat",{"title":364,"_path":365},"原型方法","/code-assessment/source/array/prototype-method",{"title":367,"_path":368},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":370,"_path":371},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":373,"_path":374},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":376,"_path":377},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":379,"_path":380},"二维数组","/code-assessment/source/array/2d-array",{"title":382,"_path":383,"children":384},"字符串 String","/code-assessment/source/string",[385],{"title":386,"_path":387},"repeat()","/code-assessment/source/string/repeat",{"title":389,"_path":390,"children":391},"集合 Set","/code-assessment/source/set",[392],{"title":393,"_path":394},"遍历集合","/code-assessment/source/set/traverse",{"title":396,"_path":397},"获取通用类型","/code-assessment/source/get-generic-type",{"title":399,"_path":400},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":402,"_path":403},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":405,"_path":406,"children":407},"业务场景","/code-assessment/scene",[408,439,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503],{"title":409,"_path":410,"children":411},"Promise","/code-assessment/scene/promise",[412,415,418,421,424,427,430,433,436],{"title":413,"_path":414},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":416,"_path":417},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":419,"_path":420},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":422,"_path":423},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":425,"_path":426},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":428,"_path":429},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":431,"_path":432},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":434,"_path":435},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":437,"_path":438},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":440,"_path":441,"children":442},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[443,446],{"title":444,"_path":445},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":447,"_path":448},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":450,"_path":451},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":453,"_path":454},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":456,"_path":457},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":459,"_path":460},"倒计时","/code-assessment/scene/countdown",{"title":462,"_path":463},"日期格式化","/code-assessment/scene/date-format",{"title":465,"_path":466},"实现前端路由","/code-assessment/scene/frontend-route",{"title":468,"_path":469},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":471,"_path":472},"lodash.get","/code-assessment/scene/lodash-get",{"title":474,"_path":475},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":477,"_path":478},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":480,"_path":481},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":483,"_path":484},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":486,"_path":487},"随机数","/code-assessment/scene/random-number",{"title":489,"_path":490},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":492,"_path":493},"sku 算法实现","/code-assessment/scene/sku",{"title":495,"_path":496},"整数分割","/code-assessment/scene/split-number",{"title":498,"_path":499},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":501,"_path":502},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":504,"_path":505},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":507,"_path":508,"children":509},"Ts 类型挑战","/code-assessment/type-challeges",[510],{"title":511,"_path":512},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":515,"_path":516,"children":517,"icon":521},"项目","/project",[518],{"title":519,"_path":520},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":523,"_path":524,"children":525,"icon":530},"设计模式","/design-mode",[526,527],{"title":523,"_path":524},{"title":528,"_path":529},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":532,"_path":533,"children":534,"icon":545},"后端语言","/backend-languages",[535],{"title":536,"_path":537,"children":538},"Python","/backend-languages/python",[539,542],{"title":540,"_path":541},"基础","/backend-languages/python/base",{"title":543,"_path":544},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":529,"_dir":547,"_draft":548,"_partial":548,"_locale":549,"title":528,"description":550,"body":551,"_type":3007,"_id":3008,"_source":3009,"_file":3010,"_extension":3011},"design-mode",false,"","SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。这些原则由 Robert C. Martin 等人提出，它们包括以下五个原则：",{"type":552,"children":553,"toc":3000},"root",[554,561,591,596,602,607,745,750,764,769,896,901,906,911,916,1295,1300,1305,1497,1502,1507,1512,1517,1522,1527,1857,1862,2078,2083,2088,2093,2098,2103,2108,2312,2317,2322,2446,2451,2456,2461,2466,2693,2698,2703,2989,2994],{"type":555,"tag":556,"props":557,"children":558},"element","p",{},[559],{"type":560,"value":550},"text",{"type":555,"tag":562,"props":563,"children":564},"ul",{},[565,571,576,581,586],{"type":555,"tag":566,"props":567,"children":568},"li",{},[569],{"type":560,"value":570},"单一职责原则（Single Responsibility Principle，SRP）",{"type":555,"tag":566,"props":572,"children":573},{},[574],{"type":560,"value":575},"开放/封闭原则（Open/Closed Principle，OCP）",{"type":555,"tag":566,"props":577,"children":578},{},[579],{"type":560,"value":580},"里氏替换原则（Liskov Substitution Principle，LSP）",{"type":555,"tag":566,"props":582,"children":583},{},[584],{"type":560,"value":585},"接口隔离原则（Interface Segregation Principle，ISP）",{"type":555,"tag":566,"props":587,"children":588},{},[589],{"type":560,"value":590},"依赖反转原则（Dependency Inversion Principle，DIP）",{"type":555,"tag":556,"props":592,"children":593},{},[594],{"type":560,"value":595},"这些原则共同促使开发者创建具有高内聚、低耦合、易扩展和易维护性的软件系统。遵循这些原则有助于构建更健壮的面向对象系统，提高代码质量和可维护性。",{"type":555,"tag":597,"props":598,"children":600},"h2",{"id":599},"单一职责原则",[601],{"type":560,"value":599},{"type":555,"tag":556,"props":603,"children":604},{},[605],{"type":560,"value":606},"单一职责原则（Single Responsibility Principle，SRP）要求一个类或者模块只负责完成一个职责（或者功能）。 假设我们有一个简单的厨师类，它负责烹饪和洗碗两个职责：",{"type":555,"tag":608,"props":609,"children":613},"pre",{"className":610,"code":611,"language":612,"meta":549,"style":549},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n","js",[614],{"type":555,"tag":615,"props":616,"children":617},"code",{"__ignoreMap":549},[618,642,672,682,691,701,719,728,736],{"type":555,"tag":619,"props":620,"children":623},"span",{"class":621,"line":622},"line",1,[624,630,636],{"type":555,"tag":619,"props":625,"children":627},{"style":626},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[628],{"type":560,"value":629},"class",{"type":555,"tag":619,"props":631,"children":633},{"style":632},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[634],{"type":560,"value":635}," Chef",{"type":555,"tag":619,"props":637,"children":639},{"style":638},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[640],{"type":560,"value":641}," {\n",{"type":555,"tag":619,"props":643,"children":645},{"class":621,"line":644},2,[646,652,657,663,668],{"type":555,"tag":619,"props":647,"children":649},{"style":648},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[650],{"type":560,"value":651},"  cookDish",{"type":555,"tag":619,"props":653,"children":654},{"style":638},[655],{"type":560,"value":656},"(",{"type":555,"tag":619,"props":658,"children":660},{"style":659},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[661],{"type":560,"value":662},"dish",{"type":555,"tag":619,"props":664,"children":665},{"style":638},[666],{"type":560,"value":667},")",{"type":555,"tag":619,"props":669,"children":670},{"style":638},[671],{"type":560,"value":641},{"type":555,"tag":619,"props":673,"children":675},{"class":621,"line":674},3,[676],{"type":555,"tag":619,"props":677,"children":679},{"style":678},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[680],{"type":560,"value":681},"    // 烹饪菜品的具体实现\n",{"type":555,"tag":619,"props":683,"children":685},{"class":621,"line":684},4,[686],{"type":555,"tag":619,"props":687,"children":688},{"style":638},[689],{"type":560,"value":690},"  }\n",{"type":555,"tag":619,"props":692,"children":694},{"class":621,"line":693},5,[695],{"type":555,"tag":619,"props":696,"children":698},{"emptyLinePlaceholder":697},true,[699],{"type":560,"value":700},"\n",{"type":555,"tag":619,"props":702,"children":704},{"class":621,"line":703},6,[705,710,715],{"type":555,"tag":619,"props":706,"children":707},{"style":648},[708],{"type":560,"value":709},"  washDishes",{"type":555,"tag":619,"props":711,"children":712},{"style":638},[713],{"type":560,"value":714},"()",{"type":555,"tag":619,"props":716,"children":717},{"style":638},[718],{"type":560,"value":641},{"type":555,"tag":619,"props":720,"children":722},{"class":621,"line":721},7,[723],{"type":555,"tag":619,"props":724,"children":725},{"style":678},[726],{"type":560,"value":727},"    // 洗碗的具体实现\n",{"type":555,"tag":619,"props":729,"children":731},{"class":621,"line":730},8,[732],{"type":555,"tag":619,"props":733,"children":734},{"style":638},[735],{"type":560,"value":690},{"type":555,"tag":619,"props":737,"children":739},{"class":621,"line":738},9,[740],{"type":555,"tag":619,"props":741,"children":742},{"style":638},[743],{"type":560,"value":744},"}\n",{"type":555,"tag":556,"props":746,"children":747},{},[748],{"type":560,"value":749},"这个类违反了单一职责原则，因为它有两个职责：烹饪和洗碗。这样的设计可能导致以下问题：",{"type":555,"tag":751,"props":752,"children":753},"ol",{},[754,759],{"type":555,"tag":566,"props":755,"children":756},{},[757],{"type":560,"value":758},"如果厨师的烹饪逻辑变化，需要修改 cookDish 方法，这可能会影响洗碗的部分。",{"type":555,"tag":566,"props":760,"children":761},{},[762],{"type":560,"value":763},"如果洗碗的逻辑变化，需要修改 washDishes 方法，这可能会影响烹饪的部分。",{"type":555,"tag":556,"props":765,"children":766},{},[767],{"type":560,"value":768},"按照单一职责原则，我们应该将这两个职责分开，分别由不同的类负责：",{"type":555,"tag":608,"props":770,"children":772},{"className":610,"code":771,"language":612,"meta":549,"style":549},"class Chef {\n  cookDish(dish) {\n    // 烹饪菜品的具体实现\n  }\n}\n\nclass Dishwasher {\n  washDishes() {\n    // 洗碗的具体实现\n  }\n}\n",[773],{"type":555,"tag":615,"props":774,"children":775},{"__ignoreMap":549},[776,791,814,821,828,835,842,858,873,880,888],{"type":555,"tag":619,"props":777,"children":778},{"class":621,"line":622},[779,783,787],{"type":555,"tag":619,"props":780,"children":781},{"style":626},[782],{"type":560,"value":629},{"type":555,"tag":619,"props":784,"children":785},{"style":632},[786],{"type":560,"value":635},{"type":555,"tag":619,"props":788,"children":789},{"style":638},[790],{"type":560,"value":641},{"type":555,"tag":619,"props":792,"children":793},{"class":621,"line":644},[794,798,802,806,810],{"type":555,"tag":619,"props":795,"children":796},{"style":648},[797],{"type":560,"value":651},{"type":555,"tag":619,"props":799,"children":800},{"style":638},[801],{"type":560,"value":656},{"type":555,"tag":619,"props":803,"children":804},{"style":659},[805],{"type":560,"value":662},{"type":555,"tag":619,"props":807,"children":808},{"style":638},[809],{"type":560,"value":667},{"type":555,"tag":619,"props":811,"children":812},{"style":638},[813],{"type":560,"value":641},{"type":555,"tag":619,"props":815,"children":816},{"class":621,"line":674},[817],{"type":555,"tag":619,"props":818,"children":819},{"style":678},[820],{"type":560,"value":681},{"type":555,"tag":619,"props":822,"children":823},{"class":621,"line":684},[824],{"type":555,"tag":619,"props":825,"children":826},{"style":638},[827],{"type":560,"value":690},{"type":555,"tag":619,"props":829,"children":830},{"class":621,"line":693},[831],{"type":555,"tag":619,"props":832,"children":833},{"style":638},[834],{"type":560,"value":744},{"type":555,"tag":619,"props":836,"children":837},{"class":621,"line":703},[838],{"type":555,"tag":619,"props":839,"children":840},{"emptyLinePlaceholder":697},[841],{"type":560,"value":700},{"type":555,"tag":619,"props":843,"children":844},{"class":621,"line":721},[845,849,854],{"type":555,"tag":619,"props":846,"children":847},{"style":626},[848],{"type":560,"value":629},{"type":555,"tag":619,"props":850,"children":851},{"style":632},[852],{"type":560,"value":853}," Dishwasher",{"type":555,"tag":619,"props":855,"children":856},{"style":638},[857],{"type":560,"value":641},{"type":555,"tag":619,"props":859,"children":860},{"class":621,"line":730},[861,865,869],{"type":555,"tag":619,"props":862,"children":863},{"style":648},[864],{"type":560,"value":709},{"type":555,"tag":619,"props":866,"children":867},{"style":638},[868],{"type":560,"value":714},{"type":555,"tag":619,"props":870,"children":871},{"style":638},[872],{"type":560,"value":641},{"type":555,"tag":619,"props":874,"children":875},{"class":621,"line":738},[876],{"type":555,"tag":619,"props":877,"children":878},{"style":678},[879],{"type":560,"value":727},{"type":555,"tag":619,"props":881,"children":883},{"class":621,"line":882},10,[884],{"type":555,"tag":619,"props":885,"children":886},{"style":638},[887],{"type":560,"value":690},{"type":555,"tag":619,"props":889,"children":891},{"class":621,"line":890},11,[892],{"type":555,"tag":619,"props":893,"children":894},{"style":638},[895],{"type":560,"value":744},{"type":555,"tag":556,"props":897,"children":898},{},[899],{"type":560,"value":900},"这样，Chef 类专注于烹饪，而 Dishwasher 类专注于洗碗。每个类都有一个单一的职责，使得代码更清晰、易于理解，并且在未来的变更中更具弹性。",{"type":555,"tag":597,"props":902,"children":904},{"id":903},"开放封闭原则",[905],{"type":560,"value":903},{"type":555,"tag":556,"props":907,"children":908},{},[909],{"type":560,"value":910},"开关封闭原则（Open/Closed Principle，OCP）要求软件实体（例如类、模块、函数等）应该对扩展开放，对修改关闭。简而言之，一个模块在扩展新功能时不应该修改原有的代码，而是通过添加新的代码来实现扩展。",{"type":555,"tag":556,"props":912,"children":913},{},[914],{"type":560,"value":915},"考虑一个动物园的场景。我们有一些动物，每个动物都会发出叫声。初始设计如下：",{"type":555,"tag":608,"props":917,"children":919},{"className":610,"code":918,"language":612,"meta":549,"style":549},"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    // 默认的叫声\n    console.log(\"Some generic animal sound\");\n  }\n}\n\nclass Lion extends Animal {\n  makeSound() {\n    console.log(\"Roar!\");\n  }\n}\n\nclass Elephant extends Animal {\n  makeSound() {\n    console.log(\"Trumpet!\");\n  }\n}\n",[920],{"type":555,"tag":615,"props":921,"children":922},{"__ignoreMap":549},[923,939,964,997,1004,1011,1027,1035,1077,1084,1091,1098,1124,1140,1177,1185,1193,1201,1226,1242,1279,1287],{"type":555,"tag":619,"props":924,"children":925},{"class":621,"line":622},[926,930,935],{"type":555,"tag":619,"props":927,"children":928},{"style":626},[929],{"type":560,"value":629},{"type":555,"tag":619,"props":931,"children":932},{"style":632},[933],{"type":560,"value":934}," Animal",{"type":555,"tag":619,"props":936,"children":937},{"style":638},[938],{"type":560,"value":641},{"type":555,"tag":619,"props":940,"children":941},{"class":621,"line":644},[942,947,951,956,960],{"type":555,"tag":619,"props":943,"children":944},{"style":626},[945],{"type":560,"value":946},"  constructor",{"type":555,"tag":619,"props":948,"children":949},{"style":638},[950],{"type":560,"value":656},{"type":555,"tag":619,"props":952,"children":953},{"style":659},[954],{"type":560,"value":955},"name",{"type":555,"tag":619,"props":957,"children":958},{"style":638},[959],{"type":560,"value":667},{"type":555,"tag":619,"props":961,"children":962},{"style":638},[963],{"type":560,"value":641},{"type":555,"tag":619,"props":965,"children":966},{"class":621,"line":674},[967,973,978,982,987,992],{"type":555,"tag":619,"props":968,"children":970},{"style":969},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[971],{"type":560,"value":972},"    this",{"type":555,"tag":619,"props":974,"children":975},{"style":638},[976],{"type":560,"value":977},".",{"type":555,"tag":619,"props":979,"children":980},{"style":659},[981],{"type":560,"value":955},{"type":555,"tag":619,"props":983,"children":984},{"style":638},[985],{"type":560,"value":986}," =",{"type":555,"tag":619,"props":988,"children":989},{"style":659},[990],{"type":560,"value":991}," name",{"type":555,"tag":619,"props":993,"children":994},{"style":638},[995],{"type":560,"value":996},";\n",{"type":555,"tag":619,"props":998,"children":999},{"class":621,"line":684},[1000],{"type":555,"tag":619,"props":1001,"children":1002},{"style":638},[1003],{"type":560,"value":690},{"type":555,"tag":619,"props":1005,"children":1006},{"class":621,"line":693},[1007],{"type":555,"tag":619,"props":1008,"children":1009},{"emptyLinePlaceholder":697},[1010],{"type":560,"value":700},{"type":555,"tag":619,"props":1012,"children":1013},{"class":621,"line":703},[1014,1019,1023],{"type":555,"tag":619,"props":1015,"children":1016},{"style":648},[1017],{"type":560,"value":1018},"  makeSound",{"type":555,"tag":619,"props":1020,"children":1021},{"style":638},[1022],{"type":560,"value":714},{"type":555,"tag":619,"props":1024,"children":1025},{"style":638},[1026],{"type":560,"value":641},{"type":555,"tag":619,"props":1028,"children":1029},{"class":621,"line":721},[1030],{"type":555,"tag":619,"props":1031,"children":1032},{"style":678},[1033],{"type":560,"value":1034},"    // 默认的叫声\n",{"type":555,"tag":619,"props":1036,"children":1037},{"class":621,"line":730},[1038,1043,1047,1052,1056,1062,1068,1072],{"type":555,"tag":619,"props":1039,"children":1040},{"style":659},[1041],{"type":560,"value":1042},"    console",{"type":555,"tag":619,"props":1044,"children":1045},{"style":638},[1046],{"type":560,"value":977},{"type":555,"tag":619,"props":1048,"children":1049},{"style":648},[1050],{"type":560,"value":1051},"log",{"type":555,"tag":619,"props":1053,"children":1054},{"style":638},[1055],{"type":560,"value":656},{"type":555,"tag":619,"props":1057,"children":1059},{"style":1058},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1060],{"type":560,"value":1061},"\"",{"type":555,"tag":619,"props":1063,"children":1065},{"style":1064},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1066],{"type":560,"value":1067},"Some generic animal sound",{"type":555,"tag":619,"props":1069,"children":1070},{"style":1058},[1071],{"type":560,"value":1061},{"type":555,"tag":619,"props":1073,"children":1074},{"style":638},[1075],{"type":560,"value":1076},");\n",{"type":555,"tag":619,"props":1078,"children":1079},{"class":621,"line":738},[1080],{"type":555,"tag":619,"props":1081,"children":1082},{"style":638},[1083],{"type":560,"value":690},{"type":555,"tag":619,"props":1085,"children":1086},{"class":621,"line":882},[1087],{"type":555,"tag":619,"props":1088,"children":1089},{"style":638},[1090],{"type":560,"value":744},{"type":555,"tag":619,"props":1092,"children":1093},{"class":621,"line":890},[1094],{"type":555,"tag":619,"props":1095,"children":1096},{"emptyLinePlaceholder":697},[1097],{"type":560,"value":700},{"type":555,"tag":619,"props":1099,"children":1101},{"class":621,"line":1100},12,[1102,1106,1111,1116,1120],{"type":555,"tag":619,"props":1103,"children":1104},{"style":626},[1105],{"type":560,"value":629},{"type":555,"tag":619,"props":1107,"children":1108},{"style":632},[1109],{"type":560,"value":1110}," Lion",{"type":555,"tag":619,"props":1112,"children":1113},{"style":626},[1114],{"type":560,"value":1115}," extends",{"type":555,"tag":619,"props":1117,"children":1118},{"style":648},[1119],{"type":560,"value":934},{"type":555,"tag":619,"props":1121,"children":1122},{"style":638},[1123],{"type":560,"value":641},{"type":555,"tag":619,"props":1125,"children":1127},{"class":621,"line":1126},13,[1128,1132,1136],{"type":555,"tag":619,"props":1129,"children":1130},{"style":648},[1131],{"type":560,"value":1018},{"type":555,"tag":619,"props":1133,"children":1134},{"style":638},[1135],{"type":560,"value":714},{"type":555,"tag":619,"props":1137,"children":1138},{"style":638},[1139],{"type":560,"value":641},{"type":555,"tag":619,"props":1141,"children":1143},{"class":621,"line":1142},14,[1144,1148,1152,1156,1160,1164,1169,1173],{"type":555,"tag":619,"props":1145,"children":1146},{"style":659},[1147],{"type":560,"value":1042},{"type":555,"tag":619,"props":1149,"children":1150},{"style":638},[1151],{"type":560,"value":977},{"type":555,"tag":619,"props":1153,"children":1154},{"style":648},[1155],{"type":560,"value":1051},{"type":555,"tag":619,"props":1157,"children":1158},{"style":638},[1159],{"type":560,"value":656},{"type":555,"tag":619,"props":1161,"children":1162},{"style":1058},[1163],{"type":560,"value":1061},{"type":555,"tag":619,"props":1165,"children":1166},{"style":1064},[1167],{"type":560,"value":1168},"Roar!",{"type":555,"tag":619,"props":1170,"children":1171},{"style":1058},[1172],{"type":560,"value":1061},{"type":555,"tag":619,"props":1174,"children":1175},{"style":638},[1176],{"type":560,"value":1076},{"type":555,"tag":619,"props":1178,"children":1180},{"class":621,"line":1179},15,[1181],{"type":555,"tag":619,"props":1182,"children":1183},{"style":638},[1184],{"type":560,"value":690},{"type":555,"tag":619,"props":1186,"children":1188},{"class":621,"line":1187},16,[1189],{"type":555,"tag":619,"props":1190,"children":1191},{"style":638},[1192],{"type":560,"value":744},{"type":555,"tag":619,"props":1194,"children":1196},{"class":621,"line":1195},17,[1197],{"type":555,"tag":619,"props":1198,"children":1199},{"emptyLinePlaceholder":697},[1200],{"type":560,"value":700},{"type":555,"tag":619,"props":1202,"children":1204},{"class":621,"line":1203},18,[1205,1209,1214,1218,1222],{"type":555,"tag":619,"props":1206,"children":1207},{"style":626},[1208],{"type":560,"value":629},{"type":555,"tag":619,"props":1210,"children":1211},{"style":632},[1212],{"type":560,"value":1213}," Elephant",{"type":555,"tag":619,"props":1215,"children":1216},{"style":626},[1217],{"type":560,"value":1115},{"type":555,"tag":619,"props":1219,"children":1220},{"style":648},[1221],{"type":560,"value":934},{"type":555,"tag":619,"props":1223,"children":1224},{"style":638},[1225],{"type":560,"value":641},{"type":555,"tag":619,"props":1227,"children":1229},{"class":621,"line":1228},19,[1230,1234,1238],{"type":555,"tag":619,"props":1231,"children":1232},{"style":648},[1233],{"type":560,"value":1018},{"type":555,"tag":619,"props":1235,"children":1236},{"style":638},[1237],{"type":560,"value":714},{"type":555,"tag":619,"props":1239,"children":1240},{"style":638},[1241],{"type":560,"value":641},{"type":555,"tag":619,"props":1243,"children":1245},{"class":621,"line":1244},20,[1246,1250,1254,1258,1262,1266,1271,1275],{"type":555,"tag":619,"props":1247,"children":1248},{"style":659},[1249],{"type":560,"value":1042},{"type":555,"tag":619,"props":1251,"children":1252},{"style":638},[1253],{"type":560,"value":977},{"type":555,"tag":619,"props":1255,"children":1256},{"style":648},[1257],{"type":560,"value":1051},{"type":555,"tag":619,"props":1259,"children":1260},{"style":638},[1261],{"type":560,"value":656},{"type":555,"tag":619,"props":1263,"children":1264},{"style":1058},[1265],{"type":560,"value":1061},{"type":555,"tag":619,"props":1267,"children":1268},{"style":1064},[1269],{"type":560,"value":1270},"Trumpet!",{"type":555,"tag":619,"props":1272,"children":1273},{"style":1058},[1274],{"type":560,"value":1061},{"type":555,"tag":619,"props":1276,"children":1277},{"style":638},[1278],{"type":560,"value":1076},{"type":555,"tag":619,"props":1280,"children":1282},{"class":621,"line":1281},21,[1283],{"type":555,"tag":619,"props":1284,"children":1285},{"style":638},[1286],{"type":560,"value":690},{"type":555,"tag":619,"props":1288,"children":1290},{"class":621,"line":1289},22,[1291],{"type":555,"tag":619,"props":1292,"children":1293},{"style":638},[1294],{"type":560,"value":744},{"type":555,"tag":556,"props":1296,"children":1297},{},[1298],{"type":560,"value":1299},"在这个设计中，Animal 类是一个基类，而 Lion 和 Elephant 是它的子类。每个动物都有自己的叫声，通过重写 makeSound 方法来实现。",{"type":555,"tag":556,"props":1301,"children":1302},{},[1303],{"type":560,"value":1304},"现在，假设我们要添加一些新的动物，比如鹦鹉和狗，按照开放/封闭原则，我们应该扩展而不是修改现有的代码：",{"type":555,"tag":608,"props":1306,"children":1308},{"className":610,"code":1307,"language":612,"meta":549,"style":549},"class Parrot extends Animal {\n  makeSound() {\n    console.log(\"Squawk!\");\n  }\n}\n\nclass Dog extends Animal {\n  makeSound() {\n    console.log(\"Bark!\");\n  }\n}\n",[1309],{"type":555,"tag":615,"props":1310,"children":1311},{"__ignoreMap":549},[1312,1336,1351,1387,1394,1401,1408,1432,1447,1483,1490],{"type":555,"tag":619,"props":1313,"children":1314},{"class":621,"line":622},[1315,1319,1324,1328,1332],{"type":555,"tag":619,"props":1316,"children":1317},{"style":626},[1318],{"type":560,"value":629},{"type":555,"tag":619,"props":1320,"children":1321},{"style":632},[1322],{"type":560,"value":1323}," Parrot",{"type":555,"tag":619,"props":1325,"children":1326},{"style":626},[1327],{"type":560,"value":1115},{"type":555,"tag":619,"props":1329,"children":1330},{"style":648},[1331],{"type":560,"value":934},{"type":555,"tag":619,"props":1333,"children":1334},{"style":638},[1335],{"type":560,"value":641},{"type":555,"tag":619,"props":1337,"children":1338},{"class":621,"line":644},[1339,1343,1347],{"type":555,"tag":619,"props":1340,"children":1341},{"style":648},[1342],{"type":560,"value":1018},{"type":555,"tag":619,"props":1344,"children":1345},{"style":638},[1346],{"type":560,"value":714},{"type":555,"tag":619,"props":1348,"children":1349},{"style":638},[1350],{"type":560,"value":641},{"type":555,"tag":619,"props":1352,"children":1353},{"class":621,"line":674},[1354,1358,1362,1366,1370,1374,1379,1383],{"type":555,"tag":619,"props":1355,"children":1356},{"style":659},[1357],{"type":560,"value":1042},{"type":555,"tag":619,"props":1359,"children":1360},{"style":638},[1361],{"type":560,"value":977},{"type":555,"tag":619,"props":1363,"children":1364},{"style":648},[1365],{"type":560,"value":1051},{"type":555,"tag":619,"props":1367,"children":1368},{"style":638},[1369],{"type":560,"value":656},{"type":555,"tag":619,"props":1371,"children":1372},{"style":1058},[1373],{"type":560,"value":1061},{"type":555,"tag":619,"props":1375,"children":1376},{"style":1064},[1377],{"type":560,"value":1378},"Squawk!",{"type":555,"tag":619,"props":1380,"children":1381},{"style":1058},[1382],{"type":560,"value":1061},{"type":555,"tag":619,"props":1384,"children":1385},{"style":638},[1386],{"type":560,"value":1076},{"type":555,"tag":619,"props":1388,"children":1389},{"class":621,"line":684},[1390],{"type":555,"tag":619,"props":1391,"children":1392},{"style":638},[1393],{"type":560,"value":690},{"type":555,"tag":619,"props":1395,"children":1396},{"class":621,"line":693},[1397],{"type":555,"tag":619,"props":1398,"children":1399},{"style":638},[1400],{"type":560,"value":744},{"type":555,"tag":619,"props":1402,"children":1403},{"class":621,"line":703},[1404],{"type":555,"tag":619,"props":1405,"children":1406},{"emptyLinePlaceholder":697},[1407],{"type":560,"value":700},{"type":555,"tag":619,"props":1409,"children":1410},{"class":621,"line":721},[1411,1415,1420,1424,1428],{"type":555,"tag":619,"props":1412,"children":1413},{"style":626},[1414],{"type":560,"value":629},{"type":555,"tag":619,"props":1416,"children":1417},{"style":632},[1418],{"type":560,"value":1419}," Dog",{"type":555,"tag":619,"props":1421,"children":1422},{"style":626},[1423],{"type":560,"value":1115},{"type":555,"tag":619,"props":1425,"children":1426},{"style":648},[1427],{"type":560,"value":934},{"type":555,"tag":619,"props":1429,"children":1430},{"style":638},[1431],{"type":560,"value":641},{"type":555,"tag":619,"props":1433,"children":1434},{"class":621,"line":730},[1435,1439,1443],{"type":555,"tag":619,"props":1436,"children":1437},{"style":648},[1438],{"type":560,"value":1018},{"type":555,"tag":619,"props":1440,"children":1441},{"style":638},[1442],{"type":560,"value":714},{"type":555,"tag":619,"props":1444,"children":1445},{"style":638},[1446],{"type":560,"value":641},{"type":555,"tag":619,"props":1448,"children":1449},{"class":621,"line":738},[1450,1454,1458,1462,1466,1470,1475,1479],{"type":555,"tag":619,"props":1451,"children":1452},{"style":659},[1453],{"type":560,"value":1042},{"type":555,"tag":619,"props":1455,"children":1456},{"style":638},[1457],{"type":560,"value":977},{"type":555,"tag":619,"props":1459,"children":1460},{"style":648},[1461],{"type":560,"value":1051},{"type":555,"tag":619,"props":1463,"children":1464},{"style":638},[1465],{"type":560,"value":656},{"type":555,"tag":619,"props":1467,"children":1468},{"style":1058},[1469],{"type":560,"value":1061},{"type":555,"tag":619,"props":1471,"children":1472},{"style":1064},[1473],{"type":560,"value":1474},"Bark!",{"type":555,"tag":619,"props":1476,"children":1477},{"style":1058},[1478],{"type":560,"value":1061},{"type":555,"tag":619,"props":1480,"children":1481},{"style":638},[1482],{"type":560,"value":1076},{"type":555,"tag":619,"props":1484,"children":1485},{"class":621,"line":882},[1486],{"type":555,"tag":619,"props":1487,"children":1488},{"style":638},[1489],{"type":560,"value":690},{"type":555,"tag":619,"props":1491,"children":1492},{"class":621,"line":890},[1493],{"type":555,"tag":619,"props":1494,"children":1495},{"style":638},[1496],{"type":560,"value":744},{"type":555,"tag":556,"props":1498,"children":1499},{},[1500],{"type":560,"value":1501},"这样，我们通过扩展 Animal 类，而不是修改它，来添加新的功能（新的动物）。这符合开放/封闭原则，因为我们对于现有代码的修改是关闭的，我们只是通过扩展来引入新的功能。",{"type":555,"tag":556,"props":1503,"children":1504},{},[1505],{"type":560,"value":1506},"使用开放/封闭原则可以使代码更加稳定，降低对现有代码的影响，同时也更容易应对变化和扩展。",{"type":555,"tag":597,"props":1508,"children":1510},{"id":1509},"里式替换原则",[1511],{"type":560,"value":1509},{"type":555,"tag":556,"props":1513,"children":1514},{},[1515],{"type":560,"value":1516},"里氏替换原则（Liskov Substitution Principle，LSP） 是 SOLID 原则之一，它强调子类型（派生类或子类）必须能够替换掉它们的基类型（基类或父类）并出现在基类能够工作的任何地方，而不破坏程序的正确性。",{"type":555,"tag":556,"props":1518,"children":1519},{},[1520],{"type":560,"value":1521},"通俗地说，如果一个类是基类的子类，那么在任何需要基类的地方，都可以使用这个子类而不产生错误。子类应该保持基类的行为，并且可以扩展或修改基类的行为，但不应该破坏基类原有的约定。",{"type":555,"tag":556,"props":1523,"children":1524},{},[1525],{"type":560,"value":1526},"假设我们有一个表示矩形的基类 Rectangle：",{"type":555,"tag":608,"props":1528,"children":1530},{"className":610,"code":1529,"language":612,"meta":549,"style":549},"class Rectangle {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n",[1531],{"type":555,"tag":615,"props":1532,"children":1533},{"__ignoreMap":549},[1534,1550,1584,1612,1640,1647,1654,1678,1705,1712,1719,1743,1770,1777,1784,1800,1843,1850],{"type":555,"tag":619,"props":1535,"children":1536},{"class":621,"line":622},[1537,1541,1546],{"type":555,"tag":619,"props":1538,"children":1539},{"style":626},[1540],{"type":560,"value":629},{"type":555,"tag":619,"props":1542,"children":1543},{"style":632},[1544],{"type":560,"value":1545}," Rectangle",{"type":555,"tag":619,"props":1547,"children":1548},{"style":638},[1549],{"type":560,"value":641},{"type":555,"tag":619,"props":1551,"children":1552},{"class":621,"line":644},[1553,1557,1561,1566,1571,1576,1580],{"type":555,"tag":619,"props":1554,"children":1555},{"style":626},[1556],{"type":560,"value":946},{"type":555,"tag":619,"props":1558,"children":1559},{"style":638},[1560],{"type":560,"value":656},{"type":555,"tag":619,"props":1562,"children":1563},{"style":659},[1564],{"type":560,"value":1565},"width",{"type":555,"tag":619,"props":1567,"children":1568},{"style":638},[1569],{"type":560,"value":1570},",",{"type":555,"tag":619,"props":1572,"children":1573},{"style":659},[1574],{"type":560,"value":1575}," height",{"type":555,"tag":619,"props":1577,"children":1578},{"style":638},[1579],{"type":560,"value":667},{"type":555,"tag":619,"props":1581,"children":1582},{"style":638},[1583],{"type":560,"value":641},{"type":555,"tag":619,"props":1585,"children":1586},{"class":621,"line":674},[1587,1591,1595,1599,1603,1608],{"type":555,"tag":619,"props":1588,"children":1589},{"style":969},[1590],{"type":560,"value":972},{"type":555,"tag":619,"props":1592,"children":1593},{"style":638},[1594],{"type":560,"value":977},{"type":555,"tag":619,"props":1596,"children":1597},{"style":659},[1598],{"type":560,"value":1565},{"type":555,"tag":619,"props":1600,"children":1601},{"style":638},[1602],{"type":560,"value":986},{"type":555,"tag":619,"props":1604,"children":1605},{"style":659},[1606],{"type":560,"value":1607}," width",{"type":555,"tag":619,"props":1609,"children":1610},{"style":638},[1611],{"type":560,"value":996},{"type":555,"tag":619,"props":1613,"children":1614},{"class":621,"line":684},[1615,1619,1623,1628,1632,1636],{"type":555,"tag":619,"props":1616,"children":1617},{"style":969},[1618],{"type":560,"value":972},{"type":555,"tag":619,"props":1620,"children":1621},{"style":638},[1622],{"type":560,"value":977},{"type":555,"tag":619,"props":1624,"children":1625},{"style":659},[1626],{"type":560,"value":1627},"height",{"type":555,"tag":619,"props":1629,"children":1630},{"style":638},[1631],{"type":560,"value":986},{"type":555,"tag":619,"props":1633,"children":1634},{"style":659},[1635],{"type":560,"value":1575},{"type":555,"tag":619,"props":1637,"children":1638},{"style":638},[1639],{"type":560,"value":996},{"type":555,"tag":619,"props":1641,"children":1642},{"class":621,"line":693},[1643],{"type":555,"tag":619,"props":1644,"children":1645},{"style":638},[1646],{"type":560,"value":690},{"type":555,"tag":619,"props":1648,"children":1649},{"class":621,"line":703},[1650],{"type":555,"tag":619,"props":1651,"children":1652},{"emptyLinePlaceholder":697},[1653],{"type":560,"value":700},{"type":555,"tag":619,"props":1655,"children":1656},{"class":621,"line":721},[1657,1662,1666,1670,1674],{"type":555,"tag":619,"props":1658,"children":1659},{"style":648},[1660],{"type":560,"value":1661},"  setWidth",{"type":555,"tag":619,"props":1663,"children":1664},{"style":638},[1665],{"type":560,"value":656},{"type":555,"tag":619,"props":1667,"children":1668},{"style":659},[1669],{"type":560,"value":1565},{"type":555,"tag":619,"props":1671,"children":1672},{"style":638},[1673],{"type":560,"value":667},{"type":555,"tag":619,"props":1675,"children":1676},{"style":638},[1677],{"type":560,"value":641},{"type":555,"tag":619,"props":1679,"children":1680},{"class":621,"line":730},[1681,1685,1689,1693,1697,1701],{"type":555,"tag":619,"props":1682,"children":1683},{"style":969},[1684],{"type":560,"value":972},{"type":555,"tag":619,"props":1686,"children":1687},{"style":638},[1688],{"type":560,"value":977},{"type":555,"tag":619,"props":1690,"children":1691},{"style":659},[1692],{"type":560,"value":1565},{"type":555,"tag":619,"props":1694,"children":1695},{"style":638},[1696],{"type":560,"value":986},{"type":555,"tag":619,"props":1698,"children":1699},{"style":659},[1700],{"type":560,"value":1607},{"type":555,"tag":619,"props":1702,"children":1703},{"style":638},[1704],{"type":560,"value":996},{"type":555,"tag":619,"props":1706,"children":1707},{"class":621,"line":738},[1708],{"type":555,"tag":619,"props":1709,"children":1710},{"style":638},[1711],{"type":560,"value":690},{"type":555,"tag":619,"props":1713,"children":1714},{"class":621,"line":882},[1715],{"type":555,"tag":619,"props":1716,"children":1717},{"emptyLinePlaceholder":697},[1718],{"type":560,"value":700},{"type":555,"tag":619,"props":1720,"children":1721},{"class":621,"line":890},[1722,1727,1731,1735,1739],{"type":555,"tag":619,"props":1723,"children":1724},{"style":648},[1725],{"type":560,"value":1726},"  setHeight",{"type":555,"tag":619,"props":1728,"children":1729},{"style":638},[1730],{"type":560,"value":656},{"type":555,"tag":619,"props":1732,"children":1733},{"style":659},[1734],{"type":560,"value":1627},{"type":555,"tag":619,"props":1736,"children":1737},{"style":638},[1738],{"type":560,"value":667},{"type":555,"tag":619,"props":1740,"children":1741},{"style":638},[1742],{"type":560,"value":641},{"type":555,"tag":619,"props":1744,"children":1745},{"class":621,"line":1100},[1746,1750,1754,1758,1762,1766],{"type":555,"tag":619,"props":1747,"children":1748},{"style":969},[1749],{"type":560,"value":972},{"type":555,"tag":619,"props":1751,"children":1752},{"style":638},[1753],{"type":560,"value":977},{"type":555,"tag":619,"props":1755,"children":1756},{"style":659},[1757],{"type":560,"value":1627},{"type":555,"tag":619,"props":1759,"children":1760},{"style":638},[1761],{"type":560,"value":986},{"type":555,"tag":619,"props":1763,"children":1764},{"style":659},[1765],{"type":560,"value":1575},{"type":555,"tag":619,"props":1767,"children":1768},{"style":638},[1769],{"type":560,"value":996},{"type":555,"tag":619,"props":1771,"children":1772},{"class":621,"line":1126},[1773],{"type":555,"tag":619,"props":1774,"children":1775},{"style":638},[1776],{"type":560,"value":690},{"type":555,"tag":619,"props":1778,"children":1779},{"class":621,"line":1142},[1780],{"type":555,"tag":619,"props":1781,"children":1782},{"emptyLinePlaceholder":697},[1783],{"type":560,"value":700},{"type":555,"tag":619,"props":1785,"children":1786},{"class":621,"line":1179},[1787,1792,1796],{"type":555,"tag":619,"props":1788,"children":1789},{"style":648},[1790],{"type":560,"value":1791},"  getArea",{"type":555,"tag":619,"props":1793,"children":1794},{"style":638},[1795],{"type":560,"value":714},{"type":555,"tag":619,"props":1797,"children":1798},{"style":638},[1799],{"type":560,"value":641},{"type":555,"tag":619,"props":1801,"children":1802},{"class":621,"line":1187},[1803,1809,1814,1818,1822,1827,1831,1835,1839],{"type":555,"tag":619,"props":1804,"children":1806},{"style":1805},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1807],{"type":560,"value":1808},"    return",{"type":555,"tag":619,"props":1810,"children":1811},{"style":969},[1812],{"type":560,"value":1813}," this",{"type":555,"tag":619,"props":1815,"children":1816},{"style":638},[1817],{"type":560,"value":977},{"type":555,"tag":619,"props":1819,"children":1820},{"style":659},[1821],{"type":560,"value":1565},{"type":555,"tag":619,"props":1823,"children":1824},{"style":626},[1825],{"type":560,"value":1826}," *",{"type":555,"tag":619,"props":1828,"children":1829},{"style":969},[1830],{"type":560,"value":1813},{"type":555,"tag":619,"props":1832,"children":1833},{"style":638},[1834],{"type":560,"value":977},{"type":555,"tag":619,"props":1836,"children":1837},{"style":659},[1838],{"type":560,"value":1627},{"type":555,"tag":619,"props":1840,"children":1841},{"style":638},[1842],{"type":560,"value":996},{"type":555,"tag":619,"props":1844,"children":1845},{"class":621,"line":1195},[1846],{"type":555,"tag":619,"props":1847,"children":1848},{"style":638},[1849],{"type":560,"value":690},{"type":555,"tag":619,"props":1851,"children":1852},{"class":621,"line":1203},[1853],{"type":555,"tag":619,"props":1854,"children":1855},{"style":638},[1856],{"type":560,"value":744},{"type":555,"tag":556,"props":1858,"children":1859},{},[1860],{"type":560,"value":1861},"现在，我们创建了一个子类 Square 继承自 Rectangle，表示正方形。在正方形中，宽和高应该始终相等。",{"type":555,"tag":608,"props":1863,"children":1865},{"className":610,"code":1864,"language":612,"meta":549,"style":549},"class Square extends Rectangle {\n  setWidth(width) {\n    super.setWidth(width);\n    super.setHeight(width);\n  }\n\n  setHeight(height) {\n    super.setWidth(height);\n    super.setHeight(height);\n  }\n}\n",[1866],{"type":555,"tag":615,"props":1867,"children":1868},{"__ignoreMap":549},[1869,1893,1916,1945,1973,1980,1987,2010,2037,2064,2071],{"type":555,"tag":619,"props":1870,"children":1871},{"class":621,"line":622},[1872,1876,1881,1885,1889],{"type":555,"tag":619,"props":1873,"children":1874},{"style":626},[1875],{"type":560,"value":629},{"type":555,"tag":619,"props":1877,"children":1878},{"style":632},[1879],{"type":560,"value":1880}," Square",{"type":555,"tag":619,"props":1882,"children":1883},{"style":626},[1884],{"type":560,"value":1115},{"type":555,"tag":619,"props":1886,"children":1887},{"style":648},[1888],{"type":560,"value":1545},{"type":555,"tag":619,"props":1890,"children":1891},{"style":638},[1892],{"type":560,"value":641},{"type":555,"tag":619,"props":1894,"children":1895},{"class":621,"line":644},[1896,1900,1904,1908,1912],{"type":555,"tag":619,"props":1897,"children":1898},{"style":648},[1899],{"type":560,"value":1661},{"type":555,"tag":619,"props":1901,"children":1902},{"style":638},[1903],{"type":560,"value":656},{"type":555,"tag":619,"props":1905,"children":1906},{"style":659},[1907],{"type":560,"value":1565},{"type":555,"tag":619,"props":1909,"children":1910},{"style":638},[1911],{"type":560,"value":667},{"type":555,"tag":619,"props":1913,"children":1914},{"style":638},[1915],{"type":560,"value":641},{"type":555,"tag":619,"props":1917,"children":1918},{"class":621,"line":674},[1919,1924,1928,1933,1937,1941],{"type":555,"tag":619,"props":1920,"children":1921},{"style":969},[1922],{"type":560,"value":1923},"    super",{"type":555,"tag":619,"props":1925,"children":1926},{"style":638},[1927],{"type":560,"value":977},{"type":555,"tag":619,"props":1929,"children":1930},{"style":648},[1931],{"type":560,"value":1932},"setWidth",{"type":555,"tag":619,"props":1934,"children":1935},{"style":638},[1936],{"type":560,"value":656},{"type":555,"tag":619,"props":1938,"children":1939},{"style":659},[1940],{"type":560,"value":1565},{"type":555,"tag":619,"props":1942,"children":1943},{"style":638},[1944],{"type":560,"value":1076},{"type":555,"tag":619,"props":1946,"children":1947},{"class":621,"line":684},[1948,1952,1956,1961,1965,1969],{"type":555,"tag":619,"props":1949,"children":1950},{"style":969},[1951],{"type":560,"value":1923},{"type":555,"tag":619,"props":1953,"children":1954},{"style":638},[1955],{"type":560,"value":977},{"type":555,"tag":619,"props":1957,"children":1958},{"style":648},[1959],{"type":560,"value":1960},"setHeight",{"type":555,"tag":619,"props":1962,"children":1963},{"style":638},[1964],{"type":560,"value":656},{"type":555,"tag":619,"props":1966,"children":1967},{"style":659},[1968],{"type":560,"value":1565},{"type":555,"tag":619,"props":1970,"children":1971},{"style":638},[1972],{"type":560,"value":1076},{"type":555,"tag":619,"props":1974,"children":1975},{"class":621,"line":693},[1976],{"type":555,"tag":619,"props":1977,"children":1978},{"style":638},[1979],{"type":560,"value":690},{"type":555,"tag":619,"props":1981,"children":1982},{"class":621,"line":703},[1983],{"type":555,"tag":619,"props":1984,"children":1985},{"emptyLinePlaceholder":697},[1986],{"type":560,"value":700},{"type":555,"tag":619,"props":1988,"children":1989},{"class":621,"line":721},[1990,1994,1998,2002,2006],{"type":555,"tag":619,"props":1991,"children":1992},{"style":648},[1993],{"type":560,"value":1726},{"type":555,"tag":619,"props":1995,"children":1996},{"style":638},[1997],{"type":560,"value":656},{"type":555,"tag":619,"props":1999,"children":2000},{"style":659},[2001],{"type":560,"value":1627},{"type":555,"tag":619,"props":2003,"children":2004},{"style":638},[2005],{"type":560,"value":667},{"type":555,"tag":619,"props":2007,"children":2008},{"style":638},[2009],{"type":560,"value":641},{"type":555,"tag":619,"props":2011,"children":2012},{"class":621,"line":730},[2013,2017,2021,2025,2029,2033],{"type":555,"tag":619,"props":2014,"children":2015},{"style":969},[2016],{"type":560,"value":1923},{"type":555,"tag":619,"props":2018,"children":2019},{"style":638},[2020],{"type":560,"value":977},{"type":555,"tag":619,"props":2022,"children":2023},{"style":648},[2024],{"type":560,"value":1932},{"type":555,"tag":619,"props":2026,"children":2027},{"style":638},[2028],{"type":560,"value":656},{"type":555,"tag":619,"props":2030,"children":2031},{"style":659},[2032],{"type":560,"value":1627},{"type":555,"tag":619,"props":2034,"children":2035},{"style":638},[2036],{"type":560,"value":1076},{"type":555,"tag":619,"props":2038,"children":2039},{"class":621,"line":738},[2040,2044,2048,2052,2056,2060],{"type":555,"tag":619,"props":2041,"children":2042},{"style":969},[2043],{"type":560,"value":1923},{"type":555,"tag":619,"props":2045,"children":2046},{"style":638},[2047],{"type":560,"value":977},{"type":555,"tag":619,"props":2049,"children":2050},{"style":648},[2051],{"type":560,"value":1960},{"type":555,"tag":619,"props":2053,"children":2054},{"style":638},[2055],{"type":560,"value":656},{"type":555,"tag":619,"props":2057,"children":2058},{"style":659},[2059],{"type":560,"value":1627},{"type":555,"tag":619,"props":2061,"children":2062},{"style":638},[2063],{"type":560,"value":1076},{"type":555,"tag":619,"props":2065,"children":2066},{"class":621,"line":882},[2067],{"type":555,"tag":619,"props":2068,"children":2069},{"style":638},[2070],{"type":560,"value":690},{"type":555,"tag":619,"props":2072,"children":2073},{"class":621,"line":890},[2074],{"type":555,"tag":619,"props":2075,"children":2076},{"style":638},[2077],{"type":560,"value":744},{"type":555,"tag":556,"props":2079,"children":2080},{},[2081],{"type":560,"value":2082},"这里的问题是，Square 子类在修改宽度或高度时，通过覆写 setWidth 和 setHeight 方法，强制宽和高相等，这与基类的行为不一致。如果在需要 Rectangle 的地方使用了 Square，可能会导致程序逻辑错误。",{"type":555,"tag":556,"props":2084,"children":2085},{},[2086],{"type":560,"value":2087},"这违反了里氏替换原则，因为子类修改了父类的预期行为。为了符合里氏替换原则，可能需要重新设计类的继承结构，或者使用更精确的命名来表达实际意图。",{"type":555,"tag":597,"props":2089,"children":2091},{"id":2090},"接口隔离原则",[2092],{"type":560,"value":2090},{"type":555,"tag":556,"props":2094,"children":2095},{},[2096],{"type":560,"value":2097},"接口隔离原则（Interface Segregation Principle，ISP） 是 SOLID 原则之一，它强调一个类不应该被强迫实现它不需要的接口。简而言之，一个类对另一个类的依赖应该建立在最小的接口上。",{"type":555,"tag":556,"props":2099,"children":2100},{},[2101],{"type":560,"value":2102},"在通俗的语言中，接口隔离原则告诉我们不应该让一个类依赖它不需要的接口，否则会导致类需要实现一些它根本不需要的方法。",{"type":555,"tag":556,"props":2104,"children":2105},{},[2106],{"type":560,"value":2107},"举例说明，假设我们有一个动物园的系统，其中有两种动物，一种会飞，一种会游泳：",{"type":555,"tag":608,"props":2109,"children":2111},{"className":610,"code":2110,"language":612,"meta":549,"style":549},"// 不遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n\n  swim() {\n    // 这是一个鸟类不需要的方法，违反接口隔离原则\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n\n  fly() {\n    // 这是一个鱼类不需要的方法，违反接口隔离原则\n  }\n}\n",[2112],{"type":555,"tag":615,"props":2113,"children":2114},{"__ignoreMap":549},[2115,2123,2139,2155,2163,2170,2177,2193,2201,2208,2215,2222,2238,2253,2261,2268,2275,2290,2298,2305],{"type":555,"tag":619,"props":2116,"children":2117},{"class":621,"line":622},[2118],{"type":555,"tag":619,"props":2119,"children":2120},{"style":678},[2121],{"type":560,"value":2122},"// 不遵循接口隔离原则的设计\n",{"type":555,"tag":619,"props":2124,"children":2125},{"class":621,"line":644},[2126,2130,2135],{"type":555,"tag":619,"props":2127,"children":2128},{"style":626},[2129],{"type":560,"value":629},{"type":555,"tag":619,"props":2131,"children":2132},{"style":632},[2133],{"type":560,"value":2134}," Bird",{"type":555,"tag":619,"props":2136,"children":2137},{"style":638},[2138],{"type":560,"value":641},{"type":555,"tag":619,"props":2140,"children":2141},{"class":621,"line":674},[2142,2147,2151],{"type":555,"tag":619,"props":2143,"children":2144},{"style":648},[2145],{"type":560,"value":2146},"  fly",{"type":555,"tag":619,"props":2148,"children":2149},{"style":638},[2150],{"type":560,"value":714},{"type":555,"tag":619,"props":2152,"children":2153},{"style":638},[2154],{"type":560,"value":641},{"type":555,"tag":619,"props":2156,"children":2157},{"class":621,"line":684},[2158],{"type":555,"tag":619,"props":2159,"children":2160},{"style":678},[2161],{"type":560,"value":2162},"    // 实现飞行逻辑\n",{"type":555,"tag":619,"props":2164,"children":2165},{"class":621,"line":693},[2166],{"type":555,"tag":619,"props":2167,"children":2168},{"style":638},[2169],{"type":560,"value":690},{"type":555,"tag":619,"props":2171,"children":2172},{"class":621,"line":703},[2173],{"type":555,"tag":619,"props":2174,"children":2175},{"emptyLinePlaceholder":697},[2176],{"type":560,"value":700},{"type":555,"tag":619,"props":2178,"children":2179},{"class":621,"line":721},[2180,2185,2189],{"type":555,"tag":619,"props":2181,"children":2182},{"style":648},[2183],{"type":560,"value":2184},"  swim",{"type":555,"tag":619,"props":2186,"children":2187},{"style":638},[2188],{"type":560,"value":714},{"type":555,"tag":619,"props":2190,"children":2191},{"style":638},[2192],{"type":560,"value":641},{"type":555,"tag":619,"props":2194,"children":2195},{"class":621,"line":730},[2196],{"type":555,"tag":619,"props":2197,"children":2198},{"style":678},[2199],{"type":560,"value":2200},"    // 这是一个鸟类不需要的方法，违反接口隔离原则\n",{"type":555,"tag":619,"props":2202,"children":2203},{"class":621,"line":738},[2204],{"type":555,"tag":619,"props":2205,"children":2206},{"style":638},[2207],{"type":560,"value":690},{"type":555,"tag":619,"props":2209,"children":2210},{"class":621,"line":882},[2211],{"type":555,"tag":619,"props":2212,"children":2213},{"style":638},[2214],{"type":560,"value":744},{"type":555,"tag":619,"props":2216,"children":2217},{"class":621,"line":890},[2218],{"type":555,"tag":619,"props":2219,"children":2220},{"emptyLinePlaceholder":697},[2221],{"type":560,"value":700},{"type":555,"tag":619,"props":2223,"children":2224},{"class":621,"line":1100},[2225,2229,2234],{"type":555,"tag":619,"props":2226,"children":2227},{"style":626},[2228],{"type":560,"value":629},{"type":555,"tag":619,"props":2230,"children":2231},{"style":632},[2232],{"type":560,"value":2233}," Fish",{"type":555,"tag":619,"props":2235,"children":2236},{"style":638},[2237],{"type":560,"value":641},{"type":555,"tag":619,"props":2239,"children":2240},{"class":621,"line":1126},[2241,2245,2249],{"type":555,"tag":619,"props":2242,"children":2243},{"style":648},[2244],{"type":560,"value":2184},{"type":555,"tag":619,"props":2246,"children":2247},{"style":638},[2248],{"type":560,"value":714},{"type":555,"tag":619,"props":2250,"children":2251},{"style":638},[2252],{"type":560,"value":641},{"type":555,"tag":619,"props":2254,"children":2255},{"class":621,"line":1142},[2256],{"type":555,"tag":619,"props":2257,"children":2258},{"style":678},[2259],{"type":560,"value":2260},"    // 实现游泳逻辑\n",{"type":555,"tag":619,"props":2262,"children":2263},{"class":621,"line":1179},[2264],{"type":555,"tag":619,"props":2265,"children":2266},{"style":638},[2267],{"type":560,"value":690},{"type":555,"tag":619,"props":2269,"children":2270},{"class":621,"line":1187},[2271],{"type":555,"tag":619,"props":2272,"children":2273},{"emptyLinePlaceholder":697},[2274],{"type":560,"value":700},{"type":555,"tag":619,"props":2276,"children":2277},{"class":621,"line":1195},[2278,2282,2286],{"type":555,"tag":619,"props":2279,"children":2280},{"style":648},[2281],{"type":560,"value":2146},{"type":555,"tag":619,"props":2283,"children":2284},{"style":638},[2285],{"type":560,"value":714},{"type":555,"tag":619,"props":2287,"children":2288},{"style":638},[2289],{"type":560,"value":641},{"type":555,"tag":619,"props":2291,"children":2292},{"class":621,"line":1203},[2293],{"type":555,"tag":619,"props":2294,"children":2295},{"style":678},[2296],{"type":560,"value":2297},"    // 这是一个鱼类不需要的方法，违反接口隔离原则\n",{"type":555,"tag":619,"props":2299,"children":2300},{"class":621,"line":1228},[2301],{"type":555,"tag":619,"props":2302,"children":2303},{"style":638},[2304],{"type":560,"value":690},{"type":555,"tag":619,"props":2306,"children":2307},{"class":621,"line":1244},[2308],{"type":555,"tag":619,"props":2309,"children":2310},{"style":638},[2311],{"type":560,"value":744},{"type":555,"tag":556,"props":2313,"children":2314},{},[2315],{"type":560,"value":2316},"在这个例子中，Bird 类实现了 fly 和 swim 两个方法，而 Fish 类也实现了 swim 和 fly 两个方法。这违反了接口隔离原则，因为每个类都被迫实现了它们不需要的方法。",{"type":555,"tag":556,"props":2318,"children":2319},{},[2320],{"type":560,"value":2321},"为了符合接口隔离原则，我们可以将接口拆分成更小的部分，让每个类只实现它们需要的方法：",{"type":555,"tag":608,"props":2323,"children":2325},{"className":610,"code":2324,"language":612,"meta":549,"style":549},"// 遵循接口隔离原则的设计\nclass Bird {\n  fly() {\n    // 实现飞行逻辑\n  }\n}\n\nclass Fish {\n  swim() {\n    // 实现游泳逻辑\n  }\n}\n",[2326],{"type":555,"tag":615,"props":2327,"children":2328},{"__ignoreMap":549},[2329,2337,2352,2367,2374,2381,2388,2395,2410,2425,2432,2439],{"type":555,"tag":619,"props":2330,"children":2331},{"class":621,"line":622},[2332],{"type":555,"tag":619,"props":2333,"children":2334},{"style":678},[2335],{"type":560,"value":2336},"// 遵循接口隔离原则的设计\n",{"type":555,"tag":619,"props":2338,"children":2339},{"class":621,"line":644},[2340,2344,2348],{"type":555,"tag":619,"props":2341,"children":2342},{"style":626},[2343],{"type":560,"value":629},{"type":555,"tag":619,"props":2345,"children":2346},{"style":632},[2347],{"type":560,"value":2134},{"type":555,"tag":619,"props":2349,"children":2350},{"style":638},[2351],{"type":560,"value":641},{"type":555,"tag":619,"props":2353,"children":2354},{"class":621,"line":674},[2355,2359,2363],{"type":555,"tag":619,"props":2356,"children":2357},{"style":648},[2358],{"type":560,"value":2146},{"type":555,"tag":619,"props":2360,"children":2361},{"style":638},[2362],{"type":560,"value":714},{"type":555,"tag":619,"props":2364,"children":2365},{"style":638},[2366],{"type":560,"value":641},{"type":555,"tag":619,"props":2368,"children":2369},{"class":621,"line":684},[2370],{"type":555,"tag":619,"props":2371,"children":2372},{"style":678},[2373],{"type":560,"value":2162},{"type":555,"tag":619,"props":2375,"children":2376},{"class":621,"line":693},[2377],{"type":555,"tag":619,"props":2378,"children":2379},{"style":638},[2380],{"type":560,"value":690},{"type":555,"tag":619,"props":2382,"children":2383},{"class":621,"line":703},[2384],{"type":555,"tag":619,"props":2385,"children":2386},{"style":638},[2387],{"type":560,"value":744},{"type":555,"tag":619,"props":2389,"children":2390},{"class":621,"line":721},[2391],{"type":555,"tag":619,"props":2392,"children":2393},{"emptyLinePlaceholder":697},[2394],{"type":560,"value":700},{"type":555,"tag":619,"props":2396,"children":2397},{"class":621,"line":730},[2398,2402,2406],{"type":555,"tag":619,"props":2399,"children":2400},{"style":626},[2401],{"type":560,"value":629},{"type":555,"tag":619,"props":2403,"children":2404},{"style":632},[2405],{"type":560,"value":2233},{"type":555,"tag":619,"props":2407,"children":2408},{"style":638},[2409],{"type":560,"value":641},{"type":555,"tag":619,"props":2411,"children":2412},{"class":621,"line":738},[2413,2417,2421],{"type":555,"tag":619,"props":2414,"children":2415},{"style":648},[2416],{"type":560,"value":2184},{"type":555,"tag":619,"props":2418,"children":2419},{"style":638},[2420],{"type":560,"value":714},{"type":555,"tag":619,"props":2422,"children":2423},{"style":638},[2424],{"type":560,"value":641},{"type":555,"tag":619,"props":2426,"children":2427},{"class":621,"line":882},[2428],{"type":555,"tag":619,"props":2429,"children":2430},{"style":678},[2431],{"type":560,"value":2260},{"type":555,"tag":619,"props":2433,"children":2434},{"class":621,"line":890},[2435],{"type":555,"tag":619,"props":2436,"children":2437},{"style":638},[2438],{"type":560,"value":690},{"type":555,"tag":619,"props":2440,"children":2441},{"class":621,"line":1100},[2442],{"type":555,"tag":619,"props":2443,"children":2444},{"style":638},[2445],{"type":560,"value":744},{"type":555,"tag":556,"props":2447,"children":2448},{},[2449],{"type":560,"value":2450},"这样，每个类都只依赖于它们需要的接口，不再强迫实现不必要的方法。接口隔离原则的目标是使接口更具体，更贴近类的实际需求，从而提高系统的灵活性和可维护性。",{"type":555,"tag":597,"props":2452,"children":2454},{"id":2453},"依赖反转原则",[2455],{"type":560,"value":2453},{"type":555,"tag":556,"props":2457,"children":2458},{},[2459],{"type":560,"value":2460},"依赖反转原则（Dependency Inversion Principle，DIP） 是 SOLID 原则之一，它强调高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。",{"type":555,"tag":556,"props":2462,"children":2463},{},[2464],{"type":560,"value":2465},"举例说明，考虑一个简单的报告生成系统，有一个高层模块 ReportGenerator 负责生成报告：",{"type":555,"tag":608,"props":2467,"children":2469},{"className":610,"code":2468,"language":612,"meta":549,"style":549},"// 不遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor() {\n    this.pdfGenerator = new PDFGenerator(); // 依赖于具体的 PDF 生成器\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.pdfGenerator.generatePDF();\n  }\n}\n\nclass PDFGenerator {\n  generatePDF() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n",[2470],{"type":555,"tag":615,"props":2471,"children":2472},{"__ignoreMap":549},[2473,2481,2497,2512,2552,2559,2566,2582,2590,2619,2626,2633,2640,2655,2671,2679,2686],{"type":555,"tag":619,"props":2474,"children":2475},{"class":621,"line":622},[2476],{"type":555,"tag":619,"props":2477,"children":2478},{"style":678},[2479],{"type":560,"value":2480},"// 不遵循依赖反转原则的设计\n",{"type":555,"tag":619,"props":2482,"children":2483},{"class":621,"line":644},[2484,2488,2493],{"type":555,"tag":619,"props":2485,"children":2486},{"style":626},[2487],{"type":560,"value":629},{"type":555,"tag":619,"props":2489,"children":2490},{"style":632},[2491],{"type":560,"value":2492}," ReportGenerator",{"type":555,"tag":619,"props":2494,"children":2495},{"style":638},[2496],{"type":560,"value":641},{"type":555,"tag":619,"props":2498,"children":2499},{"class":621,"line":674},[2500,2504,2508],{"type":555,"tag":619,"props":2501,"children":2502},{"style":626},[2503],{"type":560,"value":946},{"type":555,"tag":619,"props":2505,"children":2506},{"style":638},[2507],{"type":560,"value":714},{"type":555,"tag":619,"props":2509,"children":2510},{"style":638},[2511],{"type":560,"value":641},{"type":555,"tag":619,"props":2513,"children":2514},{"class":621,"line":684},[2515,2519,2523,2528,2532,2537,2542,2547],{"type":555,"tag":619,"props":2516,"children":2517},{"style":969},[2518],{"type":560,"value":972},{"type":555,"tag":619,"props":2520,"children":2521},{"style":638},[2522],{"type":560,"value":977},{"type":555,"tag":619,"props":2524,"children":2525},{"style":659},[2526],{"type":560,"value":2527},"pdfGenerator",{"type":555,"tag":619,"props":2529,"children":2530},{"style":638},[2531],{"type":560,"value":986},{"type":555,"tag":619,"props":2533,"children":2534},{"style":626},[2535],{"type":560,"value":2536}," new",{"type":555,"tag":619,"props":2538,"children":2539},{"style":648},[2540],{"type":560,"value":2541}," PDFGenerator",{"type":555,"tag":619,"props":2543,"children":2544},{"style":638},[2545],{"type":560,"value":2546},"();",{"type":555,"tag":619,"props":2548,"children":2549},{"style":678},[2550],{"type":560,"value":2551}," // 依赖于具体的 PDF 生成器\n",{"type":555,"tag":619,"props":2553,"children":2554},{"class":621,"line":693},[2555],{"type":555,"tag":619,"props":2556,"children":2557},{"style":638},[2558],{"type":560,"value":690},{"type":555,"tag":619,"props":2560,"children":2561},{"class":621,"line":703},[2562],{"type":555,"tag":619,"props":2563,"children":2564},{"emptyLinePlaceholder":697},[2565],{"type":560,"value":700},{"type":555,"tag":619,"props":2567,"children":2568},{"class":621,"line":721},[2569,2574,2578],{"type":555,"tag":619,"props":2570,"children":2571},{"style":648},[2572],{"type":560,"value":2573},"  generateReport",{"type":555,"tag":619,"props":2575,"children":2576},{"style":638},[2577],{"type":560,"value":714},{"type":555,"tag":619,"props":2579,"children":2580},{"style":638},[2581],{"type":560,"value":641},{"type":555,"tag":619,"props":2583,"children":2584},{"class":621,"line":730},[2585],{"type":555,"tag":619,"props":2586,"children":2587},{"style":678},[2588],{"type":560,"value":2589},"    // 生成报告的逻辑\n",{"type":555,"tag":619,"props":2591,"children":2592},{"class":621,"line":738},[2593,2597,2601,2605,2609,2614],{"type":555,"tag":619,"props":2594,"children":2595},{"style":969},[2596],{"type":560,"value":972},{"type":555,"tag":619,"props":2598,"children":2599},{"style":638},[2600],{"type":560,"value":977},{"type":555,"tag":619,"props":2602,"children":2603},{"style":659},[2604],{"type":560,"value":2527},{"type":555,"tag":619,"props":2606,"children":2607},{"style":638},[2608],{"type":560,"value":977},{"type":555,"tag":619,"props":2610,"children":2611},{"style":648},[2612],{"type":560,"value":2613},"generatePDF",{"type":555,"tag":619,"props":2615,"children":2616},{"style":638},[2617],{"type":560,"value":2618},"();\n",{"type":555,"tag":619,"props":2620,"children":2621},{"class":621,"line":882},[2622],{"type":555,"tag":619,"props":2623,"children":2624},{"style":638},[2625],{"type":560,"value":690},{"type":555,"tag":619,"props":2627,"children":2628},{"class":621,"line":890},[2629],{"type":555,"tag":619,"props":2630,"children":2631},{"style":638},[2632],{"type":560,"value":744},{"type":555,"tag":619,"props":2634,"children":2635},{"class":621,"line":1100},[2636],{"type":555,"tag":619,"props":2637,"children":2638},{"emptyLinePlaceholder":697},[2639],{"type":560,"value":700},{"type":555,"tag":619,"props":2641,"children":2642},{"class":621,"line":1126},[2643,2647,2651],{"type":555,"tag":619,"props":2644,"children":2645},{"style":626},[2646],{"type":560,"value":629},{"type":555,"tag":619,"props":2648,"children":2649},{"style":632},[2650],{"type":560,"value":2541},{"type":555,"tag":619,"props":2652,"children":2653},{"style":638},[2654],{"type":560,"value":641},{"type":555,"tag":619,"props":2656,"children":2657},{"class":621,"line":1142},[2658,2663,2667],{"type":555,"tag":619,"props":2659,"children":2660},{"style":648},[2661],{"type":560,"value":2662},"  generatePDF",{"type":555,"tag":619,"props":2664,"children":2665},{"style":638},[2666],{"type":560,"value":714},{"type":555,"tag":619,"props":2668,"children":2669},{"style":638},[2670],{"type":560,"value":641},{"type":555,"tag":619,"props":2672,"children":2673},{"class":621,"line":1179},[2674],{"type":555,"tag":619,"props":2675,"children":2676},{"style":678},[2677],{"type":560,"value":2678},"    // 具体的 PDF 生成逻辑\n",{"type":555,"tag":619,"props":2680,"children":2681},{"class":621,"line":1187},[2682],{"type":555,"tag":619,"props":2683,"children":2684},{"style":638},[2685],{"type":560,"value":690},{"type":555,"tag":619,"props":2687,"children":2688},{"class":621,"line":1195},[2689],{"type":555,"tag":619,"props":2690,"children":2691},{"style":638},[2692],{"type":560,"value":744},{"type":555,"tag":556,"props":2694,"children":2695},{},[2696],{"type":560,"value":2697},"在这个设计中，ReportGenerator 直接依赖于具体的 PDFGenerator 类，这违反了依赖反转原则。如果我们想使用其他类型的报告生成器，例如 HTMLGenerator，就需要修改 ReportGenerator 类。",{"type":555,"tag":556,"props":2699,"children":2700},{},[2701],{"type":560,"value":2702},"为了符合依赖反转原则，我们应该通过抽象来解耦高层和低层模块：",{"type":555,"tag":608,"props":2704,"children":2706},{"className":610,"code":2705,"language":612,"meta":549,"style":549},"// 遵循依赖反转原则的设计\nclass ReportGenerator {\n  constructor(generator) {\n    this.generator = generator; // 依赖于抽象的报告生成器接口\n  }\n\n  generateReport() {\n    // 生成报告的逻辑\n    this.generator.generate();\n  }\n}\n\nclass PDFGenerator {\n  generate() {\n    // 具体的 PDF 生成逻辑\n  }\n}\n\nclass HTMLGenerator {\n  generate() {\n    // 具体的 HTML 生成逻辑\n  }\n}\n",[2707],{"type":555,"tag":615,"props":2708,"children":2709},{"__ignoreMap":549},[2710,2718,2733,2757,2791,2798,2805,2820,2827,2855,2862,2869,2876,2891,2907,2914,2921,2928,2935,2951,2966,2974,2981],{"type":555,"tag":619,"props":2711,"children":2712},{"class":621,"line":622},[2713],{"type":555,"tag":619,"props":2714,"children":2715},{"style":678},[2716],{"type":560,"value":2717},"// 遵循依赖反转原则的设计\n",{"type":555,"tag":619,"props":2719,"children":2720},{"class":621,"line":644},[2721,2725,2729],{"type":555,"tag":619,"props":2722,"children":2723},{"style":626},[2724],{"type":560,"value":629},{"type":555,"tag":619,"props":2726,"children":2727},{"style":632},[2728],{"type":560,"value":2492},{"type":555,"tag":619,"props":2730,"children":2731},{"style":638},[2732],{"type":560,"value":641},{"type":555,"tag":619,"props":2734,"children":2735},{"class":621,"line":674},[2736,2740,2744,2749,2753],{"type":555,"tag":619,"props":2737,"children":2738},{"style":626},[2739],{"type":560,"value":946},{"type":555,"tag":619,"props":2741,"children":2742},{"style":638},[2743],{"type":560,"value":656},{"type":555,"tag":619,"props":2745,"children":2746},{"style":659},[2747],{"type":560,"value":2748},"generator",{"type":555,"tag":619,"props":2750,"children":2751},{"style":638},[2752],{"type":560,"value":667},{"type":555,"tag":619,"props":2754,"children":2755},{"style":638},[2756],{"type":560,"value":641},{"type":555,"tag":619,"props":2758,"children":2759},{"class":621,"line":684},[2760,2764,2768,2772,2776,2781,2786],{"type":555,"tag":619,"props":2761,"children":2762},{"style":969},[2763],{"type":560,"value":972},{"type":555,"tag":619,"props":2765,"children":2766},{"style":638},[2767],{"type":560,"value":977},{"type":555,"tag":619,"props":2769,"children":2770},{"style":659},[2771],{"type":560,"value":2748},{"type":555,"tag":619,"props":2773,"children":2774},{"style":638},[2775],{"type":560,"value":986},{"type":555,"tag":619,"props":2777,"children":2778},{"style":659},[2779],{"type":560,"value":2780}," generator",{"type":555,"tag":619,"props":2782,"children":2783},{"style":638},[2784],{"type":560,"value":2785},";",{"type":555,"tag":619,"props":2787,"children":2788},{"style":678},[2789],{"type":560,"value":2790}," // 依赖于抽象的报告生成器接口\n",{"type":555,"tag":619,"props":2792,"children":2793},{"class":621,"line":693},[2794],{"type":555,"tag":619,"props":2795,"children":2796},{"style":638},[2797],{"type":560,"value":690},{"type":555,"tag":619,"props":2799,"children":2800},{"class":621,"line":703},[2801],{"type":555,"tag":619,"props":2802,"children":2803},{"emptyLinePlaceholder":697},[2804],{"type":560,"value":700},{"type":555,"tag":619,"props":2806,"children":2807},{"class":621,"line":721},[2808,2812,2816],{"type":555,"tag":619,"props":2809,"children":2810},{"style":648},[2811],{"type":560,"value":2573},{"type":555,"tag":619,"props":2813,"children":2814},{"style":638},[2815],{"type":560,"value":714},{"type":555,"tag":619,"props":2817,"children":2818},{"style":638},[2819],{"type":560,"value":641},{"type":555,"tag":619,"props":2821,"children":2822},{"class":621,"line":730},[2823],{"type":555,"tag":619,"props":2824,"children":2825},{"style":678},[2826],{"type":560,"value":2589},{"type":555,"tag":619,"props":2828,"children":2829},{"class":621,"line":738},[2830,2834,2838,2842,2846,2851],{"type":555,"tag":619,"props":2831,"children":2832},{"style":969},[2833],{"type":560,"value":972},{"type":555,"tag":619,"props":2835,"children":2836},{"style":638},[2837],{"type":560,"value":977},{"type":555,"tag":619,"props":2839,"children":2840},{"style":659},[2841],{"type":560,"value":2748},{"type":555,"tag":619,"props":2843,"children":2844},{"style":638},[2845],{"type":560,"value":977},{"type":555,"tag":619,"props":2847,"children":2848},{"style":648},[2849],{"type":560,"value":2850},"generate",{"type":555,"tag":619,"props":2852,"children":2853},{"style":638},[2854],{"type":560,"value":2618},{"type":555,"tag":619,"props":2856,"children":2857},{"class":621,"line":882},[2858],{"type":555,"tag":619,"props":2859,"children":2860},{"style":638},[2861],{"type":560,"value":690},{"type":555,"tag":619,"props":2863,"children":2864},{"class":621,"line":890},[2865],{"type":555,"tag":619,"props":2866,"children":2867},{"style":638},[2868],{"type":560,"value":744},{"type":555,"tag":619,"props":2870,"children":2871},{"class":621,"line":1100},[2872],{"type":555,"tag":619,"props":2873,"children":2874},{"emptyLinePlaceholder":697},[2875],{"type":560,"value":700},{"type":555,"tag":619,"props":2877,"children":2878},{"class":621,"line":1126},[2879,2883,2887],{"type":555,"tag":619,"props":2880,"children":2881},{"style":626},[2882],{"type":560,"value":629},{"type":555,"tag":619,"props":2884,"children":2885},{"style":632},[2886],{"type":560,"value":2541},{"type":555,"tag":619,"props":2888,"children":2889},{"style":638},[2890],{"type":560,"value":641},{"type":555,"tag":619,"props":2892,"children":2893},{"class":621,"line":1142},[2894,2899,2903],{"type":555,"tag":619,"props":2895,"children":2896},{"style":648},[2897],{"type":560,"value":2898},"  generate",{"type":555,"tag":619,"props":2900,"children":2901},{"style":638},[2902],{"type":560,"value":714},{"type":555,"tag":619,"props":2904,"children":2905},{"style":638},[2906],{"type":560,"value":641},{"type":555,"tag":619,"props":2908,"children":2909},{"class":621,"line":1179},[2910],{"type":555,"tag":619,"props":2911,"children":2912},{"style":678},[2913],{"type":560,"value":2678},{"type":555,"tag":619,"props":2915,"children":2916},{"class":621,"line":1187},[2917],{"type":555,"tag":619,"props":2918,"children":2919},{"style":638},[2920],{"type":560,"value":690},{"type":555,"tag":619,"props":2922,"children":2923},{"class":621,"line":1195},[2924],{"type":555,"tag":619,"props":2925,"children":2926},{"style":638},[2927],{"type":560,"value":744},{"type":555,"tag":619,"props":2929,"children":2930},{"class":621,"line":1203},[2931],{"type":555,"tag":619,"props":2932,"children":2933},{"emptyLinePlaceholder":697},[2934],{"type":560,"value":700},{"type":555,"tag":619,"props":2936,"children":2937},{"class":621,"line":1228},[2938,2942,2947],{"type":555,"tag":619,"props":2939,"children":2940},{"style":626},[2941],{"type":560,"value":629},{"type":555,"tag":619,"props":2943,"children":2944},{"style":632},[2945],{"type":560,"value":2946}," HTMLGenerator",{"type":555,"tag":619,"props":2948,"children":2949},{"style":638},[2950],{"type":560,"value":641},{"type":555,"tag":619,"props":2952,"children":2953},{"class":621,"line":1244},[2954,2958,2962],{"type":555,"tag":619,"props":2955,"children":2956},{"style":648},[2957],{"type":560,"value":2898},{"type":555,"tag":619,"props":2959,"children":2960},{"style":638},[2961],{"type":560,"value":714},{"type":555,"tag":619,"props":2963,"children":2964},{"style":638},[2965],{"type":560,"value":641},{"type":555,"tag":619,"props":2967,"children":2968},{"class":621,"line":1281},[2969],{"type":555,"tag":619,"props":2970,"children":2971},{"style":678},[2972],{"type":560,"value":2973},"    // 具体的 HTML 生成逻辑\n",{"type":555,"tag":619,"props":2975,"children":2976},{"class":621,"line":1289},[2977],{"type":555,"tag":619,"props":2978,"children":2979},{"style":638},[2980],{"type":560,"value":690},{"type":555,"tag":619,"props":2982,"children":2984},{"class":621,"line":2983},23,[2985],{"type":555,"tag":619,"props":2986,"children":2987},{"style":638},[2988],{"type":560,"value":744},{"type":555,"tag":556,"props":2990,"children":2991},{},[2992],{"type":560,"value":2993},"现在，ReportGenerator 不再直接依赖于具体的实现，而是依赖于抽象的报告生成器接口。这使得我们可以轻松地扩展系统，例如添加新的报告生成器，而不需要修改 ReportGenerator 类。这样的设计更加灵活，符合依赖反转原则。",{"type":555,"tag":2995,"props":2996,"children":2997},"style",{},[2998],{"type":560,"value":2999},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":549,"searchDepth":693,"depth":693,"links":3001},[3002,3003,3004,3005,3006],{"id":599,"depth":644,"text":599},{"id":903,"depth":644,"text":903},{"id":1509,"depth":644,"text":1509},{"id":2090,"depth":644,"text":2090},{"id":2453,"depth":644,"text":2453},"markdown","content:4.design-mode:1.thoughts-principles.md","content","4.design-mode/1.thoughts-principles.md","md",[3013,3014],{"_path":524,"title":523,"description":549},{"_path":541,"title":540,"description":549},1715002847143]