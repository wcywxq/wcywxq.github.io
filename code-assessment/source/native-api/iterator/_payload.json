[{"data":1,"prerenderedAt":1604},["Reactive",2],{"navigation":3,"/code-assessment/source/native-api/iterator":559,"/code-assessment/source/native-api/iterator-surround":1600},[4,272,318,536,544],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":317},"八股文","/endorsement",[276,286,293,304],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"JavaScript","/endorsement/javascript",[290],{"title":291,"_path":292},"语法和数据类型","/endorsement/javascript/grammar-data-types",{"title":294,"_path":295,"children":296},"构建工具","/endorsement/build-tools",[297],{"title":298,"_path":299,"children":300},"Webpack","/endorsement/build-tools/webpack",[301],{"title":302,"_path":303},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":305,"_path":306,"children":307},"Html","/endorsement/html",[308,311,314],{"title":309,"_path":310},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":312,"_path":313},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":315,"_path":316},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":319,"_path":320,"children":321,"icon":535},"代码考核","/code-assessment",[322,427,528],{"title":323,"_path":324,"children":325},"源码实现","/code-assessment/source",[326,360,376,404,411,418,421,424],{"title":327,"_path":328,"children":329},"原生 api","/code-assessment/source/native-api",[330,333,336,339,342,345,348,351,354,357],{"title":331,"_path":332},"polyfill","/code-assessment/source/native-api/polyfill",{"title":334,"_path":335},"ajax","/code-assessment/source/native-api/ajax",{"title":337,"_path":338},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":340,"_path":341},"new 操作符","/code-assessment/source/native-api/new",{"title":343,"_path":344},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":346,"_path":347},"定时器","/code-assessment/source/native-api/timer",{"title":349,"_path":350},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":352,"_path":353},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":355,"_path":356},"extends","/code-assessment/source/native-api/extends",{"title":358,"_path":359},"Promise","/code-assessment/source/native-api/promise",{"title":361,"_path":362,"children":363},"函数 Function","/code-assessment/source/function",[364,367,370,373],{"title":365,"_path":366},"函数防抖","/code-assessment/source/function/debounce",{"title":368,"_path":369},"函数节流","/code-assessment/source/function/throttle",{"title":371,"_path":372},"函数柯理化","/code-assessment/source/function/curry",{"title":374,"_path":375},"函数睡眠","/code-assessment/source/function/sleep",{"title":377,"_path":378,"children":379},"数组 Array","/code-assessment/source/array",[380,383,386,389,392,395,398,401],{"title":381,"_path":382},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":384,"_path":385},"数组扁平化","/code-assessment/source/array/flat",{"title":387,"_path":388},"原型方法","/code-assessment/source/array/prototype-method",{"title":390,"_path":391},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":393,"_path":394},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":396,"_path":397},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":399,"_path":400},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":402,"_path":403},"二维数组","/code-assessment/source/array/2d-array",{"title":405,"_path":406,"children":407},"字符串 String","/code-assessment/source/string",[408],{"title":409,"_path":410},"repeat()","/code-assessment/source/string/repeat",{"title":412,"_path":413,"children":414},"集合 Set","/code-assessment/source/set",[415],{"title":416,"_path":417},"遍历集合","/code-assessment/source/set/traverse",{"title":419,"_path":420},"获取通用类型","/code-assessment/source/get-generic-type",{"title":422,"_path":423},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":425,"_path":426},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":428,"_path":429,"children":430},"业务场景","/code-assessment/scene",[431,461,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525],{"title":358,"_path":432,"children":433},"/code-assessment/scene/promise",[434,437,440,443,446,449,452,455,458],{"title":435,"_path":436},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":438,"_path":439},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":441,"_path":442},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":444,"_path":445},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":447,"_path":448},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":450,"_path":451},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":453,"_path":454},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":456,"_path":457},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":459,"_path":460},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":462,"_path":463,"children":464},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[465,468],{"title":466,"_path":467},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":469,"_path":470},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":472,"_path":473},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":475,"_path":476},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":478,"_path":479},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":481,"_path":482},"倒计时","/code-assessment/scene/countdown",{"title":484,"_path":485},"日期格式化","/code-assessment/scene/date-format",{"title":487,"_path":488},"实现前端路由","/code-assessment/scene/frontend-route",{"title":490,"_path":491},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":493,"_path":494},"lodash.get","/code-assessment/scene/lodash-get",{"title":496,"_path":497},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":499,"_path":500},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":502,"_path":503},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":505,"_path":506},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":508,"_path":509},"随机数","/code-assessment/scene/random-number",{"title":511,"_path":512},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":514,"_path":515},"sku 算法实现","/code-assessment/scene/sku",{"title":517,"_path":518},"整数分割","/code-assessment/scene/split-number",{"title":520,"_path":521},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":523,"_path":524},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":526,"_path":527},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":529,"_path":530,"children":531},"Ts 类型挑战","/code-assessment/type-challeges",[532],{"title":533,"_path":534},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":537,"_path":538,"children":539,"icon":543},"项目","/project",[540],{"title":541,"_path":542},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":545,"_path":546,"children":547,"icon":558},"后端语言","/backend-languages",[548],{"title":549,"_path":550,"children":551},"Python","/backend-languages/python",[552,555],{"title":553,"_path":554},"基础","/backend-languages/python/base",{"title":556,"_path":557},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":353,"_dir":560,"_draft":561,"_partial":561,"_locale":562,"title":352,"description":562,"body":563,"_type":1595,"_id":1596,"_source":1597,"_file":1598,"_extension":1599},"native-api",false,"",{"type":564,"children":565,"toc":1591},"root",[566,574,1081,1086,1585],{"type":567,"tag":568,"props":569,"children":571},"element","h2",{"id":570},"实现迭代器函数",[572],{"type":573,"value":570},"text",{"type":567,"tag":575,"props":576,"children":580},"pre",{"className":577,"code":578,"language":579,"meta":562,"style":562},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/*\n * 这是一个手写的迭代器(Iterator)\n * 满足迭代器协议的对象。\n * 迭代器协议: 对象的 next 方法是一个无参函数，它返回一个对象，该对象拥有 done 和 value 两个属性：\n */\nvar it = makeIterator([\"a\", \"b\"]);\n\nit.next(); // { value: \"a\", done: false }\nit.next(); // { value: \"b\", done: false }\nit.next(); // { value: undefined, done: true }\n\nfunction makeIterator(array) {\n  var nextIndex = 0;\n  return {\n    next: function () {\n      return nextIndex \u003C array.length\n        ? { value: array[nextIndex++], done: false }\n        : { value: undefined, done: true };\n    },\n  };\n}\n","js",[581],{"type":567,"tag":582,"props":583,"children":584},"code",{"__ignoreMap":562},[585,597,606,615,624,633,706,716,745,770,795,803,836,865,879,907,940,1006,1054,1063,1072],{"type":567,"tag":586,"props":587,"children":590},"span",{"class":588,"line":589},"line",1,[591],{"type":567,"tag":586,"props":592,"children":594},{"style":593},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[595],{"type":573,"value":596},"/*\n",{"type":567,"tag":586,"props":598,"children":600},{"class":588,"line":599},2,[601],{"type":567,"tag":586,"props":602,"children":603},{"style":593},[604],{"type":573,"value":605}," * 这是一个手写的迭代器(Iterator)\n",{"type":567,"tag":586,"props":607,"children":609},{"class":588,"line":608},3,[610],{"type":567,"tag":586,"props":611,"children":612},{"style":593},[613],{"type":573,"value":614}," * 满足迭代器协议的对象。\n",{"type":567,"tag":586,"props":616,"children":618},{"class":588,"line":617},4,[619],{"type":567,"tag":586,"props":620,"children":621},{"style":593},[622],{"type":573,"value":623}," * 迭代器协议: 对象的 next 方法是一个无参函数，它返回一个对象，该对象拥有 done 和 value 两个属性：\n",{"type":567,"tag":586,"props":625,"children":627},{"class":588,"line":626},5,[628],{"type":567,"tag":586,"props":629,"children":630},{"style":593},[631],{"type":573,"value":632}," */\n",{"type":567,"tag":586,"props":634,"children":636},{"class":588,"line":635},6,[637,643,649,655,661,666,672,678,682,687,692,697,701],{"type":567,"tag":586,"props":638,"children":640},{"style":639},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[641],{"type":573,"value":642},"var",{"type":567,"tag":586,"props":644,"children":646},{"style":645},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[647],{"type":573,"value":648}," it",{"type":567,"tag":586,"props":650,"children":652},{"style":651},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[653],{"type":573,"value":654}," =",{"type":567,"tag":586,"props":656,"children":658},{"style":657},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[659],{"type":573,"value":660}," makeIterator",{"type":567,"tag":586,"props":662,"children":663},{"style":651},[664],{"type":573,"value":665},"([",{"type":567,"tag":586,"props":667,"children":669},{"style":668},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[670],{"type":573,"value":671},"\"",{"type":567,"tag":586,"props":673,"children":675},{"style":674},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[676],{"type":573,"value":677},"a",{"type":567,"tag":586,"props":679,"children":680},{"style":668},[681],{"type":573,"value":671},{"type":567,"tag":586,"props":683,"children":684},{"style":651},[685],{"type":573,"value":686},",",{"type":567,"tag":586,"props":688,"children":689},{"style":668},[690],{"type":573,"value":691}," \"",{"type":567,"tag":586,"props":693,"children":694},{"style":674},[695],{"type":573,"value":696},"b",{"type":567,"tag":586,"props":698,"children":699},{"style":668},[700],{"type":573,"value":671},{"type":567,"tag":586,"props":702,"children":703},{"style":651},[704],{"type":573,"value":705},"]);\n",{"type":567,"tag":586,"props":707,"children":709},{"class":588,"line":708},7,[710],{"type":567,"tag":586,"props":711,"children":713},{"emptyLinePlaceholder":712},true,[714],{"type":573,"value":715},"\n",{"type":567,"tag":586,"props":717,"children":719},{"class":588,"line":718},8,[720,725,730,735,740],{"type":567,"tag":586,"props":721,"children":722},{"style":645},[723],{"type":573,"value":724},"it",{"type":567,"tag":586,"props":726,"children":727},{"style":651},[728],{"type":573,"value":729},".",{"type":567,"tag":586,"props":731,"children":732},{"style":657},[733],{"type":573,"value":734},"next",{"type":567,"tag":586,"props":736,"children":737},{"style":651},[738],{"type":573,"value":739},"();",{"type":567,"tag":586,"props":741,"children":742},{"style":593},[743],{"type":573,"value":744}," // { value: \"a\", done: false }\n",{"type":567,"tag":586,"props":746,"children":748},{"class":588,"line":747},9,[749,753,757,761,765],{"type":567,"tag":586,"props":750,"children":751},{"style":645},[752],{"type":573,"value":724},{"type":567,"tag":586,"props":754,"children":755},{"style":651},[756],{"type":573,"value":729},{"type":567,"tag":586,"props":758,"children":759},{"style":657},[760],{"type":573,"value":734},{"type":567,"tag":586,"props":762,"children":763},{"style":651},[764],{"type":573,"value":739},{"type":567,"tag":586,"props":766,"children":767},{"style":593},[768],{"type":573,"value":769}," // { value: \"b\", done: false }\n",{"type":567,"tag":586,"props":771,"children":773},{"class":588,"line":772},10,[774,778,782,786,790],{"type":567,"tag":586,"props":775,"children":776},{"style":645},[777],{"type":573,"value":724},{"type":567,"tag":586,"props":779,"children":780},{"style":651},[781],{"type":573,"value":729},{"type":567,"tag":586,"props":783,"children":784},{"style":657},[785],{"type":573,"value":734},{"type":567,"tag":586,"props":787,"children":788},{"style":651},[789],{"type":573,"value":739},{"type":567,"tag":586,"props":791,"children":792},{"style":593},[793],{"type":573,"value":794}," // { value: undefined, done: true }\n",{"type":567,"tag":586,"props":796,"children":798},{"class":588,"line":797},11,[799],{"type":567,"tag":586,"props":800,"children":801},{"emptyLinePlaceholder":712},[802],{"type":573,"value":715},{"type":567,"tag":586,"props":804,"children":806},{"class":588,"line":805},12,[807,812,816,821,826,831],{"type":567,"tag":586,"props":808,"children":809},{"style":639},[810],{"type":573,"value":811},"function",{"type":567,"tag":586,"props":813,"children":814},{"style":657},[815],{"type":573,"value":660},{"type":567,"tag":586,"props":817,"children":818},{"style":651},[819],{"type":573,"value":820},"(",{"type":567,"tag":586,"props":822,"children":823},{"style":645},[824],{"type":573,"value":825},"array",{"type":567,"tag":586,"props":827,"children":828},{"style":651},[829],{"type":573,"value":830},")",{"type":567,"tag":586,"props":832,"children":833},{"style":651},[834],{"type":573,"value":835}," {\n",{"type":567,"tag":586,"props":837,"children":839},{"class":588,"line":838},13,[840,845,850,854,860],{"type":567,"tag":586,"props":841,"children":842},{"style":639},[843],{"type":573,"value":844},"  var",{"type":567,"tag":586,"props":846,"children":847},{"style":645},[848],{"type":573,"value":849}," nextIndex",{"type":567,"tag":586,"props":851,"children":852},{"style":651},[853],{"type":573,"value":654},{"type":567,"tag":586,"props":855,"children":857},{"style":856},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[858],{"type":573,"value":859}," 0",{"type":567,"tag":586,"props":861,"children":862},{"style":651},[863],{"type":573,"value":864},";\n",{"type":567,"tag":586,"props":866,"children":868},{"class":588,"line":867},14,[869,875],{"type":567,"tag":586,"props":870,"children":872},{"style":871},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[873],{"type":573,"value":874},"  return",{"type":567,"tag":586,"props":876,"children":877},{"style":651},[878],{"type":573,"value":835},{"type":567,"tag":586,"props":880,"children":882},{"class":588,"line":881},15,[883,888,893,898,903],{"type":567,"tag":586,"props":884,"children":885},{"style":657},[886],{"type":573,"value":887},"    next",{"type":567,"tag":586,"props":889,"children":890},{"style":651},[891],{"type":573,"value":892},":",{"type":567,"tag":586,"props":894,"children":895},{"style":639},[896],{"type":573,"value":897}," function",{"type":567,"tag":586,"props":899,"children":900},{"style":651},[901],{"type":573,"value":902}," ()",{"type":567,"tag":586,"props":904,"children":905},{"style":651},[906],{"type":573,"value":835},{"type":567,"tag":586,"props":908,"children":910},{"class":588,"line":909},16,[911,916,920,925,930,934],{"type":567,"tag":586,"props":912,"children":913},{"style":871},[914],{"type":573,"value":915},"      return",{"type":567,"tag":586,"props":917,"children":918},{"style":645},[919],{"type":573,"value":849},{"type":567,"tag":586,"props":921,"children":922},{"style":651},[923],{"type":573,"value":924}," \u003C",{"type":567,"tag":586,"props":926,"children":927},{"style":645},[928],{"type":573,"value":929}," array",{"type":567,"tag":586,"props":931,"children":932},{"style":651},[933],{"type":573,"value":729},{"type":567,"tag":586,"props":935,"children":937},{"style":936},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[938],{"type":573,"value":939},"length\n",{"type":567,"tag":586,"props":941,"children":943},{"class":588,"line":942},17,[944,949,954,959,963,967,972,977,982,987,992,996,1001],{"type":567,"tag":586,"props":945,"children":946},{"style":639},[947],{"type":573,"value":948},"        ?",{"type":567,"tag":586,"props":950,"children":951},{"style":651},[952],{"type":573,"value":953}," {",{"type":567,"tag":586,"props":955,"children":956},{"style":936},[957],{"type":573,"value":958}," value",{"type":567,"tag":586,"props":960,"children":961},{"style":651},[962],{"type":573,"value":892},{"type":567,"tag":586,"props":964,"children":965},{"style":645},[966],{"type":573,"value":929},{"type":567,"tag":586,"props":968,"children":969},{"style":651},[970],{"type":573,"value":971},"[",{"type":567,"tag":586,"props":973,"children":974},{"style":645},[975],{"type":573,"value":976},"nextIndex",{"type":567,"tag":586,"props":978,"children":979},{"style":639},[980],{"type":573,"value":981},"++",{"type":567,"tag":586,"props":983,"children":984},{"style":651},[985],{"type":573,"value":986},"],",{"type":567,"tag":586,"props":988,"children":989},{"style":936},[990],{"type":573,"value":991}," done",{"type":567,"tag":586,"props":993,"children":994},{"style":651},[995],{"type":573,"value":892},{"type":567,"tag":586,"props":997,"children":998},{"style":871},[999],{"type":573,"value":1000}," false",{"type":567,"tag":586,"props":1002,"children":1003},{"style":651},[1004],{"type":573,"value":1005}," }\n",{"type":567,"tag":586,"props":1007,"children":1009},{"class":588,"line":1008},18,[1010,1015,1019,1023,1027,1032,1036,1040,1044,1049],{"type":567,"tag":586,"props":1011,"children":1012},{"style":639},[1013],{"type":573,"value":1014},"        :",{"type":567,"tag":586,"props":1016,"children":1017},{"style":651},[1018],{"type":573,"value":953},{"type":567,"tag":586,"props":1020,"children":1021},{"style":936},[1022],{"type":573,"value":958},{"type":567,"tag":586,"props":1024,"children":1025},{"style":651},[1026],{"type":573,"value":892},{"type":567,"tag":586,"props":1028,"children":1029},{"style":639},[1030],{"type":573,"value":1031}," undefined",{"type":567,"tag":586,"props":1033,"children":1034},{"style":651},[1035],{"type":573,"value":686},{"type":567,"tag":586,"props":1037,"children":1038},{"style":936},[1039],{"type":573,"value":991},{"type":567,"tag":586,"props":1041,"children":1042},{"style":651},[1043],{"type":573,"value":892},{"type":567,"tag":586,"props":1045,"children":1046},{"style":871},[1047],{"type":573,"value":1048}," true",{"type":567,"tag":586,"props":1050,"children":1051},{"style":651},[1052],{"type":573,"value":1053}," };\n",{"type":567,"tag":586,"props":1055,"children":1057},{"class":588,"line":1056},19,[1058],{"type":567,"tag":586,"props":1059,"children":1060},{"style":651},[1061],{"type":573,"value":1062},"    },\n",{"type":567,"tag":586,"props":1064,"children":1066},{"class":588,"line":1065},20,[1067],{"type":567,"tag":586,"props":1068,"children":1069},{"style":651},[1070],{"type":573,"value":1071},"  };\n",{"type":567,"tag":586,"props":1073,"children":1075},{"class":588,"line":1074},21,[1076],{"type":567,"tag":586,"props":1077,"children":1078},{"style":651},[1079],{"type":573,"value":1080},"}\n",{"type":567,"tag":568,"props":1082,"children":1084},{"id":1083},"可迭代的迭代器",[1085],{"type":573,"value":1083},{"type":567,"tag":575,"props":1087,"children":1089},{"className":577,"code":1088,"language":579,"meta":562,"style":562},"/**\n * 使迭代器可迭代\n * makeIterator 函数生成的迭代器并没有实现可迭代协议\n * 所以不能在 for...of 等语法中使用。\n * 可以为该对象实现可迭代协议，在 [Symbol.iterator] 函数中返回该迭代器自身\n * 从新名了下函数名称 createIterator\n */\nfunction createIterator(array) {\n  var nextIndex = 0;\n  return {\n    next: function () {\n      return nextIndex \u003C array.length\n        ? { value: array[nextIndex++], done: false }\n        : { value: undefined, done: true };\n    },\n    [Symbol.iterator]: function () {\n      console.log(\"返回的迭代器:\", this);\n      return this; // 注意这里是对象调用模式，this 指向的就是上层的对象，迭代器\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\nconsole.log(...iterator);\n",[1090],{"type":567,"tag":582,"props":1091,"children":1092},{"__ignoreMap":562},[1093,1101,1109,1117,1125,1133,1141,1148,1176,1199,1210,1233,1260,1315,1358,1365,1404,1453,1474,1481,1488,1495,1503,1555],{"type":567,"tag":586,"props":1094,"children":1095},{"class":588,"line":589},[1096],{"type":567,"tag":586,"props":1097,"children":1098},{"style":593},[1099],{"type":573,"value":1100},"/**\n",{"type":567,"tag":586,"props":1102,"children":1103},{"class":588,"line":599},[1104],{"type":567,"tag":586,"props":1105,"children":1106},{"style":593},[1107],{"type":573,"value":1108}," * 使迭代器可迭代\n",{"type":567,"tag":586,"props":1110,"children":1111},{"class":588,"line":608},[1112],{"type":567,"tag":586,"props":1113,"children":1114},{"style":593},[1115],{"type":573,"value":1116}," * makeIterator 函数生成的迭代器并没有实现可迭代协议\n",{"type":567,"tag":586,"props":1118,"children":1119},{"class":588,"line":617},[1120],{"type":567,"tag":586,"props":1121,"children":1122},{"style":593},[1123],{"type":573,"value":1124}," * 所以不能在 for...of 等语法中使用。\n",{"type":567,"tag":586,"props":1126,"children":1127},{"class":588,"line":626},[1128],{"type":567,"tag":586,"props":1129,"children":1130},{"style":593},[1131],{"type":573,"value":1132}," * 可以为该对象实现可迭代协议，在 [Symbol.iterator] 函数中返回该迭代器自身\n",{"type":567,"tag":586,"props":1134,"children":1135},{"class":588,"line":635},[1136],{"type":567,"tag":586,"props":1137,"children":1138},{"style":593},[1139],{"type":573,"value":1140}," * 从新名了下函数名称 createIterator\n",{"type":567,"tag":586,"props":1142,"children":1143},{"class":588,"line":708},[1144],{"type":567,"tag":586,"props":1145,"children":1146},{"style":593},[1147],{"type":573,"value":632},{"type":567,"tag":586,"props":1149,"children":1150},{"class":588,"line":718},[1151,1155,1160,1164,1168,1172],{"type":567,"tag":586,"props":1152,"children":1153},{"style":639},[1154],{"type":573,"value":811},{"type":567,"tag":586,"props":1156,"children":1157},{"style":657},[1158],{"type":573,"value":1159}," createIterator",{"type":567,"tag":586,"props":1161,"children":1162},{"style":651},[1163],{"type":573,"value":820},{"type":567,"tag":586,"props":1165,"children":1166},{"style":645},[1167],{"type":573,"value":825},{"type":567,"tag":586,"props":1169,"children":1170},{"style":651},[1171],{"type":573,"value":830},{"type":567,"tag":586,"props":1173,"children":1174},{"style":651},[1175],{"type":573,"value":835},{"type":567,"tag":586,"props":1177,"children":1178},{"class":588,"line":747},[1179,1183,1187,1191,1195],{"type":567,"tag":586,"props":1180,"children":1181},{"style":639},[1182],{"type":573,"value":844},{"type":567,"tag":586,"props":1184,"children":1185},{"style":645},[1186],{"type":573,"value":849},{"type":567,"tag":586,"props":1188,"children":1189},{"style":651},[1190],{"type":573,"value":654},{"type":567,"tag":586,"props":1192,"children":1193},{"style":856},[1194],{"type":573,"value":859},{"type":567,"tag":586,"props":1196,"children":1197},{"style":651},[1198],{"type":573,"value":864},{"type":567,"tag":586,"props":1200,"children":1201},{"class":588,"line":772},[1202,1206],{"type":567,"tag":586,"props":1203,"children":1204},{"style":871},[1205],{"type":573,"value":874},{"type":567,"tag":586,"props":1207,"children":1208},{"style":651},[1209],{"type":573,"value":835},{"type":567,"tag":586,"props":1211,"children":1212},{"class":588,"line":797},[1213,1217,1221,1225,1229],{"type":567,"tag":586,"props":1214,"children":1215},{"style":657},[1216],{"type":573,"value":887},{"type":567,"tag":586,"props":1218,"children":1219},{"style":651},[1220],{"type":573,"value":892},{"type":567,"tag":586,"props":1222,"children":1223},{"style":639},[1224],{"type":573,"value":897},{"type":567,"tag":586,"props":1226,"children":1227},{"style":651},[1228],{"type":573,"value":902},{"type":567,"tag":586,"props":1230,"children":1231},{"style":651},[1232],{"type":573,"value":835},{"type":567,"tag":586,"props":1234,"children":1235},{"class":588,"line":805},[1236,1240,1244,1248,1252,1256],{"type":567,"tag":586,"props":1237,"children":1238},{"style":871},[1239],{"type":573,"value":915},{"type":567,"tag":586,"props":1241,"children":1242},{"style":645},[1243],{"type":573,"value":849},{"type":567,"tag":586,"props":1245,"children":1246},{"style":651},[1247],{"type":573,"value":924},{"type":567,"tag":586,"props":1249,"children":1250},{"style":645},[1251],{"type":573,"value":929},{"type":567,"tag":586,"props":1253,"children":1254},{"style":651},[1255],{"type":573,"value":729},{"type":567,"tag":586,"props":1257,"children":1258},{"style":936},[1259],{"type":573,"value":939},{"type":567,"tag":586,"props":1261,"children":1262},{"class":588,"line":838},[1263,1267,1271,1275,1279,1283,1287,1291,1295,1299,1303,1307,1311],{"type":567,"tag":586,"props":1264,"children":1265},{"style":639},[1266],{"type":573,"value":948},{"type":567,"tag":586,"props":1268,"children":1269},{"style":651},[1270],{"type":573,"value":953},{"type":567,"tag":586,"props":1272,"children":1273},{"style":936},[1274],{"type":573,"value":958},{"type":567,"tag":586,"props":1276,"children":1277},{"style":651},[1278],{"type":573,"value":892},{"type":567,"tag":586,"props":1280,"children":1281},{"style":645},[1282],{"type":573,"value":929},{"type":567,"tag":586,"props":1284,"children":1285},{"style":651},[1286],{"type":573,"value":971},{"type":567,"tag":586,"props":1288,"children":1289},{"style":645},[1290],{"type":573,"value":976},{"type":567,"tag":586,"props":1292,"children":1293},{"style":639},[1294],{"type":573,"value":981},{"type":567,"tag":586,"props":1296,"children":1297},{"style":651},[1298],{"type":573,"value":986},{"type":567,"tag":586,"props":1300,"children":1301},{"style":936},[1302],{"type":573,"value":991},{"type":567,"tag":586,"props":1304,"children":1305},{"style":651},[1306],{"type":573,"value":892},{"type":567,"tag":586,"props":1308,"children":1309},{"style":871},[1310],{"type":573,"value":1000},{"type":567,"tag":586,"props":1312,"children":1313},{"style":651},[1314],{"type":573,"value":1005},{"type":567,"tag":586,"props":1316,"children":1317},{"class":588,"line":867},[1318,1322,1326,1330,1334,1338,1342,1346,1350,1354],{"type":567,"tag":586,"props":1319,"children":1320},{"style":639},[1321],{"type":573,"value":1014},{"type":567,"tag":586,"props":1323,"children":1324},{"style":651},[1325],{"type":573,"value":953},{"type":567,"tag":586,"props":1327,"children":1328},{"style":936},[1329],{"type":573,"value":958},{"type":567,"tag":586,"props":1331,"children":1332},{"style":651},[1333],{"type":573,"value":892},{"type":567,"tag":586,"props":1335,"children":1336},{"style":639},[1337],{"type":573,"value":1031},{"type":567,"tag":586,"props":1339,"children":1340},{"style":651},[1341],{"type":573,"value":686},{"type":567,"tag":586,"props":1343,"children":1344},{"style":936},[1345],{"type":573,"value":991},{"type":567,"tag":586,"props":1347,"children":1348},{"style":651},[1349],{"type":573,"value":892},{"type":567,"tag":586,"props":1351,"children":1352},{"style":871},[1353],{"type":573,"value":1048},{"type":567,"tag":586,"props":1355,"children":1356},{"style":651},[1357],{"type":573,"value":1053},{"type":567,"tag":586,"props":1359,"children":1360},{"class":588,"line":881},[1361],{"type":567,"tag":586,"props":1362,"children":1363},{"style":651},[1364],{"type":573,"value":1062},{"type":567,"tag":586,"props":1366,"children":1367},{"class":588,"line":909},[1368,1373,1378,1382,1387,1392,1396,1400],{"type":567,"tag":586,"props":1369,"children":1370},{"style":651},[1371],{"type":573,"value":1372},"    [",{"type":567,"tag":586,"props":1374,"children":1375},{"style":645},[1376],{"type":573,"value":1377},"Symbol",{"type":567,"tag":586,"props":1379,"children":1380},{"style":651},[1381],{"type":573,"value":729},{"type":567,"tag":586,"props":1383,"children":1384},{"style":645},[1385],{"type":573,"value":1386},"iterator",{"type":567,"tag":586,"props":1388,"children":1389},{"style":651},[1390],{"type":573,"value":1391},"]:",{"type":567,"tag":586,"props":1393,"children":1394},{"style":639},[1395],{"type":573,"value":897},{"type":567,"tag":586,"props":1397,"children":1398},{"style":651},[1399],{"type":573,"value":902},{"type":567,"tag":586,"props":1401,"children":1402},{"style":651},[1403],{"type":573,"value":835},{"type":567,"tag":586,"props":1405,"children":1406},{"class":588,"line":942},[1407,1412,1416,1421,1425,1429,1434,1438,1442,1448],{"type":567,"tag":586,"props":1408,"children":1409},{"style":645},[1410],{"type":573,"value":1411},"      console",{"type":567,"tag":586,"props":1413,"children":1414},{"style":651},[1415],{"type":573,"value":729},{"type":567,"tag":586,"props":1417,"children":1418},{"style":657},[1419],{"type":573,"value":1420},"log",{"type":567,"tag":586,"props":1422,"children":1423},{"style":651},[1424],{"type":573,"value":820},{"type":567,"tag":586,"props":1426,"children":1427},{"style":668},[1428],{"type":573,"value":671},{"type":567,"tag":586,"props":1430,"children":1431},{"style":674},[1432],{"type":573,"value":1433},"返回的迭代器:",{"type":567,"tag":586,"props":1435,"children":1436},{"style":668},[1437],{"type":573,"value":671},{"type":567,"tag":586,"props":1439,"children":1440},{"style":651},[1441],{"type":573,"value":686},{"type":567,"tag":586,"props":1443,"children":1445},{"style":1444},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[1446],{"type":573,"value":1447}," this",{"type":567,"tag":586,"props":1449,"children":1450},{"style":651},[1451],{"type":573,"value":1452},");\n",{"type":567,"tag":586,"props":1454,"children":1455},{"class":588,"line":1008},[1456,1460,1464,1469],{"type":567,"tag":586,"props":1457,"children":1458},{"style":871},[1459],{"type":573,"value":915},{"type":567,"tag":586,"props":1461,"children":1462},{"style":1444},[1463],{"type":573,"value":1447},{"type":567,"tag":586,"props":1465,"children":1466},{"style":651},[1467],{"type":573,"value":1468},";",{"type":567,"tag":586,"props":1470,"children":1471},{"style":593},[1472],{"type":573,"value":1473}," // 注意这里是对象调用模式，this 指向的就是上层的对象，迭代器\n",{"type":567,"tag":586,"props":1475,"children":1476},{"class":588,"line":1056},[1477],{"type":567,"tag":586,"props":1478,"children":1479},{"style":651},[1480],{"type":573,"value":1062},{"type":567,"tag":586,"props":1482,"children":1483},{"class":588,"line":1065},[1484],{"type":567,"tag":586,"props":1485,"children":1486},{"style":651},[1487],{"type":573,"value":1071},{"type":567,"tag":586,"props":1489,"children":1490},{"class":588,"line":1074},[1491],{"type":567,"tag":586,"props":1492,"children":1493},{"style":651},[1494],{"type":573,"value":1080},{"type":567,"tag":586,"props":1496,"children":1498},{"class":588,"line":1497},22,[1499],{"type":567,"tag":586,"props":1500,"children":1501},{"emptyLinePlaceholder":712},[1502],{"type":573,"value":715},{"type":567,"tag":586,"props":1504,"children":1506},{"class":588,"line":1505},23,[1507,1511,1516,1520,1524,1528,1533,1537,1542,1546,1551],{"type":567,"tag":586,"props":1508,"children":1509},{"style":639},[1510],{"type":573,"value":642},{"type":567,"tag":586,"props":1512,"children":1513},{"style":645},[1514],{"type":573,"value":1515}," iterator",{"type":567,"tag":586,"props":1517,"children":1518},{"style":651},[1519],{"type":573,"value":654},{"type":567,"tag":586,"props":1521,"children":1522},{"style":657},[1523],{"type":573,"value":1159},{"type":567,"tag":586,"props":1525,"children":1526},{"style":651},[1527],{"type":573,"value":665},{"type":567,"tag":586,"props":1529,"children":1530},{"style":856},[1531],{"type":573,"value":1532},"1",{"type":567,"tag":586,"props":1534,"children":1535},{"style":651},[1536],{"type":573,"value":686},{"type":567,"tag":586,"props":1538,"children":1539},{"style":856},[1540],{"type":573,"value":1541}," 2",{"type":567,"tag":586,"props":1543,"children":1544},{"style":651},[1545],{"type":573,"value":686},{"type":567,"tag":586,"props":1547,"children":1548},{"style":856},[1549],{"type":573,"value":1550}," 3",{"type":567,"tag":586,"props":1552,"children":1553},{"style":651},[1554],{"type":573,"value":705},{"type":567,"tag":586,"props":1556,"children":1558},{"class":588,"line":1557},24,[1559,1564,1568,1572,1577,1581],{"type":567,"tag":586,"props":1560,"children":1561},{"style":645},[1562],{"type":573,"value":1563},"console",{"type":567,"tag":586,"props":1565,"children":1566},{"style":651},[1567],{"type":573,"value":729},{"type":567,"tag":586,"props":1569,"children":1570},{"style":657},[1571],{"type":573,"value":1420},{"type":567,"tag":586,"props":1573,"children":1574},{"style":651},[1575],{"type":573,"value":1576},"(...",{"type":567,"tag":586,"props":1578,"children":1579},{"style":645},[1580],{"type":573,"value":1386},{"type":567,"tag":586,"props":1582,"children":1583},{"style":651},[1584],{"type":573,"value":1452},{"type":567,"tag":1586,"props":1587,"children":1588},"style",{},[1589],{"type":573,"value":1590},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":562,"searchDepth":626,"depth":626,"links":1592},[1593,1594],{"id":570,"depth":599,"text":570},{"id":1083,"depth":599,"text":1083},"markdown","content:3.code-assessment:1.source:1.native-api:8.iterator.md","content","3.code-assessment/1.source/1.native-api/8.iterator.md","md",[1601,1603],{"_path":350,"title":349,"description":1602},"JSON.stringify() 方法将一个 js 对象或值转换为 json 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性。",{"_path":356,"title":355,"description":562},1717731143786]