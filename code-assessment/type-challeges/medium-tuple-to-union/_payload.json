[{"data":1,"prerenderedAt":1060},["Reactive",2],{"navigation":3,"/code-assessment/type-challeges/medium-tuple-to-union":551,"/code-assessment/type-challeges/medium-tuple-to-union-surround":1055},[4,272,301,519,527,536],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":300},"八股文","/endorsement",[276,287],{"title":277,"_path":278,"children":279},"构建工具","/endorsement/build-tools",[280],{"title":281,"_path":282,"children":283},"Webpack","/endorsement/build-tools/webpack",[284],{"title":285,"_path":286},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":288,"_path":289,"children":290},"Html","/endorsement/html",[291,294,297],{"title":292,"_path":293},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":295,"_path":296},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":298,"_path":299},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":302,"_path":303,"children":304,"icon":518},"代码考核","/code-assessment",[305,410,511],{"title":306,"_path":307,"children":308},"源码实现","/code-assessment/source",[309,343,359,387,394,401,404,407],{"title":310,"_path":311,"children":312},"原生 api","/code-assessment/source/native-api",[313,316,319,322,325,328,331,334,337,340],{"title":314,"_path":315},"polyfill","/code-assessment/source/native-api/polyfill",{"title":317,"_path":318},"ajax","/code-assessment/source/native-api/ajax",{"title":320,"_path":321},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":323,"_path":324},"new 操作符","/code-assessment/source/native-api/new",{"title":326,"_path":327},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":329,"_path":330},"定时器","/code-assessment/source/native-api/timer",{"title":332,"_path":333},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":335,"_path":336},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":338,"_path":339},"extends","/code-assessment/source/native-api/extends",{"title":341,"_path":342},"Promise","/code-assessment/source/native-api/promise",{"title":344,"_path":345,"children":346},"函数 Function","/code-assessment/source/function",[347,350,353,356],{"title":348,"_path":349},"函数防抖","/code-assessment/source/function/debounce",{"title":351,"_path":352},"函数节流","/code-assessment/source/function/throttle",{"title":354,"_path":355},"函数柯理化","/code-assessment/source/function/curry",{"title":357,"_path":358},"函数睡眠","/code-assessment/source/function/sleep",{"title":360,"_path":361,"children":362},"数组 Array","/code-assessment/source/array",[363,366,369,372,375,378,381,384],{"title":364,"_path":365},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":367,"_path":368},"数组扁平化","/code-assessment/source/array/flat",{"title":370,"_path":371},"原型方法","/code-assessment/source/array/prototype-method",{"title":373,"_path":374},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":376,"_path":377},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":379,"_path":380},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":382,"_path":383},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":385,"_path":386},"二维数组","/code-assessment/source/array/2d-array",{"title":388,"_path":389,"children":390},"字符串 String","/code-assessment/source/string",[391],{"title":392,"_path":393},"repeat()","/code-assessment/source/string/repeat",{"title":395,"_path":396,"children":397},"集合 Set","/code-assessment/source/set",[398],{"title":399,"_path":400},"遍历集合","/code-assessment/source/set/traverse",{"title":402,"_path":403},"获取通用类型","/code-assessment/source/get-generic-type",{"title":405,"_path":406},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":408,"_path":409},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":411,"_path":412,"children":413},"业务场景","/code-assessment/scene",[414,444,454,457,460,463,466,469,472,475,478,481,484,487,490,493,496,499,502,505,508],{"title":341,"_path":415,"children":416},"/code-assessment/scene/promise",[417,420,423,426,429,432,435,438,441],{"title":418,"_path":419},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":421,"_path":422},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":424,"_path":425},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":427,"_path":428},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":430,"_path":431},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":433,"_path":434},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":436,"_path":437},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":439,"_path":440},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":442,"_path":443},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":445,"_path":446,"children":447},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[448,451],{"title":449,"_path":450},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":452,"_path":453},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":455,"_path":456},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":458,"_path":459},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":461,"_path":462},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":464,"_path":465},"倒计时","/code-assessment/scene/countdown",{"title":467,"_path":468},"日期格式化","/code-assessment/scene/date-format",{"title":470,"_path":471},"实现前端路由","/code-assessment/scene/frontend-route",{"title":473,"_path":474},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":476,"_path":477},"lodash.get","/code-assessment/scene/lodash-get",{"title":479,"_path":480},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":482,"_path":483},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":485,"_path":486},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":488,"_path":489},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":491,"_path":492},"随机数","/code-assessment/scene/random-number",{"title":494,"_path":495},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":497,"_path":498},"sku 算法实现","/code-assessment/scene/sku",{"title":500,"_path":501},"整数分割","/code-assessment/scene/split-number",{"title":503,"_path":504},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":506,"_path":507},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":509,"_path":510},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":512,"_path":513,"children":514},"Ts 类型挑战","/code-assessment/type-challeges",[515],{"title":516,"_path":517},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":520,"_path":521,"children":522,"icon":526},"项目","/project",[523],{"title":524,"_path":525},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":528,"_path":529,"children":530,"icon":535},"设计模式","/design-mode",[531,532],{"title":528,"_path":529},{"title":533,"_path":534},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":537,"_path":538,"children":539,"icon":550},"后端语言","/backend-languages",[540],{"title":541,"_path":542,"children":543},"Python","/backend-languages/python",[544,547],{"title":545,"_path":546},"基础","/backend-languages/python/base",{"title":548,"_path":549},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":517,"_dir":552,"_draft":553,"_partial":553,"_locale":554,"title":516,"description":555,"body":556,"_type":1050,"_id":1051,"_source":1052,"_file":1053,"_extension":1054},"type-challeges",false,"","实现泛型TupleToUnion\u003CT>，它返回元组所有值的合集。",{"type":557,"children":558,"toc":1044},"root",[559,576,581,730,737,802,808,949,955,1038],{"type":560,"tag":561,"props":562,"children":563},"element","p",{},[564,567,574],{"type":565,"value":566},"text","实现泛型",{"type":560,"tag":568,"props":569,"children":571},"code",{"className":570},[],[572],{"type":565,"value":573},"TupleToUnion\u003CT>",{"type":565,"value":575},"，它返回元组所有值的合集。",{"type":560,"tag":561,"props":577,"children":578},{},[579],{"type":565,"value":580},"例如",{"type":560,"tag":582,"props":583,"children":587},"pre",{"className":584,"code":585,"language":586,"meta":554,"style":554},"language-ts shiki shiki-themes vitesse-light vitesse-light vitesse-dark","type Arr = [\"1\", \"2\", \"3\"];\n\ntype Test = TupleToUnion\u003CArr>; // expected to be '1' | '2' | '3'\n","ts",[588],{"type":560,"tag":568,"props":589,"children":590},{"__ignoreMap":554},[591,677,687],{"type":560,"tag":592,"props":593,"children":596},"span",{"class":594,"line":595},"line",1,[597,603,609,615,620,626,632,636,641,646,651,655,659,663,668,672],{"type":560,"tag":592,"props":598,"children":600},{"style":599},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[601],{"type":565,"value":602},"type",{"type":560,"tag":592,"props":604,"children":606},{"style":605},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[607],{"type":565,"value":608}," Arr",{"type":560,"tag":592,"props":610,"children":612},{"style":611},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[613],{"type":565,"value":614}," =",{"type":560,"tag":592,"props":616,"children":617},{"style":611},[618],{"type":565,"value":619}," [",{"type":560,"tag":592,"props":621,"children":623},{"style":622},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[624],{"type":565,"value":625},"\"",{"type":560,"tag":592,"props":627,"children":629},{"style":628},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[630],{"type":565,"value":631},"1",{"type":560,"tag":592,"props":633,"children":634},{"style":622},[635],{"type":565,"value":625},{"type":560,"tag":592,"props":637,"children":638},{"style":611},[639],{"type":565,"value":640},",",{"type":560,"tag":592,"props":642,"children":643},{"style":622},[644],{"type":565,"value":645}," \"",{"type":560,"tag":592,"props":647,"children":648},{"style":628},[649],{"type":565,"value":650},"2",{"type":560,"tag":592,"props":652,"children":653},{"style":622},[654],{"type":565,"value":625},{"type":560,"tag":592,"props":656,"children":657},{"style":611},[658],{"type":565,"value":640},{"type":560,"tag":592,"props":660,"children":661},{"style":622},[662],{"type":565,"value":645},{"type":560,"tag":592,"props":664,"children":665},{"style":628},[666],{"type":565,"value":667},"3",{"type":560,"tag":592,"props":669,"children":670},{"style":622},[671],{"type":565,"value":625},{"type":560,"tag":592,"props":673,"children":674},{"style":611},[675],{"type":565,"value":676},"];\n",{"type":560,"tag":592,"props":678,"children":680},{"class":594,"line":679},2,[681],{"type":560,"tag":592,"props":682,"children":684},{"emptyLinePlaceholder":683},true,[685],{"type":565,"value":686},"\n",{"type":560,"tag":592,"props":688,"children":690},{"class":594,"line":689},3,[691,695,700,704,709,714,719,724],{"type":560,"tag":592,"props":692,"children":693},{"style":599},[694],{"type":565,"value":602},{"type":560,"tag":592,"props":696,"children":697},{"style":605},[698],{"type":565,"value":699}," Test",{"type":560,"tag":592,"props":701,"children":702},{"style":611},[703],{"type":565,"value":614},{"type":560,"tag":592,"props":705,"children":706},{"style":605},[707],{"type":565,"value":708}," TupleToUnion",{"type":560,"tag":592,"props":710,"children":711},{"style":611},[712],{"type":565,"value":713},"\u003C",{"type":560,"tag":592,"props":715,"children":716},{"style":605},[717],{"type":565,"value":718},"Arr",{"type":560,"tag":592,"props":720,"children":721},{"style":611},[722],{"type":565,"value":723},">;",{"type":560,"tag":592,"props":725,"children":727},{"style":726},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[728],{"type":565,"value":729}," // expected to be '1' | '2' | '3'\n",{"type":560,"tag":731,"props":732,"children":734},"h2",{"id":733},"method-1",[735],{"type":565,"value":736},"method 1",{"type":560,"tag":582,"props":738,"children":740},{"className":584,"code":739,"language":586,"meta":554,"style":554},"type TupleToUnion\u003CT extends any[]> = T[number];\n",[741],{"type":560,"tag":568,"props":742,"children":743},{"__ignoreMap":554},[744],{"type":560,"tag":592,"props":745,"children":746},{"class":594,"line":595},[747,751,755,759,764,769,774,779,783,788,793,798],{"type":560,"tag":592,"props":748,"children":749},{"style":599},[750],{"type":565,"value":602},{"type":560,"tag":592,"props":752,"children":753},{"style":605},[754],{"type":565,"value":708},{"type":560,"tag":592,"props":756,"children":757},{"style":611},[758],{"type":565,"value":713},{"type":560,"tag":592,"props":760,"children":761},{"style":605},[762],{"type":565,"value":763},"T",{"type":560,"tag":592,"props":765,"children":766},{"style":599},[767],{"type":565,"value":768}," extends",{"type":560,"tag":592,"props":770,"children":771},{"style":605},[772],{"type":565,"value":773}," any",{"type":560,"tag":592,"props":775,"children":776},{"style":611},[777],{"type":565,"value":778},"[]>",{"type":560,"tag":592,"props":780,"children":781},{"style":611},[782],{"type":565,"value":614},{"type":560,"tag":592,"props":784,"children":785},{"style":605},[786],{"type":565,"value":787}," T",{"type":560,"tag":592,"props":789,"children":790},{"style":611},[791],{"type":565,"value":792},"[",{"type":560,"tag":592,"props":794,"children":795},{"style":605},[796],{"type":565,"value":797},"number",{"type":560,"tag":592,"props":799,"children":800},{"style":611},[801],{"type":565,"value":676},{"type":560,"tag":731,"props":803,"children":805},{"id":804},"method-2",[806],{"type":565,"value":807},"method 2",{"type":560,"tag":582,"props":809,"children":811},{"className":584,"code":810,"language":586,"meta":554,"style":554},"type TupleToUnion\u003CT extends unknown[]> = T extends [infer P, ...infer R]\n  ? P | TupleToUnion\u003CR>\n  : never;\n",[812],{"type":560,"tag":568,"props":813,"children":814},{"__ignoreMap":554},[815,896,931],{"type":560,"tag":592,"props":816,"children":817},{"class":594,"line":595},[818,822,826,830,834,838,843,847,851,855,859,863,868,873,877,882,886,891],{"type":560,"tag":592,"props":819,"children":820},{"style":599},[821],{"type":565,"value":602},{"type":560,"tag":592,"props":823,"children":824},{"style":605},[825],{"type":565,"value":708},{"type":560,"tag":592,"props":827,"children":828},{"style":611},[829],{"type":565,"value":713},{"type":560,"tag":592,"props":831,"children":832},{"style":605},[833],{"type":565,"value":763},{"type":560,"tag":592,"props":835,"children":836},{"style":599},[837],{"type":565,"value":768},{"type":560,"tag":592,"props":839,"children":840},{"style":605},[841],{"type":565,"value":842}," unknown",{"type":560,"tag":592,"props":844,"children":845},{"style":611},[846],{"type":565,"value":778},{"type":560,"tag":592,"props":848,"children":849},{"style":611},[850],{"type":565,"value":614},{"type":560,"tag":592,"props":852,"children":853},{"style":605},[854],{"type":565,"value":787},{"type":560,"tag":592,"props":856,"children":857},{"style":599},[858],{"type":565,"value":768},{"type":560,"tag":592,"props":860,"children":861},{"style":611},[862],{"type":565,"value":619},{"type":560,"tag":592,"props":864,"children":865},{"style":599},[866],{"type":565,"value":867},"infer",{"type":560,"tag":592,"props":869,"children":870},{"style":605},[871],{"type":565,"value":872}," P",{"type":560,"tag":592,"props":874,"children":875},{"style":611},[876],{"type":565,"value":640},{"type":560,"tag":592,"props":878,"children":879},{"style":611},[880],{"type":565,"value":881}," ...",{"type":560,"tag":592,"props":883,"children":884},{"style":599},[885],{"type":565,"value":867},{"type":560,"tag":592,"props":887,"children":888},{"style":605},[889],{"type":565,"value":890}," R",{"type":560,"tag":592,"props":892,"children":893},{"style":611},[894],{"type":565,"value":895},"]\n",{"type":560,"tag":592,"props":897,"children":898},{"class":594,"line":679},[899,904,908,913,917,921,926],{"type":560,"tag":592,"props":900,"children":901},{"style":599},[902],{"type":565,"value":903},"  ?",{"type":560,"tag":592,"props":905,"children":906},{"style":605},[907],{"type":565,"value":872},{"type":560,"tag":592,"props":909,"children":910},{"style":611},[911],{"type":565,"value":912}," |",{"type":560,"tag":592,"props":914,"children":915},{"style":605},[916],{"type":565,"value":708},{"type":560,"tag":592,"props":918,"children":919},{"style":611},[920],{"type":565,"value":713},{"type":560,"tag":592,"props":922,"children":923},{"style":605},[924],{"type":565,"value":925},"R",{"type":560,"tag":592,"props":927,"children":928},{"style":611},[929],{"type":565,"value":930},">\n",{"type":560,"tag":592,"props":932,"children":933},{"class":594,"line":689},[934,939,944],{"type":560,"tag":592,"props":935,"children":936},{"style":599},[937],{"type":565,"value":938},"  :",{"type":560,"tag":592,"props":940,"children":941},{"style":605},[942],{"type":565,"value":943}," never",{"type":560,"tag":592,"props":945,"children":946},{"style":611},[947],{"type":565,"value":948},";\n",{"type":560,"tag":731,"props":950,"children":952},{"id":951},"method-3",[953],{"type":565,"value":954},"method 3",{"type":560,"tag":582,"props":956,"children":958},{"className":584,"code":957,"language":586,"meta":554,"style":554},"type TupleToUnion\u003CT> = T extends (infer P)[] ? P : never;\n",[959],{"type":560,"tag":568,"props":960,"children":961},{"__ignoreMap":554},[962],{"type":560,"tag":592,"props":963,"children":964},{"class":594,"line":595},[965,969,973,977,981,986,990,994,998,1003,1007,1011,1016,1021,1025,1030,1034],{"type":560,"tag":592,"props":966,"children":967},{"style":599},[968],{"type":565,"value":602},{"type":560,"tag":592,"props":970,"children":971},{"style":605},[972],{"type":565,"value":708},{"type":560,"tag":592,"props":974,"children":975},{"style":611},[976],{"type":565,"value":713},{"type":560,"tag":592,"props":978,"children":979},{"style":605},[980],{"type":565,"value":763},{"type":560,"tag":592,"props":982,"children":983},{"style":611},[984],{"type":565,"value":985},">",{"type":560,"tag":592,"props":987,"children":988},{"style":611},[989],{"type":565,"value":614},{"type":560,"tag":592,"props":991,"children":992},{"style":605},[993],{"type":565,"value":787},{"type":560,"tag":592,"props":995,"children":996},{"style":599},[997],{"type":565,"value":768},{"type":560,"tag":592,"props":999,"children":1000},{"style":611},[1001],{"type":565,"value":1002}," (",{"type":560,"tag":592,"props":1004,"children":1005},{"style":599},[1006],{"type":565,"value":867},{"type":560,"tag":592,"props":1008,"children":1009},{"style":605},[1010],{"type":565,"value":872},{"type":560,"tag":592,"props":1012,"children":1013},{"style":611},[1014],{"type":565,"value":1015},")[]",{"type":560,"tag":592,"props":1017,"children":1018},{"style":599},[1019],{"type":565,"value":1020}," ?",{"type":560,"tag":592,"props":1022,"children":1023},{"style":605},[1024],{"type":565,"value":872},{"type":560,"tag":592,"props":1026,"children":1027},{"style":599},[1028],{"type":565,"value":1029}," :",{"type":560,"tag":592,"props":1031,"children":1032},{"style":605},[1033],{"type":565,"value":943},{"type":560,"tag":592,"props":1035,"children":1036},{"style":611},[1037],{"type":565,"value":948},{"type":560,"tag":1039,"props":1040,"children":1041},"style",{},[1042],{"type":565,"value":1043},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":554,"searchDepth":1045,"depth":1045,"links":1046},5,[1047,1048,1049],{"id":733,"depth":679,"text":736},{"id":804,"depth":679,"text":807},{"id":951,"depth":679,"text":954},"markdown","content:3.code-assessment:3.type-challeges:10.medium-tuple-to-union.md","content","3.code-assessment/3.type-challeges/10.medium-tuple-to-union.md","md",[1056,1058],{"_path":510,"title":509,"description":1057},"给 xhr 添加 hook，从而实现在各个阶段打印日志",{"_path":525,"title":524,"description":1059},"Pinia",1715094973648]