[{"data":1,"prerenderedAt":1061},["Reactive",2],{"navigation":3,"/code-assessment/type-challeges/medium-tuple-to-union":552,"/code-assessment/type-challeges/medium-tuple-to-union-surround":1056},[4,272,311,529,537],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":310},"八股文","/endorsement",[276,286,297],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"构建工具","/endorsement/build-tools",[290],{"title":291,"_path":292,"children":293},"Webpack","/endorsement/build-tools/webpack",[294],{"title":295,"_path":296},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":298,"_path":299,"children":300},"Html","/endorsement/html",[301,304,307],{"title":302,"_path":303},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":305,"_path":306},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":308,"_path":309},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":312,"_path":313,"children":314,"icon":528},"代码考核","/code-assessment",[315,420,521],{"title":316,"_path":317,"children":318},"源码实现","/code-assessment/source",[319,353,369,397,404,411,414,417],{"title":320,"_path":321,"children":322},"原生 api","/code-assessment/source/native-api",[323,326,329,332,335,338,341,344,347,350],{"title":324,"_path":325},"polyfill","/code-assessment/source/native-api/polyfill",{"title":327,"_path":328},"ajax","/code-assessment/source/native-api/ajax",{"title":330,"_path":331},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":333,"_path":334},"new 操作符","/code-assessment/source/native-api/new",{"title":336,"_path":337},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":339,"_path":340},"定时器","/code-assessment/source/native-api/timer",{"title":342,"_path":343},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":345,"_path":346},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":348,"_path":349},"extends","/code-assessment/source/native-api/extends",{"title":351,"_path":352},"Promise","/code-assessment/source/native-api/promise",{"title":354,"_path":355,"children":356},"函数 Function","/code-assessment/source/function",[357,360,363,366],{"title":358,"_path":359},"函数防抖","/code-assessment/source/function/debounce",{"title":361,"_path":362},"函数节流","/code-assessment/source/function/throttle",{"title":364,"_path":365},"函数柯理化","/code-assessment/source/function/curry",{"title":367,"_path":368},"函数睡眠","/code-assessment/source/function/sleep",{"title":370,"_path":371,"children":372},"数组 Array","/code-assessment/source/array",[373,376,379,382,385,388,391,394],{"title":374,"_path":375},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":377,"_path":378},"数组扁平化","/code-assessment/source/array/flat",{"title":380,"_path":381},"原型方法","/code-assessment/source/array/prototype-method",{"title":383,"_path":384},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":386,"_path":387},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":389,"_path":390},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":392,"_path":393},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":395,"_path":396},"二维数组","/code-assessment/source/array/2d-array",{"title":398,"_path":399,"children":400},"字符串 String","/code-assessment/source/string",[401],{"title":402,"_path":403},"repeat()","/code-assessment/source/string/repeat",{"title":405,"_path":406,"children":407},"集合 Set","/code-assessment/source/set",[408],{"title":409,"_path":410},"遍历集合","/code-assessment/source/set/traverse",{"title":412,"_path":413},"获取通用类型","/code-assessment/source/get-generic-type",{"title":415,"_path":416},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":418,"_path":419},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":421,"_path":422,"children":423},"业务场景","/code-assessment/scene",[424,454,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518],{"title":351,"_path":425,"children":426},"/code-assessment/scene/promise",[427,430,433,436,439,442,445,448,451],{"title":428,"_path":429},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":431,"_path":432},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":434,"_path":435},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":437,"_path":438},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":440,"_path":441},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":443,"_path":444},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":446,"_path":447},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":449,"_path":450},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":452,"_path":453},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":455,"_path":456,"children":457},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[458,461],{"title":459,"_path":460},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":462,"_path":463},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":465,"_path":466},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":468,"_path":469},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":471,"_path":472},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":474,"_path":475},"倒计时","/code-assessment/scene/countdown",{"title":477,"_path":478},"日期格式化","/code-assessment/scene/date-format",{"title":480,"_path":481},"实现前端路由","/code-assessment/scene/frontend-route",{"title":483,"_path":484},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":486,"_path":487},"lodash.get","/code-assessment/scene/lodash-get",{"title":489,"_path":490},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":492,"_path":493},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":495,"_path":496},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":498,"_path":499},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":501,"_path":502},"随机数","/code-assessment/scene/random-number",{"title":504,"_path":505},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":507,"_path":508},"sku 算法实现","/code-assessment/scene/sku",{"title":510,"_path":511},"整数分割","/code-assessment/scene/split-number",{"title":513,"_path":514},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":516,"_path":517},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":519,"_path":520},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":522,"_path":523,"children":524},"Ts 类型挑战","/code-assessment/type-challeges",[525],{"title":526,"_path":527},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":530,"_path":531,"children":532,"icon":536},"项目","/project",[533],{"title":534,"_path":535},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":538,"_path":539,"children":540,"icon":551},"后端语言","/backend-languages",[541],{"title":542,"_path":543,"children":544},"Python","/backend-languages/python",[545,548],{"title":546,"_path":547},"基础","/backend-languages/python/base",{"title":549,"_path":550},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":527,"_dir":553,"_draft":554,"_partial":554,"_locale":555,"title":526,"description":556,"body":557,"_type":1051,"_id":1052,"_source":1053,"_file":1054,"_extension":1055},"type-challeges",false,"","实现泛型TupleToUnion\u003CT>，它返回元组所有值的合集。",{"type":558,"children":559,"toc":1045},"root",[560,577,582,731,738,803,809,950,956,1039],{"type":561,"tag":562,"props":563,"children":564},"element","p",{},[565,568,575],{"type":566,"value":567},"text","实现泛型",{"type":561,"tag":569,"props":570,"children":572},"code",{"className":571},[],[573],{"type":566,"value":574},"TupleToUnion\u003CT>",{"type":566,"value":576},"，它返回元组所有值的合集。",{"type":561,"tag":562,"props":578,"children":579},{},[580],{"type":566,"value":581},"例如",{"type":561,"tag":583,"props":584,"children":588},"pre",{"className":585,"code":586,"language":587,"meta":555,"style":555},"language-ts shiki shiki-themes vitesse-light vitesse-light vitesse-dark","type Arr = [\"1\", \"2\", \"3\"];\n\ntype Test = TupleToUnion\u003CArr>; // expected to be '1' | '2' | '3'\n","ts",[589],{"type":561,"tag":569,"props":590,"children":591},{"__ignoreMap":555},[592,678,688],{"type":561,"tag":593,"props":594,"children":597},"span",{"class":595,"line":596},"line",1,[598,604,610,616,621,627,633,637,642,647,652,656,660,664,669,673],{"type":561,"tag":593,"props":599,"children":601},{"style":600},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[602],{"type":566,"value":603},"type",{"type":561,"tag":593,"props":605,"children":607},{"style":606},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[608],{"type":566,"value":609}," Arr",{"type":561,"tag":593,"props":611,"children":613},{"style":612},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[614],{"type":566,"value":615}," =",{"type":561,"tag":593,"props":617,"children":618},{"style":612},[619],{"type":566,"value":620}," [",{"type":561,"tag":593,"props":622,"children":624},{"style":623},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[625],{"type":566,"value":626},"\"",{"type":561,"tag":593,"props":628,"children":630},{"style":629},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[631],{"type":566,"value":632},"1",{"type":561,"tag":593,"props":634,"children":635},{"style":623},[636],{"type":566,"value":626},{"type":561,"tag":593,"props":638,"children":639},{"style":612},[640],{"type":566,"value":641},",",{"type":561,"tag":593,"props":643,"children":644},{"style":623},[645],{"type":566,"value":646}," \"",{"type":561,"tag":593,"props":648,"children":649},{"style":629},[650],{"type":566,"value":651},"2",{"type":561,"tag":593,"props":653,"children":654},{"style":623},[655],{"type":566,"value":626},{"type":561,"tag":593,"props":657,"children":658},{"style":612},[659],{"type":566,"value":641},{"type":561,"tag":593,"props":661,"children":662},{"style":623},[663],{"type":566,"value":646},{"type":561,"tag":593,"props":665,"children":666},{"style":629},[667],{"type":566,"value":668},"3",{"type":561,"tag":593,"props":670,"children":671},{"style":623},[672],{"type":566,"value":626},{"type":561,"tag":593,"props":674,"children":675},{"style":612},[676],{"type":566,"value":677},"];\n",{"type":561,"tag":593,"props":679,"children":681},{"class":595,"line":680},2,[682],{"type":561,"tag":593,"props":683,"children":685},{"emptyLinePlaceholder":684},true,[686],{"type":566,"value":687},"\n",{"type":561,"tag":593,"props":689,"children":691},{"class":595,"line":690},3,[692,696,701,705,710,715,720,725],{"type":561,"tag":593,"props":693,"children":694},{"style":600},[695],{"type":566,"value":603},{"type":561,"tag":593,"props":697,"children":698},{"style":606},[699],{"type":566,"value":700}," Test",{"type":561,"tag":593,"props":702,"children":703},{"style":612},[704],{"type":566,"value":615},{"type":561,"tag":593,"props":706,"children":707},{"style":606},[708],{"type":566,"value":709}," TupleToUnion",{"type":561,"tag":593,"props":711,"children":712},{"style":612},[713],{"type":566,"value":714},"\u003C",{"type":561,"tag":593,"props":716,"children":717},{"style":606},[718],{"type":566,"value":719},"Arr",{"type":561,"tag":593,"props":721,"children":722},{"style":612},[723],{"type":566,"value":724},">;",{"type":561,"tag":593,"props":726,"children":728},{"style":727},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[729],{"type":566,"value":730}," // expected to be '1' | '2' | '3'\n",{"type":561,"tag":732,"props":733,"children":735},"h2",{"id":734},"method-1",[736],{"type":566,"value":737},"method 1",{"type":561,"tag":583,"props":739,"children":741},{"className":585,"code":740,"language":587,"meta":555,"style":555},"type TupleToUnion\u003CT extends any[]> = T[number];\n",[742],{"type":561,"tag":569,"props":743,"children":744},{"__ignoreMap":555},[745],{"type":561,"tag":593,"props":746,"children":747},{"class":595,"line":596},[748,752,756,760,765,770,775,780,784,789,794,799],{"type":561,"tag":593,"props":749,"children":750},{"style":600},[751],{"type":566,"value":603},{"type":561,"tag":593,"props":753,"children":754},{"style":606},[755],{"type":566,"value":709},{"type":561,"tag":593,"props":757,"children":758},{"style":612},[759],{"type":566,"value":714},{"type":561,"tag":593,"props":761,"children":762},{"style":606},[763],{"type":566,"value":764},"T",{"type":561,"tag":593,"props":766,"children":767},{"style":600},[768],{"type":566,"value":769}," extends",{"type":561,"tag":593,"props":771,"children":772},{"style":606},[773],{"type":566,"value":774}," any",{"type":561,"tag":593,"props":776,"children":777},{"style":612},[778],{"type":566,"value":779},"[]>",{"type":561,"tag":593,"props":781,"children":782},{"style":612},[783],{"type":566,"value":615},{"type":561,"tag":593,"props":785,"children":786},{"style":606},[787],{"type":566,"value":788}," T",{"type":561,"tag":593,"props":790,"children":791},{"style":612},[792],{"type":566,"value":793},"[",{"type":561,"tag":593,"props":795,"children":796},{"style":606},[797],{"type":566,"value":798},"number",{"type":561,"tag":593,"props":800,"children":801},{"style":612},[802],{"type":566,"value":677},{"type":561,"tag":732,"props":804,"children":806},{"id":805},"method-2",[807],{"type":566,"value":808},"method 2",{"type":561,"tag":583,"props":810,"children":812},{"className":585,"code":811,"language":587,"meta":555,"style":555},"type TupleToUnion\u003CT extends unknown[]> = T extends [infer P, ...infer R]\n  ? P | TupleToUnion\u003CR>\n  : never;\n",[813],{"type":561,"tag":569,"props":814,"children":815},{"__ignoreMap":555},[816,897,932],{"type":561,"tag":593,"props":817,"children":818},{"class":595,"line":596},[819,823,827,831,835,839,844,848,852,856,860,864,869,874,878,883,887,892],{"type":561,"tag":593,"props":820,"children":821},{"style":600},[822],{"type":566,"value":603},{"type":561,"tag":593,"props":824,"children":825},{"style":606},[826],{"type":566,"value":709},{"type":561,"tag":593,"props":828,"children":829},{"style":612},[830],{"type":566,"value":714},{"type":561,"tag":593,"props":832,"children":833},{"style":606},[834],{"type":566,"value":764},{"type":561,"tag":593,"props":836,"children":837},{"style":600},[838],{"type":566,"value":769},{"type":561,"tag":593,"props":840,"children":841},{"style":606},[842],{"type":566,"value":843}," unknown",{"type":561,"tag":593,"props":845,"children":846},{"style":612},[847],{"type":566,"value":779},{"type":561,"tag":593,"props":849,"children":850},{"style":612},[851],{"type":566,"value":615},{"type":561,"tag":593,"props":853,"children":854},{"style":606},[855],{"type":566,"value":788},{"type":561,"tag":593,"props":857,"children":858},{"style":600},[859],{"type":566,"value":769},{"type":561,"tag":593,"props":861,"children":862},{"style":612},[863],{"type":566,"value":620},{"type":561,"tag":593,"props":865,"children":866},{"style":600},[867],{"type":566,"value":868},"infer",{"type":561,"tag":593,"props":870,"children":871},{"style":606},[872],{"type":566,"value":873}," P",{"type":561,"tag":593,"props":875,"children":876},{"style":612},[877],{"type":566,"value":641},{"type":561,"tag":593,"props":879,"children":880},{"style":612},[881],{"type":566,"value":882}," ...",{"type":561,"tag":593,"props":884,"children":885},{"style":600},[886],{"type":566,"value":868},{"type":561,"tag":593,"props":888,"children":889},{"style":606},[890],{"type":566,"value":891}," R",{"type":561,"tag":593,"props":893,"children":894},{"style":612},[895],{"type":566,"value":896},"]\n",{"type":561,"tag":593,"props":898,"children":899},{"class":595,"line":680},[900,905,909,914,918,922,927],{"type":561,"tag":593,"props":901,"children":902},{"style":600},[903],{"type":566,"value":904},"  ?",{"type":561,"tag":593,"props":906,"children":907},{"style":606},[908],{"type":566,"value":873},{"type":561,"tag":593,"props":910,"children":911},{"style":612},[912],{"type":566,"value":913}," |",{"type":561,"tag":593,"props":915,"children":916},{"style":606},[917],{"type":566,"value":709},{"type":561,"tag":593,"props":919,"children":920},{"style":612},[921],{"type":566,"value":714},{"type":561,"tag":593,"props":923,"children":924},{"style":606},[925],{"type":566,"value":926},"R",{"type":561,"tag":593,"props":928,"children":929},{"style":612},[930],{"type":566,"value":931},">\n",{"type":561,"tag":593,"props":933,"children":934},{"class":595,"line":690},[935,940,945],{"type":561,"tag":593,"props":936,"children":937},{"style":600},[938],{"type":566,"value":939},"  :",{"type":561,"tag":593,"props":941,"children":942},{"style":606},[943],{"type":566,"value":944}," never",{"type":561,"tag":593,"props":946,"children":947},{"style":612},[948],{"type":566,"value":949},";\n",{"type":561,"tag":732,"props":951,"children":953},{"id":952},"method-3",[954],{"type":566,"value":955},"method 3",{"type":561,"tag":583,"props":957,"children":959},{"className":585,"code":958,"language":587,"meta":555,"style":555},"type TupleToUnion\u003CT> = T extends (infer P)[] ? P : never;\n",[960],{"type":561,"tag":569,"props":961,"children":962},{"__ignoreMap":555},[963],{"type":561,"tag":593,"props":964,"children":965},{"class":595,"line":596},[966,970,974,978,982,987,991,995,999,1004,1008,1012,1017,1022,1026,1031,1035],{"type":561,"tag":593,"props":967,"children":968},{"style":600},[969],{"type":566,"value":603},{"type":561,"tag":593,"props":971,"children":972},{"style":606},[973],{"type":566,"value":709},{"type":561,"tag":593,"props":975,"children":976},{"style":612},[977],{"type":566,"value":714},{"type":561,"tag":593,"props":979,"children":980},{"style":606},[981],{"type":566,"value":764},{"type":561,"tag":593,"props":983,"children":984},{"style":612},[985],{"type":566,"value":986},">",{"type":561,"tag":593,"props":988,"children":989},{"style":612},[990],{"type":566,"value":615},{"type":561,"tag":593,"props":992,"children":993},{"style":606},[994],{"type":566,"value":788},{"type":561,"tag":593,"props":996,"children":997},{"style":600},[998],{"type":566,"value":769},{"type":561,"tag":593,"props":1000,"children":1001},{"style":612},[1002],{"type":566,"value":1003}," (",{"type":561,"tag":593,"props":1005,"children":1006},{"style":600},[1007],{"type":566,"value":868},{"type":561,"tag":593,"props":1009,"children":1010},{"style":606},[1011],{"type":566,"value":873},{"type":561,"tag":593,"props":1013,"children":1014},{"style":612},[1015],{"type":566,"value":1016},")[]",{"type":561,"tag":593,"props":1018,"children":1019},{"style":600},[1020],{"type":566,"value":1021}," ?",{"type":561,"tag":593,"props":1023,"children":1024},{"style":606},[1025],{"type":566,"value":873},{"type":561,"tag":593,"props":1027,"children":1028},{"style":600},[1029],{"type":566,"value":1030}," :",{"type":561,"tag":593,"props":1032,"children":1033},{"style":606},[1034],{"type":566,"value":944},{"type":561,"tag":593,"props":1036,"children":1037},{"style":612},[1038],{"type":566,"value":949},{"type":561,"tag":1040,"props":1041,"children":1042},"style",{},[1043],{"type":566,"value":1044},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":555,"searchDepth":1046,"depth":1046,"links":1047},5,[1048,1049,1050],{"id":734,"depth":680,"text":737},{"id":805,"depth":680,"text":808},{"id":952,"depth":680,"text":955},"markdown","content:3.code-assessment:3.type-challeges:10.medium-tuple-to-union.md","content","3.code-assessment/3.type-challeges/10.medium-tuple-to-union.md","md",[1057,1059],{"_path":520,"title":519,"description":1058},"给 xhr 添加 hook，从而实现在各个阶段打印日志",{"_path":535,"title":534,"description":1060},"Pinia",1715137602878]