import{_ as s,b as i,o as a,a8 as n}from"./chunks/framework.ZREswijJ.js";const c=JSON.parse('{"title":"Iterator 迭代器","description":"","frontmatter":{"title":"Iterator 迭代器"},"headers":[],"relativePath":"code-assessment/1.source/1.native-api/iterator.md","filePath":"code-assessment/1.source/1.native-api/iterator.md"}'),l={name:"code-assessment/1.source/1.native-api/iterator.md"},p=n(`<h2 id="实现迭代器函数" tabindex="-1">实现迭代器函数 <a class="header-anchor" href="#实现迭代器函数" aria-label="Permalink to &quot;实现迭代器函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes light-plus dark-plus vp-code" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">/*</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 这是一个手写的迭代器(Iterator)</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 满足迭代器协议的对象。</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 迭代器协议: 对象的 next 方法是一个无参函数，它返回一个对象，该对象拥有 done 和 value 两个属性：</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> */</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">var</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> it</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">makeIterator</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">([</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;a&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;b&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">it</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">next</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(); </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// { value: &quot;a&quot;, done: false }</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">it</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">next</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(); </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// { value: &quot;b&quot;, done: false }</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">it</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">next</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(); </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// { value: undefined, done: true }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> makeIterator</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">array</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">  var</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> nextIndex</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    next</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> () {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">      return</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> nextIndex</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt; </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">array</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">length</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        ? { </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">value:</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> array</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">[</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">nextIndex</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">++], </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">done:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        : { </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">value:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> undefined</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">done:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> };</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    },</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  };</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="可迭代的迭代器" tabindex="-1">可迭代的迭代器 <a class="header-anchor" href="#可迭代的迭代器" aria-label="Permalink to &quot;可迭代的迭代器&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes light-plus dark-plus vp-code" style="--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;" tabindex="0"><code><span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">/**</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 使迭代器可迭代</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * makeIterator 函数生成的迭代器并没有实现可迭代协议</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 所以不能在 for...of 等语法中使用。</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 可以为该对象实现可迭代协议，在 [Symbol.iterator] 函数中返回该迭代器自身</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> * 从新名了下函数名称 createIterator</span></span>
<span class="line"><span style="--shiki-light:#008000;--shiki-dark:#6A9955;"> */</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">function</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;"> createIterator</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">array</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">) {</span></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">  var</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> nextIndex</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">0</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">;</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">  return</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> {</span></span>
<span class="line"><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">    next</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> () {</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">      return</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> nextIndex</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> &lt; </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">array</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">length</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        ? { </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">value:</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> array</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">[</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">nextIndex</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">++], </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">done:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> false</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> }</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">        : { </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">value:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> undefined</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">done:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> true</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> };</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    },</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">    [Symbol.iterator]:</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> function</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> () {</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">      console</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(</span><span style="--shiki-light:#A31515;--shiki-dark:#CE9178;">&quot;返回的迭代器:&quot;</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">this</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span>
<span class="line"><span style="--shiki-light:#AF00DB;--shiki-dark:#C586C0;">      return</span><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;"> this</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">; </span><span style="--shiki-light:#008000;--shiki-dark:#6A9955;">// 注意这里是对象调用模式，this 指向的就是上层的对象，迭代器</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">    },</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">  };</span></span>
<span class="line"><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0000FF;--shiki-dark:#569CD6;">var</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;"> iterator</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;"> = </span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">createIterator</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">([</span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">1</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">2</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">, </span><span style="--shiki-light:#098658;--shiki-dark:#B5CEA8;">3</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">]);</span></span>
<span class="line"><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">console</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">.</span><span style="--shiki-light:#795E26;--shiki-dark:#DCDCAA;">log</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">(...</span><span style="--shiki-light:#001080;--shiki-dark:#9CDCFE;">iterator</span><span style="--shiki-light:#000000;--shiki-dark:#D4D4D4;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>`,4),h=[p];function k(e,t,r,D,d,g){return a(),i("div",null,h)}const C=s(l,[["render",k]]);export{c as __pageData,C as default};
