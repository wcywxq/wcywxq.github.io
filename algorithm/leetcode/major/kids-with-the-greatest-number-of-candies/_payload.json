[{"data":1,"prerenderedAt":1263},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies":559,"/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies-surround":1258},[4,272,318,536,544],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":317},"八股文","/endorsement",[276,286,293,304],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"JavaScript","/endorsement/javascript",[290],{"title":291,"_path":292},"语法和数据类型","/endorsement/javascript/grammar-data-types",{"title":294,"_path":295,"children":296},"构建工具","/endorsement/build-tools",[297],{"title":298,"_path":299,"children":300},"Webpack","/endorsement/build-tools/webpack",[301],{"title":302,"_path":303},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":305,"_path":306,"children":307},"Html","/endorsement/html",[308,311,314],{"title":309,"_path":310},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":312,"_path":313},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":315,"_path":316},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":319,"_path":320,"children":321,"icon":535},"代码考核","/code-assessment",[322,427,528],{"title":323,"_path":324,"children":325},"源码实现","/code-assessment/source",[326,360,376,404,411,418,421,424],{"title":327,"_path":328,"children":329},"原生 api","/code-assessment/source/native-api",[330,333,336,339,342,345,348,351,354,357],{"title":331,"_path":332},"polyfill","/code-assessment/source/native-api/polyfill",{"title":334,"_path":335},"ajax","/code-assessment/source/native-api/ajax",{"title":337,"_path":338},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":340,"_path":341},"new 操作符","/code-assessment/source/native-api/new",{"title":343,"_path":344},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":346,"_path":347},"定时器","/code-assessment/source/native-api/timer",{"title":349,"_path":350},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":352,"_path":353},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":355,"_path":356},"extends","/code-assessment/source/native-api/extends",{"title":358,"_path":359},"Promise","/code-assessment/source/native-api/promise",{"title":361,"_path":362,"children":363},"函数 Function","/code-assessment/source/function",[364,367,370,373],{"title":365,"_path":366},"函数防抖","/code-assessment/source/function/debounce",{"title":368,"_path":369},"函数节流","/code-assessment/source/function/throttle",{"title":371,"_path":372},"函数柯理化","/code-assessment/source/function/curry",{"title":374,"_path":375},"函数睡眠","/code-assessment/source/function/sleep",{"title":377,"_path":378,"children":379},"数组 Array","/code-assessment/source/array",[380,383,386,389,392,395,398,401],{"title":381,"_path":382},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":384,"_path":385},"数组扁平化","/code-assessment/source/array/flat",{"title":387,"_path":388},"原型方法","/code-assessment/source/array/prototype-method",{"title":390,"_path":391},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":393,"_path":394},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":396,"_path":397},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":399,"_path":400},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":402,"_path":403},"二维数组","/code-assessment/source/array/2d-array",{"title":405,"_path":406,"children":407},"字符串 String","/code-assessment/source/string",[408],{"title":409,"_path":410},"repeat()","/code-assessment/source/string/repeat",{"title":412,"_path":413,"children":414},"集合 Set","/code-assessment/source/set",[415],{"title":416,"_path":417},"遍历集合","/code-assessment/source/set/traverse",{"title":419,"_path":420},"获取通用类型","/code-assessment/source/get-generic-type",{"title":422,"_path":423},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":425,"_path":426},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":428,"_path":429,"children":430},"业务场景","/code-assessment/scene",[431,461,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525],{"title":358,"_path":432,"children":433},"/code-assessment/scene/promise",[434,437,440,443,446,449,452,455,458],{"title":435,"_path":436},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":438,"_path":439},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":441,"_path":442},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":444,"_path":445},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":447,"_path":448},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":450,"_path":451},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":453,"_path":454},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":456,"_path":457},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":459,"_path":460},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":462,"_path":463,"children":464},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[465,468],{"title":466,"_path":467},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":469,"_path":470},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":472,"_path":473},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":475,"_path":476},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":478,"_path":479},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":481,"_path":482},"倒计时","/code-assessment/scene/countdown",{"title":484,"_path":485},"日期格式化","/code-assessment/scene/date-format",{"title":487,"_path":488},"实现前端路由","/code-assessment/scene/frontend-route",{"title":490,"_path":491},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":493,"_path":494},"lodash.get","/code-assessment/scene/lodash-get",{"title":496,"_path":497},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":499,"_path":500},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":502,"_path":503},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":505,"_path":506},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":508,"_path":509},"随机数","/code-assessment/scene/random-number",{"title":511,"_path":512},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":514,"_path":515},"sku 算法实现","/code-assessment/scene/sku",{"title":517,"_path":518},"整数分割","/code-assessment/scene/split-number",{"title":520,"_path":521},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":523,"_path":524},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":526,"_path":527},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":529,"_path":530,"children":531},"Ts 类型挑战","/code-assessment/type-challeges",[532],{"title":533,"_path":534},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":537,"_path":538,"children":539,"icon":543},"项目","/project",[540],{"title":541,"_path":542},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":545,"_path":546,"children":547,"icon":558},"后端语言","/backend-languages",[548],{"title":549,"_path":550,"children":551},"Python","/backend-languages/python",[552,555],{"title":553,"_path":554},"基础","/backend-languages/python/base",{"title":556,"_path":557},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":267,"_dir":560,"_draft":561,"_partial":561,"_locale":562,"title":266,"description":563,"url":564,"body":565,"_type":1253,"_id":1254,"_source":1255,"_file":1256,"_extension":1257},"major",false,"","给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。","https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies",{"type":566,"children":567,"toc":1249},"root",[568,575,580,585,669,674,705,710,733,738,758,764,769,1243],{"type":569,"tag":570,"props":571,"children":572},"element","p",{},[573],{"type":574,"value":563},"text",{"type":569,"tag":570,"props":576,"children":577},{},[578],{"type":574,"value":579},"对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有 最多 的糖果数目。",{"type":569,"tag":570,"props":581,"children":582},{},[583],{"type":574,"value":584},"示例 1：",{"type":569,"tag":586,"props":587,"children":590},"pre",{"className":588,"code":589,"language":574,"meta":562,"style":562},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：candies = [2,3,5,1,3], extraCandies = 3\n输出：[true,true,true,false,true]\n解释：\n孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3 个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n",[591],{"type":569,"tag":592,"props":593,"children":594},"code",{"__ignoreMap":562},[595,606,615,624,633,642,651,660],{"type":569,"tag":596,"props":597,"children":600},"span",{"class":598,"line":599},"line",1,[601],{"type":569,"tag":596,"props":602,"children":603},{},[604],{"type":574,"value":605},"输入：candies = [2,3,5,1,3], extraCandies = 3\n",{"type":569,"tag":596,"props":607,"children":609},{"class":598,"line":608},2,[610],{"type":569,"tag":596,"props":611,"children":612},{},[613],{"type":574,"value":614},"输出：[true,true,true,false,true]\n",{"type":569,"tag":596,"props":616,"children":618},{"class":598,"line":617},3,[619],{"type":569,"tag":596,"props":620,"children":621},{},[622],{"type":574,"value":623},"解释：\n",{"type":569,"tag":596,"props":625,"children":627},{"class":598,"line":626},4,[628],{"type":569,"tag":596,"props":629,"children":630},{},[631],{"type":574,"value":632},"孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3 个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n",{"type":569,"tag":596,"props":634,"children":636},{"class":598,"line":635},5,[637],{"type":569,"tag":596,"props":638,"children":639},{},[640],{"type":574,"value":641},"孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n",{"type":569,"tag":596,"props":643,"children":645},{"class":598,"line":644},6,[646],{"type":569,"tag":596,"props":647,"children":648},{},[649],{"type":574,"value":650},"孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n",{"type":569,"tag":596,"props":652,"children":654},{"class":598,"line":653},7,[655],{"type":569,"tag":596,"props":656,"children":657},{},[658],{"type":574,"value":659},"孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n",{"type":569,"tag":596,"props":661,"children":663},{"class":598,"line":662},8,[664],{"type":569,"tag":596,"props":665,"children":666},{},[667],{"type":574,"value":668},"孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n",{"type":569,"tag":570,"props":670,"children":671},{},[672],{"type":574,"value":673},"示例 2：",{"type":569,"tag":586,"props":675,"children":677},{"className":588,"code":676,"language":574,"meta":562,"style":562},"输入：candies = [4,2,1,1,2], extraCandies = 1\n输出：[true,false,false,false,false]\n解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n",[678],{"type":569,"tag":592,"props":679,"children":680},{"__ignoreMap":562},[681,689,697],{"type":569,"tag":596,"props":682,"children":683},{"class":598,"line":599},[684],{"type":569,"tag":596,"props":685,"children":686},{},[687],{"type":574,"value":688},"输入：candies = [4,2,1,1,2], extraCandies = 1\n",{"type":569,"tag":596,"props":690,"children":691},{"class":598,"line":608},[692],{"type":569,"tag":596,"props":693,"children":694},{},[695],{"type":574,"value":696},"输出：[true,false,false,false,false]\n",{"type":569,"tag":596,"props":698,"children":699},{"class":598,"line":617},[700],{"type":569,"tag":596,"props":701,"children":702},{},[703],{"type":574,"value":704},"解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n",{"type":569,"tag":570,"props":706,"children":707},{},[708],{"type":574,"value":709},"示例 3：",{"type":569,"tag":586,"props":711,"children":713},{"className":588,"code":712,"language":574,"meta":562,"style":562},"输入：candies = [12,1,12], extraCandies = 10\n输出：[true,false,true]\n",[714],{"type":569,"tag":592,"props":715,"children":716},{"__ignoreMap":562},[717,725],{"type":569,"tag":596,"props":718,"children":719},{"class":598,"line":599},[720],{"type":569,"tag":596,"props":721,"children":722},{},[723],{"type":574,"value":724},"输入：candies = [12,1,12], extraCandies = 10\n",{"type":569,"tag":596,"props":726,"children":727},{"class":598,"line":608},[728],{"type":569,"tag":596,"props":729,"children":730},{},[731],{"type":574,"value":732},"输出：[true,false,true]\n",{"type":569,"tag":570,"props":734,"children":735},{},[736],{"type":574,"value":737},"提示：",{"type":569,"tag":739,"props":740,"children":741},"ul",{},[742,748,753],{"type":569,"tag":743,"props":744,"children":745},"li",{},[746],{"type":574,"value":747},"2 \u003C= candies.length \u003C= 100",{"type":569,"tag":743,"props":749,"children":750},{},[751],{"type":574,"value":752},"1 \u003C= candies[i] \u003C= 100",{"type":569,"tag":743,"props":754,"children":755},{},[756],{"type":574,"value":757},"1 \u003C= extraCandies \u003C= 50",{"type":569,"tag":759,"props":760,"children":762},"h2",{"id":761},"解题思路",[763],{"type":574,"value":761},{"type":569,"tag":759,"props":765,"children":767},{"id":766},"实现",[768],{"type":574,"value":766},{"type":569,"tag":586,"props":770,"children":774},{"className":771,"code":772,"language":773,"meta":562,"style":562},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number[]} candies\n * @param {number} extraCandies\n * @return {boolean[]}\n */\nvar kidsWithCandies = function (candies, extraCandies) {\n  const max = Math.max.apply([], candies);\n  let res = [];\n  for (let i = 0; i \u003C candies.length; i++) {\n    let currentMax = candies[i] + extraCandies;\n    res[i] = currentMax >= max;\n  }\n  return res;\n};\n","js",[775],{"type":569,"tag":592,"props":776,"children":777},{"__ignoreMap":562},[778,787,829,862,892,900,955,1011,1033,1115,1166,1208,1217,1234],{"type":569,"tag":596,"props":779,"children":780},{"class":598,"line":599},[781],{"type":569,"tag":596,"props":782,"children":784},{"style":783},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[785],{"type":574,"value":786},"/**\n",{"type":569,"tag":596,"props":788,"children":789},{"class":598,"line":608},[790,795,801,807,812,818,823],{"type":569,"tag":596,"props":791,"children":792},{"style":783},[793],{"type":574,"value":794}," * ",{"type":569,"tag":596,"props":796,"children":798},{"style":797},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[799],{"type":574,"value":800},"@",{"type":569,"tag":596,"props":802,"children":804},{"style":803},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[805],{"type":574,"value":806},"param",{"type":569,"tag":596,"props":808,"children":809},{"style":797},[810],{"type":574,"value":811}," {",{"type":569,"tag":596,"props":813,"children":815},{"style":814},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[816],{"type":574,"value":817},"number[]",{"type":569,"tag":596,"props":819,"children":820},{"style":797},[821],{"type":574,"value":822},"}",{"type":569,"tag":596,"props":824,"children":826},{"style":825},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[827],{"type":574,"value":828}," candies\n",{"type":569,"tag":596,"props":830,"children":831},{"class":598,"line":617},[832,836,840,844,848,853,857],{"type":569,"tag":596,"props":833,"children":834},{"style":783},[835],{"type":574,"value":794},{"type":569,"tag":596,"props":837,"children":838},{"style":797},[839],{"type":574,"value":800},{"type":569,"tag":596,"props":841,"children":842},{"style":803},[843],{"type":574,"value":806},{"type":569,"tag":596,"props":845,"children":846},{"style":797},[847],{"type":574,"value":811},{"type":569,"tag":596,"props":849,"children":850},{"style":814},[851],{"type":574,"value":852},"number",{"type":569,"tag":596,"props":854,"children":855},{"style":797},[856],{"type":574,"value":822},{"type":569,"tag":596,"props":858,"children":859},{"style":825},[860],{"type":574,"value":861}," extraCandies\n",{"type":569,"tag":596,"props":863,"children":864},{"class":598,"line":626},[865,869,873,878,882,887],{"type":569,"tag":596,"props":866,"children":867},{"style":783},[868],{"type":574,"value":794},{"type":569,"tag":596,"props":870,"children":871},{"style":797},[872],{"type":574,"value":800},{"type":569,"tag":596,"props":874,"children":875},{"style":803},[876],{"type":574,"value":877},"return",{"type":569,"tag":596,"props":879,"children":880},{"style":797},[881],{"type":574,"value":811},{"type":569,"tag":596,"props":883,"children":884},{"style":814},[885],{"type":574,"value":886},"boolean[]",{"type":569,"tag":596,"props":888,"children":889},{"style":797},[890],{"type":574,"value":891},"}\n",{"type":569,"tag":596,"props":893,"children":894},{"class":598,"line":635},[895],{"type":569,"tag":596,"props":896,"children":897},{"style":783},[898],{"type":574,"value":899}," */\n",{"type":569,"tag":596,"props":901,"children":902},{"class":598,"line":644},[903,909,915,920,925,930,935,940,945,950],{"type":569,"tag":596,"props":904,"children":906},{"style":905},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[907],{"type":574,"value":908},"var",{"type":569,"tag":596,"props":910,"children":912},{"style":911},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[913],{"type":574,"value":914}," kidsWithCandies",{"type":569,"tag":596,"props":916,"children":917},{"style":797},[918],{"type":574,"value":919}," =",{"type":569,"tag":596,"props":921,"children":922},{"style":905},[923],{"type":574,"value":924}," function",{"type":569,"tag":596,"props":926,"children":927},{"style":797},[928],{"type":574,"value":929}," (",{"type":569,"tag":596,"props":931,"children":932},{"style":825},[933],{"type":574,"value":934},"candies",{"type":569,"tag":596,"props":936,"children":937},{"style":797},[938],{"type":574,"value":939},",",{"type":569,"tag":596,"props":941,"children":942},{"style":825},[943],{"type":574,"value":944}," extraCandies",{"type":569,"tag":596,"props":946,"children":947},{"style":797},[948],{"type":574,"value":949},")",{"type":569,"tag":596,"props":951,"children":952},{"style":797},[953],{"type":574,"value":954}," {\n",{"type":569,"tag":596,"props":956,"children":957},{"class":598,"line":653},[958,963,968,972,977,982,987,991,996,1001,1006],{"type":569,"tag":596,"props":959,"children":960},{"style":905},[961],{"type":574,"value":962},"  const",{"type":569,"tag":596,"props":964,"children":965},{"style":825},[966],{"type":574,"value":967}," max",{"type":569,"tag":596,"props":969,"children":970},{"style":797},[971],{"type":574,"value":919},{"type":569,"tag":596,"props":973,"children":974},{"style":825},[975],{"type":574,"value":976}," Math",{"type":569,"tag":596,"props":978,"children":979},{"style":797},[980],{"type":574,"value":981},".",{"type":569,"tag":596,"props":983,"children":984},{"style":825},[985],{"type":574,"value":986},"max",{"type":569,"tag":596,"props":988,"children":989},{"style":797},[990],{"type":574,"value":981},{"type":569,"tag":596,"props":992,"children":993},{"style":911},[994],{"type":574,"value":995},"apply",{"type":569,"tag":596,"props":997,"children":998},{"style":797},[999],{"type":574,"value":1000},"([],",{"type":569,"tag":596,"props":1002,"children":1003},{"style":825},[1004],{"type":574,"value":1005}," candies",{"type":569,"tag":596,"props":1007,"children":1008},{"style":797},[1009],{"type":574,"value":1010},");\n",{"type":569,"tag":596,"props":1012,"children":1013},{"class":598,"line":662},[1014,1019,1024,1028],{"type":569,"tag":596,"props":1015,"children":1016},{"style":905},[1017],{"type":574,"value":1018},"  let",{"type":569,"tag":596,"props":1020,"children":1021},{"style":825},[1022],{"type":574,"value":1023}," res",{"type":569,"tag":596,"props":1025,"children":1026},{"style":797},[1027],{"type":574,"value":919},{"type":569,"tag":596,"props":1029,"children":1030},{"style":797},[1031],{"type":574,"value":1032}," [];\n",{"type":569,"tag":596,"props":1034,"children":1036},{"class":598,"line":1035},9,[1037,1042,1046,1051,1056,1060,1066,1071,1075,1080,1084,1088,1094,1098,1102,1107,1111],{"type":569,"tag":596,"props":1038,"children":1039},{"style":803},[1040],{"type":574,"value":1041},"  for",{"type":569,"tag":596,"props":1043,"children":1044},{"style":797},[1045],{"type":574,"value":929},{"type":569,"tag":596,"props":1047,"children":1048},{"style":905},[1049],{"type":574,"value":1050},"let",{"type":569,"tag":596,"props":1052,"children":1053},{"style":825},[1054],{"type":574,"value":1055}," i",{"type":569,"tag":596,"props":1057,"children":1058},{"style":797},[1059],{"type":574,"value":919},{"type":569,"tag":596,"props":1061,"children":1063},{"style":1062},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1064],{"type":574,"value":1065}," 0",{"type":569,"tag":596,"props":1067,"children":1068},{"style":797},[1069],{"type":574,"value":1070},";",{"type":569,"tag":596,"props":1072,"children":1073},{"style":825},[1074],{"type":574,"value":1055},{"type":569,"tag":596,"props":1076,"children":1077},{"style":797},[1078],{"type":574,"value":1079}," \u003C",{"type":569,"tag":596,"props":1081,"children":1082},{"style":825},[1083],{"type":574,"value":1005},{"type":569,"tag":596,"props":1085,"children":1086},{"style":797},[1087],{"type":574,"value":981},{"type":569,"tag":596,"props":1089,"children":1091},{"style":1090},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[1092],{"type":574,"value":1093},"length",{"type":569,"tag":596,"props":1095,"children":1096},{"style":797},[1097],{"type":574,"value":1070},{"type":569,"tag":596,"props":1099,"children":1100},{"style":825},[1101],{"type":574,"value":1055},{"type":569,"tag":596,"props":1103,"children":1104},{"style":905},[1105],{"type":574,"value":1106},"++",{"type":569,"tag":596,"props":1108,"children":1109},{"style":797},[1110],{"type":574,"value":949},{"type":569,"tag":596,"props":1112,"children":1113},{"style":797},[1114],{"type":574,"value":954},{"type":569,"tag":596,"props":1116,"children":1118},{"class":598,"line":1117},10,[1119,1124,1129,1133,1137,1142,1147,1152,1157,1161],{"type":569,"tag":596,"props":1120,"children":1121},{"style":905},[1122],{"type":574,"value":1123},"    let",{"type":569,"tag":596,"props":1125,"children":1126},{"style":825},[1127],{"type":574,"value":1128}," currentMax",{"type":569,"tag":596,"props":1130,"children":1131},{"style":797},[1132],{"type":574,"value":919},{"type":569,"tag":596,"props":1134,"children":1135},{"style":825},[1136],{"type":574,"value":1005},{"type":569,"tag":596,"props":1138,"children":1139},{"style":797},[1140],{"type":574,"value":1141},"[",{"type":569,"tag":596,"props":1143,"children":1144},{"style":825},[1145],{"type":574,"value":1146},"i",{"type":569,"tag":596,"props":1148,"children":1149},{"style":797},[1150],{"type":574,"value":1151},"]",{"type":569,"tag":596,"props":1153,"children":1154},{"style":905},[1155],{"type":574,"value":1156}," +",{"type":569,"tag":596,"props":1158,"children":1159},{"style":825},[1160],{"type":574,"value":944},{"type":569,"tag":596,"props":1162,"children":1163},{"style":797},[1164],{"type":574,"value":1165},";\n",{"type":569,"tag":596,"props":1167,"children":1169},{"class":598,"line":1168},11,[1170,1175,1179,1183,1187,1191,1195,1200,1204],{"type":569,"tag":596,"props":1171,"children":1172},{"style":825},[1173],{"type":574,"value":1174},"    res",{"type":569,"tag":596,"props":1176,"children":1177},{"style":797},[1178],{"type":574,"value":1141},{"type":569,"tag":596,"props":1180,"children":1181},{"style":825},[1182],{"type":574,"value":1146},{"type":569,"tag":596,"props":1184,"children":1185},{"style":797},[1186],{"type":574,"value":1151},{"type":569,"tag":596,"props":1188,"children":1189},{"style":797},[1190],{"type":574,"value":919},{"type":569,"tag":596,"props":1192,"children":1193},{"style":825},[1194],{"type":574,"value":1128},{"type":569,"tag":596,"props":1196,"children":1197},{"style":797},[1198],{"type":574,"value":1199}," >=",{"type":569,"tag":596,"props":1201,"children":1202},{"style":825},[1203],{"type":574,"value":967},{"type":569,"tag":596,"props":1205,"children":1206},{"style":797},[1207],{"type":574,"value":1165},{"type":569,"tag":596,"props":1209,"children":1211},{"class":598,"line":1210},12,[1212],{"type":569,"tag":596,"props":1213,"children":1214},{"style":797},[1215],{"type":574,"value":1216},"  }\n",{"type":569,"tag":596,"props":1218,"children":1220},{"class":598,"line":1219},13,[1221,1226,1230],{"type":569,"tag":596,"props":1222,"children":1223},{"style":803},[1224],{"type":574,"value":1225},"  return",{"type":569,"tag":596,"props":1227,"children":1228},{"style":825},[1229],{"type":574,"value":1023},{"type":569,"tag":596,"props":1231,"children":1232},{"style":797},[1233],{"type":574,"value":1165},{"type":569,"tag":596,"props":1235,"children":1237},{"class":598,"line":1236},14,[1238],{"type":569,"tag":596,"props":1239,"children":1240},{"style":797},[1241],{"type":574,"value":1242},"};\n",{"type":569,"tag":1244,"props":1245,"children":1246},"style",{},[1247],{"type":574,"value":1248},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":562,"searchDepth":635,"depth":635,"links":1250},[1251,1252],{"id":761,"depth":608,"text":761},{"id":766,"depth":608,"text":766},"markdown","content:1.algorithm:3.leetcode:3.major:1431.kids-with-the-greatest-number-of-candies.md","content","1.algorithm/3.leetcode/3.major/1431.kids-with-the-greatest-number-of-candies.md","md",[1259,1261],{"_path":264,"title":263,"description":1260},"给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。",{"_path":270,"title":269,"description":1262},"给你两个字符串 word1 和 word2 。请你从 word1 开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。",1717731142964]