[{"data":1,"prerenderedAt":1585},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/next-permutation":524,"/algorithm/leetcode/major/next-permutation-surround":1580},[4,269,298,492,500,509],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":491},"代码考核","/code-assessment",[302,391,484],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,331,347,375,382,385,388],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328],{"title":311,"_path":312},"ajax","/code-assessment/source/native-api/ajax",{"title":314,"_path":315},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":317,"_path":318},"new 操作符","/code-assessment/source/native-api/new",{"title":320,"_path":321},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":323,"_path":324},"定时器","/code-assessment/source/native-api/timer",{"title":326,"_path":327},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":329,"_path":330},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":332,"_path":333,"children":334},"函数 Function","/code-assessment/source/function",[335,338,341,344],{"title":336,"_path":337},"函数防抖","/code-assessment/source/function/debounce",{"title":339,"_path":340},"函数节流","/code-assessment/source/function/throttle",{"title":342,"_path":343},"函数柯理化","/code-assessment/source/function/curry",{"title":345,"_path":346},"函数睡眠","/code-assessment/source/function/sleep",{"title":348,"_path":349,"children":350},"数组 Array","/code-assessment/source/array",[351,354,357,360,363,366,369,372],{"title":352,"_path":353},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":355,"_path":356},"数组扁平化","/code-assessment/source/array/flat",{"title":358,"_path":359},"原型方法","/code-assessment/source/array/prototype-method",{"title":361,"_path":362},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":364,"_path":365},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":367,"_path":368},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":370,"_path":371},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":373,"_path":374},"二维数组","/code-assessment/source/array/2d-array",{"title":376,"_path":377,"children":378},"字符串 String","/code-assessment/source/string",[379],{"title":380,"_path":381},"repeat()","/code-assessment/source/string/repeat",{"title":383,"_path":384},"获取通用类型","/code-assessment/source/get-generic-type",{"title":386,"_path":387},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":389,"_path":390},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":392,"_path":393,"children":394},"业务场景","/code-assessment/scene",[395,420,430,433,436,439,442,445,448,451,454,457,460,463,466,469,472,475,478,481],{"title":396,"_path":397,"children":398},"Promise","/code-assessment/scene/promise",[399,402,405,408,411,414,417],{"title":400,"_path":401},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":403,"_path":404},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":406,"_path":407},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":409,"_path":410},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":412,"_path":413},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":415,"_path":416},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":418,"_path":419},"promise 每隔 1s 输出","/code-assessment/scene/promise/promise-output-every-1s",{"title":421,"_path":422,"children":423},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[424,427],{"title":425,"_path":426},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":428,"_path":429},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":431,"_path":432},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":434,"_path":435},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":437,"_path":438},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":440,"_path":441},"倒计时","/code-assessment/scene/countdown",{"title":443,"_path":444},"日期格式化","/code-assessment/scene/date-format",{"title":446,"_path":447},"实现前端路由","/code-assessment/scene/frontend-route",{"title":449,"_path":450},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":452,"_path":453},"lodash.get","/code-assessment/scene/lodash-get",{"title":455,"_path":456},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":458,"_path":459},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":461,"_path":462},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":464,"_path":465},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":467,"_path":468},"随机数","/code-assessment/scene/random-number",{"title":470,"_path":471},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":473,"_path":474},"sku 算法实现","/code-assessment/scene/sku",{"title":476,"_path":477},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":479,"_path":480},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":482,"_path":483},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":485,"_path":486,"children":487},"Ts 类型挑战","/code-assessment/type-challeges",[488],{"title":489,"_path":490},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":493,"_path":494,"children":495,"icon":499},"项目","/project",[496],{"title":497,"_path":498},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":501,"_path":502,"children":503,"icon":508},"设计模式","/design-mode",[504,505],{"title":501,"_path":502},{"title":506,"_path":507},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":510,"_path":511,"children":512,"icon":523},"后端语言","/backend-languages",[513],{"title":514,"_path":515,"children":516},"Python","/backend-languages/python",[517,520],{"title":518,"_path":519},"基础","/backend-languages/python/base",{"title":521,"_path":522},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":105,"_dir":525,"_draft":526,"_partial":526,"_locale":527,"title":104,"description":528,"url":529,"body":530,"_type":1575,"_id":1576,"_source":1577,"_file":1578,"_extension":1579},"major",false,"","整数数组的一个 排列 就是将其所有成员以序列或线性顺序排列。","https://leetcode.cn/problems/next-permutation",{"type":531,"children":532,"toc":1569},"root",[533,540,550,555,573,578,583,588,618,623,646,651,674,679,692,698,703,709,1563],{"type":534,"tag":535,"props":536,"children":537},"element","p",{},[538],{"type":539,"value":528},"text",{"type":534,"tag":541,"props":542,"children":543},"ul",{},[544],{"type":534,"tag":545,"props":546,"children":547},"li",{},[548],{"type":539,"value":549},"例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。",{"type":534,"tag":535,"props":551,"children":552},{},[553],{"type":539,"value":554},"整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。",{"type":534,"tag":541,"props":556,"children":557},{},[558,563,568],{"type":534,"tag":545,"props":559,"children":560},{},[561],{"type":539,"value":562},"例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。",{"type":534,"tag":545,"props":564,"children":565},{},[566],{"type":539,"value":567},"类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。",{"type":534,"tag":545,"props":569,"children":570},{},[571],{"type":539,"value":572},"而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。",{"type":534,"tag":535,"props":574,"children":575},{},[576],{"type":539,"value":577},"给你一个整数数组 nums ，找出 nums 的下一个排列。",{"type":534,"tag":535,"props":579,"children":580},{},[581],{"type":539,"value":582},"必须 原地 修改，只允许使用额外常数空间。",{"type":534,"tag":535,"props":584,"children":585},{},[586],{"type":539,"value":587},"示例 1：",{"type":534,"tag":589,"props":590,"children":593},"pre",{"className":591,"code":592,"language":539,"meta":527,"style":527},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：nums = [1,2,3]\n输出：[1,3,2]\n",[594],{"type":534,"tag":595,"props":596,"children":597},"code",{"__ignoreMap":527},[598,609],{"type":534,"tag":599,"props":600,"children":603},"span",{"class":601,"line":602},"line",1,[604],{"type":534,"tag":599,"props":605,"children":606},{},[607],{"type":539,"value":608},"输入：nums = [1,2,3]\n",{"type":534,"tag":599,"props":610,"children":612},{"class":601,"line":611},2,[613],{"type":534,"tag":599,"props":614,"children":615},{},[616],{"type":539,"value":617},"输出：[1,3,2]\n",{"type":534,"tag":535,"props":619,"children":620},{},[621],{"type":539,"value":622},"示例 2：",{"type":534,"tag":589,"props":624,"children":626},{"className":591,"code":625,"language":539,"meta":527,"style":527},"输入：nums = [3,2,1]\n输出：[1,2,3]\n",[627],{"type":534,"tag":595,"props":628,"children":629},{"__ignoreMap":527},[630,638],{"type":534,"tag":599,"props":631,"children":632},{"class":601,"line":602},[633],{"type":534,"tag":599,"props":634,"children":635},{},[636],{"type":539,"value":637},"输入：nums = [3,2,1]\n",{"type":534,"tag":599,"props":639,"children":640},{"class":601,"line":611},[641],{"type":534,"tag":599,"props":642,"children":643},{},[644],{"type":539,"value":645},"输出：[1,2,3]\n",{"type":534,"tag":535,"props":647,"children":648},{},[649],{"type":539,"value":650},"示例 3：",{"type":534,"tag":589,"props":652,"children":654},{"className":591,"code":653,"language":539,"meta":527,"style":527},"输入：nums = [1,1,5]\n输出：[1,5,1]\n",[655],{"type":534,"tag":595,"props":656,"children":657},{"__ignoreMap":527},[658,666],{"type":534,"tag":599,"props":659,"children":660},{"class":601,"line":602},[661],{"type":534,"tag":599,"props":662,"children":663},{},[664],{"type":539,"value":665},"输入：nums = [1,1,5]\n",{"type":534,"tag":599,"props":667,"children":668},{"class":601,"line":611},[669],{"type":534,"tag":599,"props":670,"children":671},{},[672],{"type":539,"value":673},"输出：[1,5,1]\n",{"type":534,"tag":535,"props":675,"children":676},{},[677],{"type":539,"value":678},"提示：",{"type":534,"tag":541,"props":680,"children":681},{},[682,687],{"type":534,"tag":545,"props":683,"children":684},{},[685],{"type":539,"value":686},"1 \u003C= nums.length \u003C= 100",{"type":534,"tag":545,"props":688,"children":689},{},[690],{"type":539,"value":691},"0 \u003C= nums[i] \u003C= 100",{"type":534,"tag":693,"props":694,"children":696},"h2",{"id":695},"解题思路",[697],{"type":539,"value":695},{"type":534,"tag":693,"props":699,"children":701},{"id":700},"实现",[702],{"type":539,"value":700},{"type":534,"tag":704,"props":705,"children":707},"h3",{"id":706},"双指针",[708],{"type":539,"value":706},{"type":534,"tag":589,"props":710,"children":714},{"className":711,"code":712,"language":713,"meta":527,"style":527},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number[]} nums\n * @return {void} Do not return anything, modify nums in-place instead.\n */\nvar nextPermutation = function (nums) {\n  // 因为 nums[i + 1] 存在，所以 i + 1 就是最后一个元素\n  let i = nums.length - 2;\n  while (i >= 0 && nums[i] >= nums[i + 1]) {\n    i--;\n  }\n  // i 在数组中存在，进行交换\n  if (i >= 0) {\n    let j = nums.length - 1;\n    while (j >= 0 && nums[i] >= nums[j]) {\n      j--;\n    }\n    // 交换\n    [nums[i], nums[j]] = [nums[j], nums[i]];\n  }\n  // i 不存在，说明是递减序列，则 i 是 -1\n  let l = i + 1;\n  let r = nums.length - 1;\n  while (l \u003C r) {\n    [nums[l], nums[r]] = [nums[r], nums[l]];\n    l++;\n    r--;\n  }\n};\n","js",[715],{"type":534,"tag":595,"props":716,"children":717},{"__ignoreMap":527},[718,727,769,804,813,859,868,918,1004,1022,1031,1040,1073,1115,1185,1202,1211,1220,1305,1313,1322,1355,1396,1430,1511,1529,1546,1554],{"type":534,"tag":599,"props":719,"children":720},{"class":601,"line":602},[721],{"type":534,"tag":599,"props":722,"children":724},{"style":723},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[725],{"type":539,"value":726},"/**\n",{"type":534,"tag":599,"props":728,"children":729},{"class":601,"line":611},[730,735,741,747,752,758,763],{"type":534,"tag":599,"props":731,"children":732},{"style":723},[733],{"type":539,"value":734}," * ",{"type":534,"tag":599,"props":736,"children":738},{"style":737},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[739],{"type":539,"value":740},"@",{"type":534,"tag":599,"props":742,"children":744},{"style":743},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[745],{"type":539,"value":746},"param",{"type":534,"tag":599,"props":748,"children":749},{"style":737},[750],{"type":539,"value":751}," {",{"type":534,"tag":599,"props":753,"children":755},{"style":754},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[756],{"type":539,"value":757},"number[]",{"type":534,"tag":599,"props":759,"children":760},{"style":737},[761],{"type":539,"value":762},"}",{"type":534,"tag":599,"props":764,"children":766},{"style":765},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[767],{"type":539,"value":768}," nums\n",{"type":534,"tag":599,"props":770,"children":772},{"class":601,"line":771},3,[773,777,781,786,790,795,799],{"type":534,"tag":599,"props":774,"children":775},{"style":723},[776],{"type":539,"value":734},{"type":534,"tag":599,"props":778,"children":779},{"style":737},[780],{"type":539,"value":740},{"type":534,"tag":599,"props":782,"children":783},{"style":743},[784],{"type":539,"value":785},"return",{"type":534,"tag":599,"props":787,"children":788},{"style":737},[789],{"type":539,"value":751},{"type":534,"tag":599,"props":791,"children":792},{"style":754},[793],{"type":539,"value":794},"void",{"type":534,"tag":599,"props":796,"children":797},{"style":737},[798],{"type":539,"value":762},{"type":534,"tag":599,"props":800,"children":801},{"style":723},[802],{"type":539,"value":803}," Do not return anything, modify nums in-place instead.\n",{"type":534,"tag":599,"props":805,"children":807},{"class":601,"line":806},4,[808],{"type":534,"tag":599,"props":809,"children":810},{"style":723},[811],{"type":539,"value":812}," */\n",{"type":534,"tag":599,"props":814,"children":816},{"class":601,"line":815},5,[817,823,829,834,839,844,849,854],{"type":534,"tag":599,"props":818,"children":820},{"style":819},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[821],{"type":539,"value":822},"var",{"type":534,"tag":599,"props":824,"children":826},{"style":825},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[827],{"type":539,"value":828}," nextPermutation",{"type":534,"tag":599,"props":830,"children":831},{"style":737},[832],{"type":539,"value":833}," =",{"type":534,"tag":599,"props":835,"children":836},{"style":819},[837],{"type":539,"value":838}," function",{"type":534,"tag":599,"props":840,"children":841},{"style":737},[842],{"type":539,"value":843}," (",{"type":534,"tag":599,"props":845,"children":846},{"style":765},[847],{"type":539,"value":848},"nums",{"type":534,"tag":599,"props":850,"children":851},{"style":737},[852],{"type":539,"value":853},")",{"type":534,"tag":599,"props":855,"children":856},{"style":737},[857],{"type":539,"value":858}," {\n",{"type":534,"tag":599,"props":860,"children":862},{"class":601,"line":861},6,[863],{"type":534,"tag":599,"props":864,"children":865},{"style":723},[866],{"type":539,"value":867},"  // 因为 nums[i + 1] 存在，所以 i + 1 就是最后一个元素\n",{"type":534,"tag":599,"props":869,"children":871},{"class":601,"line":870},7,[872,877,882,886,891,896,902,907,913],{"type":534,"tag":599,"props":873,"children":874},{"style":819},[875],{"type":539,"value":876},"  let",{"type":534,"tag":599,"props":878,"children":879},{"style":765},[880],{"type":539,"value":881}," i",{"type":534,"tag":599,"props":883,"children":884},{"style":737},[885],{"type":539,"value":833},{"type":534,"tag":599,"props":887,"children":888},{"style":765},[889],{"type":539,"value":890}," nums",{"type":534,"tag":599,"props":892,"children":893},{"style":737},[894],{"type":539,"value":895},".",{"type":534,"tag":599,"props":897,"children":899},{"style":898},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[900],{"type":539,"value":901},"length",{"type":534,"tag":599,"props":903,"children":904},{"style":819},[905],{"type":539,"value":906}," -",{"type":534,"tag":599,"props":908,"children":910},{"style":909},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[911],{"type":539,"value":912}," 2",{"type":534,"tag":599,"props":914,"children":915},{"style":737},[916],{"type":539,"value":917},";\n",{"type":534,"tag":599,"props":919,"children":921},{"class":601,"line":920},8,[922,927,931,936,941,946,951,955,960,964,969,973,977,981,985,990,995,1000],{"type":534,"tag":599,"props":923,"children":924},{"style":743},[925],{"type":539,"value":926},"  while",{"type":534,"tag":599,"props":928,"children":929},{"style":737},[930],{"type":539,"value":843},{"type":534,"tag":599,"props":932,"children":933},{"style":765},[934],{"type":539,"value":935},"i",{"type":534,"tag":599,"props":937,"children":938},{"style":737},[939],{"type":539,"value":940}," >=",{"type":534,"tag":599,"props":942,"children":943},{"style":909},[944],{"type":539,"value":945}," 0",{"type":534,"tag":599,"props":947,"children":948},{"style":819},[949],{"type":539,"value":950}," &&",{"type":534,"tag":599,"props":952,"children":953},{"style":765},[954],{"type":539,"value":890},{"type":534,"tag":599,"props":956,"children":957},{"style":737},[958],{"type":539,"value":959},"[",{"type":534,"tag":599,"props":961,"children":962},{"style":765},[963],{"type":539,"value":935},{"type":534,"tag":599,"props":965,"children":966},{"style":737},[967],{"type":539,"value":968},"]",{"type":534,"tag":599,"props":970,"children":971},{"style":737},[972],{"type":539,"value":940},{"type":534,"tag":599,"props":974,"children":975},{"style":765},[976],{"type":539,"value":890},{"type":534,"tag":599,"props":978,"children":979},{"style":737},[980],{"type":539,"value":959},{"type":534,"tag":599,"props":982,"children":983},{"style":765},[984],{"type":539,"value":935},{"type":534,"tag":599,"props":986,"children":987},{"style":819},[988],{"type":539,"value":989}," +",{"type":534,"tag":599,"props":991,"children":992},{"style":909},[993],{"type":539,"value":994}," 1",{"type":534,"tag":599,"props":996,"children":997},{"style":737},[998],{"type":539,"value":999},"])",{"type":534,"tag":599,"props":1001,"children":1002},{"style":737},[1003],{"type":539,"value":858},{"type":534,"tag":599,"props":1005,"children":1007},{"class":601,"line":1006},9,[1008,1013,1018],{"type":534,"tag":599,"props":1009,"children":1010},{"style":765},[1011],{"type":539,"value":1012},"    i",{"type":534,"tag":599,"props":1014,"children":1015},{"style":819},[1016],{"type":539,"value":1017},"--",{"type":534,"tag":599,"props":1019,"children":1020},{"style":737},[1021],{"type":539,"value":917},{"type":534,"tag":599,"props":1023,"children":1025},{"class":601,"line":1024},10,[1026],{"type":534,"tag":599,"props":1027,"children":1028},{"style":737},[1029],{"type":539,"value":1030},"  }\n",{"type":534,"tag":599,"props":1032,"children":1034},{"class":601,"line":1033},11,[1035],{"type":534,"tag":599,"props":1036,"children":1037},{"style":723},[1038],{"type":539,"value":1039},"  // i 在数组中存在，进行交换\n",{"type":534,"tag":599,"props":1041,"children":1043},{"class":601,"line":1042},12,[1044,1049,1053,1057,1061,1065,1069],{"type":534,"tag":599,"props":1045,"children":1046},{"style":743},[1047],{"type":539,"value":1048},"  if",{"type":534,"tag":599,"props":1050,"children":1051},{"style":737},[1052],{"type":539,"value":843},{"type":534,"tag":599,"props":1054,"children":1055},{"style":765},[1056],{"type":539,"value":935},{"type":534,"tag":599,"props":1058,"children":1059},{"style":737},[1060],{"type":539,"value":940},{"type":534,"tag":599,"props":1062,"children":1063},{"style":909},[1064],{"type":539,"value":945},{"type":534,"tag":599,"props":1066,"children":1067},{"style":737},[1068],{"type":539,"value":853},{"type":534,"tag":599,"props":1070,"children":1071},{"style":737},[1072],{"type":539,"value":858},{"type":534,"tag":599,"props":1074,"children":1076},{"class":601,"line":1075},13,[1077,1082,1087,1091,1095,1099,1103,1107,1111],{"type":534,"tag":599,"props":1078,"children":1079},{"style":819},[1080],{"type":539,"value":1081},"    let",{"type":534,"tag":599,"props":1083,"children":1084},{"style":765},[1085],{"type":539,"value":1086}," j",{"type":534,"tag":599,"props":1088,"children":1089},{"style":737},[1090],{"type":539,"value":833},{"type":534,"tag":599,"props":1092,"children":1093},{"style":765},[1094],{"type":539,"value":890},{"type":534,"tag":599,"props":1096,"children":1097},{"style":737},[1098],{"type":539,"value":895},{"type":534,"tag":599,"props":1100,"children":1101},{"style":898},[1102],{"type":539,"value":901},{"type":534,"tag":599,"props":1104,"children":1105},{"style":819},[1106],{"type":539,"value":906},{"type":534,"tag":599,"props":1108,"children":1109},{"style":909},[1110],{"type":539,"value":994},{"type":534,"tag":599,"props":1112,"children":1113},{"style":737},[1114],{"type":539,"value":917},{"type":534,"tag":599,"props":1116,"children":1118},{"class":601,"line":1117},14,[1119,1124,1128,1133,1137,1141,1145,1149,1153,1157,1161,1165,1169,1173,1177,1181],{"type":534,"tag":599,"props":1120,"children":1121},{"style":743},[1122],{"type":539,"value":1123},"    while",{"type":534,"tag":599,"props":1125,"children":1126},{"style":737},[1127],{"type":539,"value":843},{"type":534,"tag":599,"props":1129,"children":1130},{"style":765},[1131],{"type":539,"value":1132},"j",{"type":534,"tag":599,"props":1134,"children":1135},{"style":737},[1136],{"type":539,"value":940},{"type":534,"tag":599,"props":1138,"children":1139},{"style":909},[1140],{"type":539,"value":945},{"type":534,"tag":599,"props":1142,"children":1143},{"style":819},[1144],{"type":539,"value":950},{"type":534,"tag":599,"props":1146,"children":1147},{"style":765},[1148],{"type":539,"value":890},{"type":534,"tag":599,"props":1150,"children":1151},{"style":737},[1152],{"type":539,"value":959},{"type":534,"tag":599,"props":1154,"children":1155},{"style":765},[1156],{"type":539,"value":935},{"type":534,"tag":599,"props":1158,"children":1159},{"style":737},[1160],{"type":539,"value":968},{"type":534,"tag":599,"props":1162,"children":1163},{"style":737},[1164],{"type":539,"value":940},{"type":534,"tag":599,"props":1166,"children":1167},{"style":765},[1168],{"type":539,"value":890},{"type":534,"tag":599,"props":1170,"children":1171},{"style":737},[1172],{"type":539,"value":959},{"type":534,"tag":599,"props":1174,"children":1175},{"style":765},[1176],{"type":539,"value":1132},{"type":534,"tag":599,"props":1178,"children":1179},{"style":737},[1180],{"type":539,"value":999},{"type":534,"tag":599,"props":1182,"children":1183},{"style":737},[1184],{"type":539,"value":858},{"type":534,"tag":599,"props":1186,"children":1188},{"class":601,"line":1187},15,[1189,1194,1198],{"type":534,"tag":599,"props":1190,"children":1191},{"style":765},[1192],{"type":539,"value":1193},"      j",{"type":534,"tag":599,"props":1195,"children":1196},{"style":819},[1197],{"type":539,"value":1017},{"type":534,"tag":599,"props":1199,"children":1200},{"style":737},[1201],{"type":539,"value":917},{"type":534,"tag":599,"props":1203,"children":1205},{"class":601,"line":1204},16,[1206],{"type":534,"tag":599,"props":1207,"children":1208},{"style":737},[1209],{"type":539,"value":1210},"    }\n",{"type":534,"tag":599,"props":1212,"children":1214},{"class":601,"line":1213},17,[1215],{"type":534,"tag":599,"props":1216,"children":1217},{"style":723},[1218],{"type":539,"value":1219},"    // 交换\n",{"type":534,"tag":599,"props":1221,"children":1223},{"class":601,"line":1222},18,[1224,1229,1233,1237,1241,1246,1250,1254,1258,1263,1267,1272,1276,1280,1284,1288,1292,1296,1300],{"type":534,"tag":599,"props":1225,"children":1226},{"style":737},[1227],{"type":539,"value":1228},"    [",{"type":534,"tag":599,"props":1230,"children":1231},{"style":765},[1232],{"type":539,"value":848},{"type":534,"tag":599,"props":1234,"children":1235},{"style":737},[1236],{"type":539,"value":959},{"type":534,"tag":599,"props":1238,"children":1239},{"style":765},[1240],{"type":539,"value":935},{"type":534,"tag":599,"props":1242,"children":1243},{"style":737},[1244],{"type":539,"value":1245},"],",{"type":534,"tag":599,"props":1247,"children":1248},{"style":765},[1249],{"type":539,"value":890},{"type":534,"tag":599,"props":1251,"children":1252},{"style":737},[1253],{"type":539,"value":959},{"type":534,"tag":599,"props":1255,"children":1256},{"style":765},[1257],{"type":539,"value":1132},{"type":534,"tag":599,"props":1259,"children":1260},{"style":737},[1261],{"type":539,"value":1262},"]]",{"type":534,"tag":599,"props":1264,"children":1265},{"style":737},[1266],{"type":539,"value":833},{"type":534,"tag":599,"props":1268,"children":1269},{"style":737},[1270],{"type":539,"value":1271}," [",{"type":534,"tag":599,"props":1273,"children":1274},{"style":765},[1275],{"type":539,"value":848},{"type":534,"tag":599,"props":1277,"children":1278},{"style":737},[1279],{"type":539,"value":959},{"type":534,"tag":599,"props":1281,"children":1282},{"style":765},[1283],{"type":539,"value":1132},{"type":534,"tag":599,"props":1285,"children":1286},{"style":737},[1287],{"type":539,"value":1245},{"type":534,"tag":599,"props":1289,"children":1290},{"style":765},[1291],{"type":539,"value":890},{"type":534,"tag":599,"props":1293,"children":1294},{"style":737},[1295],{"type":539,"value":959},{"type":534,"tag":599,"props":1297,"children":1298},{"style":765},[1299],{"type":539,"value":935},{"type":534,"tag":599,"props":1301,"children":1302},{"style":737},[1303],{"type":539,"value":1304},"]];\n",{"type":534,"tag":599,"props":1306,"children":1308},{"class":601,"line":1307},19,[1309],{"type":534,"tag":599,"props":1310,"children":1311},{"style":737},[1312],{"type":539,"value":1030},{"type":534,"tag":599,"props":1314,"children":1316},{"class":601,"line":1315},20,[1317],{"type":534,"tag":599,"props":1318,"children":1319},{"style":723},[1320],{"type":539,"value":1321},"  // i 不存在，说明是递减序列，则 i 是 -1\n",{"type":534,"tag":599,"props":1323,"children":1325},{"class":601,"line":1324},21,[1326,1330,1335,1339,1343,1347,1351],{"type":534,"tag":599,"props":1327,"children":1328},{"style":819},[1329],{"type":539,"value":876},{"type":534,"tag":599,"props":1331,"children":1332},{"style":765},[1333],{"type":539,"value":1334}," l",{"type":534,"tag":599,"props":1336,"children":1337},{"style":737},[1338],{"type":539,"value":833},{"type":534,"tag":599,"props":1340,"children":1341},{"style":765},[1342],{"type":539,"value":881},{"type":534,"tag":599,"props":1344,"children":1345},{"style":819},[1346],{"type":539,"value":989},{"type":534,"tag":599,"props":1348,"children":1349},{"style":909},[1350],{"type":539,"value":994},{"type":534,"tag":599,"props":1352,"children":1353},{"style":737},[1354],{"type":539,"value":917},{"type":534,"tag":599,"props":1356,"children":1358},{"class":601,"line":1357},22,[1359,1363,1368,1372,1376,1380,1384,1388,1392],{"type":534,"tag":599,"props":1360,"children":1361},{"style":819},[1362],{"type":539,"value":876},{"type":534,"tag":599,"props":1364,"children":1365},{"style":765},[1366],{"type":539,"value":1367}," r",{"type":534,"tag":599,"props":1369,"children":1370},{"style":737},[1371],{"type":539,"value":833},{"type":534,"tag":599,"props":1373,"children":1374},{"style":765},[1375],{"type":539,"value":890},{"type":534,"tag":599,"props":1377,"children":1378},{"style":737},[1379],{"type":539,"value":895},{"type":534,"tag":599,"props":1381,"children":1382},{"style":898},[1383],{"type":539,"value":901},{"type":534,"tag":599,"props":1385,"children":1386},{"style":819},[1387],{"type":539,"value":906},{"type":534,"tag":599,"props":1389,"children":1390},{"style":909},[1391],{"type":539,"value":994},{"type":534,"tag":599,"props":1393,"children":1394},{"style":737},[1395],{"type":539,"value":917},{"type":534,"tag":599,"props":1397,"children":1399},{"class":601,"line":1398},23,[1400,1404,1408,1413,1418,1422,1426],{"type":534,"tag":599,"props":1401,"children":1402},{"style":743},[1403],{"type":539,"value":926},{"type":534,"tag":599,"props":1405,"children":1406},{"style":737},[1407],{"type":539,"value":843},{"type":534,"tag":599,"props":1409,"children":1410},{"style":765},[1411],{"type":539,"value":1412},"l",{"type":534,"tag":599,"props":1414,"children":1415},{"style":737},[1416],{"type":539,"value":1417}," \u003C",{"type":534,"tag":599,"props":1419,"children":1420},{"style":765},[1421],{"type":539,"value":1367},{"type":534,"tag":599,"props":1423,"children":1424},{"style":737},[1425],{"type":539,"value":853},{"type":534,"tag":599,"props":1427,"children":1428},{"style":737},[1429],{"type":539,"value":858},{"type":534,"tag":599,"props":1431,"children":1433},{"class":601,"line":1432},24,[1434,1438,1442,1446,1450,1454,1458,1462,1467,1471,1475,1479,1483,1487,1491,1495,1499,1503,1507],{"type":534,"tag":599,"props":1435,"children":1436},{"style":737},[1437],{"type":539,"value":1228},{"type":534,"tag":599,"props":1439,"children":1440},{"style":765},[1441],{"type":539,"value":848},{"type":534,"tag":599,"props":1443,"children":1444},{"style":737},[1445],{"type":539,"value":959},{"type":534,"tag":599,"props":1447,"children":1448},{"style":765},[1449],{"type":539,"value":1412},{"type":534,"tag":599,"props":1451,"children":1452},{"style":737},[1453],{"type":539,"value":1245},{"type":534,"tag":599,"props":1455,"children":1456},{"style":765},[1457],{"type":539,"value":890},{"type":534,"tag":599,"props":1459,"children":1460},{"style":737},[1461],{"type":539,"value":959},{"type":534,"tag":599,"props":1463,"children":1464},{"style":765},[1465],{"type":539,"value":1466},"r",{"type":534,"tag":599,"props":1468,"children":1469},{"style":737},[1470],{"type":539,"value":1262},{"type":534,"tag":599,"props":1472,"children":1473},{"style":737},[1474],{"type":539,"value":833},{"type":534,"tag":599,"props":1476,"children":1477},{"style":737},[1478],{"type":539,"value":1271},{"type":534,"tag":599,"props":1480,"children":1481},{"style":765},[1482],{"type":539,"value":848},{"type":534,"tag":599,"props":1484,"children":1485},{"style":737},[1486],{"type":539,"value":959},{"type":534,"tag":599,"props":1488,"children":1489},{"style":765},[1490],{"type":539,"value":1466},{"type":534,"tag":599,"props":1492,"children":1493},{"style":737},[1494],{"type":539,"value":1245},{"type":534,"tag":599,"props":1496,"children":1497},{"style":765},[1498],{"type":539,"value":890},{"type":534,"tag":599,"props":1500,"children":1501},{"style":737},[1502],{"type":539,"value":959},{"type":534,"tag":599,"props":1504,"children":1505},{"style":765},[1506],{"type":539,"value":1412},{"type":534,"tag":599,"props":1508,"children":1509},{"style":737},[1510],{"type":539,"value":1304},{"type":534,"tag":599,"props":1512,"children":1514},{"class":601,"line":1513},25,[1515,1520,1525],{"type":534,"tag":599,"props":1516,"children":1517},{"style":765},[1518],{"type":539,"value":1519},"    l",{"type":534,"tag":599,"props":1521,"children":1522},{"style":819},[1523],{"type":539,"value":1524},"++",{"type":534,"tag":599,"props":1526,"children":1527},{"style":737},[1528],{"type":539,"value":917},{"type":534,"tag":599,"props":1530,"children":1532},{"class":601,"line":1531},26,[1533,1538,1542],{"type":534,"tag":599,"props":1534,"children":1535},{"style":765},[1536],{"type":539,"value":1537},"    r",{"type":534,"tag":599,"props":1539,"children":1540},{"style":819},[1541],{"type":539,"value":1017},{"type":534,"tag":599,"props":1543,"children":1544},{"style":737},[1545],{"type":539,"value":917},{"type":534,"tag":599,"props":1547,"children":1549},{"class":601,"line":1548},27,[1550],{"type":534,"tag":599,"props":1551,"children":1552},{"style":737},[1553],{"type":539,"value":1030},{"type":534,"tag":599,"props":1555,"children":1557},{"class":601,"line":1556},28,[1558],{"type":534,"tag":599,"props":1559,"children":1560},{"style":737},[1561],{"type":539,"value":1562},"};\n",{"type":534,"tag":1564,"props":1565,"children":1566},"style",{},[1567],{"type":539,"value":1568},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":527,"searchDepth":815,"depth":815,"links":1570},[1571,1572],{"id":695,"depth":611,"text":695},{"id":700,"depth":611,"text":700,"children":1573},[1574],{"id":706,"depth":771,"text":706},"markdown","content:1.algorithm:3.leetcode:3.major:31.next-permutation.md","content","1.algorithm/3.leetcode/3.major/31.next-permutation.md","md",[1581,1583],{"_path":102,"title":101,"description":1582},"给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。",{"_path":108,"title":107,"description":1584},"给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号\n子串\n的长度。",1714096141849]