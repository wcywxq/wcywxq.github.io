[{"data":1,"prerenderedAt":1631},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/reverse-words-in-a-string":551,"/algorithm/leetcode/major/reverse-words-in-a-string-surround":1626},[4,272,301,519,527,536],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":300},"八股文","/endorsement",[276,287],{"title":277,"_path":278,"children":279},"构建工具","/endorsement/build-tools",[280],{"title":281,"_path":282,"children":283},"Webpack","/endorsement/build-tools/webpack",[284],{"title":285,"_path":286},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":288,"_path":289,"children":290},"Html","/endorsement/html",[291,294,297],{"title":292,"_path":293},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":295,"_path":296},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":298,"_path":299},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":302,"_path":303,"children":304,"icon":518},"代码考核","/code-assessment",[305,410,511],{"title":306,"_path":307,"children":308},"源码实现","/code-assessment/source",[309,343,359,387,394,401,404,407],{"title":310,"_path":311,"children":312},"原生 api","/code-assessment/source/native-api",[313,316,319,322,325,328,331,334,337,340],{"title":314,"_path":315},"polyfill","/code-assessment/source/native-api/polyfill",{"title":317,"_path":318},"ajax","/code-assessment/source/native-api/ajax",{"title":320,"_path":321},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":323,"_path":324},"new 操作符","/code-assessment/source/native-api/new",{"title":326,"_path":327},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":329,"_path":330},"定时器","/code-assessment/source/native-api/timer",{"title":332,"_path":333},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":335,"_path":336},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":338,"_path":339},"extends","/code-assessment/source/native-api/extends",{"title":341,"_path":342},"Promise","/code-assessment/source/native-api/promise",{"title":344,"_path":345,"children":346},"函数 Function","/code-assessment/source/function",[347,350,353,356],{"title":348,"_path":349},"函数防抖","/code-assessment/source/function/debounce",{"title":351,"_path":352},"函数节流","/code-assessment/source/function/throttle",{"title":354,"_path":355},"函数柯理化","/code-assessment/source/function/curry",{"title":357,"_path":358},"函数睡眠","/code-assessment/source/function/sleep",{"title":360,"_path":361,"children":362},"数组 Array","/code-assessment/source/array",[363,366,369,372,375,378,381,384],{"title":364,"_path":365},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":367,"_path":368},"数组扁平化","/code-assessment/source/array/flat",{"title":370,"_path":371},"原型方法","/code-assessment/source/array/prototype-method",{"title":373,"_path":374},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":376,"_path":377},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":379,"_path":380},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":382,"_path":383},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":385,"_path":386},"二维数组","/code-assessment/source/array/2d-array",{"title":388,"_path":389,"children":390},"字符串 String","/code-assessment/source/string",[391],{"title":392,"_path":393},"repeat()","/code-assessment/source/string/repeat",{"title":395,"_path":396,"children":397},"集合 Set","/code-assessment/source/set",[398],{"title":399,"_path":400},"遍历集合","/code-assessment/source/set/traverse",{"title":402,"_path":403},"获取通用类型","/code-assessment/source/get-generic-type",{"title":405,"_path":406},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":408,"_path":409},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":411,"_path":412,"children":413},"业务场景","/code-assessment/scene",[414,444,454,457,460,463,466,469,472,475,478,481,484,487,490,493,496,499,502,505,508],{"title":341,"_path":415,"children":416},"/code-assessment/scene/promise",[417,420,423,426,429,432,435,438,441],{"title":418,"_path":419},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":421,"_path":422},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":424,"_path":425},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":427,"_path":428},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":430,"_path":431},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":433,"_path":434},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":436,"_path":437},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":439,"_path":440},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":442,"_path":443},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":445,"_path":446,"children":447},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[448,451],{"title":449,"_path":450},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":452,"_path":453},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":455,"_path":456},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":458,"_path":459},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":461,"_path":462},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":464,"_path":465},"倒计时","/code-assessment/scene/countdown",{"title":467,"_path":468},"日期格式化","/code-assessment/scene/date-format",{"title":470,"_path":471},"实现前端路由","/code-assessment/scene/frontend-route",{"title":473,"_path":474},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":476,"_path":477},"lodash.get","/code-assessment/scene/lodash-get",{"title":479,"_path":480},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":482,"_path":483},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":485,"_path":486},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":488,"_path":489},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":491,"_path":492},"随机数","/code-assessment/scene/random-number",{"title":494,"_path":495},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":497,"_path":498},"sku 算法实现","/code-assessment/scene/sku",{"title":500,"_path":501},"整数分割","/code-assessment/scene/split-number",{"title":503,"_path":504},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":506,"_path":507},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":509,"_path":510},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":512,"_path":513,"children":514},"Ts 类型挑战","/code-assessment/type-challeges",[515],{"title":516,"_path":517},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":520,"_path":521,"children":522,"icon":526},"项目","/project",[523],{"title":524,"_path":525},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":528,"_path":529,"children":530,"icon":535},"设计模式","/design-mode",[531,532],{"title":528,"_path":529},{"title":533,"_path":534},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":537,"_path":538,"children":539,"icon":550},"后端语言","/backend-languages",[540],{"title":541,"_path":542,"children":543},"Python","/backend-languages/python",[544,547],{"title":545,"_path":546},"基础","/backend-languages/python/base",{"title":548,"_path":549},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":180,"_dir":552,"_draft":553,"_partial":553,"_locale":554,"title":179,"description":555,"url":556,"body":557,"_type":1621,"_id":1622,"_source":1623,"_file":1624,"_extension":1625},"major",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":558,"children":559,"toc":1614},"root",[560,567,572,577,582,587,617,622,654,659,690,695,715,720,726,731,737,985,990,1608],{"type":561,"tag":562,"props":563,"children":564},"element","p",{},[565],{"type":566,"value":555},"text",{"type":561,"tag":562,"props":568,"children":569},{},[570],{"type":566,"value":571},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":561,"tag":562,"props":573,"children":574},{},[575],{"type":566,"value":576},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":561,"tag":562,"props":578,"children":579},{},[580],{"type":566,"value":581},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":561,"tag":562,"props":583,"children":584},{},[585],{"type":566,"value":586},"示例 1：",{"type":561,"tag":588,"props":589,"children":592},"pre",{"className":590,"code":591,"language":566,"meta":554,"style":554},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[593],{"type":561,"tag":594,"props":595,"children":596},"code",{"__ignoreMap":554},[597,608],{"type":561,"tag":598,"props":599,"children":602},"span",{"class":600,"line":601},"line",1,[603],{"type":561,"tag":598,"props":604,"children":605},{},[606],{"type":566,"value":607},"输入：s = \"the sky is blue\"\n",{"type":561,"tag":598,"props":609,"children":611},{"class":600,"line":610},2,[612],{"type":561,"tag":598,"props":613,"children":614},{},[615],{"type":566,"value":616},"输出：\"blue is sky the\"\n",{"type":561,"tag":562,"props":618,"children":619},{},[620],{"type":566,"value":621},"示例 2：",{"type":561,"tag":588,"props":623,"children":625},{"className":590,"code":624,"language":566,"meta":554,"style":554},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[626],{"type":561,"tag":594,"props":627,"children":628},{"__ignoreMap":554},[629,637,645],{"type":561,"tag":598,"props":630,"children":631},{"class":600,"line":601},[632],{"type":561,"tag":598,"props":633,"children":634},{},[635],{"type":566,"value":636},"输入：s = \" hello world \"\n",{"type":561,"tag":598,"props":638,"children":639},{"class":600,"line":610},[640],{"type":561,"tag":598,"props":641,"children":642},{},[643],{"type":566,"value":644},"输出：\"world hello\"\n",{"type":561,"tag":598,"props":646,"children":648},{"class":600,"line":647},3,[649],{"type":561,"tag":598,"props":650,"children":651},{},[652],{"type":566,"value":653},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":561,"tag":562,"props":655,"children":656},{},[657],{"type":566,"value":658},"示例 3：",{"type":561,"tag":588,"props":660,"children":662},{"className":590,"code":661,"language":566,"meta":554,"style":554},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[663],{"type":561,"tag":594,"props":664,"children":665},{"__ignoreMap":554},[666,674,682],{"type":561,"tag":598,"props":667,"children":668},{"class":600,"line":601},[669],{"type":561,"tag":598,"props":670,"children":671},{},[672],{"type":566,"value":673},"输入：s = \"a good example\"\n",{"type":561,"tag":598,"props":675,"children":676},{"class":600,"line":610},[677],{"type":561,"tag":598,"props":678,"children":679},{},[680],{"type":566,"value":681},"输出：\"example good a\"\n",{"type":561,"tag":598,"props":683,"children":684},{"class":600,"line":647},[685],{"type":561,"tag":598,"props":686,"children":687},{},[688],{"type":566,"value":689},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":561,"tag":562,"props":691,"children":692},{},[693],{"type":566,"value":694},"提示：",{"type":561,"tag":696,"props":697,"children":698},"ul",{},[699,705,710],{"type":561,"tag":700,"props":701,"children":702},"li",{},[703],{"type":566,"value":704},"1 \u003C= s.length \u003C= 10^4",{"type":561,"tag":700,"props":706,"children":707},{},[708],{"type":566,"value":709},"s 包含英文大小写字母、数字和空格 ' '",{"type":561,"tag":700,"props":711,"children":712},{},[713],{"type":566,"value":714},"s 中 至少存在一个 单词",{"type":561,"tag":562,"props":716,"children":717},{},[718],{"type":566,"value":719},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":561,"tag":721,"props":722,"children":724},"h2",{"id":723},"解题思路",[725],{"type":566,"value":723},{"type":561,"tag":721,"props":727,"children":729},{"id":728},"实现",[730],{"type":566,"value":728},{"type":561,"tag":732,"props":733,"children":735},"h3",{"id":734},"语言特性",[736],{"type":566,"value":734},{"type":561,"tag":588,"props":738,"children":742},{"className":739,"code":740,"language":741,"meta":554,"style":554},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[743],{"type":561,"tag":594,"props":744,"children":745},{"__ignoreMap":554},[746,755,797,826,835,881,976],{"type":561,"tag":598,"props":747,"children":748},{"class":600,"line":601},[749],{"type":561,"tag":598,"props":750,"children":752},{"style":751},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[753],{"type":566,"value":754},"/**\n",{"type":561,"tag":598,"props":756,"children":757},{"class":600,"line":610},[758,763,769,775,780,786,791],{"type":561,"tag":598,"props":759,"children":760},{"style":751},[761],{"type":566,"value":762}," * ",{"type":561,"tag":598,"props":764,"children":766},{"style":765},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[767],{"type":566,"value":768},"@",{"type":561,"tag":598,"props":770,"children":772},{"style":771},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[773],{"type":566,"value":774},"param",{"type":561,"tag":598,"props":776,"children":777},{"style":765},[778],{"type":566,"value":779}," {",{"type":561,"tag":598,"props":781,"children":783},{"style":782},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[784],{"type":566,"value":785},"string",{"type":561,"tag":598,"props":787,"children":788},{"style":765},[789],{"type":566,"value":790},"}",{"type":561,"tag":598,"props":792,"children":794},{"style":793},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[795],{"type":566,"value":796}," s\n",{"type":561,"tag":598,"props":798,"children":799},{"class":600,"line":647},[800,804,808,813,817,821],{"type":561,"tag":598,"props":801,"children":802},{"style":751},[803],{"type":566,"value":762},{"type":561,"tag":598,"props":805,"children":806},{"style":765},[807],{"type":566,"value":768},{"type":561,"tag":598,"props":809,"children":810},{"style":771},[811],{"type":566,"value":812},"return",{"type":561,"tag":598,"props":814,"children":815},{"style":765},[816],{"type":566,"value":779},{"type":561,"tag":598,"props":818,"children":819},{"style":782},[820],{"type":566,"value":785},{"type":561,"tag":598,"props":822,"children":823},{"style":765},[824],{"type":566,"value":825},"}\n",{"type":561,"tag":598,"props":827,"children":829},{"class":600,"line":828},4,[830],{"type":561,"tag":598,"props":831,"children":832},{"style":751},[833],{"type":566,"value":834}," */\n",{"type":561,"tag":598,"props":836,"children":838},{"class":600,"line":837},5,[839,845,851,856,861,866,871,876],{"type":561,"tag":598,"props":840,"children":842},{"style":841},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[843],{"type":566,"value":844},"var",{"type":561,"tag":598,"props":846,"children":848},{"style":847},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[849],{"type":566,"value":850}," reverseWords",{"type":561,"tag":598,"props":852,"children":853},{"style":765},[854],{"type":566,"value":855}," =",{"type":561,"tag":598,"props":857,"children":858},{"style":841},[859],{"type":566,"value":860}," function",{"type":561,"tag":598,"props":862,"children":863},{"style":765},[864],{"type":566,"value":865}," (",{"type":561,"tag":598,"props":867,"children":868},{"style":793},[869],{"type":566,"value":870},"s",{"type":561,"tag":598,"props":872,"children":873},{"style":765},[874],{"type":566,"value":875},")",{"type":561,"tag":598,"props":877,"children":878},{"style":765},[879],{"type":566,"value":880}," {\n",{"type":561,"tag":598,"props":882,"children":884},{"class":600,"line":883},6,[885,890,895,900,905,910,916,921,926,931,935,940,944,949,954,959,963,967,971],{"type":561,"tag":598,"props":886,"children":887},{"style":771},[888],{"type":566,"value":889},"  return",{"type":561,"tag":598,"props":891,"children":892},{"style":793},[893],{"type":566,"value":894}," s",{"type":561,"tag":598,"props":896,"children":897},{"style":765},[898],{"type":566,"value":899},".",{"type":561,"tag":598,"props":901,"children":902},{"style":847},[903],{"type":566,"value":904},"split",{"type":561,"tag":598,"props":906,"children":907},{"style":765},[908],{"type":566,"value":909},"(",{"type":561,"tag":598,"props":911,"children":913},{"style":912},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[914],{"type":566,"value":915},"\"",{"type":561,"tag":598,"props":917,"children":918},{"style":912},[919],{"type":566,"value":920}," \"",{"type":561,"tag":598,"props":922,"children":923},{"style":765},[924],{"type":566,"value":925},").",{"type":561,"tag":598,"props":927,"children":928},{"style":847},[929],{"type":566,"value":930},"filter",{"type":561,"tag":598,"props":932,"children":933},{"style":765},[934],{"type":566,"value":909},{"type":561,"tag":598,"props":936,"children":937},{"style":793},[938],{"type":566,"value":939},"Boolean",{"type":561,"tag":598,"props":941,"children":942},{"style":765},[943],{"type":566,"value":925},{"type":561,"tag":598,"props":945,"children":946},{"style":847},[947],{"type":566,"value":948},"reverse",{"type":561,"tag":598,"props":950,"children":951},{"style":765},[952],{"type":566,"value":953},"().",{"type":561,"tag":598,"props":955,"children":956},{"style":847},[957],{"type":566,"value":958},"join",{"type":561,"tag":598,"props":960,"children":961},{"style":765},[962],{"type":566,"value":909},{"type":561,"tag":598,"props":964,"children":965},{"style":912},[966],{"type":566,"value":915},{"type":561,"tag":598,"props":968,"children":969},{"style":912},[970],{"type":566,"value":920},{"type":561,"tag":598,"props":972,"children":973},{"style":765},[974],{"type":566,"value":975},");\n",{"type":561,"tag":598,"props":977,"children":979},{"class":600,"line":978},7,[980],{"type":561,"tag":598,"props":981,"children":982},{"style":765},[983],{"type":566,"value":984},"};\n",{"type":561,"tag":732,"props":986,"children":988},{"id":987},"双指针",[989],{"type":566,"value":987},{"type":561,"tag":588,"props":991,"children":993},{"className":739,"code":992,"language":741,"meta":554,"style":554},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[994],{"type":561,"tag":594,"props":995,"children":996},{"__ignoreMap":554},[997,1004,1035,1062,1069,1104,1112,1120,1129,1138,1147,1170,1217,1242,1278,1362,1441,1519,1545,1554,1600],{"type":561,"tag":598,"props":998,"children":999},{"class":600,"line":601},[1000],{"type":561,"tag":598,"props":1001,"children":1002},{"style":751},[1003],{"type":566,"value":754},{"type":561,"tag":598,"props":1005,"children":1006},{"class":600,"line":610},[1007,1011,1015,1019,1023,1027,1031],{"type":561,"tag":598,"props":1008,"children":1009},{"style":751},[1010],{"type":566,"value":762},{"type":561,"tag":598,"props":1012,"children":1013},{"style":765},[1014],{"type":566,"value":768},{"type":561,"tag":598,"props":1016,"children":1017},{"style":771},[1018],{"type":566,"value":774},{"type":561,"tag":598,"props":1020,"children":1021},{"style":765},[1022],{"type":566,"value":779},{"type":561,"tag":598,"props":1024,"children":1025},{"style":782},[1026],{"type":566,"value":785},{"type":561,"tag":598,"props":1028,"children":1029},{"style":765},[1030],{"type":566,"value":790},{"type":561,"tag":598,"props":1032,"children":1033},{"style":793},[1034],{"type":566,"value":796},{"type":561,"tag":598,"props":1036,"children":1037},{"class":600,"line":647},[1038,1042,1046,1050,1054,1058],{"type":561,"tag":598,"props":1039,"children":1040},{"style":751},[1041],{"type":566,"value":762},{"type":561,"tag":598,"props":1043,"children":1044},{"style":765},[1045],{"type":566,"value":768},{"type":561,"tag":598,"props":1047,"children":1048},{"style":771},[1049],{"type":566,"value":812},{"type":561,"tag":598,"props":1051,"children":1052},{"style":765},[1053],{"type":566,"value":779},{"type":561,"tag":598,"props":1055,"children":1056},{"style":782},[1057],{"type":566,"value":785},{"type":561,"tag":598,"props":1059,"children":1060},{"style":765},[1061],{"type":566,"value":825},{"type":561,"tag":598,"props":1063,"children":1064},{"class":600,"line":828},[1065],{"type":561,"tag":598,"props":1066,"children":1067},{"style":751},[1068],{"type":566,"value":834},{"type":561,"tag":598,"props":1070,"children":1071},{"class":600,"line":837},[1072,1076,1080,1084,1088,1092,1096,1100],{"type":561,"tag":598,"props":1073,"children":1074},{"style":841},[1075],{"type":566,"value":844},{"type":561,"tag":598,"props":1077,"children":1078},{"style":847},[1079],{"type":566,"value":850},{"type":561,"tag":598,"props":1081,"children":1082},{"style":765},[1083],{"type":566,"value":855},{"type":561,"tag":598,"props":1085,"children":1086},{"style":841},[1087],{"type":566,"value":860},{"type":561,"tag":598,"props":1089,"children":1090},{"style":765},[1091],{"type":566,"value":865},{"type":561,"tag":598,"props":1093,"children":1094},{"style":793},[1095],{"type":566,"value":870},{"type":561,"tag":598,"props":1097,"children":1098},{"style":765},[1099],{"type":566,"value":875},{"type":561,"tag":598,"props":1101,"children":1102},{"style":765},[1103],{"type":566,"value":880},{"type":561,"tag":598,"props":1105,"children":1106},{"class":600,"line":883},[1107],{"type":561,"tag":598,"props":1108,"children":1109},{"style":751},[1110],{"type":566,"value":1111},"  // 倒序遍历字符串\n",{"type":561,"tag":598,"props":1113,"children":1114},{"class":600,"line":978},[1115],{"type":561,"tag":598,"props":1116,"children":1117},{"style":751},[1118],{"type":566,"value":1119},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":561,"tag":598,"props":1121,"children":1123},{"class":600,"line":1122},8,[1124],{"type":561,"tag":598,"props":1125,"children":1126},{"style":751},[1127],{"type":566,"value":1128},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":561,"tag":598,"props":1130,"children":1132},{"class":600,"line":1131},9,[1133],{"type":561,"tag":598,"props":1134,"children":1135},{"style":751},[1136],{"type":566,"value":1137},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":561,"tag":598,"props":1139,"children":1141},{"class":600,"line":1140},10,[1142],{"type":561,"tag":598,"props":1143,"children":1144},{"style":751},[1145],{"type":566,"value":1146},"  // 4. 执行 j = i\n",{"type":561,"tag":598,"props":1148,"children":1150},{"class":600,"line":1149},11,[1151,1156,1161,1165],{"type":561,"tag":598,"props":1152,"children":1153},{"style":841},[1154],{"type":566,"value":1155},"  let",{"type":561,"tag":598,"props":1157,"children":1158},{"style":793},[1159],{"type":566,"value":1160}," res",{"type":561,"tag":598,"props":1162,"children":1163},{"style":765},[1164],{"type":566,"value":855},{"type":561,"tag":598,"props":1166,"children":1167},{"style":765},[1168],{"type":566,"value":1169}," [];\n",{"type":561,"tag":598,"props":1171,"children":1173},{"class":600,"line":1172},12,[1174,1178,1183,1187,1191,1195,1201,1206,1212],{"type":561,"tag":598,"props":1175,"children":1176},{"style":841},[1177],{"type":566,"value":1155},{"type":561,"tag":598,"props":1179,"children":1180},{"style":793},[1181],{"type":566,"value":1182}," i",{"type":561,"tag":598,"props":1184,"children":1185},{"style":765},[1186],{"type":566,"value":855},{"type":561,"tag":598,"props":1188,"children":1189},{"style":793},[1190],{"type":566,"value":894},{"type":561,"tag":598,"props":1192,"children":1193},{"style":765},[1194],{"type":566,"value":899},{"type":561,"tag":598,"props":1196,"children":1198},{"style":1197},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[1199],{"type":566,"value":1200},"length",{"type":561,"tag":598,"props":1202,"children":1203},{"style":841},[1204],{"type":566,"value":1205}," -",{"type":561,"tag":598,"props":1207,"children":1209},{"style":1208},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1210],{"type":566,"value":1211}," 1",{"type":561,"tag":598,"props":1213,"children":1214},{"style":765},[1215],{"type":566,"value":1216},";\n",{"type":561,"tag":598,"props":1218,"children":1220},{"class":600,"line":1219},13,[1221,1225,1230,1234,1238],{"type":561,"tag":598,"props":1222,"children":1223},{"style":841},[1224],{"type":566,"value":1155},{"type":561,"tag":598,"props":1226,"children":1227},{"style":793},[1228],{"type":566,"value":1229}," j",{"type":561,"tag":598,"props":1231,"children":1232},{"style":765},[1233],{"type":566,"value":855},{"type":561,"tag":598,"props":1235,"children":1236},{"style":793},[1237],{"type":566,"value":1182},{"type":561,"tag":598,"props":1239,"children":1240},{"style":765},[1241],{"type":566,"value":1216},{"type":561,"tag":598,"props":1243,"children":1245},{"class":600,"line":1244},14,[1246,1251,1255,1260,1265,1270,1274],{"type":561,"tag":598,"props":1247,"children":1248},{"style":771},[1249],{"type":566,"value":1250},"  while",{"type":561,"tag":598,"props":1252,"children":1253},{"style":765},[1254],{"type":566,"value":865},{"type":561,"tag":598,"props":1256,"children":1257},{"style":793},[1258],{"type":566,"value":1259},"i",{"type":561,"tag":598,"props":1261,"children":1262},{"style":765},[1263],{"type":566,"value":1264}," >=",{"type":561,"tag":598,"props":1266,"children":1267},{"style":1208},[1268],{"type":566,"value":1269}," 0",{"type":561,"tag":598,"props":1271,"children":1272},{"style":765},[1273],{"type":566,"value":875},{"type":561,"tag":598,"props":1275,"children":1276},{"style":765},[1277],{"type":566,"value":880},{"type":561,"tag":598,"props":1279,"children":1281},{"class":600,"line":1280},15,[1282,1287,1291,1295,1299,1303,1308,1312,1317,1321,1326,1331,1335,1339,1343,1347,1352,1357],{"type":561,"tag":598,"props":1283,"children":1284},{"style":771},[1285],{"type":566,"value":1286},"    while",{"type":561,"tag":598,"props":1288,"children":1289},{"style":765},[1290],{"type":566,"value":865},{"type":561,"tag":598,"props":1292,"children":1293},{"style":793},[1294],{"type":566,"value":1259},{"type":561,"tag":598,"props":1296,"children":1297},{"style":765},[1298],{"type":566,"value":1264},{"type":561,"tag":598,"props":1300,"children":1301},{"style":1208},[1302],{"type":566,"value":1269},{"type":561,"tag":598,"props":1304,"children":1305},{"style":841},[1306],{"type":566,"value":1307}," &&",{"type":561,"tag":598,"props":1309,"children":1310},{"style":793},[1311],{"type":566,"value":894},{"type":561,"tag":598,"props":1313,"children":1314},{"style":765},[1315],{"type":566,"value":1316},"[",{"type":561,"tag":598,"props":1318,"children":1319},{"style":793},[1320],{"type":566,"value":1259},{"type":561,"tag":598,"props":1322,"children":1323},{"style":765},[1324],{"type":566,"value":1325},"]",{"type":561,"tag":598,"props":1327,"children":1328},{"style":841},[1329],{"type":566,"value":1330}," !==",{"type":561,"tag":598,"props":1332,"children":1333},{"style":912},[1334],{"type":566,"value":920},{"type":561,"tag":598,"props":1336,"children":1337},{"style":912},[1338],{"type":566,"value":920},{"type":561,"tag":598,"props":1340,"children":1341},{"style":765},[1342],{"type":566,"value":875},{"type":561,"tag":598,"props":1344,"children":1345},{"style":793},[1346],{"type":566,"value":1182},{"type":561,"tag":598,"props":1348,"children":1349},{"style":841},[1350],{"type":566,"value":1351},"--",{"type":561,"tag":598,"props":1353,"children":1354},{"style":765},[1355],{"type":566,"value":1356},";",{"type":561,"tag":598,"props":1358,"children":1359},{"style":751},[1360],{"type":566,"value":1361}," // 搜索首个空格\n",{"type":561,"tag":598,"props":1363,"children":1365},{"class":600,"line":1364},16,[1366,1371,1375,1380,1384,1388,1392,1397,1401,1405,1410,1414,1419,1423,1427,1431,1436],{"type":561,"tag":598,"props":1367,"children":1368},{"style":793},[1369],{"type":566,"value":1370},"    res",{"type":561,"tag":598,"props":1372,"children":1373},{"style":765},[1374],{"type":566,"value":899},{"type":561,"tag":598,"props":1376,"children":1377},{"style":847},[1378],{"type":566,"value":1379},"push",{"type":561,"tag":598,"props":1381,"children":1382},{"style":765},[1383],{"type":566,"value":909},{"type":561,"tag":598,"props":1385,"children":1386},{"style":793},[1387],{"type":566,"value":870},{"type":561,"tag":598,"props":1389,"children":1390},{"style":765},[1391],{"type":566,"value":899},{"type":561,"tag":598,"props":1393,"children":1394},{"style":847},[1395],{"type":566,"value":1396},"substring",{"type":561,"tag":598,"props":1398,"children":1399},{"style":765},[1400],{"type":566,"value":909},{"type":561,"tag":598,"props":1402,"children":1403},{"style":793},[1404],{"type":566,"value":1259},{"type":561,"tag":598,"props":1406,"children":1407},{"style":841},[1408],{"type":566,"value":1409}," +",{"type":561,"tag":598,"props":1411,"children":1412},{"style":1208},[1413],{"type":566,"value":1211},{"type":561,"tag":598,"props":1415,"children":1416},{"style":765},[1417],{"type":566,"value":1418},",",{"type":561,"tag":598,"props":1420,"children":1421},{"style":793},[1422],{"type":566,"value":1229},{"type":561,"tag":598,"props":1424,"children":1425},{"style":841},[1426],{"type":566,"value":1409},{"type":561,"tag":598,"props":1428,"children":1429},{"style":1208},[1430],{"type":566,"value":1211},{"type":561,"tag":598,"props":1432,"children":1433},{"style":765},[1434],{"type":566,"value":1435},"));",{"type":561,"tag":598,"props":1437,"children":1438},{"style":751},[1439],{"type":566,"value":1440}," // 添加单词\n",{"type":561,"tag":598,"props":1442,"children":1444},{"class":600,"line":1443},17,[1445,1449,1453,1457,1461,1465,1469,1473,1477,1481,1485,1490,1494,1498,1502,1506,1510,1514],{"type":561,"tag":598,"props":1446,"children":1447},{"style":771},[1448],{"type":566,"value":1286},{"type":561,"tag":598,"props":1450,"children":1451},{"style":765},[1452],{"type":566,"value":865},{"type":561,"tag":598,"props":1454,"children":1455},{"style":793},[1456],{"type":566,"value":1259},{"type":561,"tag":598,"props":1458,"children":1459},{"style":765},[1460],{"type":566,"value":1264},{"type":561,"tag":598,"props":1462,"children":1463},{"style":1208},[1464],{"type":566,"value":1269},{"type":561,"tag":598,"props":1466,"children":1467},{"style":841},[1468],{"type":566,"value":1307},{"type":561,"tag":598,"props":1470,"children":1471},{"style":793},[1472],{"type":566,"value":894},{"type":561,"tag":598,"props":1474,"children":1475},{"style":765},[1476],{"type":566,"value":1316},{"type":561,"tag":598,"props":1478,"children":1479},{"style":793},[1480],{"type":566,"value":1259},{"type":561,"tag":598,"props":1482,"children":1483},{"style":765},[1484],{"type":566,"value":1325},{"type":561,"tag":598,"props":1486,"children":1487},{"style":841},[1488],{"type":566,"value":1489}," ===",{"type":561,"tag":598,"props":1491,"children":1492},{"style":912},[1493],{"type":566,"value":920},{"type":561,"tag":598,"props":1495,"children":1496},{"style":912},[1497],{"type":566,"value":920},{"type":561,"tag":598,"props":1499,"children":1500},{"style":765},[1501],{"type":566,"value":875},{"type":561,"tag":598,"props":1503,"children":1504},{"style":793},[1505],{"type":566,"value":1182},{"type":561,"tag":598,"props":1507,"children":1508},{"style":841},[1509],{"type":566,"value":1351},{"type":561,"tag":598,"props":1511,"children":1512},{"style":765},[1513],{"type":566,"value":1356},{"type":561,"tag":598,"props":1515,"children":1516},{"style":751},[1517],{"type":566,"value":1518}," // 跳过单词间空格\n",{"type":561,"tag":598,"props":1520,"children":1522},{"class":600,"line":1521},18,[1523,1528,1532,1536,1540],{"type":561,"tag":598,"props":1524,"children":1525},{"style":793},[1526],{"type":566,"value":1527},"    j",{"type":561,"tag":598,"props":1529,"children":1530},{"style":765},[1531],{"type":566,"value":855},{"type":561,"tag":598,"props":1533,"children":1534},{"style":793},[1535],{"type":566,"value":1182},{"type":561,"tag":598,"props":1537,"children":1538},{"style":765},[1539],{"type":566,"value":1356},{"type":561,"tag":598,"props":1541,"children":1542},{"style":751},[1543],{"type":566,"value":1544}," // 指针移动，指向下个单词的尾字符\n",{"type":561,"tag":598,"props":1546,"children":1548},{"class":600,"line":1547},19,[1549],{"type":561,"tag":598,"props":1550,"children":1551},{"style":765},[1552],{"type":566,"value":1553},"  }\n",{"type":561,"tag":598,"props":1555,"children":1557},{"class":600,"line":1556},20,[1558,1562,1566,1570,1574,1578,1582,1586,1590,1595],{"type":561,"tag":598,"props":1559,"children":1560},{"style":771},[1561],{"type":566,"value":889},{"type":561,"tag":598,"props":1563,"children":1564},{"style":793},[1565],{"type":566,"value":1160},{"type":561,"tag":598,"props":1567,"children":1568},{"style":765},[1569],{"type":566,"value":899},{"type":561,"tag":598,"props":1571,"children":1572},{"style":847},[1573],{"type":566,"value":958},{"type":561,"tag":598,"props":1575,"children":1576},{"style":765},[1577],{"type":566,"value":909},{"type":561,"tag":598,"props":1579,"children":1580},{"style":912},[1581],{"type":566,"value":915},{"type":561,"tag":598,"props":1583,"children":1584},{"style":912},[1585],{"type":566,"value":920},{"type":561,"tag":598,"props":1587,"children":1588},{"style":765},[1589],{"type":566,"value":925},{"type":561,"tag":598,"props":1591,"children":1592},{"style":847},[1593],{"type":566,"value":1594},"trim",{"type":561,"tag":598,"props":1596,"children":1597},{"style":765},[1598],{"type":566,"value":1599},"();\n",{"type":561,"tag":598,"props":1601,"children":1603},{"class":600,"line":1602},21,[1604],{"type":561,"tag":598,"props":1605,"children":1606},{"style":765},[1607],{"type":566,"value":984},{"type":561,"tag":1609,"props":1610,"children":1611},"style",{},[1612],{"type":566,"value":1613},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":554,"searchDepth":837,"depth":837,"links":1615},[1616,1617],{"id":723,"depth":610,"text":723},{"id":728,"depth":610,"text":728,"children":1618},[1619,1620],{"id":734,"depth":647,"text":734},{"id":987,"depth":647,"text":987},"markdown","content:1.algorithm:3.leetcode:3.major:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/3.major/151.reverse-words-in-a-string.md","md",[1627,1629],{"_path":177,"title":176,"description":1628},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":183,"title":182,"description":1630},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1715092076652]