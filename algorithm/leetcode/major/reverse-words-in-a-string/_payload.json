[{"data":1,"prerenderedAt":1506},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/reverse-words-in-a-string":466,"/algorithm/leetcode/major/reverse-words-in-a-string-surround":1501},[4,269,298,443,451],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"前端八股文","/frontend-endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/frontend-endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/frontend-endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/frontend-endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/frontend-endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":442},"前端代码考核","/frontend-code-assessment",[302,351,435],{"title":303,"_path":304,"children":305},"源码实现","/frontend-code-assessment/source",[306,331,344],{"title":307,"_path":308,"children":309},"原生 api","/frontend-code-assessment/source/native-api",[310,313,316,319,322,325,328],{"title":311,"_path":312},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":314,"_path":315},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":317,"_path":318},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":320,"_path":321},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":323,"_path":324},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":326,"_path":327},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":329,"_path":330},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":332,"_path":333,"children":334},"数组 Array","/frontend-code-assessment/source/array",[335,338,341],{"title":336,"_path":337},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":339,"_path":340},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":342,"_path":343},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":345,"_path":346,"children":347},"字符串 String","/frontend-code-assessment/source/string",[348],{"title":349,"_path":350},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":352,"_path":353,"children":354},"业务场景","/frontend-code-assessment/scene",[355,377,384,387,390,393,396,399,402,405,408,411,414,417,420,423,426,429,432],{"title":356,"_path":357,"children":358},"Promise","/frontend-code-assessment/scene/promise",[359,362,365,368,371,374],{"title":360,"_path":361},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":363,"_path":364},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":366,"_path":367},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":369,"_path":370},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":372,"_path":373},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":375,"_path":376},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":378,"_path":379,"children":380},"框架和设计模式","/frontend-code-assessment/scene/framework-and-design-mode",[381],{"title":382,"_path":383},"event bus","/frontend-code-assessment/scene/framework-and-design-mode/event-bus",{"title":385,"_path":386},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":388,"_path":389},"倒计时","/frontend-code-assessment/scene/countdown",{"title":391,"_path":392},"日期格式化","/frontend-code-assessment/scene/date-format",{"title":394,"_path":395},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":397,"_path":398},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":400,"_path":401},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":403,"_path":404},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":406,"_path":407},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":409,"_path":410},"对象是否循环引用","/frontend-code-assessment/scene/object-is-or-not-circular-reference",{"title":412,"_path":413},"解析 url 参数","/frontend-code-assessment/scene/parse-url-query",{"title":415,"_path":416},"原型链输出","/frontend-code-assessment/scene/prototype-chain-output",{"title":418,"_path":419},"随机数","/frontend-code-assessment/scene/random-number",{"title":421,"_path":422},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":424,"_path":425},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":427,"_path":428},"千分位分隔数字字符串","/frontend-code-assessment/scene/thousandth-separated-number-string",{"title":430,"_path":431},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":433,"_path":434},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":436,"_path":437,"children":438},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[439],{"title":440,"_path":441},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":444,"_path":445,"children":446,"icon":450},"项目","/pro",[447],{"title":448,"_path":449},"Vue 如何对 Store 进行单元测试","/pro/unit-test-vue-store","i-heroicons-squares-plus",{"title":452,"_path":453,"children":454,"icon":465},"后端语言","/backend-languages",[455],{"title":456,"_path":457,"children":458},"Python","/backend-languages/python",[459,462],{"title":460,"_path":461},"基础","/backend-languages/python/base",{"title":463,"_path":464},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":180,"_dir":467,"_draft":468,"_partial":468,"_locale":469,"title":179,"description":470,"url":471,"body":472,"_type":1496,"_id":1497,"_source":1498,"_file":1499,"_extension":1500},"major",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":473,"children":474,"toc":1489},"root",[475,482,487,492,497,502,532,537,569,574,605,610,630,635,641,646,652,885,890,1483],{"type":476,"tag":477,"props":478,"children":479},"element","p",{},[480],{"type":481,"value":470},"text",{"type":476,"tag":477,"props":483,"children":484},{},[485],{"type":481,"value":486},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":476,"tag":477,"props":488,"children":489},{},[490],{"type":481,"value":491},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":476,"tag":477,"props":493,"children":494},{},[495],{"type":481,"value":496},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":476,"tag":477,"props":498,"children":499},{},[500],{"type":481,"value":501},"示例 1：",{"type":476,"tag":503,"props":504,"children":507},"pre",{"className":505,"code":506,"language":481,"meta":469,"style":469},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[508],{"type":476,"tag":509,"props":510,"children":511},"code",{"__ignoreMap":469},[512,523],{"type":476,"tag":513,"props":514,"children":517},"span",{"class":515,"line":516},"line",1,[518],{"type":476,"tag":513,"props":519,"children":520},{},[521],{"type":481,"value":522},"输入：s = \"the sky is blue\"\n",{"type":476,"tag":513,"props":524,"children":526},{"class":515,"line":525},2,[527],{"type":476,"tag":513,"props":528,"children":529},{},[530],{"type":481,"value":531},"输出：\"blue is sky the\"\n",{"type":476,"tag":477,"props":533,"children":534},{},[535],{"type":481,"value":536},"示例 2：",{"type":476,"tag":503,"props":538,"children":540},{"className":505,"code":539,"language":481,"meta":469,"style":469},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[541],{"type":476,"tag":509,"props":542,"children":543},{"__ignoreMap":469},[544,552,560],{"type":476,"tag":513,"props":545,"children":546},{"class":515,"line":516},[547],{"type":476,"tag":513,"props":548,"children":549},{},[550],{"type":481,"value":551},"输入：s = \" hello world \"\n",{"type":476,"tag":513,"props":553,"children":554},{"class":515,"line":525},[555],{"type":476,"tag":513,"props":556,"children":557},{},[558],{"type":481,"value":559},"输出：\"world hello\"\n",{"type":476,"tag":513,"props":561,"children":563},{"class":515,"line":562},3,[564],{"type":476,"tag":513,"props":565,"children":566},{},[567],{"type":481,"value":568},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":476,"tag":477,"props":570,"children":571},{},[572],{"type":481,"value":573},"示例 3：",{"type":476,"tag":503,"props":575,"children":577},{"className":505,"code":576,"language":481,"meta":469,"style":469},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[578],{"type":476,"tag":509,"props":579,"children":580},{"__ignoreMap":469},[581,589,597],{"type":476,"tag":513,"props":582,"children":583},{"class":515,"line":516},[584],{"type":476,"tag":513,"props":585,"children":586},{},[587],{"type":481,"value":588},"输入：s = \"a good example\"\n",{"type":476,"tag":513,"props":590,"children":591},{"class":515,"line":525},[592],{"type":476,"tag":513,"props":593,"children":594},{},[595],{"type":481,"value":596},"输出：\"example good a\"\n",{"type":476,"tag":513,"props":598,"children":599},{"class":515,"line":562},[600],{"type":476,"tag":513,"props":601,"children":602},{},[603],{"type":481,"value":604},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":476,"tag":477,"props":606,"children":607},{},[608],{"type":481,"value":609},"提示：",{"type":476,"tag":611,"props":612,"children":613},"ul",{},[614,620,625],{"type":476,"tag":615,"props":616,"children":617},"li",{},[618],{"type":481,"value":619},"1 \u003C= s.length \u003C= 10^4",{"type":476,"tag":615,"props":621,"children":622},{},[623],{"type":481,"value":624},"s 包含英文大小写字母、数字和空格 ' '",{"type":476,"tag":615,"props":626,"children":627},{},[628],{"type":481,"value":629},"s 中 至少存在一个 单词",{"type":476,"tag":477,"props":631,"children":632},{},[633],{"type":481,"value":634},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":476,"tag":636,"props":637,"children":639},"h2",{"id":638},"解题思路",[640],{"type":481,"value":638},{"type":476,"tag":636,"props":642,"children":644},{"id":643},"实现",[645],{"type":481,"value":643},{"type":476,"tag":647,"props":648,"children":650},"h3",{"id":649},"语言特性",[651],{"type":481,"value":649},{"type":476,"tag":503,"props":653,"children":657},{"className":654,"code":655,"language":656,"meta":469,"style":469},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[658],{"type":476,"tag":509,"props":659,"children":660},{"__ignoreMap":469},[661,670,696,713,722,766,872],{"type":476,"tag":513,"props":662,"children":663},{"class":515,"line":516},[664],{"type":476,"tag":513,"props":665,"children":667},{"style":666},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[668],{"type":481,"value":669},"/**\n",{"type":476,"tag":513,"props":671,"children":672},{"class":515,"line":525},[673,678,684,690],{"type":476,"tag":513,"props":674,"children":675},{"style":666},[676],{"type":481,"value":677}," * ",{"type":476,"tag":513,"props":679,"children":681},{"style":680},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[682],{"type":481,"value":683},"@param",{"type":476,"tag":513,"props":685,"children":687},{"style":686},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[688],{"type":481,"value":689}," {string}",{"type":476,"tag":513,"props":691,"children":693},{"style":692},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[694],{"type":481,"value":695}," s\n",{"type":476,"tag":513,"props":697,"children":698},{"class":515,"line":562},[699,703,708],{"type":476,"tag":513,"props":700,"children":701},{"style":666},[702],{"type":481,"value":677},{"type":476,"tag":513,"props":704,"children":705},{"style":680},[706],{"type":481,"value":707},"@return",{"type":476,"tag":513,"props":709,"children":710},{"style":686},[711],{"type":481,"value":712}," {string}\n",{"type":476,"tag":513,"props":714,"children":716},{"class":515,"line":715},4,[717],{"type":476,"tag":513,"props":718,"children":719},{"style":666},[720],{"type":481,"value":721}," */\n",{"type":476,"tag":513,"props":723,"children":725},{"class":515,"line":724},5,[726,732,738,744,749,755,761],{"type":476,"tag":513,"props":727,"children":729},{"style":728},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[730],{"type":481,"value":731},"var",{"type":476,"tag":513,"props":733,"children":735},{"style":734},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[736],{"type":481,"value":737}," reverseWords",{"type":476,"tag":513,"props":739,"children":741},{"style":740},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[742],{"type":481,"value":743}," =",{"type":476,"tag":513,"props":745,"children":746},{"style":728},[747],{"type":481,"value":748}," function",{"type":476,"tag":513,"props":750,"children":752},{"style":751},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[753],{"type":481,"value":754}," (",{"type":476,"tag":513,"props":756,"children":758},{"style":757},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[759],{"type":481,"value":760},"s",{"type":476,"tag":513,"props":762,"children":763},{"style":751},[764],{"type":481,"value":765},") {\n",{"type":476,"tag":513,"props":767,"children":769},{"class":515,"line":768},6,[770,776,782,788,793,798,804,809,813,818,822,827,831,835,840,845,849,854,858,862,866],{"type":476,"tag":513,"props":771,"children":773},{"style":772},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[774],{"type":481,"value":775},"  return",{"type":476,"tag":513,"props":777,"children":779},{"style":778},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[780],{"type":481,"value":781}," s",{"type":476,"tag":513,"props":783,"children":785},{"style":784},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[786],{"type":481,"value":787},".",{"type":476,"tag":513,"props":789,"children":790},{"style":734},[791],{"type":481,"value":792},"split",{"type":476,"tag":513,"props":794,"children":795},{"style":751},[796],{"type":481,"value":797},"(",{"type":476,"tag":513,"props":799,"children":801},{"style":800},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[802],{"type":481,"value":803},"\" \"",{"type":476,"tag":513,"props":805,"children":806},{"style":751},[807],{"type":481,"value":808},")",{"type":476,"tag":513,"props":810,"children":811},{"style":784},[812],{"type":481,"value":787},{"type":476,"tag":513,"props":814,"children":815},{"style":734},[816],{"type":481,"value":817},"filter",{"type":476,"tag":513,"props":819,"children":820},{"style":751},[821],{"type":481,"value":797},{"type":476,"tag":513,"props":823,"children":824},{"style":778},[825],{"type":481,"value":826},"Boolean",{"type":476,"tag":513,"props":828,"children":829},{"style":751},[830],{"type":481,"value":808},{"type":476,"tag":513,"props":832,"children":833},{"style":784},[834],{"type":481,"value":787},{"type":476,"tag":513,"props":836,"children":837},{"style":734},[838],{"type":481,"value":839},"reverse",{"type":476,"tag":513,"props":841,"children":842},{"style":751},[843],{"type":481,"value":844},"()",{"type":476,"tag":513,"props":846,"children":847},{"style":784},[848],{"type":481,"value":787},{"type":476,"tag":513,"props":850,"children":851},{"style":734},[852],{"type":481,"value":853},"join",{"type":476,"tag":513,"props":855,"children":856},{"style":751},[857],{"type":481,"value":797},{"type":476,"tag":513,"props":859,"children":860},{"style":800},[861],{"type":481,"value":803},{"type":476,"tag":513,"props":863,"children":864},{"style":751},[865],{"type":481,"value":808},{"type":476,"tag":513,"props":867,"children":869},{"style":868},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[870],{"type":481,"value":871},";\n",{"type":476,"tag":513,"props":873,"children":875},{"class":515,"line":874},7,[876,881],{"type":476,"tag":513,"props":877,"children":878},{"style":751},[879],{"type":481,"value":880},"}",{"type":476,"tag":513,"props":882,"children":883},{"style":868},[884],{"type":481,"value":871},{"type":476,"tag":647,"props":886,"children":888},{"id":887},"双指针",[889],{"type":481,"value":887},{"type":476,"tag":503,"props":891,"children":893},{"className":654,"code":892,"language":656,"meta":469,"style":469},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[894],{"type":476,"tag":509,"props":895,"children":896},{"__ignoreMap":469},[897,904,923,938,945,976,984,992,1001,1010,1019,1046,1091,1116,1148,1230,1313,1387,1413,1422,1471],{"type":476,"tag":513,"props":898,"children":899},{"class":515,"line":516},[900],{"type":476,"tag":513,"props":901,"children":902},{"style":666},[903],{"type":481,"value":669},{"type":476,"tag":513,"props":905,"children":906},{"class":515,"line":525},[907,911,915,919],{"type":476,"tag":513,"props":908,"children":909},{"style":666},[910],{"type":481,"value":677},{"type":476,"tag":513,"props":912,"children":913},{"style":680},[914],{"type":481,"value":683},{"type":476,"tag":513,"props":916,"children":917},{"style":686},[918],{"type":481,"value":689},{"type":476,"tag":513,"props":920,"children":921},{"style":692},[922],{"type":481,"value":695},{"type":476,"tag":513,"props":924,"children":925},{"class":515,"line":562},[926,930,934],{"type":476,"tag":513,"props":927,"children":928},{"style":666},[929],{"type":481,"value":677},{"type":476,"tag":513,"props":931,"children":932},{"style":680},[933],{"type":481,"value":707},{"type":476,"tag":513,"props":935,"children":936},{"style":686},[937],{"type":481,"value":712},{"type":476,"tag":513,"props":939,"children":940},{"class":515,"line":715},[941],{"type":476,"tag":513,"props":942,"children":943},{"style":666},[944],{"type":481,"value":721},{"type":476,"tag":513,"props":946,"children":947},{"class":515,"line":724},[948,952,956,960,964,968,972],{"type":476,"tag":513,"props":949,"children":950},{"style":728},[951],{"type":481,"value":731},{"type":476,"tag":513,"props":953,"children":954},{"style":734},[955],{"type":481,"value":737},{"type":476,"tag":513,"props":957,"children":958},{"style":740},[959],{"type":481,"value":743},{"type":476,"tag":513,"props":961,"children":962},{"style":728},[963],{"type":481,"value":748},{"type":476,"tag":513,"props":965,"children":966},{"style":751},[967],{"type":481,"value":754},{"type":476,"tag":513,"props":969,"children":970},{"style":757},[971],{"type":481,"value":760},{"type":476,"tag":513,"props":973,"children":974},{"style":751},[975],{"type":481,"value":765},{"type":476,"tag":513,"props":977,"children":978},{"class":515,"line":768},[979],{"type":476,"tag":513,"props":980,"children":981},{"style":666},[982],{"type":481,"value":983},"  // 倒序遍历字符串\n",{"type":476,"tag":513,"props":985,"children":986},{"class":515,"line":874},[987],{"type":476,"tag":513,"props":988,"children":989},{"style":666},[990],{"type":481,"value":991},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":476,"tag":513,"props":993,"children":995},{"class":515,"line":994},8,[996],{"type":476,"tag":513,"props":997,"children":998},{"style":666},[999],{"type":481,"value":1000},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":476,"tag":513,"props":1002,"children":1004},{"class":515,"line":1003},9,[1005],{"type":476,"tag":513,"props":1006,"children":1007},{"style":666},[1008],{"type":481,"value":1009},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":476,"tag":513,"props":1011,"children":1013},{"class":515,"line":1012},10,[1014],{"type":476,"tag":513,"props":1015,"children":1016},{"style":666},[1017],{"type":481,"value":1018},"  // 4. 执行 j = i\n",{"type":476,"tag":513,"props":1020,"children":1022},{"class":515,"line":1021},11,[1023,1028,1033,1037,1042],{"type":476,"tag":513,"props":1024,"children":1025},{"style":728},[1026],{"type":481,"value":1027},"  let",{"type":476,"tag":513,"props":1029,"children":1030},{"style":778},[1031],{"type":481,"value":1032}," res",{"type":476,"tag":513,"props":1034,"children":1035},{"style":740},[1036],{"type":481,"value":743},{"type":476,"tag":513,"props":1038,"children":1039},{"style":751},[1040],{"type":481,"value":1041}," []",{"type":476,"tag":513,"props":1043,"children":1044},{"style":868},[1045],{"type":481,"value":871},{"type":476,"tag":513,"props":1047,"children":1049},{"class":515,"line":1048},12,[1050,1054,1059,1063,1067,1071,1076,1081,1087],{"type":476,"tag":513,"props":1051,"children":1052},{"style":728},[1053],{"type":481,"value":1027},{"type":476,"tag":513,"props":1055,"children":1056},{"style":778},[1057],{"type":481,"value":1058}," i",{"type":476,"tag":513,"props":1060,"children":1061},{"style":740},[1062],{"type":481,"value":743},{"type":476,"tag":513,"props":1064,"children":1065},{"style":778},[1066],{"type":481,"value":781},{"type":476,"tag":513,"props":1068,"children":1069},{"style":784},[1070],{"type":481,"value":787},{"type":476,"tag":513,"props":1072,"children":1073},{"style":751},[1074],{"type":481,"value":1075},"length ",{"type":476,"tag":513,"props":1077,"children":1078},{"style":740},[1079],{"type":481,"value":1080},"-",{"type":476,"tag":513,"props":1082,"children":1084},{"style":1083},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[1085],{"type":481,"value":1086}," 1",{"type":476,"tag":513,"props":1088,"children":1089},{"style":868},[1090],{"type":481,"value":871},{"type":476,"tag":513,"props":1092,"children":1094},{"class":515,"line":1093},13,[1095,1099,1104,1108,1112],{"type":476,"tag":513,"props":1096,"children":1097},{"style":728},[1098],{"type":481,"value":1027},{"type":476,"tag":513,"props":1100,"children":1101},{"style":778},[1102],{"type":481,"value":1103}," j",{"type":476,"tag":513,"props":1105,"children":1106},{"style":740},[1107],{"type":481,"value":743},{"type":476,"tag":513,"props":1109,"children":1110},{"style":778},[1111],{"type":481,"value":1058},{"type":476,"tag":513,"props":1113,"children":1114},{"style":868},[1115],{"type":481,"value":871},{"type":476,"tag":513,"props":1117,"children":1119},{"class":515,"line":1118},14,[1120,1125,1129,1134,1139,1144],{"type":476,"tag":513,"props":1121,"children":1122},{"style":772},[1123],{"type":481,"value":1124},"  while",{"type":476,"tag":513,"props":1126,"children":1127},{"style":751},[1128],{"type":481,"value":754},{"type":476,"tag":513,"props":1130,"children":1131},{"style":778},[1132],{"type":481,"value":1133},"i",{"type":476,"tag":513,"props":1135,"children":1136},{"style":740},[1137],{"type":481,"value":1138}," >=",{"type":476,"tag":513,"props":1140,"children":1141},{"style":1083},[1142],{"type":481,"value":1143}," 0",{"type":476,"tag":513,"props":1145,"children":1146},{"style":751},[1147],{"type":481,"value":765},{"type":476,"tag":513,"props":1149,"children":1151},{"class":515,"line":1150},15,[1152,1157,1161,1165,1169,1173,1178,1182,1187,1191,1196,1201,1206,1211,1215,1220,1225],{"type":476,"tag":513,"props":1153,"children":1154},{"style":772},[1155],{"type":481,"value":1156},"    while",{"type":476,"tag":513,"props":1158,"children":1159},{"style":751},[1160],{"type":481,"value":754},{"type":476,"tag":513,"props":1162,"children":1163},{"style":778},[1164],{"type":481,"value":1133},{"type":476,"tag":513,"props":1166,"children":1167},{"style":740},[1168],{"type":481,"value":1138},{"type":476,"tag":513,"props":1170,"children":1171},{"style":1083},[1172],{"type":481,"value":1143},{"type":476,"tag":513,"props":1174,"children":1175},{"style":740},[1176],{"type":481,"value":1177}," &&",{"type":476,"tag":513,"props":1179,"children":1180},{"style":778},[1181],{"type":481,"value":781},{"type":476,"tag":513,"props":1183,"children":1184},{"style":751},[1185],{"type":481,"value":1186},"[",{"type":476,"tag":513,"props":1188,"children":1189},{"style":778},[1190],{"type":481,"value":1133},{"type":476,"tag":513,"props":1192,"children":1193},{"style":751},[1194],{"type":481,"value":1195},"] ",{"type":476,"tag":513,"props":1197,"children":1198},{"style":740},[1199],{"type":481,"value":1200},"!==",{"type":476,"tag":513,"props":1202,"children":1203},{"style":800},[1204],{"type":481,"value":1205}," \" \"",{"type":476,"tag":513,"props":1207,"children":1208},{"style":751},[1209],{"type":481,"value":1210},") ",{"type":476,"tag":513,"props":1212,"children":1213},{"style":778},[1214],{"type":481,"value":1133},{"type":476,"tag":513,"props":1216,"children":1217},{"style":740},[1218],{"type":481,"value":1219},"--",{"type":476,"tag":513,"props":1221,"children":1222},{"style":868},[1223],{"type":481,"value":1224},";",{"type":476,"tag":513,"props":1226,"children":1227},{"style":666},[1228],{"type":481,"value":1229}," // 搜索首个空格\n",{"type":476,"tag":513,"props":1231,"children":1233},{"class":515,"line":1232},16,[1234,1239,1243,1248,1252,1256,1260,1265,1269,1273,1278,1282,1287,1291,1295,1299,1304,1308],{"type":476,"tag":513,"props":1235,"children":1236},{"style":778},[1237],{"type":481,"value":1238},"    res",{"type":476,"tag":513,"props":1240,"children":1241},{"style":784},[1242],{"type":481,"value":787},{"type":476,"tag":513,"props":1244,"children":1245},{"style":734},[1246],{"type":481,"value":1247},"push",{"type":476,"tag":513,"props":1249,"children":1250},{"style":751},[1251],{"type":481,"value":797},{"type":476,"tag":513,"props":1253,"children":1254},{"style":778},[1255],{"type":481,"value":760},{"type":476,"tag":513,"props":1257,"children":1258},{"style":784},[1259],{"type":481,"value":787},{"type":476,"tag":513,"props":1261,"children":1262},{"style":734},[1263],{"type":481,"value":1264},"substring",{"type":476,"tag":513,"props":1266,"children":1267},{"style":751},[1268],{"type":481,"value":797},{"type":476,"tag":513,"props":1270,"children":1271},{"style":778},[1272],{"type":481,"value":1133},{"type":476,"tag":513,"props":1274,"children":1275},{"style":740},[1276],{"type":481,"value":1277}," +",{"type":476,"tag":513,"props":1279,"children":1280},{"style":1083},[1281],{"type":481,"value":1086},{"type":476,"tag":513,"props":1283,"children":1284},{"style":868},[1285],{"type":481,"value":1286},",",{"type":476,"tag":513,"props":1288,"children":1289},{"style":778},[1290],{"type":481,"value":1103},{"type":476,"tag":513,"props":1292,"children":1293},{"style":740},[1294],{"type":481,"value":1277},{"type":476,"tag":513,"props":1296,"children":1297},{"style":1083},[1298],{"type":481,"value":1086},{"type":476,"tag":513,"props":1300,"children":1301},{"style":751},[1302],{"type":481,"value":1303},"))",{"type":476,"tag":513,"props":1305,"children":1306},{"style":868},[1307],{"type":481,"value":1224},{"type":476,"tag":513,"props":1309,"children":1310},{"style":666},[1311],{"type":481,"value":1312}," // 添加单词\n",{"type":476,"tag":513,"props":1314,"children":1316},{"class":515,"line":1315},17,[1317,1321,1325,1329,1333,1337,1341,1345,1349,1353,1357,1362,1366,1370,1374,1378,1382],{"type":476,"tag":513,"props":1318,"children":1319},{"style":772},[1320],{"type":481,"value":1156},{"type":476,"tag":513,"props":1322,"children":1323},{"style":751},[1324],{"type":481,"value":754},{"type":476,"tag":513,"props":1326,"children":1327},{"style":778},[1328],{"type":481,"value":1133},{"type":476,"tag":513,"props":1330,"children":1331},{"style":740},[1332],{"type":481,"value":1138},{"type":476,"tag":513,"props":1334,"children":1335},{"style":1083},[1336],{"type":481,"value":1143},{"type":476,"tag":513,"props":1338,"children":1339},{"style":740},[1340],{"type":481,"value":1177},{"type":476,"tag":513,"props":1342,"children":1343},{"style":778},[1344],{"type":481,"value":781},{"type":476,"tag":513,"props":1346,"children":1347},{"style":751},[1348],{"type":481,"value":1186},{"type":476,"tag":513,"props":1350,"children":1351},{"style":778},[1352],{"type":481,"value":1133},{"type":476,"tag":513,"props":1354,"children":1355},{"style":751},[1356],{"type":481,"value":1195},{"type":476,"tag":513,"props":1358,"children":1359},{"style":740},[1360],{"type":481,"value":1361},"===",{"type":476,"tag":513,"props":1363,"children":1364},{"style":800},[1365],{"type":481,"value":1205},{"type":476,"tag":513,"props":1367,"children":1368},{"style":751},[1369],{"type":481,"value":1210},{"type":476,"tag":513,"props":1371,"children":1372},{"style":778},[1373],{"type":481,"value":1133},{"type":476,"tag":513,"props":1375,"children":1376},{"style":740},[1377],{"type":481,"value":1219},{"type":476,"tag":513,"props":1379,"children":1380},{"style":868},[1381],{"type":481,"value":1224},{"type":476,"tag":513,"props":1383,"children":1384},{"style":666},[1385],{"type":481,"value":1386}," // 跳过单词间空格\n",{"type":476,"tag":513,"props":1388,"children":1390},{"class":515,"line":1389},18,[1391,1396,1400,1404,1408],{"type":476,"tag":513,"props":1392,"children":1393},{"style":778},[1394],{"type":481,"value":1395},"    j",{"type":476,"tag":513,"props":1397,"children":1398},{"style":740},[1399],{"type":481,"value":743},{"type":476,"tag":513,"props":1401,"children":1402},{"style":778},[1403],{"type":481,"value":1058},{"type":476,"tag":513,"props":1405,"children":1406},{"style":868},[1407],{"type":481,"value":1224},{"type":476,"tag":513,"props":1409,"children":1410},{"style":666},[1411],{"type":481,"value":1412}," // 指针移动，指向下个单词的尾字符\n",{"type":476,"tag":513,"props":1414,"children":1416},{"class":515,"line":1415},19,[1417],{"type":476,"tag":513,"props":1418,"children":1419},{"style":751},[1420],{"type":481,"value":1421},"  }\n",{"type":476,"tag":513,"props":1423,"children":1425},{"class":515,"line":1424},20,[1426,1430,1434,1438,1442,1446,1450,1454,1458,1463,1467],{"type":476,"tag":513,"props":1427,"children":1428},{"style":772},[1429],{"type":481,"value":775},{"type":476,"tag":513,"props":1431,"children":1432},{"style":778},[1433],{"type":481,"value":1032},{"type":476,"tag":513,"props":1435,"children":1436},{"style":784},[1437],{"type":481,"value":787},{"type":476,"tag":513,"props":1439,"children":1440},{"style":734},[1441],{"type":481,"value":853},{"type":476,"tag":513,"props":1443,"children":1444},{"style":751},[1445],{"type":481,"value":797},{"type":476,"tag":513,"props":1447,"children":1448},{"style":800},[1449],{"type":481,"value":803},{"type":476,"tag":513,"props":1451,"children":1452},{"style":751},[1453],{"type":481,"value":808},{"type":476,"tag":513,"props":1455,"children":1456},{"style":784},[1457],{"type":481,"value":787},{"type":476,"tag":513,"props":1459,"children":1460},{"style":734},[1461],{"type":481,"value":1462},"trim",{"type":476,"tag":513,"props":1464,"children":1465},{"style":751},[1466],{"type":481,"value":844},{"type":476,"tag":513,"props":1468,"children":1469},{"style":868},[1470],{"type":481,"value":871},{"type":476,"tag":513,"props":1472,"children":1474},{"class":515,"line":1473},21,[1475,1479],{"type":476,"tag":513,"props":1476,"children":1477},{"style":751},[1478],{"type":481,"value":880},{"type":476,"tag":513,"props":1480,"children":1481},{"style":868},[1482],{"type":481,"value":871},{"type":476,"tag":1484,"props":1485,"children":1486},"style",{},[1487],{"type":481,"value":1488},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":469,"searchDepth":724,"depth":724,"links":1490},[1491,1492],{"id":638,"depth":525,"text":638},{"id":643,"depth":525,"text":643,"children":1493},[1494,1495],{"id":649,"depth":562,"text":649},{"id":887,"depth":562,"text":887},"markdown","content:1.algorithm:3.leetcode:3.major:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/3.major/151.reverse-words-in-a-string.md","md",[1502,1504],{"_path":177,"title":176,"description":1503},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":183,"title":182,"description":1505},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1714007215333]