[{"data":1,"prerenderedAt":1503},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/reverse-words-in-a-string":463,"/algorithm/leetcode/major/reverse-words-in-a-string-surround":1498},[4,266,295,440,448],{"title":5,"_path":6,"children":7,"icon":265},"算法","/algorithm",[8,28],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30,"children":31},"Leetcode 力扣","/algorithm/leetcode",[32,38,51],{"title":33,"_path":34,"children":35},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[36],{"title":37,"_path":34},"刷题索引",{"title":39,"_path":40,"children":41},"剑指 offer","/algorithm/leetcode/sword-ofter",[42,45,48],{"title":43,"_path":44},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":46,"_path":47},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":49,"_path":50},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":52,"_path":53,"children":54},"主题单","/algorithm/leetcode/major",[55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262],{"title":56,"_path":57},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":59,"_path":60},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":62,"_path":63},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":65,"_path":66},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":68,"_path":69},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":71,"_path":72},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":74,"_path":75},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":77,"_path":78},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":80,"_path":81},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":83,"_path":84},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":86,"_path":87},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":89,"_path":90},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":92,"_path":93},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":95,"_path":96},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":98,"_path":99},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":101,"_path":102},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":104,"_path":105},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":107,"_path":108},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":110,"_path":111},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":113,"_path":114},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":116,"_path":117},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":119,"_path":120},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":122,"_path":123},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":125,"_path":126},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":128,"_path":129},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":131,"_path":132},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":134,"_path":135},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":137,"_path":138},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":140,"_path":141},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":143,"_path":144},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":146,"_path":147},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":149,"_path":150},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":152,"_path":153},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":155,"_path":156},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":158,"_path":159},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":161,"_path":162},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":164,"_path":165},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":167,"_path":168},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":170,"_path":171},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":173,"_path":174},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":176,"_path":177},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":179,"_path":180},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":182,"_path":183},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":185,"_path":186},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":188,"_path":189},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":191,"_path":192},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":194,"_path":195},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":197,"_path":198},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":200,"_path":201},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":203,"_path":204},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":206,"_path":207},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":209,"_path":210},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":212,"_path":213},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":215,"_path":216},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":218,"_path":219},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":221,"_path":222},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":224,"_path":225},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":227,"_path":228},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":230,"_path":231},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":233,"_path":234},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":236,"_path":237},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":239,"_path":240},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":242,"_path":243},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":245,"_path":246},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":248,"_path":249},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":251,"_path":252},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":254,"_path":255},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":257,"_path":258},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":260,"_path":261},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":263,"_path":264},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":267,"_path":268,"children":269,"icon":294},"前端八股文","/frontend-endorsement",[270,281],{"title":271,"_path":272,"children":273},"构建工具","/frontend-endorsement/build-tools",[274],{"title":275,"_path":276,"children":277},"Webpack","/frontend-endorsement/build-tools/webpack",[278],{"title":279,"_path":280},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":282,"_path":283,"children":284},"Html","/frontend-endorsement/html",[285,288,291],{"title":286,"_path":287},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":289,"_path":290},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":292,"_path":293},"离线存储","/frontend-endorsement/html/offline-storage","i-heroicons-newspaper",{"title":296,"_path":297,"children":298,"icon":439},"前端代码考核","/frontend-code-assessment",[299,348,432],{"title":300,"_path":301,"children":302},"源码实现","/frontend-code-assessment/source",[303,328,341],{"title":304,"_path":305,"children":306},"原生 api","/frontend-code-assessment/source/native-api",[307,310,313,316,319,322,325],{"title":308,"_path":309},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":311,"_path":312},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":314,"_path":315},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":317,"_path":318},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":320,"_path":321},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":323,"_path":324},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":326,"_path":327},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":329,"_path":330,"children":331},"数组 Array","/frontend-code-assessment/source/array",[332,335,338],{"title":333,"_path":334},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":336,"_path":337},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":339,"_path":340},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":342,"_path":343,"children":344},"字符串 String","/frontend-code-assessment/source/string",[345],{"title":346,"_path":347},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":349,"_path":350,"children":351},"业务场景","/frontend-code-assessment/scene",[352,374,381,384,387,390,393,396,399,402,405,408,411,414,417,420,423,426,429],{"title":353,"_path":354,"children":355},"Promise","/frontend-code-assessment/scene/promise",[356,359,362,365,368,371],{"title":357,"_path":358},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":360,"_path":361},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":363,"_path":364},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":366,"_path":367},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":369,"_path":370},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":372,"_path":373},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":375,"_path":376,"children":377},"框架和设计模式","/frontend-code-assessment/scene/framework-and-design-mode",[378],{"title":379,"_path":380},"event bus","/frontend-code-assessment/scene/framework-and-design-mode/event-bus",{"title":382,"_path":383},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":385,"_path":386},"倒计时","/frontend-code-assessment/scene/countdown",{"title":388,"_path":389},"日期格式化","/frontend-code-assessment/scene/date-format",{"title":391,"_path":392},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":394,"_path":395},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":397,"_path":398},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":400,"_path":401},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":403,"_path":404},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":406,"_path":407},"对象是否循环引用","/frontend-code-assessment/scene/object-is-or-not-circular-reference",{"title":409,"_path":410},"解析 url 参数","/frontend-code-assessment/scene/parse-url-query",{"title":412,"_path":413},"原型链输出","/frontend-code-assessment/scene/prototype-chain-output",{"title":415,"_path":416},"随机数","/frontend-code-assessment/scene/random-number",{"title":418,"_path":419},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":421,"_path":422},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":424,"_path":425},"千分位分隔数字字符串","/frontend-code-assessment/scene/thousandth-separated-number-string",{"title":427,"_path":428},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":430,"_path":431},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":433,"_path":434,"children":435},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[436],{"title":437,"_path":438},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":441,"_path":442,"children":443,"icon":447},"项目","/pro",[444],{"title":445,"_path":446},"Vue 如何对 Store 进行单元测试","/pro/unit-test-vue-store","i-heroicons-squares-plus",{"title":449,"_path":450,"children":451,"icon":462},"后端语言","/backend-languages",[452],{"title":453,"_path":454,"children":455},"Python","/backend-languages/python",[456,459],{"title":457,"_path":458},"基础","/backend-languages/python/base",{"title":460,"_path":461},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":177,"_dir":464,"_draft":465,"_partial":465,"_locale":466,"title":176,"description":467,"url":468,"body":469,"_type":1493,"_id":1494,"_source":1495,"_file":1496,"_extension":1497},"major",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":470,"children":471,"toc":1486},"root",[472,479,484,489,494,499,529,534,566,571,602,607,627,632,638,643,649,882,887,1480],{"type":473,"tag":474,"props":475,"children":476},"element","p",{},[477],{"type":478,"value":467},"text",{"type":473,"tag":474,"props":480,"children":481},{},[482],{"type":478,"value":483},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":473,"tag":474,"props":485,"children":486},{},[487],{"type":478,"value":488},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":473,"tag":474,"props":490,"children":491},{},[492],{"type":478,"value":493},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":473,"tag":474,"props":495,"children":496},{},[497],{"type":478,"value":498},"示例 1：",{"type":473,"tag":500,"props":501,"children":504},"pre",{"className":502,"code":503,"language":478,"meta":466,"style":466},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[505],{"type":473,"tag":506,"props":507,"children":508},"code",{"__ignoreMap":466},[509,520],{"type":473,"tag":510,"props":511,"children":514},"span",{"class":512,"line":513},"line",1,[515],{"type":473,"tag":510,"props":516,"children":517},{},[518],{"type":478,"value":519},"输入：s = \"the sky is blue\"\n",{"type":473,"tag":510,"props":521,"children":523},{"class":512,"line":522},2,[524],{"type":473,"tag":510,"props":525,"children":526},{},[527],{"type":478,"value":528},"输出：\"blue is sky the\"\n",{"type":473,"tag":474,"props":530,"children":531},{},[532],{"type":478,"value":533},"示例 2：",{"type":473,"tag":500,"props":535,"children":537},{"className":502,"code":536,"language":478,"meta":466,"style":466},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[538],{"type":473,"tag":506,"props":539,"children":540},{"__ignoreMap":466},[541,549,557],{"type":473,"tag":510,"props":542,"children":543},{"class":512,"line":513},[544],{"type":473,"tag":510,"props":545,"children":546},{},[547],{"type":478,"value":548},"输入：s = \" hello world \"\n",{"type":473,"tag":510,"props":550,"children":551},{"class":512,"line":522},[552],{"type":473,"tag":510,"props":553,"children":554},{},[555],{"type":478,"value":556},"输出：\"world hello\"\n",{"type":473,"tag":510,"props":558,"children":560},{"class":512,"line":559},3,[561],{"type":473,"tag":510,"props":562,"children":563},{},[564],{"type":478,"value":565},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":473,"tag":474,"props":567,"children":568},{},[569],{"type":478,"value":570},"示例 3：",{"type":473,"tag":500,"props":572,"children":574},{"className":502,"code":573,"language":478,"meta":466,"style":466},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[575],{"type":473,"tag":506,"props":576,"children":577},{"__ignoreMap":466},[578,586,594],{"type":473,"tag":510,"props":579,"children":580},{"class":512,"line":513},[581],{"type":473,"tag":510,"props":582,"children":583},{},[584],{"type":478,"value":585},"输入：s = \"a good example\"\n",{"type":473,"tag":510,"props":587,"children":588},{"class":512,"line":522},[589],{"type":473,"tag":510,"props":590,"children":591},{},[592],{"type":478,"value":593},"输出：\"example good a\"\n",{"type":473,"tag":510,"props":595,"children":596},{"class":512,"line":559},[597],{"type":473,"tag":510,"props":598,"children":599},{},[600],{"type":478,"value":601},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":473,"tag":474,"props":603,"children":604},{},[605],{"type":478,"value":606},"提示：",{"type":473,"tag":608,"props":609,"children":610},"ul",{},[611,617,622],{"type":473,"tag":612,"props":613,"children":614},"li",{},[615],{"type":478,"value":616},"1 \u003C= s.length \u003C= 10^4",{"type":473,"tag":612,"props":618,"children":619},{},[620],{"type":478,"value":621},"s 包含英文大小写字母、数字和空格 ' '",{"type":473,"tag":612,"props":623,"children":624},{},[625],{"type":478,"value":626},"s 中 至少存在一个 单词",{"type":473,"tag":474,"props":628,"children":629},{},[630],{"type":478,"value":631},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":473,"tag":633,"props":634,"children":636},"h2",{"id":635},"解题思路",[637],{"type":478,"value":635},{"type":473,"tag":633,"props":639,"children":641},{"id":640},"实现",[642],{"type":478,"value":640},{"type":473,"tag":644,"props":645,"children":647},"h3",{"id":646},"语言特性",[648],{"type":478,"value":646},{"type":473,"tag":500,"props":650,"children":654},{"className":651,"code":652,"language":653,"meta":466,"style":466},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[655],{"type":473,"tag":506,"props":656,"children":657},{"__ignoreMap":466},[658,667,693,710,719,763,869],{"type":473,"tag":510,"props":659,"children":660},{"class":512,"line":513},[661],{"type":473,"tag":510,"props":662,"children":664},{"style":663},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[665],{"type":478,"value":666},"/**\n",{"type":473,"tag":510,"props":668,"children":669},{"class":512,"line":522},[670,675,681,687],{"type":473,"tag":510,"props":671,"children":672},{"style":663},[673],{"type":478,"value":674}," * ",{"type":473,"tag":510,"props":676,"children":678},{"style":677},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[679],{"type":478,"value":680},"@param",{"type":473,"tag":510,"props":682,"children":684},{"style":683},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[685],{"type":478,"value":686}," {string}",{"type":473,"tag":510,"props":688,"children":690},{"style":689},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[691],{"type":478,"value":692}," s\n",{"type":473,"tag":510,"props":694,"children":695},{"class":512,"line":559},[696,700,705],{"type":473,"tag":510,"props":697,"children":698},{"style":663},[699],{"type":478,"value":674},{"type":473,"tag":510,"props":701,"children":702},{"style":677},[703],{"type":478,"value":704},"@return",{"type":473,"tag":510,"props":706,"children":707},{"style":683},[708],{"type":478,"value":709}," {string}\n",{"type":473,"tag":510,"props":711,"children":713},{"class":512,"line":712},4,[714],{"type":473,"tag":510,"props":715,"children":716},{"style":663},[717],{"type":478,"value":718}," */\n",{"type":473,"tag":510,"props":720,"children":722},{"class":512,"line":721},5,[723,729,735,741,746,752,758],{"type":473,"tag":510,"props":724,"children":726},{"style":725},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[727],{"type":478,"value":728},"var",{"type":473,"tag":510,"props":730,"children":732},{"style":731},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[733],{"type":478,"value":734}," reverseWords",{"type":473,"tag":510,"props":736,"children":738},{"style":737},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[739],{"type":478,"value":740}," =",{"type":473,"tag":510,"props":742,"children":743},{"style":725},[744],{"type":478,"value":745}," function",{"type":473,"tag":510,"props":747,"children":749},{"style":748},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[750],{"type":478,"value":751}," (",{"type":473,"tag":510,"props":753,"children":755},{"style":754},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[756],{"type":478,"value":757},"s",{"type":473,"tag":510,"props":759,"children":760},{"style":748},[761],{"type":478,"value":762},") {\n",{"type":473,"tag":510,"props":764,"children":766},{"class":512,"line":765},6,[767,773,779,785,790,795,801,806,810,815,819,824,828,832,837,842,846,851,855,859,863],{"type":473,"tag":510,"props":768,"children":770},{"style":769},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[771],{"type":478,"value":772},"  return",{"type":473,"tag":510,"props":774,"children":776},{"style":775},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[777],{"type":478,"value":778}," s",{"type":473,"tag":510,"props":780,"children":782},{"style":781},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[783],{"type":478,"value":784},".",{"type":473,"tag":510,"props":786,"children":787},{"style":731},[788],{"type":478,"value":789},"split",{"type":473,"tag":510,"props":791,"children":792},{"style":748},[793],{"type":478,"value":794},"(",{"type":473,"tag":510,"props":796,"children":798},{"style":797},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[799],{"type":478,"value":800},"\" \"",{"type":473,"tag":510,"props":802,"children":803},{"style":748},[804],{"type":478,"value":805},")",{"type":473,"tag":510,"props":807,"children":808},{"style":781},[809],{"type":478,"value":784},{"type":473,"tag":510,"props":811,"children":812},{"style":731},[813],{"type":478,"value":814},"filter",{"type":473,"tag":510,"props":816,"children":817},{"style":748},[818],{"type":478,"value":794},{"type":473,"tag":510,"props":820,"children":821},{"style":775},[822],{"type":478,"value":823},"Boolean",{"type":473,"tag":510,"props":825,"children":826},{"style":748},[827],{"type":478,"value":805},{"type":473,"tag":510,"props":829,"children":830},{"style":781},[831],{"type":478,"value":784},{"type":473,"tag":510,"props":833,"children":834},{"style":731},[835],{"type":478,"value":836},"reverse",{"type":473,"tag":510,"props":838,"children":839},{"style":748},[840],{"type":478,"value":841},"()",{"type":473,"tag":510,"props":843,"children":844},{"style":781},[845],{"type":478,"value":784},{"type":473,"tag":510,"props":847,"children":848},{"style":731},[849],{"type":478,"value":850},"join",{"type":473,"tag":510,"props":852,"children":853},{"style":748},[854],{"type":478,"value":794},{"type":473,"tag":510,"props":856,"children":857},{"style":797},[858],{"type":478,"value":800},{"type":473,"tag":510,"props":860,"children":861},{"style":748},[862],{"type":478,"value":805},{"type":473,"tag":510,"props":864,"children":866},{"style":865},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[867],{"type":478,"value":868},";\n",{"type":473,"tag":510,"props":870,"children":872},{"class":512,"line":871},7,[873,878],{"type":473,"tag":510,"props":874,"children":875},{"style":748},[876],{"type":478,"value":877},"}",{"type":473,"tag":510,"props":879,"children":880},{"style":865},[881],{"type":478,"value":868},{"type":473,"tag":644,"props":883,"children":885},{"id":884},"双指针",[886],{"type":478,"value":884},{"type":473,"tag":500,"props":888,"children":890},{"className":651,"code":889,"language":653,"meta":466,"style":466},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[891],{"type":473,"tag":506,"props":892,"children":893},{"__ignoreMap":466},[894,901,920,935,942,973,981,989,998,1007,1016,1043,1088,1113,1145,1227,1310,1384,1410,1419,1468],{"type":473,"tag":510,"props":895,"children":896},{"class":512,"line":513},[897],{"type":473,"tag":510,"props":898,"children":899},{"style":663},[900],{"type":478,"value":666},{"type":473,"tag":510,"props":902,"children":903},{"class":512,"line":522},[904,908,912,916],{"type":473,"tag":510,"props":905,"children":906},{"style":663},[907],{"type":478,"value":674},{"type":473,"tag":510,"props":909,"children":910},{"style":677},[911],{"type":478,"value":680},{"type":473,"tag":510,"props":913,"children":914},{"style":683},[915],{"type":478,"value":686},{"type":473,"tag":510,"props":917,"children":918},{"style":689},[919],{"type":478,"value":692},{"type":473,"tag":510,"props":921,"children":922},{"class":512,"line":559},[923,927,931],{"type":473,"tag":510,"props":924,"children":925},{"style":663},[926],{"type":478,"value":674},{"type":473,"tag":510,"props":928,"children":929},{"style":677},[930],{"type":478,"value":704},{"type":473,"tag":510,"props":932,"children":933},{"style":683},[934],{"type":478,"value":709},{"type":473,"tag":510,"props":936,"children":937},{"class":512,"line":712},[938],{"type":473,"tag":510,"props":939,"children":940},{"style":663},[941],{"type":478,"value":718},{"type":473,"tag":510,"props":943,"children":944},{"class":512,"line":721},[945,949,953,957,961,965,969],{"type":473,"tag":510,"props":946,"children":947},{"style":725},[948],{"type":478,"value":728},{"type":473,"tag":510,"props":950,"children":951},{"style":731},[952],{"type":478,"value":734},{"type":473,"tag":510,"props":954,"children":955},{"style":737},[956],{"type":478,"value":740},{"type":473,"tag":510,"props":958,"children":959},{"style":725},[960],{"type":478,"value":745},{"type":473,"tag":510,"props":962,"children":963},{"style":748},[964],{"type":478,"value":751},{"type":473,"tag":510,"props":966,"children":967},{"style":754},[968],{"type":478,"value":757},{"type":473,"tag":510,"props":970,"children":971},{"style":748},[972],{"type":478,"value":762},{"type":473,"tag":510,"props":974,"children":975},{"class":512,"line":765},[976],{"type":473,"tag":510,"props":977,"children":978},{"style":663},[979],{"type":478,"value":980},"  // 倒序遍历字符串\n",{"type":473,"tag":510,"props":982,"children":983},{"class":512,"line":871},[984],{"type":473,"tag":510,"props":985,"children":986},{"style":663},[987],{"type":478,"value":988},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":473,"tag":510,"props":990,"children":992},{"class":512,"line":991},8,[993],{"type":473,"tag":510,"props":994,"children":995},{"style":663},[996],{"type":478,"value":997},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":473,"tag":510,"props":999,"children":1001},{"class":512,"line":1000},9,[1002],{"type":473,"tag":510,"props":1003,"children":1004},{"style":663},[1005],{"type":478,"value":1006},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":473,"tag":510,"props":1008,"children":1010},{"class":512,"line":1009},10,[1011],{"type":473,"tag":510,"props":1012,"children":1013},{"style":663},[1014],{"type":478,"value":1015},"  // 4. 执行 j = i\n",{"type":473,"tag":510,"props":1017,"children":1019},{"class":512,"line":1018},11,[1020,1025,1030,1034,1039],{"type":473,"tag":510,"props":1021,"children":1022},{"style":725},[1023],{"type":478,"value":1024},"  let",{"type":473,"tag":510,"props":1026,"children":1027},{"style":775},[1028],{"type":478,"value":1029}," res",{"type":473,"tag":510,"props":1031,"children":1032},{"style":737},[1033],{"type":478,"value":740},{"type":473,"tag":510,"props":1035,"children":1036},{"style":748},[1037],{"type":478,"value":1038}," []",{"type":473,"tag":510,"props":1040,"children":1041},{"style":865},[1042],{"type":478,"value":868},{"type":473,"tag":510,"props":1044,"children":1046},{"class":512,"line":1045},12,[1047,1051,1056,1060,1064,1068,1073,1078,1084],{"type":473,"tag":510,"props":1048,"children":1049},{"style":725},[1050],{"type":478,"value":1024},{"type":473,"tag":510,"props":1052,"children":1053},{"style":775},[1054],{"type":478,"value":1055}," i",{"type":473,"tag":510,"props":1057,"children":1058},{"style":737},[1059],{"type":478,"value":740},{"type":473,"tag":510,"props":1061,"children":1062},{"style":775},[1063],{"type":478,"value":778},{"type":473,"tag":510,"props":1065,"children":1066},{"style":781},[1067],{"type":478,"value":784},{"type":473,"tag":510,"props":1069,"children":1070},{"style":748},[1071],{"type":478,"value":1072},"length ",{"type":473,"tag":510,"props":1074,"children":1075},{"style":737},[1076],{"type":478,"value":1077},"-",{"type":473,"tag":510,"props":1079,"children":1081},{"style":1080},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[1082],{"type":478,"value":1083}," 1",{"type":473,"tag":510,"props":1085,"children":1086},{"style":865},[1087],{"type":478,"value":868},{"type":473,"tag":510,"props":1089,"children":1091},{"class":512,"line":1090},13,[1092,1096,1101,1105,1109],{"type":473,"tag":510,"props":1093,"children":1094},{"style":725},[1095],{"type":478,"value":1024},{"type":473,"tag":510,"props":1097,"children":1098},{"style":775},[1099],{"type":478,"value":1100}," j",{"type":473,"tag":510,"props":1102,"children":1103},{"style":737},[1104],{"type":478,"value":740},{"type":473,"tag":510,"props":1106,"children":1107},{"style":775},[1108],{"type":478,"value":1055},{"type":473,"tag":510,"props":1110,"children":1111},{"style":865},[1112],{"type":478,"value":868},{"type":473,"tag":510,"props":1114,"children":1116},{"class":512,"line":1115},14,[1117,1122,1126,1131,1136,1141],{"type":473,"tag":510,"props":1118,"children":1119},{"style":769},[1120],{"type":478,"value":1121},"  while",{"type":473,"tag":510,"props":1123,"children":1124},{"style":748},[1125],{"type":478,"value":751},{"type":473,"tag":510,"props":1127,"children":1128},{"style":775},[1129],{"type":478,"value":1130},"i",{"type":473,"tag":510,"props":1132,"children":1133},{"style":737},[1134],{"type":478,"value":1135}," >=",{"type":473,"tag":510,"props":1137,"children":1138},{"style":1080},[1139],{"type":478,"value":1140}," 0",{"type":473,"tag":510,"props":1142,"children":1143},{"style":748},[1144],{"type":478,"value":762},{"type":473,"tag":510,"props":1146,"children":1148},{"class":512,"line":1147},15,[1149,1154,1158,1162,1166,1170,1175,1179,1184,1188,1193,1198,1203,1208,1212,1217,1222],{"type":473,"tag":510,"props":1150,"children":1151},{"style":769},[1152],{"type":478,"value":1153},"    while",{"type":473,"tag":510,"props":1155,"children":1156},{"style":748},[1157],{"type":478,"value":751},{"type":473,"tag":510,"props":1159,"children":1160},{"style":775},[1161],{"type":478,"value":1130},{"type":473,"tag":510,"props":1163,"children":1164},{"style":737},[1165],{"type":478,"value":1135},{"type":473,"tag":510,"props":1167,"children":1168},{"style":1080},[1169],{"type":478,"value":1140},{"type":473,"tag":510,"props":1171,"children":1172},{"style":737},[1173],{"type":478,"value":1174}," &&",{"type":473,"tag":510,"props":1176,"children":1177},{"style":775},[1178],{"type":478,"value":778},{"type":473,"tag":510,"props":1180,"children":1181},{"style":748},[1182],{"type":478,"value":1183},"[",{"type":473,"tag":510,"props":1185,"children":1186},{"style":775},[1187],{"type":478,"value":1130},{"type":473,"tag":510,"props":1189,"children":1190},{"style":748},[1191],{"type":478,"value":1192},"] ",{"type":473,"tag":510,"props":1194,"children":1195},{"style":737},[1196],{"type":478,"value":1197},"!==",{"type":473,"tag":510,"props":1199,"children":1200},{"style":797},[1201],{"type":478,"value":1202}," \" \"",{"type":473,"tag":510,"props":1204,"children":1205},{"style":748},[1206],{"type":478,"value":1207},") ",{"type":473,"tag":510,"props":1209,"children":1210},{"style":775},[1211],{"type":478,"value":1130},{"type":473,"tag":510,"props":1213,"children":1214},{"style":737},[1215],{"type":478,"value":1216},"--",{"type":473,"tag":510,"props":1218,"children":1219},{"style":865},[1220],{"type":478,"value":1221},";",{"type":473,"tag":510,"props":1223,"children":1224},{"style":663},[1225],{"type":478,"value":1226}," // 搜索首个空格\n",{"type":473,"tag":510,"props":1228,"children":1230},{"class":512,"line":1229},16,[1231,1236,1240,1245,1249,1253,1257,1262,1266,1270,1275,1279,1284,1288,1292,1296,1301,1305],{"type":473,"tag":510,"props":1232,"children":1233},{"style":775},[1234],{"type":478,"value":1235},"    res",{"type":473,"tag":510,"props":1237,"children":1238},{"style":781},[1239],{"type":478,"value":784},{"type":473,"tag":510,"props":1241,"children":1242},{"style":731},[1243],{"type":478,"value":1244},"push",{"type":473,"tag":510,"props":1246,"children":1247},{"style":748},[1248],{"type":478,"value":794},{"type":473,"tag":510,"props":1250,"children":1251},{"style":775},[1252],{"type":478,"value":757},{"type":473,"tag":510,"props":1254,"children":1255},{"style":781},[1256],{"type":478,"value":784},{"type":473,"tag":510,"props":1258,"children":1259},{"style":731},[1260],{"type":478,"value":1261},"substring",{"type":473,"tag":510,"props":1263,"children":1264},{"style":748},[1265],{"type":478,"value":794},{"type":473,"tag":510,"props":1267,"children":1268},{"style":775},[1269],{"type":478,"value":1130},{"type":473,"tag":510,"props":1271,"children":1272},{"style":737},[1273],{"type":478,"value":1274}," +",{"type":473,"tag":510,"props":1276,"children":1277},{"style":1080},[1278],{"type":478,"value":1083},{"type":473,"tag":510,"props":1280,"children":1281},{"style":865},[1282],{"type":478,"value":1283},",",{"type":473,"tag":510,"props":1285,"children":1286},{"style":775},[1287],{"type":478,"value":1100},{"type":473,"tag":510,"props":1289,"children":1290},{"style":737},[1291],{"type":478,"value":1274},{"type":473,"tag":510,"props":1293,"children":1294},{"style":1080},[1295],{"type":478,"value":1083},{"type":473,"tag":510,"props":1297,"children":1298},{"style":748},[1299],{"type":478,"value":1300},"))",{"type":473,"tag":510,"props":1302,"children":1303},{"style":865},[1304],{"type":478,"value":1221},{"type":473,"tag":510,"props":1306,"children":1307},{"style":663},[1308],{"type":478,"value":1309}," // 添加单词\n",{"type":473,"tag":510,"props":1311,"children":1313},{"class":512,"line":1312},17,[1314,1318,1322,1326,1330,1334,1338,1342,1346,1350,1354,1359,1363,1367,1371,1375,1379],{"type":473,"tag":510,"props":1315,"children":1316},{"style":769},[1317],{"type":478,"value":1153},{"type":473,"tag":510,"props":1319,"children":1320},{"style":748},[1321],{"type":478,"value":751},{"type":473,"tag":510,"props":1323,"children":1324},{"style":775},[1325],{"type":478,"value":1130},{"type":473,"tag":510,"props":1327,"children":1328},{"style":737},[1329],{"type":478,"value":1135},{"type":473,"tag":510,"props":1331,"children":1332},{"style":1080},[1333],{"type":478,"value":1140},{"type":473,"tag":510,"props":1335,"children":1336},{"style":737},[1337],{"type":478,"value":1174},{"type":473,"tag":510,"props":1339,"children":1340},{"style":775},[1341],{"type":478,"value":778},{"type":473,"tag":510,"props":1343,"children":1344},{"style":748},[1345],{"type":478,"value":1183},{"type":473,"tag":510,"props":1347,"children":1348},{"style":775},[1349],{"type":478,"value":1130},{"type":473,"tag":510,"props":1351,"children":1352},{"style":748},[1353],{"type":478,"value":1192},{"type":473,"tag":510,"props":1355,"children":1356},{"style":737},[1357],{"type":478,"value":1358},"===",{"type":473,"tag":510,"props":1360,"children":1361},{"style":797},[1362],{"type":478,"value":1202},{"type":473,"tag":510,"props":1364,"children":1365},{"style":748},[1366],{"type":478,"value":1207},{"type":473,"tag":510,"props":1368,"children":1369},{"style":775},[1370],{"type":478,"value":1130},{"type":473,"tag":510,"props":1372,"children":1373},{"style":737},[1374],{"type":478,"value":1216},{"type":473,"tag":510,"props":1376,"children":1377},{"style":865},[1378],{"type":478,"value":1221},{"type":473,"tag":510,"props":1380,"children":1381},{"style":663},[1382],{"type":478,"value":1383}," // 跳过单词间空格\n",{"type":473,"tag":510,"props":1385,"children":1387},{"class":512,"line":1386},18,[1388,1393,1397,1401,1405],{"type":473,"tag":510,"props":1389,"children":1390},{"style":775},[1391],{"type":478,"value":1392},"    j",{"type":473,"tag":510,"props":1394,"children":1395},{"style":737},[1396],{"type":478,"value":740},{"type":473,"tag":510,"props":1398,"children":1399},{"style":775},[1400],{"type":478,"value":1055},{"type":473,"tag":510,"props":1402,"children":1403},{"style":865},[1404],{"type":478,"value":1221},{"type":473,"tag":510,"props":1406,"children":1407},{"style":663},[1408],{"type":478,"value":1409}," // 指针移动，指向下个单词的尾字符\n",{"type":473,"tag":510,"props":1411,"children":1413},{"class":512,"line":1412},19,[1414],{"type":473,"tag":510,"props":1415,"children":1416},{"style":748},[1417],{"type":478,"value":1418},"  }\n",{"type":473,"tag":510,"props":1420,"children":1422},{"class":512,"line":1421},20,[1423,1427,1431,1435,1439,1443,1447,1451,1455,1460,1464],{"type":473,"tag":510,"props":1424,"children":1425},{"style":769},[1426],{"type":478,"value":772},{"type":473,"tag":510,"props":1428,"children":1429},{"style":775},[1430],{"type":478,"value":1029},{"type":473,"tag":510,"props":1432,"children":1433},{"style":781},[1434],{"type":478,"value":784},{"type":473,"tag":510,"props":1436,"children":1437},{"style":731},[1438],{"type":478,"value":850},{"type":473,"tag":510,"props":1440,"children":1441},{"style":748},[1442],{"type":478,"value":794},{"type":473,"tag":510,"props":1444,"children":1445},{"style":797},[1446],{"type":478,"value":800},{"type":473,"tag":510,"props":1448,"children":1449},{"style":748},[1450],{"type":478,"value":805},{"type":473,"tag":510,"props":1452,"children":1453},{"style":781},[1454],{"type":478,"value":784},{"type":473,"tag":510,"props":1456,"children":1457},{"style":731},[1458],{"type":478,"value":1459},"trim",{"type":473,"tag":510,"props":1461,"children":1462},{"style":748},[1463],{"type":478,"value":841},{"type":473,"tag":510,"props":1465,"children":1466},{"style":865},[1467],{"type":478,"value":868},{"type":473,"tag":510,"props":1469,"children":1471},{"class":512,"line":1470},21,[1472,1476],{"type":473,"tag":510,"props":1473,"children":1474},{"style":748},[1475],{"type":478,"value":877},{"type":473,"tag":510,"props":1477,"children":1478},{"style":865},[1479],{"type":478,"value":868},{"type":473,"tag":1481,"props":1482,"children":1483},"style",{},[1484],{"type":478,"value":1485},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":466,"searchDepth":721,"depth":721,"links":1487},[1488,1489],{"id":635,"depth":522,"text":635},{"id":640,"depth":522,"text":640,"children":1490},[1491,1492],{"id":646,"depth":559,"text":646},{"id":884,"depth":559,"text":884},"markdown","content:1.algorithm:3.leetcode:3.major:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/3.major/151.reverse-words-in-a-string.md","md",[1499,1501],{"_path":174,"title":173,"description":1500},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":180,"title":179,"description":1502},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1713695847878]