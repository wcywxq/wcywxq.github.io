[{"data":1,"prerenderedAt":1580},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/reverse-words-in-a-string":500,"/algorithm/leetcode/major/reverse-words-in-a-string-surround":1575},[4,269,298,468,476,485],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":467},"代码考核","/code-assessment",[302,367,460],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,331,347,360],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328],{"title":311,"_path":312},"ajax","/code-assessment/source/native-api/ajax",{"title":314,"_path":315},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":317,"_path":318},"new 操作符","/code-assessment/source/native-api/new",{"title":320,"_path":321},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":323,"_path":324},"定时器","/code-assessment/source/native-api/timer",{"title":326,"_path":327},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":329,"_path":330},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":332,"_path":333,"children":334},"函数 Function","/code-assessment/source/function",[335,338,341,344],{"title":336,"_path":337},"函数防抖","/code-assessment/source/function/debounce",{"title":339,"_path":340},"函数节流","/code-assessment/source/function/throttle",{"title":342,"_path":343},"函数柯理化","/code-assessment/source/function/curry",{"title":345,"_path":346},"函数睡眠","/code-assessment/source/function/sleep",{"title":348,"_path":349,"children":350},"数组 Array","/code-assessment/source/array",[351,354,357],{"title":352,"_path":353},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":355,"_path":356},"数组扁平化","/code-assessment/source/array/flat",{"title":358,"_path":359},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":361,"_path":362,"children":363},"字符串 String","/code-assessment/source/string",[364],{"title":365,"_path":366},"repeat()","/code-assessment/source/string/repeat",{"title":368,"_path":369,"children":370},"业务场景","/code-assessment/scene",[371,396,406,409,412,415,418,421,424,427,430,433,436,439,442,445,448,451,454,457],{"title":372,"_path":373,"children":374},"Promise","/code-assessment/scene/promise",[375,378,381,384,387,390,393],{"title":376,"_path":377},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":379,"_path":380},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":382,"_path":383},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":385,"_path":386},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":388,"_path":389},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":391,"_path":392},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":394,"_path":395},"promise 每隔 1s 输出","/code-assessment/scene/promise/promise-output-every-1s",{"title":397,"_path":398,"children":399},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[400,403],{"title":401,"_path":402},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":404,"_path":405},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":407,"_path":408},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":410,"_path":411},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":413,"_path":414},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":416,"_path":417},"倒计时","/code-assessment/scene/countdown",{"title":419,"_path":420},"日期格式化","/code-assessment/scene/date-format",{"title":422,"_path":423},"实现前端路由","/code-assessment/scene/frontend-route",{"title":425,"_path":426},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":428,"_path":429},"lodash.get","/code-assessment/scene/lodash-get",{"title":431,"_path":432},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":434,"_path":435},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":437,"_path":438},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":440,"_path":441},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":443,"_path":444},"随机数","/code-assessment/scene/random-number",{"title":446,"_path":447},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":449,"_path":450},"sku 算法实现","/code-assessment/scene/sku",{"title":452,"_path":453},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":455,"_path":456},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":458,"_path":459},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":461,"_path":462,"children":463},"Ts 类型挑战","/code-assessment/type-challeges",[464],{"title":465,"_path":466},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":469,"_path":470,"children":471,"icon":475},"项目","/project",[472],{"title":473,"_path":474},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":477,"_path":478,"children":479,"icon":484},"设计模式","/design-mode",[480,481],{"title":477,"_path":478},{"title":482,"_path":483},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":486,"_path":487,"children":488,"icon":499},"后端语言","/backend-languages",[489],{"title":490,"_path":491,"children":492},"Python","/backend-languages/python",[493,496],{"title":494,"_path":495},"基础","/backend-languages/python/base",{"title":497,"_path":498},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":180,"_dir":501,"_draft":502,"_partial":502,"_locale":503,"title":179,"description":504,"url":505,"body":506,"_type":1570,"_id":1571,"_source":1572,"_file":1573,"_extension":1574},"major",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":507,"children":508,"toc":1563},"root",[509,516,521,526,531,536,566,571,603,608,639,644,664,669,675,680,686,934,939,1557],{"type":510,"tag":511,"props":512,"children":513},"element","p",{},[514],{"type":515,"value":504},"text",{"type":510,"tag":511,"props":517,"children":518},{},[519],{"type":515,"value":520},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":510,"tag":511,"props":522,"children":523},{},[524],{"type":515,"value":525},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":510,"tag":511,"props":527,"children":528},{},[529],{"type":515,"value":530},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":510,"tag":511,"props":532,"children":533},{},[534],{"type":515,"value":535},"示例 1：",{"type":510,"tag":537,"props":538,"children":541},"pre",{"className":539,"code":540,"language":515,"meta":503,"style":503},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[542],{"type":510,"tag":543,"props":544,"children":545},"code",{"__ignoreMap":503},[546,557],{"type":510,"tag":547,"props":548,"children":551},"span",{"class":549,"line":550},"line",1,[552],{"type":510,"tag":547,"props":553,"children":554},{},[555],{"type":515,"value":556},"输入：s = \"the sky is blue\"\n",{"type":510,"tag":547,"props":558,"children":560},{"class":549,"line":559},2,[561],{"type":510,"tag":547,"props":562,"children":563},{},[564],{"type":515,"value":565},"输出：\"blue is sky the\"\n",{"type":510,"tag":511,"props":567,"children":568},{},[569],{"type":515,"value":570},"示例 2：",{"type":510,"tag":537,"props":572,"children":574},{"className":539,"code":573,"language":515,"meta":503,"style":503},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[575],{"type":510,"tag":543,"props":576,"children":577},{"__ignoreMap":503},[578,586,594],{"type":510,"tag":547,"props":579,"children":580},{"class":549,"line":550},[581],{"type":510,"tag":547,"props":582,"children":583},{},[584],{"type":515,"value":585},"输入：s = \" hello world \"\n",{"type":510,"tag":547,"props":587,"children":588},{"class":549,"line":559},[589],{"type":510,"tag":547,"props":590,"children":591},{},[592],{"type":515,"value":593},"输出：\"world hello\"\n",{"type":510,"tag":547,"props":595,"children":597},{"class":549,"line":596},3,[598],{"type":510,"tag":547,"props":599,"children":600},{},[601],{"type":515,"value":602},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":510,"tag":511,"props":604,"children":605},{},[606],{"type":515,"value":607},"示例 3：",{"type":510,"tag":537,"props":609,"children":611},{"className":539,"code":610,"language":515,"meta":503,"style":503},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[612],{"type":510,"tag":543,"props":613,"children":614},{"__ignoreMap":503},[615,623,631],{"type":510,"tag":547,"props":616,"children":617},{"class":549,"line":550},[618],{"type":510,"tag":547,"props":619,"children":620},{},[621],{"type":515,"value":622},"输入：s = \"a good example\"\n",{"type":510,"tag":547,"props":624,"children":625},{"class":549,"line":559},[626],{"type":510,"tag":547,"props":627,"children":628},{},[629],{"type":515,"value":630},"输出：\"example good a\"\n",{"type":510,"tag":547,"props":632,"children":633},{"class":549,"line":596},[634],{"type":510,"tag":547,"props":635,"children":636},{},[637],{"type":515,"value":638},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":510,"tag":511,"props":640,"children":641},{},[642],{"type":515,"value":643},"提示：",{"type":510,"tag":645,"props":646,"children":647},"ul",{},[648,654,659],{"type":510,"tag":649,"props":650,"children":651},"li",{},[652],{"type":515,"value":653},"1 \u003C= s.length \u003C= 10^4",{"type":510,"tag":649,"props":655,"children":656},{},[657],{"type":515,"value":658},"s 包含英文大小写字母、数字和空格 ' '",{"type":510,"tag":649,"props":660,"children":661},{},[662],{"type":515,"value":663},"s 中 至少存在一个 单词",{"type":510,"tag":511,"props":665,"children":666},{},[667],{"type":515,"value":668},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":510,"tag":670,"props":671,"children":673},"h2",{"id":672},"解题思路",[674],{"type":515,"value":672},{"type":510,"tag":670,"props":676,"children":678},{"id":677},"实现",[679],{"type":515,"value":677},{"type":510,"tag":681,"props":682,"children":684},"h3",{"id":683},"语言特性",[685],{"type":515,"value":683},{"type":510,"tag":537,"props":687,"children":691},{"className":688,"code":689,"language":690,"meta":503,"style":503},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[692],{"type":510,"tag":543,"props":693,"children":694},{"__ignoreMap":503},[695,704,746,775,784,830,925],{"type":510,"tag":547,"props":696,"children":697},{"class":549,"line":550},[698],{"type":510,"tag":547,"props":699,"children":701},{"style":700},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[702],{"type":515,"value":703},"/**\n",{"type":510,"tag":547,"props":705,"children":706},{"class":549,"line":559},[707,712,718,724,729,735,740],{"type":510,"tag":547,"props":708,"children":709},{"style":700},[710],{"type":515,"value":711}," * ",{"type":510,"tag":547,"props":713,"children":715},{"style":714},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[716],{"type":515,"value":717},"@",{"type":510,"tag":547,"props":719,"children":721},{"style":720},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[722],{"type":515,"value":723},"param",{"type":510,"tag":547,"props":725,"children":726},{"style":714},[727],{"type":515,"value":728}," {",{"type":510,"tag":547,"props":730,"children":732},{"style":731},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[733],{"type":515,"value":734},"string",{"type":510,"tag":547,"props":736,"children":737},{"style":714},[738],{"type":515,"value":739},"}",{"type":510,"tag":547,"props":741,"children":743},{"style":742},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[744],{"type":515,"value":745}," s\n",{"type":510,"tag":547,"props":747,"children":748},{"class":549,"line":596},[749,753,757,762,766,770],{"type":510,"tag":547,"props":750,"children":751},{"style":700},[752],{"type":515,"value":711},{"type":510,"tag":547,"props":754,"children":755},{"style":714},[756],{"type":515,"value":717},{"type":510,"tag":547,"props":758,"children":759},{"style":720},[760],{"type":515,"value":761},"return",{"type":510,"tag":547,"props":763,"children":764},{"style":714},[765],{"type":515,"value":728},{"type":510,"tag":547,"props":767,"children":768},{"style":731},[769],{"type":515,"value":734},{"type":510,"tag":547,"props":771,"children":772},{"style":714},[773],{"type":515,"value":774},"}\n",{"type":510,"tag":547,"props":776,"children":778},{"class":549,"line":777},4,[779],{"type":510,"tag":547,"props":780,"children":781},{"style":700},[782],{"type":515,"value":783}," */\n",{"type":510,"tag":547,"props":785,"children":787},{"class":549,"line":786},5,[788,794,800,805,810,815,820,825],{"type":510,"tag":547,"props":789,"children":791},{"style":790},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[792],{"type":515,"value":793},"var",{"type":510,"tag":547,"props":795,"children":797},{"style":796},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[798],{"type":515,"value":799}," reverseWords",{"type":510,"tag":547,"props":801,"children":802},{"style":714},[803],{"type":515,"value":804}," =",{"type":510,"tag":547,"props":806,"children":807},{"style":790},[808],{"type":515,"value":809}," function",{"type":510,"tag":547,"props":811,"children":812},{"style":714},[813],{"type":515,"value":814}," (",{"type":510,"tag":547,"props":816,"children":817},{"style":742},[818],{"type":515,"value":819},"s",{"type":510,"tag":547,"props":821,"children":822},{"style":714},[823],{"type":515,"value":824},")",{"type":510,"tag":547,"props":826,"children":827},{"style":714},[828],{"type":515,"value":829}," {\n",{"type":510,"tag":547,"props":831,"children":833},{"class":549,"line":832},6,[834,839,844,849,854,859,865,870,875,880,884,889,893,898,903,908,912,916,920],{"type":510,"tag":547,"props":835,"children":836},{"style":720},[837],{"type":515,"value":838},"  return",{"type":510,"tag":547,"props":840,"children":841},{"style":742},[842],{"type":515,"value":843}," s",{"type":510,"tag":547,"props":845,"children":846},{"style":714},[847],{"type":515,"value":848},".",{"type":510,"tag":547,"props":850,"children":851},{"style":796},[852],{"type":515,"value":853},"split",{"type":510,"tag":547,"props":855,"children":856},{"style":714},[857],{"type":515,"value":858},"(",{"type":510,"tag":547,"props":860,"children":862},{"style":861},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[863],{"type":515,"value":864},"\"",{"type":510,"tag":547,"props":866,"children":867},{"style":861},[868],{"type":515,"value":869}," \"",{"type":510,"tag":547,"props":871,"children":872},{"style":714},[873],{"type":515,"value":874},").",{"type":510,"tag":547,"props":876,"children":877},{"style":796},[878],{"type":515,"value":879},"filter",{"type":510,"tag":547,"props":881,"children":882},{"style":714},[883],{"type":515,"value":858},{"type":510,"tag":547,"props":885,"children":886},{"style":742},[887],{"type":515,"value":888},"Boolean",{"type":510,"tag":547,"props":890,"children":891},{"style":714},[892],{"type":515,"value":874},{"type":510,"tag":547,"props":894,"children":895},{"style":796},[896],{"type":515,"value":897},"reverse",{"type":510,"tag":547,"props":899,"children":900},{"style":714},[901],{"type":515,"value":902},"().",{"type":510,"tag":547,"props":904,"children":905},{"style":796},[906],{"type":515,"value":907},"join",{"type":510,"tag":547,"props":909,"children":910},{"style":714},[911],{"type":515,"value":858},{"type":510,"tag":547,"props":913,"children":914},{"style":861},[915],{"type":515,"value":864},{"type":510,"tag":547,"props":917,"children":918},{"style":861},[919],{"type":515,"value":869},{"type":510,"tag":547,"props":921,"children":922},{"style":714},[923],{"type":515,"value":924},");\n",{"type":510,"tag":547,"props":926,"children":928},{"class":549,"line":927},7,[929],{"type":510,"tag":547,"props":930,"children":931},{"style":714},[932],{"type":515,"value":933},"};\n",{"type":510,"tag":681,"props":935,"children":937},{"id":936},"双指针",[938],{"type":515,"value":936},{"type":510,"tag":537,"props":940,"children":942},{"className":688,"code":941,"language":690,"meta":503,"style":503},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[943],{"type":510,"tag":543,"props":944,"children":945},{"__ignoreMap":503},[946,953,984,1011,1018,1053,1061,1069,1078,1087,1096,1119,1166,1191,1227,1311,1390,1468,1494,1503,1549],{"type":510,"tag":547,"props":947,"children":948},{"class":549,"line":550},[949],{"type":510,"tag":547,"props":950,"children":951},{"style":700},[952],{"type":515,"value":703},{"type":510,"tag":547,"props":954,"children":955},{"class":549,"line":559},[956,960,964,968,972,976,980],{"type":510,"tag":547,"props":957,"children":958},{"style":700},[959],{"type":515,"value":711},{"type":510,"tag":547,"props":961,"children":962},{"style":714},[963],{"type":515,"value":717},{"type":510,"tag":547,"props":965,"children":966},{"style":720},[967],{"type":515,"value":723},{"type":510,"tag":547,"props":969,"children":970},{"style":714},[971],{"type":515,"value":728},{"type":510,"tag":547,"props":973,"children":974},{"style":731},[975],{"type":515,"value":734},{"type":510,"tag":547,"props":977,"children":978},{"style":714},[979],{"type":515,"value":739},{"type":510,"tag":547,"props":981,"children":982},{"style":742},[983],{"type":515,"value":745},{"type":510,"tag":547,"props":985,"children":986},{"class":549,"line":596},[987,991,995,999,1003,1007],{"type":510,"tag":547,"props":988,"children":989},{"style":700},[990],{"type":515,"value":711},{"type":510,"tag":547,"props":992,"children":993},{"style":714},[994],{"type":515,"value":717},{"type":510,"tag":547,"props":996,"children":997},{"style":720},[998],{"type":515,"value":761},{"type":510,"tag":547,"props":1000,"children":1001},{"style":714},[1002],{"type":515,"value":728},{"type":510,"tag":547,"props":1004,"children":1005},{"style":731},[1006],{"type":515,"value":734},{"type":510,"tag":547,"props":1008,"children":1009},{"style":714},[1010],{"type":515,"value":774},{"type":510,"tag":547,"props":1012,"children":1013},{"class":549,"line":777},[1014],{"type":510,"tag":547,"props":1015,"children":1016},{"style":700},[1017],{"type":515,"value":783},{"type":510,"tag":547,"props":1019,"children":1020},{"class":549,"line":786},[1021,1025,1029,1033,1037,1041,1045,1049],{"type":510,"tag":547,"props":1022,"children":1023},{"style":790},[1024],{"type":515,"value":793},{"type":510,"tag":547,"props":1026,"children":1027},{"style":796},[1028],{"type":515,"value":799},{"type":510,"tag":547,"props":1030,"children":1031},{"style":714},[1032],{"type":515,"value":804},{"type":510,"tag":547,"props":1034,"children":1035},{"style":790},[1036],{"type":515,"value":809},{"type":510,"tag":547,"props":1038,"children":1039},{"style":714},[1040],{"type":515,"value":814},{"type":510,"tag":547,"props":1042,"children":1043},{"style":742},[1044],{"type":515,"value":819},{"type":510,"tag":547,"props":1046,"children":1047},{"style":714},[1048],{"type":515,"value":824},{"type":510,"tag":547,"props":1050,"children":1051},{"style":714},[1052],{"type":515,"value":829},{"type":510,"tag":547,"props":1054,"children":1055},{"class":549,"line":832},[1056],{"type":510,"tag":547,"props":1057,"children":1058},{"style":700},[1059],{"type":515,"value":1060},"  // 倒序遍历字符串\n",{"type":510,"tag":547,"props":1062,"children":1063},{"class":549,"line":927},[1064],{"type":510,"tag":547,"props":1065,"children":1066},{"style":700},[1067],{"type":515,"value":1068},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":510,"tag":547,"props":1070,"children":1072},{"class":549,"line":1071},8,[1073],{"type":510,"tag":547,"props":1074,"children":1075},{"style":700},[1076],{"type":515,"value":1077},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":510,"tag":547,"props":1079,"children":1081},{"class":549,"line":1080},9,[1082],{"type":510,"tag":547,"props":1083,"children":1084},{"style":700},[1085],{"type":515,"value":1086},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":510,"tag":547,"props":1088,"children":1090},{"class":549,"line":1089},10,[1091],{"type":510,"tag":547,"props":1092,"children":1093},{"style":700},[1094],{"type":515,"value":1095},"  // 4. 执行 j = i\n",{"type":510,"tag":547,"props":1097,"children":1099},{"class":549,"line":1098},11,[1100,1105,1110,1114],{"type":510,"tag":547,"props":1101,"children":1102},{"style":790},[1103],{"type":515,"value":1104},"  let",{"type":510,"tag":547,"props":1106,"children":1107},{"style":742},[1108],{"type":515,"value":1109}," res",{"type":510,"tag":547,"props":1111,"children":1112},{"style":714},[1113],{"type":515,"value":804},{"type":510,"tag":547,"props":1115,"children":1116},{"style":714},[1117],{"type":515,"value":1118}," [];\n",{"type":510,"tag":547,"props":1120,"children":1122},{"class":549,"line":1121},12,[1123,1127,1132,1136,1140,1144,1150,1155,1161],{"type":510,"tag":547,"props":1124,"children":1125},{"style":790},[1126],{"type":515,"value":1104},{"type":510,"tag":547,"props":1128,"children":1129},{"style":742},[1130],{"type":515,"value":1131}," i",{"type":510,"tag":547,"props":1133,"children":1134},{"style":714},[1135],{"type":515,"value":804},{"type":510,"tag":547,"props":1137,"children":1138},{"style":742},[1139],{"type":515,"value":843},{"type":510,"tag":547,"props":1141,"children":1142},{"style":714},[1143],{"type":515,"value":848},{"type":510,"tag":547,"props":1145,"children":1147},{"style":1146},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[1148],{"type":515,"value":1149},"length",{"type":510,"tag":547,"props":1151,"children":1152},{"style":790},[1153],{"type":515,"value":1154}," -",{"type":510,"tag":547,"props":1156,"children":1158},{"style":1157},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1159],{"type":515,"value":1160}," 1",{"type":510,"tag":547,"props":1162,"children":1163},{"style":714},[1164],{"type":515,"value":1165},";\n",{"type":510,"tag":547,"props":1167,"children":1169},{"class":549,"line":1168},13,[1170,1174,1179,1183,1187],{"type":510,"tag":547,"props":1171,"children":1172},{"style":790},[1173],{"type":515,"value":1104},{"type":510,"tag":547,"props":1175,"children":1176},{"style":742},[1177],{"type":515,"value":1178}," j",{"type":510,"tag":547,"props":1180,"children":1181},{"style":714},[1182],{"type":515,"value":804},{"type":510,"tag":547,"props":1184,"children":1185},{"style":742},[1186],{"type":515,"value":1131},{"type":510,"tag":547,"props":1188,"children":1189},{"style":714},[1190],{"type":515,"value":1165},{"type":510,"tag":547,"props":1192,"children":1194},{"class":549,"line":1193},14,[1195,1200,1204,1209,1214,1219,1223],{"type":510,"tag":547,"props":1196,"children":1197},{"style":720},[1198],{"type":515,"value":1199},"  while",{"type":510,"tag":547,"props":1201,"children":1202},{"style":714},[1203],{"type":515,"value":814},{"type":510,"tag":547,"props":1205,"children":1206},{"style":742},[1207],{"type":515,"value":1208},"i",{"type":510,"tag":547,"props":1210,"children":1211},{"style":714},[1212],{"type":515,"value":1213}," >=",{"type":510,"tag":547,"props":1215,"children":1216},{"style":1157},[1217],{"type":515,"value":1218}," 0",{"type":510,"tag":547,"props":1220,"children":1221},{"style":714},[1222],{"type":515,"value":824},{"type":510,"tag":547,"props":1224,"children":1225},{"style":714},[1226],{"type":515,"value":829},{"type":510,"tag":547,"props":1228,"children":1230},{"class":549,"line":1229},15,[1231,1236,1240,1244,1248,1252,1257,1261,1266,1270,1275,1280,1284,1288,1292,1296,1301,1306],{"type":510,"tag":547,"props":1232,"children":1233},{"style":720},[1234],{"type":515,"value":1235},"    while",{"type":510,"tag":547,"props":1237,"children":1238},{"style":714},[1239],{"type":515,"value":814},{"type":510,"tag":547,"props":1241,"children":1242},{"style":742},[1243],{"type":515,"value":1208},{"type":510,"tag":547,"props":1245,"children":1246},{"style":714},[1247],{"type":515,"value":1213},{"type":510,"tag":547,"props":1249,"children":1250},{"style":1157},[1251],{"type":515,"value":1218},{"type":510,"tag":547,"props":1253,"children":1254},{"style":790},[1255],{"type":515,"value":1256}," &&",{"type":510,"tag":547,"props":1258,"children":1259},{"style":742},[1260],{"type":515,"value":843},{"type":510,"tag":547,"props":1262,"children":1263},{"style":714},[1264],{"type":515,"value":1265},"[",{"type":510,"tag":547,"props":1267,"children":1268},{"style":742},[1269],{"type":515,"value":1208},{"type":510,"tag":547,"props":1271,"children":1272},{"style":714},[1273],{"type":515,"value":1274},"]",{"type":510,"tag":547,"props":1276,"children":1277},{"style":790},[1278],{"type":515,"value":1279}," !==",{"type":510,"tag":547,"props":1281,"children":1282},{"style":861},[1283],{"type":515,"value":869},{"type":510,"tag":547,"props":1285,"children":1286},{"style":861},[1287],{"type":515,"value":869},{"type":510,"tag":547,"props":1289,"children":1290},{"style":714},[1291],{"type":515,"value":824},{"type":510,"tag":547,"props":1293,"children":1294},{"style":742},[1295],{"type":515,"value":1131},{"type":510,"tag":547,"props":1297,"children":1298},{"style":790},[1299],{"type":515,"value":1300},"--",{"type":510,"tag":547,"props":1302,"children":1303},{"style":714},[1304],{"type":515,"value":1305},";",{"type":510,"tag":547,"props":1307,"children":1308},{"style":700},[1309],{"type":515,"value":1310}," // 搜索首个空格\n",{"type":510,"tag":547,"props":1312,"children":1314},{"class":549,"line":1313},16,[1315,1320,1324,1329,1333,1337,1341,1346,1350,1354,1359,1363,1368,1372,1376,1380,1385],{"type":510,"tag":547,"props":1316,"children":1317},{"style":742},[1318],{"type":515,"value":1319},"    res",{"type":510,"tag":547,"props":1321,"children":1322},{"style":714},[1323],{"type":515,"value":848},{"type":510,"tag":547,"props":1325,"children":1326},{"style":796},[1327],{"type":515,"value":1328},"push",{"type":510,"tag":547,"props":1330,"children":1331},{"style":714},[1332],{"type":515,"value":858},{"type":510,"tag":547,"props":1334,"children":1335},{"style":742},[1336],{"type":515,"value":819},{"type":510,"tag":547,"props":1338,"children":1339},{"style":714},[1340],{"type":515,"value":848},{"type":510,"tag":547,"props":1342,"children":1343},{"style":796},[1344],{"type":515,"value":1345},"substring",{"type":510,"tag":547,"props":1347,"children":1348},{"style":714},[1349],{"type":515,"value":858},{"type":510,"tag":547,"props":1351,"children":1352},{"style":742},[1353],{"type":515,"value":1208},{"type":510,"tag":547,"props":1355,"children":1356},{"style":790},[1357],{"type":515,"value":1358}," +",{"type":510,"tag":547,"props":1360,"children":1361},{"style":1157},[1362],{"type":515,"value":1160},{"type":510,"tag":547,"props":1364,"children":1365},{"style":714},[1366],{"type":515,"value":1367},",",{"type":510,"tag":547,"props":1369,"children":1370},{"style":742},[1371],{"type":515,"value":1178},{"type":510,"tag":547,"props":1373,"children":1374},{"style":790},[1375],{"type":515,"value":1358},{"type":510,"tag":547,"props":1377,"children":1378},{"style":1157},[1379],{"type":515,"value":1160},{"type":510,"tag":547,"props":1381,"children":1382},{"style":714},[1383],{"type":515,"value":1384},"));",{"type":510,"tag":547,"props":1386,"children":1387},{"style":700},[1388],{"type":515,"value":1389}," // 添加单词\n",{"type":510,"tag":547,"props":1391,"children":1393},{"class":549,"line":1392},17,[1394,1398,1402,1406,1410,1414,1418,1422,1426,1430,1434,1439,1443,1447,1451,1455,1459,1463],{"type":510,"tag":547,"props":1395,"children":1396},{"style":720},[1397],{"type":515,"value":1235},{"type":510,"tag":547,"props":1399,"children":1400},{"style":714},[1401],{"type":515,"value":814},{"type":510,"tag":547,"props":1403,"children":1404},{"style":742},[1405],{"type":515,"value":1208},{"type":510,"tag":547,"props":1407,"children":1408},{"style":714},[1409],{"type":515,"value":1213},{"type":510,"tag":547,"props":1411,"children":1412},{"style":1157},[1413],{"type":515,"value":1218},{"type":510,"tag":547,"props":1415,"children":1416},{"style":790},[1417],{"type":515,"value":1256},{"type":510,"tag":547,"props":1419,"children":1420},{"style":742},[1421],{"type":515,"value":843},{"type":510,"tag":547,"props":1423,"children":1424},{"style":714},[1425],{"type":515,"value":1265},{"type":510,"tag":547,"props":1427,"children":1428},{"style":742},[1429],{"type":515,"value":1208},{"type":510,"tag":547,"props":1431,"children":1432},{"style":714},[1433],{"type":515,"value":1274},{"type":510,"tag":547,"props":1435,"children":1436},{"style":790},[1437],{"type":515,"value":1438}," ===",{"type":510,"tag":547,"props":1440,"children":1441},{"style":861},[1442],{"type":515,"value":869},{"type":510,"tag":547,"props":1444,"children":1445},{"style":861},[1446],{"type":515,"value":869},{"type":510,"tag":547,"props":1448,"children":1449},{"style":714},[1450],{"type":515,"value":824},{"type":510,"tag":547,"props":1452,"children":1453},{"style":742},[1454],{"type":515,"value":1131},{"type":510,"tag":547,"props":1456,"children":1457},{"style":790},[1458],{"type":515,"value":1300},{"type":510,"tag":547,"props":1460,"children":1461},{"style":714},[1462],{"type":515,"value":1305},{"type":510,"tag":547,"props":1464,"children":1465},{"style":700},[1466],{"type":515,"value":1467}," // 跳过单词间空格\n",{"type":510,"tag":547,"props":1469,"children":1471},{"class":549,"line":1470},18,[1472,1477,1481,1485,1489],{"type":510,"tag":547,"props":1473,"children":1474},{"style":742},[1475],{"type":515,"value":1476},"    j",{"type":510,"tag":547,"props":1478,"children":1479},{"style":714},[1480],{"type":515,"value":804},{"type":510,"tag":547,"props":1482,"children":1483},{"style":742},[1484],{"type":515,"value":1131},{"type":510,"tag":547,"props":1486,"children":1487},{"style":714},[1488],{"type":515,"value":1305},{"type":510,"tag":547,"props":1490,"children":1491},{"style":700},[1492],{"type":515,"value":1493}," // 指针移动，指向下个单词的尾字符\n",{"type":510,"tag":547,"props":1495,"children":1497},{"class":549,"line":1496},19,[1498],{"type":510,"tag":547,"props":1499,"children":1500},{"style":714},[1501],{"type":515,"value":1502},"  }\n",{"type":510,"tag":547,"props":1504,"children":1506},{"class":549,"line":1505},20,[1507,1511,1515,1519,1523,1527,1531,1535,1539,1544],{"type":510,"tag":547,"props":1508,"children":1509},{"style":720},[1510],{"type":515,"value":838},{"type":510,"tag":547,"props":1512,"children":1513},{"style":742},[1514],{"type":515,"value":1109},{"type":510,"tag":547,"props":1516,"children":1517},{"style":714},[1518],{"type":515,"value":848},{"type":510,"tag":547,"props":1520,"children":1521},{"style":796},[1522],{"type":515,"value":907},{"type":510,"tag":547,"props":1524,"children":1525},{"style":714},[1526],{"type":515,"value":858},{"type":510,"tag":547,"props":1528,"children":1529},{"style":861},[1530],{"type":515,"value":864},{"type":510,"tag":547,"props":1532,"children":1533},{"style":861},[1534],{"type":515,"value":869},{"type":510,"tag":547,"props":1536,"children":1537},{"style":714},[1538],{"type":515,"value":874},{"type":510,"tag":547,"props":1540,"children":1541},{"style":796},[1542],{"type":515,"value":1543},"trim",{"type":510,"tag":547,"props":1545,"children":1546},{"style":714},[1547],{"type":515,"value":1548},"();\n",{"type":510,"tag":547,"props":1550,"children":1552},{"class":549,"line":1551},21,[1553],{"type":510,"tag":547,"props":1554,"children":1555},{"style":714},[1556],{"type":515,"value":933},{"type":510,"tag":1558,"props":1559,"children":1560},"style",{},[1561],{"type":515,"value":1562},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":503,"searchDepth":786,"depth":786,"links":1564},[1565,1566],{"id":672,"depth":559,"text":672},{"id":677,"depth":559,"text":677,"children":1567},[1568,1569],{"id":683,"depth":596,"text":683},{"id":936,"depth":596,"text":936},"markdown","content:1.algorithm:3.leetcode:3.major:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/3.major/151.reverse-words-in-a-string.md","md",[1576,1578],{"_path":177,"title":176,"description":1577},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":183,"title":182,"description":1579},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1714054338165]