[{"data":1,"prerenderedAt":1500},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/reverse-words-in-a-string":460,"/algorithm/leetcode/major/reverse-words-in-a-string-surround":1495},[4,263,292,437,445],{"title":5,"_path":6,"children":7,"icon":262},"算法","/algorithm",[8,25],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27,"children":28},"Leetcode 力扣","/algorithm/leetcode",[29,35,48],{"title":30,"_path":31,"children":32},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[33],{"title":34,"_path":31},"刷题索引",{"title":36,"_path":37,"children":38},"剑指 offer","/algorithm/leetcode/sword-ofter",[39,42,45],{"title":40,"_path":41},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":43,"_path":44},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":46,"_path":47},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":49,"_path":50,"children":51},"主题单","/algorithm/leetcode/major",[52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259],{"title":53,"_path":54},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":56,"_path":57},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":59,"_path":60},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":62,"_path":63},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":65,"_path":66},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":68,"_path":69},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":71,"_path":72},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":74,"_path":75},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":77,"_path":78},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":80,"_path":81},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":83,"_path":84},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":86,"_path":87},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":89,"_path":90},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":92,"_path":93},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":95,"_path":96},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":98,"_path":99},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":101,"_path":102},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":104,"_path":105},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":107,"_path":108},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":110,"_path":111},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":113,"_path":114},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":116,"_path":117},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":119,"_path":120},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":122,"_path":123},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":125,"_path":126},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":128,"_path":129},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":131,"_path":132},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":134,"_path":135},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":137,"_path":138},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":140,"_path":141},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":143,"_path":144},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":146,"_path":147},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":149,"_path":150},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":152,"_path":153},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":155,"_path":156},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":158,"_path":159},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":161,"_path":162},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":164,"_path":165},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":167,"_path":168},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":170,"_path":171},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":173,"_path":174},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":176,"_path":177},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":179,"_path":180},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":182,"_path":183},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":185,"_path":186},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":188,"_path":189},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":191,"_path":192},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":194,"_path":195},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":197,"_path":198},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":200,"_path":201},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":203,"_path":204},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":206,"_path":207},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":209,"_path":210},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":212,"_path":213},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":215,"_path":216},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":218,"_path":219},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":221,"_path":222},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":224,"_path":225},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":227,"_path":228},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":230,"_path":231},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":233,"_path":234},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":236,"_path":237},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":239,"_path":240},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":242,"_path":243},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":245,"_path":246},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":248,"_path":249},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":251,"_path":252},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":254,"_path":255},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":257,"_path":258},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":260,"_path":261},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":264,"_path":265,"children":266,"icon":291},"前端八股文","/frontend-endorsement",[267,278],{"title":268,"_path":269,"children":270},"构建工具","/frontend-endorsement/build-tools",[271],{"title":272,"_path":273,"children":274},"Webpack","/frontend-endorsement/build-tools/webpack",[275],{"title":276,"_path":277},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":279,"_path":280,"children":281},"Html","/frontend-endorsement/html",[282,285,288],{"title":283,"_path":284},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":286,"_path":287},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":289,"_path":290},"离线存储","/frontend-endorsement/html/offline-storage","i-heroicons-newspaper",{"title":293,"_path":294,"children":295,"icon":436},"前端代码考核","/frontend-code-assessment",[296,345,429],{"title":297,"_path":298,"children":299},"源码实现","/frontend-code-assessment/source",[300,325,338],{"title":301,"_path":302,"children":303},"原生 api","/frontend-code-assessment/source/native-api",[304,307,310,313,316,319,322],{"title":305,"_path":306},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":308,"_path":309},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":311,"_path":312},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":314,"_path":315},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":317,"_path":318},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":320,"_path":321},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":323,"_path":324},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":326,"_path":327,"children":328},"数组 Array","/frontend-code-assessment/source/array",[329,332,335],{"title":330,"_path":331},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":333,"_path":334},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":336,"_path":337},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":339,"_path":340,"children":341},"字符串 String","/frontend-code-assessment/source/string",[342],{"title":343,"_path":344},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":346,"_path":347,"children":348},"业务场景","/frontend-code-assessment/scene",[349,371,378,381,384,387,390,393,396,399,402,405,408,411,414,417,420,423,426],{"title":350,"_path":351,"children":352},"Promise","/frontend-code-assessment/scene/promise",[353,356,359,362,365,368],{"title":354,"_path":355},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":357,"_path":358},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":360,"_path":361},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":363,"_path":364},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":366,"_path":367},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":369,"_path":370},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":372,"_path":373,"children":374},"框架和设计模式","/frontend-code-assessment/scene/framework-and-design-mode",[375],{"title":376,"_path":377},"event bus","/frontend-code-assessment/scene/framework-and-design-mode/event-bus",{"title":379,"_path":380},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":382,"_path":383},"倒计时","/frontend-code-assessment/scene/countdown",{"title":385,"_path":386},"日期格式化","/frontend-code-assessment/scene/date-format",{"title":388,"_path":389},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":391,"_path":392},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":394,"_path":395},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":397,"_path":398},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":400,"_path":401},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":403,"_path":404},"对象是否循环引用","/frontend-code-assessment/scene/object-is-or-not-circular-reference",{"title":406,"_path":407},"解析 url 参数","/frontend-code-assessment/scene/parse-url-query",{"title":409,"_path":410},"原型链输出","/frontend-code-assessment/scene/prototype-chain-output",{"title":412,"_path":413},"随机数","/frontend-code-assessment/scene/random-number",{"title":415,"_path":416},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":418,"_path":419},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":421,"_path":422},"千分位分隔数字字符串","/frontend-code-assessment/scene/thousandth-separated-number-string",{"title":424,"_path":425},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":427,"_path":428},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":430,"_path":431,"children":432},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[433],{"title":434,"_path":435},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":438,"_path":439,"children":440,"icon":444},"项目","/pro",[441],{"title":442,"_path":443},"Vue 如何对 Store 进行单元测试","/pro/unit-test-vue-store","i-heroicons-squares-plus",{"title":446,"_path":447,"children":448,"icon":459},"后端语言","/backend-languages",[449],{"title":450,"_path":451,"children":452},"Python","/backend-languages/python",[453,456],{"title":454,"_path":455},"基础","/backend-languages/python/base",{"title":457,"_path":458},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":174,"_dir":461,"_draft":462,"_partial":462,"_locale":463,"title":173,"description":464,"url":465,"body":466,"_type":1490,"_id":1491,"_source":1492,"_file":1493,"_extension":1494},"major",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":467,"children":468,"toc":1483},"root",[469,476,481,486,491,496,526,531,563,568,599,604,624,629,635,640,646,879,884,1477],{"type":470,"tag":471,"props":472,"children":473},"element","p",{},[474],{"type":475,"value":464},"text",{"type":470,"tag":471,"props":477,"children":478},{},[479],{"type":475,"value":480},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":470,"tag":471,"props":482,"children":483},{},[484],{"type":475,"value":485},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":470,"tag":471,"props":487,"children":488},{},[489],{"type":475,"value":490},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":470,"tag":471,"props":492,"children":493},{},[494],{"type":475,"value":495},"示例 1：",{"type":470,"tag":497,"props":498,"children":501},"pre",{"className":499,"code":500,"language":475,"meta":463,"style":463},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[502],{"type":470,"tag":503,"props":504,"children":505},"code",{"__ignoreMap":463},[506,517],{"type":470,"tag":507,"props":508,"children":511},"span",{"class":509,"line":510},"line",1,[512],{"type":470,"tag":507,"props":513,"children":514},{},[515],{"type":475,"value":516},"输入：s = \"the sky is blue\"\n",{"type":470,"tag":507,"props":518,"children":520},{"class":509,"line":519},2,[521],{"type":470,"tag":507,"props":522,"children":523},{},[524],{"type":475,"value":525},"输出：\"blue is sky the\"\n",{"type":470,"tag":471,"props":527,"children":528},{},[529],{"type":475,"value":530},"示例 2：",{"type":470,"tag":497,"props":532,"children":534},{"className":499,"code":533,"language":475,"meta":463,"style":463},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[535],{"type":470,"tag":503,"props":536,"children":537},{"__ignoreMap":463},[538,546,554],{"type":470,"tag":507,"props":539,"children":540},{"class":509,"line":510},[541],{"type":470,"tag":507,"props":542,"children":543},{},[544],{"type":475,"value":545},"输入：s = \" hello world \"\n",{"type":470,"tag":507,"props":547,"children":548},{"class":509,"line":519},[549],{"type":470,"tag":507,"props":550,"children":551},{},[552],{"type":475,"value":553},"输出：\"world hello\"\n",{"type":470,"tag":507,"props":555,"children":557},{"class":509,"line":556},3,[558],{"type":470,"tag":507,"props":559,"children":560},{},[561],{"type":475,"value":562},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":470,"tag":471,"props":564,"children":565},{},[566],{"type":475,"value":567},"示例 3：",{"type":470,"tag":497,"props":569,"children":571},{"className":499,"code":570,"language":475,"meta":463,"style":463},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[572],{"type":470,"tag":503,"props":573,"children":574},{"__ignoreMap":463},[575,583,591],{"type":470,"tag":507,"props":576,"children":577},{"class":509,"line":510},[578],{"type":470,"tag":507,"props":579,"children":580},{},[581],{"type":475,"value":582},"输入：s = \"a good example\"\n",{"type":470,"tag":507,"props":584,"children":585},{"class":509,"line":519},[586],{"type":470,"tag":507,"props":587,"children":588},{},[589],{"type":475,"value":590},"输出：\"example good a\"\n",{"type":470,"tag":507,"props":592,"children":593},{"class":509,"line":556},[594],{"type":470,"tag":507,"props":595,"children":596},{},[597],{"type":475,"value":598},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":470,"tag":471,"props":600,"children":601},{},[602],{"type":475,"value":603},"提示：",{"type":470,"tag":605,"props":606,"children":607},"ul",{},[608,614,619],{"type":470,"tag":609,"props":610,"children":611},"li",{},[612],{"type":475,"value":613},"1 \u003C= s.length \u003C= 10^4",{"type":470,"tag":609,"props":615,"children":616},{},[617],{"type":475,"value":618},"s 包含英文大小写字母、数字和空格 ' '",{"type":470,"tag":609,"props":620,"children":621},{},[622],{"type":475,"value":623},"s 中 至少存在一个 单词",{"type":470,"tag":471,"props":625,"children":626},{},[627],{"type":475,"value":628},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":470,"tag":630,"props":631,"children":633},"h2",{"id":632},"解题思路",[634],{"type":475,"value":632},{"type":470,"tag":630,"props":636,"children":638},{"id":637},"实现",[639],{"type":475,"value":637},{"type":470,"tag":641,"props":642,"children":644},"h3",{"id":643},"语言特性",[645],{"type":475,"value":643},{"type":470,"tag":497,"props":647,"children":651},{"className":648,"code":649,"language":650,"meta":463,"style":463},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[652],{"type":470,"tag":503,"props":653,"children":654},{"__ignoreMap":463},[655,664,690,707,716,760,866],{"type":470,"tag":507,"props":656,"children":657},{"class":509,"line":510},[658],{"type":470,"tag":507,"props":659,"children":661},{"style":660},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[662],{"type":475,"value":663},"/**\n",{"type":470,"tag":507,"props":665,"children":666},{"class":509,"line":519},[667,672,678,684],{"type":470,"tag":507,"props":668,"children":669},{"style":660},[670],{"type":475,"value":671}," * ",{"type":470,"tag":507,"props":673,"children":675},{"style":674},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[676],{"type":475,"value":677},"@param",{"type":470,"tag":507,"props":679,"children":681},{"style":680},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[682],{"type":475,"value":683}," {string}",{"type":470,"tag":507,"props":685,"children":687},{"style":686},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[688],{"type":475,"value":689}," s\n",{"type":470,"tag":507,"props":691,"children":692},{"class":509,"line":556},[693,697,702],{"type":470,"tag":507,"props":694,"children":695},{"style":660},[696],{"type":475,"value":671},{"type":470,"tag":507,"props":698,"children":699},{"style":674},[700],{"type":475,"value":701},"@return",{"type":470,"tag":507,"props":703,"children":704},{"style":680},[705],{"type":475,"value":706}," {string}\n",{"type":470,"tag":507,"props":708,"children":710},{"class":509,"line":709},4,[711],{"type":470,"tag":507,"props":712,"children":713},{"style":660},[714],{"type":475,"value":715}," */\n",{"type":470,"tag":507,"props":717,"children":719},{"class":509,"line":718},5,[720,726,732,738,743,749,755],{"type":470,"tag":507,"props":721,"children":723},{"style":722},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[724],{"type":475,"value":725},"var",{"type":470,"tag":507,"props":727,"children":729},{"style":728},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[730],{"type":475,"value":731}," reverseWords",{"type":470,"tag":507,"props":733,"children":735},{"style":734},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[736],{"type":475,"value":737}," =",{"type":470,"tag":507,"props":739,"children":740},{"style":722},[741],{"type":475,"value":742}," function",{"type":470,"tag":507,"props":744,"children":746},{"style":745},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[747],{"type":475,"value":748}," (",{"type":470,"tag":507,"props":750,"children":752},{"style":751},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[753],{"type":475,"value":754},"s",{"type":470,"tag":507,"props":756,"children":757},{"style":745},[758],{"type":475,"value":759},") {\n",{"type":470,"tag":507,"props":761,"children":763},{"class":509,"line":762},6,[764,770,776,782,787,792,798,803,807,812,816,821,825,829,834,839,843,848,852,856,860],{"type":470,"tag":507,"props":765,"children":767},{"style":766},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[768],{"type":475,"value":769},"  return",{"type":470,"tag":507,"props":771,"children":773},{"style":772},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[774],{"type":475,"value":775}," s",{"type":470,"tag":507,"props":777,"children":779},{"style":778},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[780],{"type":475,"value":781},".",{"type":470,"tag":507,"props":783,"children":784},{"style":728},[785],{"type":475,"value":786},"split",{"type":470,"tag":507,"props":788,"children":789},{"style":745},[790],{"type":475,"value":791},"(",{"type":470,"tag":507,"props":793,"children":795},{"style":794},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[796],{"type":475,"value":797},"\" \"",{"type":470,"tag":507,"props":799,"children":800},{"style":745},[801],{"type":475,"value":802},")",{"type":470,"tag":507,"props":804,"children":805},{"style":778},[806],{"type":475,"value":781},{"type":470,"tag":507,"props":808,"children":809},{"style":728},[810],{"type":475,"value":811},"filter",{"type":470,"tag":507,"props":813,"children":814},{"style":745},[815],{"type":475,"value":791},{"type":470,"tag":507,"props":817,"children":818},{"style":772},[819],{"type":475,"value":820},"Boolean",{"type":470,"tag":507,"props":822,"children":823},{"style":745},[824],{"type":475,"value":802},{"type":470,"tag":507,"props":826,"children":827},{"style":778},[828],{"type":475,"value":781},{"type":470,"tag":507,"props":830,"children":831},{"style":728},[832],{"type":475,"value":833},"reverse",{"type":470,"tag":507,"props":835,"children":836},{"style":745},[837],{"type":475,"value":838},"()",{"type":470,"tag":507,"props":840,"children":841},{"style":778},[842],{"type":475,"value":781},{"type":470,"tag":507,"props":844,"children":845},{"style":728},[846],{"type":475,"value":847},"join",{"type":470,"tag":507,"props":849,"children":850},{"style":745},[851],{"type":475,"value":791},{"type":470,"tag":507,"props":853,"children":854},{"style":794},[855],{"type":475,"value":797},{"type":470,"tag":507,"props":857,"children":858},{"style":745},[859],{"type":475,"value":802},{"type":470,"tag":507,"props":861,"children":863},{"style":862},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[864],{"type":475,"value":865},";\n",{"type":470,"tag":507,"props":867,"children":869},{"class":509,"line":868},7,[870,875],{"type":470,"tag":507,"props":871,"children":872},{"style":745},[873],{"type":475,"value":874},"}",{"type":470,"tag":507,"props":876,"children":877},{"style":862},[878],{"type":475,"value":865},{"type":470,"tag":641,"props":880,"children":882},{"id":881},"双指针",[883],{"type":475,"value":881},{"type":470,"tag":497,"props":885,"children":887},{"className":648,"code":886,"language":650,"meta":463,"style":463},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[888],{"type":470,"tag":503,"props":889,"children":890},{"__ignoreMap":463},[891,898,917,932,939,970,978,986,995,1004,1013,1040,1085,1110,1142,1224,1307,1381,1407,1416,1465],{"type":470,"tag":507,"props":892,"children":893},{"class":509,"line":510},[894],{"type":470,"tag":507,"props":895,"children":896},{"style":660},[897],{"type":475,"value":663},{"type":470,"tag":507,"props":899,"children":900},{"class":509,"line":519},[901,905,909,913],{"type":470,"tag":507,"props":902,"children":903},{"style":660},[904],{"type":475,"value":671},{"type":470,"tag":507,"props":906,"children":907},{"style":674},[908],{"type":475,"value":677},{"type":470,"tag":507,"props":910,"children":911},{"style":680},[912],{"type":475,"value":683},{"type":470,"tag":507,"props":914,"children":915},{"style":686},[916],{"type":475,"value":689},{"type":470,"tag":507,"props":918,"children":919},{"class":509,"line":556},[920,924,928],{"type":470,"tag":507,"props":921,"children":922},{"style":660},[923],{"type":475,"value":671},{"type":470,"tag":507,"props":925,"children":926},{"style":674},[927],{"type":475,"value":701},{"type":470,"tag":507,"props":929,"children":930},{"style":680},[931],{"type":475,"value":706},{"type":470,"tag":507,"props":933,"children":934},{"class":509,"line":709},[935],{"type":470,"tag":507,"props":936,"children":937},{"style":660},[938],{"type":475,"value":715},{"type":470,"tag":507,"props":940,"children":941},{"class":509,"line":718},[942,946,950,954,958,962,966],{"type":470,"tag":507,"props":943,"children":944},{"style":722},[945],{"type":475,"value":725},{"type":470,"tag":507,"props":947,"children":948},{"style":728},[949],{"type":475,"value":731},{"type":470,"tag":507,"props":951,"children":952},{"style":734},[953],{"type":475,"value":737},{"type":470,"tag":507,"props":955,"children":956},{"style":722},[957],{"type":475,"value":742},{"type":470,"tag":507,"props":959,"children":960},{"style":745},[961],{"type":475,"value":748},{"type":470,"tag":507,"props":963,"children":964},{"style":751},[965],{"type":475,"value":754},{"type":470,"tag":507,"props":967,"children":968},{"style":745},[969],{"type":475,"value":759},{"type":470,"tag":507,"props":971,"children":972},{"class":509,"line":762},[973],{"type":470,"tag":507,"props":974,"children":975},{"style":660},[976],{"type":475,"value":977},"  // 倒序遍历字符串\n",{"type":470,"tag":507,"props":979,"children":980},{"class":509,"line":868},[981],{"type":470,"tag":507,"props":982,"children":983},{"style":660},[984],{"type":475,"value":985},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":470,"tag":507,"props":987,"children":989},{"class":509,"line":988},8,[990],{"type":470,"tag":507,"props":991,"children":992},{"style":660},[993],{"type":475,"value":994},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":470,"tag":507,"props":996,"children":998},{"class":509,"line":997},9,[999],{"type":470,"tag":507,"props":1000,"children":1001},{"style":660},[1002],{"type":475,"value":1003},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":470,"tag":507,"props":1005,"children":1007},{"class":509,"line":1006},10,[1008],{"type":470,"tag":507,"props":1009,"children":1010},{"style":660},[1011],{"type":475,"value":1012},"  // 4. 执行 j = i\n",{"type":470,"tag":507,"props":1014,"children":1016},{"class":509,"line":1015},11,[1017,1022,1027,1031,1036],{"type":470,"tag":507,"props":1018,"children":1019},{"style":722},[1020],{"type":475,"value":1021},"  let",{"type":470,"tag":507,"props":1023,"children":1024},{"style":772},[1025],{"type":475,"value":1026}," res",{"type":470,"tag":507,"props":1028,"children":1029},{"style":734},[1030],{"type":475,"value":737},{"type":470,"tag":507,"props":1032,"children":1033},{"style":745},[1034],{"type":475,"value":1035}," []",{"type":470,"tag":507,"props":1037,"children":1038},{"style":862},[1039],{"type":475,"value":865},{"type":470,"tag":507,"props":1041,"children":1043},{"class":509,"line":1042},12,[1044,1048,1053,1057,1061,1065,1070,1075,1081],{"type":470,"tag":507,"props":1045,"children":1046},{"style":722},[1047],{"type":475,"value":1021},{"type":470,"tag":507,"props":1049,"children":1050},{"style":772},[1051],{"type":475,"value":1052}," i",{"type":470,"tag":507,"props":1054,"children":1055},{"style":734},[1056],{"type":475,"value":737},{"type":470,"tag":507,"props":1058,"children":1059},{"style":772},[1060],{"type":475,"value":775},{"type":470,"tag":507,"props":1062,"children":1063},{"style":778},[1064],{"type":475,"value":781},{"type":470,"tag":507,"props":1066,"children":1067},{"style":745},[1068],{"type":475,"value":1069},"length ",{"type":470,"tag":507,"props":1071,"children":1072},{"style":734},[1073],{"type":475,"value":1074},"-",{"type":470,"tag":507,"props":1076,"children":1078},{"style":1077},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[1079],{"type":475,"value":1080}," 1",{"type":470,"tag":507,"props":1082,"children":1083},{"style":862},[1084],{"type":475,"value":865},{"type":470,"tag":507,"props":1086,"children":1088},{"class":509,"line":1087},13,[1089,1093,1098,1102,1106],{"type":470,"tag":507,"props":1090,"children":1091},{"style":722},[1092],{"type":475,"value":1021},{"type":470,"tag":507,"props":1094,"children":1095},{"style":772},[1096],{"type":475,"value":1097}," j",{"type":470,"tag":507,"props":1099,"children":1100},{"style":734},[1101],{"type":475,"value":737},{"type":470,"tag":507,"props":1103,"children":1104},{"style":772},[1105],{"type":475,"value":1052},{"type":470,"tag":507,"props":1107,"children":1108},{"style":862},[1109],{"type":475,"value":865},{"type":470,"tag":507,"props":1111,"children":1113},{"class":509,"line":1112},14,[1114,1119,1123,1128,1133,1138],{"type":470,"tag":507,"props":1115,"children":1116},{"style":766},[1117],{"type":475,"value":1118},"  while",{"type":470,"tag":507,"props":1120,"children":1121},{"style":745},[1122],{"type":475,"value":748},{"type":470,"tag":507,"props":1124,"children":1125},{"style":772},[1126],{"type":475,"value":1127},"i",{"type":470,"tag":507,"props":1129,"children":1130},{"style":734},[1131],{"type":475,"value":1132}," >=",{"type":470,"tag":507,"props":1134,"children":1135},{"style":1077},[1136],{"type":475,"value":1137}," 0",{"type":470,"tag":507,"props":1139,"children":1140},{"style":745},[1141],{"type":475,"value":759},{"type":470,"tag":507,"props":1143,"children":1145},{"class":509,"line":1144},15,[1146,1151,1155,1159,1163,1167,1172,1176,1181,1185,1190,1195,1200,1205,1209,1214,1219],{"type":470,"tag":507,"props":1147,"children":1148},{"style":766},[1149],{"type":475,"value":1150},"    while",{"type":470,"tag":507,"props":1152,"children":1153},{"style":745},[1154],{"type":475,"value":748},{"type":470,"tag":507,"props":1156,"children":1157},{"style":772},[1158],{"type":475,"value":1127},{"type":470,"tag":507,"props":1160,"children":1161},{"style":734},[1162],{"type":475,"value":1132},{"type":470,"tag":507,"props":1164,"children":1165},{"style":1077},[1166],{"type":475,"value":1137},{"type":470,"tag":507,"props":1168,"children":1169},{"style":734},[1170],{"type":475,"value":1171}," &&",{"type":470,"tag":507,"props":1173,"children":1174},{"style":772},[1175],{"type":475,"value":775},{"type":470,"tag":507,"props":1177,"children":1178},{"style":745},[1179],{"type":475,"value":1180},"[",{"type":470,"tag":507,"props":1182,"children":1183},{"style":772},[1184],{"type":475,"value":1127},{"type":470,"tag":507,"props":1186,"children":1187},{"style":745},[1188],{"type":475,"value":1189},"] ",{"type":470,"tag":507,"props":1191,"children":1192},{"style":734},[1193],{"type":475,"value":1194},"!==",{"type":470,"tag":507,"props":1196,"children":1197},{"style":794},[1198],{"type":475,"value":1199}," \" \"",{"type":470,"tag":507,"props":1201,"children":1202},{"style":745},[1203],{"type":475,"value":1204},") ",{"type":470,"tag":507,"props":1206,"children":1207},{"style":772},[1208],{"type":475,"value":1127},{"type":470,"tag":507,"props":1210,"children":1211},{"style":734},[1212],{"type":475,"value":1213},"--",{"type":470,"tag":507,"props":1215,"children":1216},{"style":862},[1217],{"type":475,"value":1218},";",{"type":470,"tag":507,"props":1220,"children":1221},{"style":660},[1222],{"type":475,"value":1223}," // 搜索首个空格\n",{"type":470,"tag":507,"props":1225,"children":1227},{"class":509,"line":1226},16,[1228,1233,1237,1242,1246,1250,1254,1259,1263,1267,1272,1276,1281,1285,1289,1293,1298,1302],{"type":470,"tag":507,"props":1229,"children":1230},{"style":772},[1231],{"type":475,"value":1232},"    res",{"type":470,"tag":507,"props":1234,"children":1235},{"style":778},[1236],{"type":475,"value":781},{"type":470,"tag":507,"props":1238,"children":1239},{"style":728},[1240],{"type":475,"value":1241},"push",{"type":470,"tag":507,"props":1243,"children":1244},{"style":745},[1245],{"type":475,"value":791},{"type":470,"tag":507,"props":1247,"children":1248},{"style":772},[1249],{"type":475,"value":754},{"type":470,"tag":507,"props":1251,"children":1252},{"style":778},[1253],{"type":475,"value":781},{"type":470,"tag":507,"props":1255,"children":1256},{"style":728},[1257],{"type":475,"value":1258},"substring",{"type":470,"tag":507,"props":1260,"children":1261},{"style":745},[1262],{"type":475,"value":791},{"type":470,"tag":507,"props":1264,"children":1265},{"style":772},[1266],{"type":475,"value":1127},{"type":470,"tag":507,"props":1268,"children":1269},{"style":734},[1270],{"type":475,"value":1271}," +",{"type":470,"tag":507,"props":1273,"children":1274},{"style":1077},[1275],{"type":475,"value":1080},{"type":470,"tag":507,"props":1277,"children":1278},{"style":862},[1279],{"type":475,"value":1280},",",{"type":470,"tag":507,"props":1282,"children":1283},{"style":772},[1284],{"type":475,"value":1097},{"type":470,"tag":507,"props":1286,"children":1287},{"style":734},[1288],{"type":475,"value":1271},{"type":470,"tag":507,"props":1290,"children":1291},{"style":1077},[1292],{"type":475,"value":1080},{"type":470,"tag":507,"props":1294,"children":1295},{"style":745},[1296],{"type":475,"value":1297},"))",{"type":470,"tag":507,"props":1299,"children":1300},{"style":862},[1301],{"type":475,"value":1218},{"type":470,"tag":507,"props":1303,"children":1304},{"style":660},[1305],{"type":475,"value":1306}," // 添加单词\n",{"type":470,"tag":507,"props":1308,"children":1310},{"class":509,"line":1309},17,[1311,1315,1319,1323,1327,1331,1335,1339,1343,1347,1351,1356,1360,1364,1368,1372,1376],{"type":470,"tag":507,"props":1312,"children":1313},{"style":766},[1314],{"type":475,"value":1150},{"type":470,"tag":507,"props":1316,"children":1317},{"style":745},[1318],{"type":475,"value":748},{"type":470,"tag":507,"props":1320,"children":1321},{"style":772},[1322],{"type":475,"value":1127},{"type":470,"tag":507,"props":1324,"children":1325},{"style":734},[1326],{"type":475,"value":1132},{"type":470,"tag":507,"props":1328,"children":1329},{"style":1077},[1330],{"type":475,"value":1137},{"type":470,"tag":507,"props":1332,"children":1333},{"style":734},[1334],{"type":475,"value":1171},{"type":470,"tag":507,"props":1336,"children":1337},{"style":772},[1338],{"type":475,"value":775},{"type":470,"tag":507,"props":1340,"children":1341},{"style":745},[1342],{"type":475,"value":1180},{"type":470,"tag":507,"props":1344,"children":1345},{"style":772},[1346],{"type":475,"value":1127},{"type":470,"tag":507,"props":1348,"children":1349},{"style":745},[1350],{"type":475,"value":1189},{"type":470,"tag":507,"props":1352,"children":1353},{"style":734},[1354],{"type":475,"value":1355},"===",{"type":470,"tag":507,"props":1357,"children":1358},{"style":794},[1359],{"type":475,"value":1199},{"type":470,"tag":507,"props":1361,"children":1362},{"style":745},[1363],{"type":475,"value":1204},{"type":470,"tag":507,"props":1365,"children":1366},{"style":772},[1367],{"type":475,"value":1127},{"type":470,"tag":507,"props":1369,"children":1370},{"style":734},[1371],{"type":475,"value":1213},{"type":470,"tag":507,"props":1373,"children":1374},{"style":862},[1375],{"type":475,"value":1218},{"type":470,"tag":507,"props":1377,"children":1378},{"style":660},[1379],{"type":475,"value":1380}," // 跳过单词间空格\n",{"type":470,"tag":507,"props":1382,"children":1384},{"class":509,"line":1383},18,[1385,1390,1394,1398,1402],{"type":470,"tag":507,"props":1386,"children":1387},{"style":772},[1388],{"type":475,"value":1389},"    j",{"type":470,"tag":507,"props":1391,"children":1392},{"style":734},[1393],{"type":475,"value":737},{"type":470,"tag":507,"props":1395,"children":1396},{"style":772},[1397],{"type":475,"value":1052},{"type":470,"tag":507,"props":1399,"children":1400},{"style":862},[1401],{"type":475,"value":1218},{"type":470,"tag":507,"props":1403,"children":1404},{"style":660},[1405],{"type":475,"value":1406}," // 指针移动，指向下个单词的尾字符\n",{"type":470,"tag":507,"props":1408,"children":1410},{"class":509,"line":1409},19,[1411],{"type":470,"tag":507,"props":1412,"children":1413},{"style":745},[1414],{"type":475,"value":1415},"  }\n",{"type":470,"tag":507,"props":1417,"children":1419},{"class":509,"line":1418},20,[1420,1424,1428,1432,1436,1440,1444,1448,1452,1457,1461],{"type":470,"tag":507,"props":1421,"children":1422},{"style":766},[1423],{"type":475,"value":769},{"type":470,"tag":507,"props":1425,"children":1426},{"style":772},[1427],{"type":475,"value":1026},{"type":470,"tag":507,"props":1429,"children":1430},{"style":778},[1431],{"type":475,"value":781},{"type":470,"tag":507,"props":1433,"children":1434},{"style":728},[1435],{"type":475,"value":847},{"type":470,"tag":507,"props":1437,"children":1438},{"style":745},[1439],{"type":475,"value":791},{"type":470,"tag":507,"props":1441,"children":1442},{"style":794},[1443],{"type":475,"value":797},{"type":470,"tag":507,"props":1445,"children":1446},{"style":745},[1447],{"type":475,"value":802},{"type":470,"tag":507,"props":1449,"children":1450},{"style":778},[1451],{"type":475,"value":781},{"type":470,"tag":507,"props":1453,"children":1454},{"style":728},[1455],{"type":475,"value":1456},"trim",{"type":470,"tag":507,"props":1458,"children":1459},{"style":745},[1460],{"type":475,"value":838},{"type":470,"tag":507,"props":1462,"children":1463},{"style":862},[1464],{"type":475,"value":865},{"type":470,"tag":507,"props":1466,"children":1468},{"class":509,"line":1467},21,[1469,1473],{"type":470,"tag":507,"props":1470,"children":1471},{"style":745},[1472],{"type":475,"value":874},{"type":470,"tag":507,"props":1474,"children":1475},{"style":862},[1476],{"type":475,"value":865},{"type":470,"tag":1478,"props":1479,"children":1480},"style",{},[1481],{"type":475,"value":1482},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":463,"searchDepth":718,"depth":718,"links":1484},[1485,1486],{"id":632,"depth":519,"text":632},{"id":637,"depth":519,"text":637,"children":1487},[1488,1489],{"id":643,"depth":556,"text":643},{"id":881,"depth":556,"text":881},"markdown","content:1.algorithm:3.leetcode:3.major:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/3.major/151.reverse-words-in-a-string.md","md",[1496,1498],{"_path":171,"title":170,"description":1497},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":177,"title":176,"description":1499},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1713626404168]