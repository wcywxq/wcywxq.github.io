[{"data":1,"prerenderedAt":1639},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/reverse-words-in-a-string":559,"/algorithm/leetcode/major/reverse-words-in-a-string-surround":1634},[4,272,318,536,544],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":317},"八股文","/endorsement",[276,286,293,304],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"JavaScript","/endorsement/javascript",[290],{"title":291,"_path":292},"语法和数据类型","/endorsement/javascript/grammar-data-types",{"title":294,"_path":295,"children":296},"构建工具","/endorsement/build-tools",[297],{"title":298,"_path":299,"children":300},"Webpack","/endorsement/build-tools/webpack",[301],{"title":302,"_path":303},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":305,"_path":306,"children":307},"Html","/endorsement/html",[308,311,314],{"title":309,"_path":310},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":312,"_path":313},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":315,"_path":316},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":319,"_path":320,"children":321,"icon":535},"代码考核","/code-assessment",[322,427,528],{"title":323,"_path":324,"children":325},"源码实现","/code-assessment/source",[326,360,376,404,411,418,421,424],{"title":327,"_path":328,"children":329},"原生 api","/code-assessment/source/native-api",[330,333,336,339,342,345,348,351,354,357],{"title":331,"_path":332},"polyfill","/code-assessment/source/native-api/polyfill",{"title":334,"_path":335},"ajax","/code-assessment/source/native-api/ajax",{"title":337,"_path":338},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":340,"_path":341},"new 操作符","/code-assessment/source/native-api/new",{"title":343,"_path":344},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":346,"_path":347},"定时器","/code-assessment/source/native-api/timer",{"title":349,"_path":350},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":352,"_path":353},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":355,"_path":356},"extends","/code-assessment/source/native-api/extends",{"title":358,"_path":359},"Promise","/code-assessment/source/native-api/promise",{"title":361,"_path":362,"children":363},"函数 Function","/code-assessment/source/function",[364,367,370,373],{"title":365,"_path":366},"函数防抖","/code-assessment/source/function/debounce",{"title":368,"_path":369},"函数节流","/code-assessment/source/function/throttle",{"title":371,"_path":372},"函数柯理化","/code-assessment/source/function/curry",{"title":374,"_path":375},"函数睡眠","/code-assessment/source/function/sleep",{"title":377,"_path":378,"children":379},"数组 Array","/code-assessment/source/array",[380,383,386,389,392,395,398,401],{"title":381,"_path":382},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":384,"_path":385},"数组扁平化","/code-assessment/source/array/flat",{"title":387,"_path":388},"原型方法","/code-assessment/source/array/prototype-method",{"title":390,"_path":391},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":393,"_path":394},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":396,"_path":397},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":399,"_path":400},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":402,"_path":403},"二维数组","/code-assessment/source/array/2d-array",{"title":405,"_path":406,"children":407},"字符串 String","/code-assessment/source/string",[408],{"title":409,"_path":410},"repeat()","/code-assessment/source/string/repeat",{"title":412,"_path":413,"children":414},"集合 Set","/code-assessment/source/set",[415],{"title":416,"_path":417},"遍历集合","/code-assessment/source/set/traverse",{"title":419,"_path":420},"获取通用类型","/code-assessment/source/get-generic-type",{"title":422,"_path":423},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":425,"_path":426},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":428,"_path":429,"children":430},"业务场景","/code-assessment/scene",[431,461,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525],{"title":358,"_path":432,"children":433},"/code-assessment/scene/promise",[434,437,440,443,446,449,452,455,458],{"title":435,"_path":436},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":438,"_path":439},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":441,"_path":442},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":444,"_path":445},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":447,"_path":448},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":450,"_path":451},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":453,"_path":454},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":456,"_path":457},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":459,"_path":460},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":462,"_path":463,"children":464},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[465,468],{"title":466,"_path":467},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":469,"_path":470},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":472,"_path":473},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":475,"_path":476},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":478,"_path":479},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":481,"_path":482},"倒计时","/code-assessment/scene/countdown",{"title":484,"_path":485},"日期格式化","/code-assessment/scene/date-format",{"title":487,"_path":488},"实现前端路由","/code-assessment/scene/frontend-route",{"title":490,"_path":491},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":493,"_path":494},"lodash.get","/code-assessment/scene/lodash-get",{"title":496,"_path":497},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":499,"_path":500},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":502,"_path":503},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":505,"_path":506},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":508,"_path":509},"随机数","/code-assessment/scene/random-number",{"title":511,"_path":512},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":514,"_path":515},"sku 算法实现","/code-assessment/scene/sku",{"title":517,"_path":518},"整数分割","/code-assessment/scene/split-number",{"title":520,"_path":521},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":523,"_path":524},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":526,"_path":527},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":529,"_path":530,"children":531},"Ts 类型挑战","/code-assessment/type-challeges",[532],{"title":533,"_path":534},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":537,"_path":538,"children":539,"icon":543},"项目","/project",[540],{"title":541,"_path":542},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":545,"_path":546,"children":547,"icon":558},"后端语言","/backend-languages",[548],{"title":549,"_path":550,"children":551},"Python","/backend-languages/python",[552,555],{"title":553,"_path":554},"基础","/backend-languages/python/base",{"title":556,"_path":557},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":180,"_dir":560,"_draft":561,"_partial":561,"_locale":562,"title":179,"description":563,"url":564,"body":565,"_type":1629,"_id":1630,"_source":1631,"_file":1632,"_extension":1633},"major",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":566,"children":567,"toc":1622},"root",[568,575,580,585,590,595,625,630,662,667,698,703,723,728,734,739,745,993,998,1616],{"type":569,"tag":570,"props":571,"children":572},"element","p",{},[573],{"type":574,"value":563},"text",{"type":569,"tag":570,"props":576,"children":577},{},[578],{"type":574,"value":579},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":569,"tag":570,"props":581,"children":582},{},[583],{"type":574,"value":584},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":569,"tag":570,"props":586,"children":587},{},[588],{"type":574,"value":589},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":569,"tag":570,"props":591,"children":592},{},[593],{"type":574,"value":594},"示例 1：",{"type":569,"tag":596,"props":597,"children":600},"pre",{"className":598,"code":599,"language":574,"meta":562,"style":562},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[601],{"type":569,"tag":602,"props":603,"children":604},"code",{"__ignoreMap":562},[605,616],{"type":569,"tag":606,"props":607,"children":610},"span",{"class":608,"line":609},"line",1,[611],{"type":569,"tag":606,"props":612,"children":613},{},[614],{"type":574,"value":615},"输入：s = \"the sky is blue\"\n",{"type":569,"tag":606,"props":617,"children":619},{"class":608,"line":618},2,[620],{"type":569,"tag":606,"props":621,"children":622},{},[623],{"type":574,"value":624},"输出：\"blue is sky the\"\n",{"type":569,"tag":570,"props":626,"children":627},{},[628],{"type":574,"value":629},"示例 2：",{"type":569,"tag":596,"props":631,"children":633},{"className":598,"code":632,"language":574,"meta":562,"style":562},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[634],{"type":569,"tag":602,"props":635,"children":636},{"__ignoreMap":562},[637,645,653],{"type":569,"tag":606,"props":638,"children":639},{"class":608,"line":609},[640],{"type":569,"tag":606,"props":641,"children":642},{},[643],{"type":574,"value":644},"输入：s = \" hello world \"\n",{"type":569,"tag":606,"props":646,"children":647},{"class":608,"line":618},[648],{"type":569,"tag":606,"props":649,"children":650},{},[651],{"type":574,"value":652},"输出：\"world hello\"\n",{"type":569,"tag":606,"props":654,"children":656},{"class":608,"line":655},3,[657],{"type":569,"tag":606,"props":658,"children":659},{},[660],{"type":574,"value":661},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":569,"tag":570,"props":663,"children":664},{},[665],{"type":574,"value":666},"示例 3：",{"type":569,"tag":596,"props":668,"children":670},{"className":598,"code":669,"language":574,"meta":562,"style":562},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[671],{"type":569,"tag":602,"props":672,"children":673},{"__ignoreMap":562},[674,682,690],{"type":569,"tag":606,"props":675,"children":676},{"class":608,"line":609},[677],{"type":569,"tag":606,"props":678,"children":679},{},[680],{"type":574,"value":681},"输入：s = \"a good example\"\n",{"type":569,"tag":606,"props":683,"children":684},{"class":608,"line":618},[685],{"type":569,"tag":606,"props":686,"children":687},{},[688],{"type":574,"value":689},"输出：\"example good a\"\n",{"type":569,"tag":606,"props":691,"children":692},{"class":608,"line":655},[693],{"type":569,"tag":606,"props":694,"children":695},{},[696],{"type":574,"value":697},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":569,"tag":570,"props":699,"children":700},{},[701],{"type":574,"value":702},"提示：",{"type":569,"tag":704,"props":705,"children":706},"ul",{},[707,713,718],{"type":569,"tag":708,"props":709,"children":710},"li",{},[711],{"type":574,"value":712},"1 \u003C= s.length \u003C= 10^4",{"type":569,"tag":708,"props":714,"children":715},{},[716],{"type":574,"value":717},"s 包含英文大小写字母、数字和空格 ' '",{"type":569,"tag":708,"props":719,"children":720},{},[721],{"type":574,"value":722},"s 中 至少存在一个 单词",{"type":569,"tag":570,"props":724,"children":725},{},[726],{"type":574,"value":727},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":569,"tag":729,"props":730,"children":732},"h2",{"id":731},"解题思路",[733],{"type":574,"value":731},{"type":569,"tag":729,"props":735,"children":737},{"id":736},"实现",[738],{"type":574,"value":736},{"type":569,"tag":740,"props":741,"children":743},"h3",{"id":742},"语言特性",[744],{"type":574,"value":742},{"type":569,"tag":596,"props":746,"children":750},{"className":747,"code":748,"language":749,"meta":562,"style":562},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[751],{"type":569,"tag":602,"props":752,"children":753},{"__ignoreMap":562},[754,763,805,834,843,889,984],{"type":569,"tag":606,"props":755,"children":756},{"class":608,"line":609},[757],{"type":569,"tag":606,"props":758,"children":760},{"style":759},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[761],{"type":574,"value":762},"/**\n",{"type":569,"tag":606,"props":764,"children":765},{"class":608,"line":618},[766,771,777,783,788,794,799],{"type":569,"tag":606,"props":767,"children":768},{"style":759},[769],{"type":574,"value":770}," * ",{"type":569,"tag":606,"props":772,"children":774},{"style":773},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[775],{"type":574,"value":776},"@",{"type":569,"tag":606,"props":778,"children":780},{"style":779},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[781],{"type":574,"value":782},"param",{"type":569,"tag":606,"props":784,"children":785},{"style":773},[786],{"type":574,"value":787}," {",{"type":569,"tag":606,"props":789,"children":791},{"style":790},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[792],{"type":574,"value":793},"string",{"type":569,"tag":606,"props":795,"children":796},{"style":773},[797],{"type":574,"value":798},"}",{"type":569,"tag":606,"props":800,"children":802},{"style":801},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[803],{"type":574,"value":804}," s\n",{"type":569,"tag":606,"props":806,"children":807},{"class":608,"line":655},[808,812,816,821,825,829],{"type":569,"tag":606,"props":809,"children":810},{"style":759},[811],{"type":574,"value":770},{"type":569,"tag":606,"props":813,"children":814},{"style":773},[815],{"type":574,"value":776},{"type":569,"tag":606,"props":817,"children":818},{"style":779},[819],{"type":574,"value":820},"return",{"type":569,"tag":606,"props":822,"children":823},{"style":773},[824],{"type":574,"value":787},{"type":569,"tag":606,"props":826,"children":827},{"style":790},[828],{"type":574,"value":793},{"type":569,"tag":606,"props":830,"children":831},{"style":773},[832],{"type":574,"value":833},"}\n",{"type":569,"tag":606,"props":835,"children":837},{"class":608,"line":836},4,[838],{"type":569,"tag":606,"props":839,"children":840},{"style":759},[841],{"type":574,"value":842}," */\n",{"type":569,"tag":606,"props":844,"children":846},{"class":608,"line":845},5,[847,853,859,864,869,874,879,884],{"type":569,"tag":606,"props":848,"children":850},{"style":849},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[851],{"type":574,"value":852},"var",{"type":569,"tag":606,"props":854,"children":856},{"style":855},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[857],{"type":574,"value":858}," reverseWords",{"type":569,"tag":606,"props":860,"children":861},{"style":773},[862],{"type":574,"value":863}," =",{"type":569,"tag":606,"props":865,"children":866},{"style":849},[867],{"type":574,"value":868}," function",{"type":569,"tag":606,"props":870,"children":871},{"style":773},[872],{"type":574,"value":873}," (",{"type":569,"tag":606,"props":875,"children":876},{"style":801},[877],{"type":574,"value":878},"s",{"type":569,"tag":606,"props":880,"children":881},{"style":773},[882],{"type":574,"value":883},")",{"type":569,"tag":606,"props":885,"children":886},{"style":773},[887],{"type":574,"value":888}," {\n",{"type":569,"tag":606,"props":890,"children":892},{"class":608,"line":891},6,[893,898,903,908,913,918,924,929,934,939,943,948,952,957,962,967,971,975,979],{"type":569,"tag":606,"props":894,"children":895},{"style":779},[896],{"type":574,"value":897},"  return",{"type":569,"tag":606,"props":899,"children":900},{"style":801},[901],{"type":574,"value":902}," s",{"type":569,"tag":606,"props":904,"children":905},{"style":773},[906],{"type":574,"value":907},".",{"type":569,"tag":606,"props":909,"children":910},{"style":855},[911],{"type":574,"value":912},"split",{"type":569,"tag":606,"props":914,"children":915},{"style":773},[916],{"type":574,"value":917},"(",{"type":569,"tag":606,"props":919,"children":921},{"style":920},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[922],{"type":574,"value":923},"\"",{"type":569,"tag":606,"props":925,"children":926},{"style":920},[927],{"type":574,"value":928}," \"",{"type":569,"tag":606,"props":930,"children":931},{"style":773},[932],{"type":574,"value":933},").",{"type":569,"tag":606,"props":935,"children":936},{"style":855},[937],{"type":574,"value":938},"filter",{"type":569,"tag":606,"props":940,"children":941},{"style":773},[942],{"type":574,"value":917},{"type":569,"tag":606,"props":944,"children":945},{"style":801},[946],{"type":574,"value":947},"Boolean",{"type":569,"tag":606,"props":949,"children":950},{"style":773},[951],{"type":574,"value":933},{"type":569,"tag":606,"props":953,"children":954},{"style":855},[955],{"type":574,"value":956},"reverse",{"type":569,"tag":606,"props":958,"children":959},{"style":773},[960],{"type":574,"value":961},"().",{"type":569,"tag":606,"props":963,"children":964},{"style":855},[965],{"type":574,"value":966},"join",{"type":569,"tag":606,"props":968,"children":969},{"style":773},[970],{"type":574,"value":917},{"type":569,"tag":606,"props":972,"children":973},{"style":920},[974],{"type":574,"value":923},{"type":569,"tag":606,"props":976,"children":977},{"style":920},[978],{"type":574,"value":928},{"type":569,"tag":606,"props":980,"children":981},{"style":773},[982],{"type":574,"value":983},");\n",{"type":569,"tag":606,"props":985,"children":987},{"class":608,"line":986},7,[988],{"type":569,"tag":606,"props":989,"children":990},{"style":773},[991],{"type":574,"value":992},"};\n",{"type":569,"tag":740,"props":994,"children":996},{"id":995},"双指针",[997],{"type":574,"value":995},{"type":569,"tag":596,"props":999,"children":1001},{"className":747,"code":1000,"language":749,"meta":562,"style":562},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[1002],{"type":569,"tag":602,"props":1003,"children":1004},{"__ignoreMap":562},[1005,1012,1043,1070,1077,1112,1120,1128,1137,1146,1155,1178,1225,1250,1286,1370,1449,1527,1553,1562,1608],{"type":569,"tag":606,"props":1006,"children":1007},{"class":608,"line":609},[1008],{"type":569,"tag":606,"props":1009,"children":1010},{"style":759},[1011],{"type":574,"value":762},{"type":569,"tag":606,"props":1013,"children":1014},{"class":608,"line":618},[1015,1019,1023,1027,1031,1035,1039],{"type":569,"tag":606,"props":1016,"children":1017},{"style":759},[1018],{"type":574,"value":770},{"type":569,"tag":606,"props":1020,"children":1021},{"style":773},[1022],{"type":574,"value":776},{"type":569,"tag":606,"props":1024,"children":1025},{"style":779},[1026],{"type":574,"value":782},{"type":569,"tag":606,"props":1028,"children":1029},{"style":773},[1030],{"type":574,"value":787},{"type":569,"tag":606,"props":1032,"children":1033},{"style":790},[1034],{"type":574,"value":793},{"type":569,"tag":606,"props":1036,"children":1037},{"style":773},[1038],{"type":574,"value":798},{"type":569,"tag":606,"props":1040,"children":1041},{"style":801},[1042],{"type":574,"value":804},{"type":569,"tag":606,"props":1044,"children":1045},{"class":608,"line":655},[1046,1050,1054,1058,1062,1066],{"type":569,"tag":606,"props":1047,"children":1048},{"style":759},[1049],{"type":574,"value":770},{"type":569,"tag":606,"props":1051,"children":1052},{"style":773},[1053],{"type":574,"value":776},{"type":569,"tag":606,"props":1055,"children":1056},{"style":779},[1057],{"type":574,"value":820},{"type":569,"tag":606,"props":1059,"children":1060},{"style":773},[1061],{"type":574,"value":787},{"type":569,"tag":606,"props":1063,"children":1064},{"style":790},[1065],{"type":574,"value":793},{"type":569,"tag":606,"props":1067,"children":1068},{"style":773},[1069],{"type":574,"value":833},{"type":569,"tag":606,"props":1071,"children":1072},{"class":608,"line":836},[1073],{"type":569,"tag":606,"props":1074,"children":1075},{"style":759},[1076],{"type":574,"value":842},{"type":569,"tag":606,"props":1078,"children":1079},{"class":608,"line":845},[1080,1084,1088,1092,1096,1100,1104,1108],{"type":569,"tag":606,"props":1081,"children":1082},{"style":849},[1083],{"type":574,"value":852},{"type":569,"tag":606,"props":1085,"children":1086},{"style":855},[1087],{"type":574,"value":858},{"type":569,"tag":606,"props":1089,"children":1090},{"style":773},[1091],{"type":574,"value":863},{"type":569,"tag":606,"props":1093,"children":1094},{"style":849},[1095],{"type":574,"value":868},{"type":569,"tag":606,"props":1097,"children":1098},{"style":773},[1099],{"type":574,"value":873},{"type":569,"tag":606,"props":1101,"children":1102},{"style":801},[1103],{"type":574,"value":878},{"type":569,"tag":606,"props":1105,"children":1106},{"style":773},[1107],{"type":574,"value":883},{"type":569,"tag":606,"props":1109,"children":1110},{"style":773},[1111],{"type":574,"value":888},{"type":569,"tag":606,"props":1113,"children":1114},{"class":608,"line":891},[1115],{"type":569,"tag":606,"props":1116,"children":1117},{"style":759},[1118],{"type":574,"value":1119},"  // 倒序遍历字符串\n",{"type":569,"tag":606,"props":1121,"children":1122},{"class":608,"line":986},[1123],{"type":569,"tag":606,"props":1124,"children":1125},{"style":759},[1126],{"type":574,"value":1127},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":569,"tag":606,"props":1129,"children":1131},{"class":608,"line":1130},8,[1132],{"type":569,"tag":606,"props":1133,"children":1134},{"style":759},[1135],{"type":574,"value":1136},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":569,"tag":606,"props":1138,"children":1140},{"class":608,"line":1139},9,[1141],{"type":569,"tag":606,"props":1142,"children":1143},{"style":759},[1144],{"type":574,"value":1145},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":569,"tag":606,"props":1147,"children":1149},{"class":608,"line":1148},10,[1150],{"type":569,"tag":606,"props":1151,"children":1152},{"style":759},[1153],{"type":574,"value":1154},"  // 4. 执行 j = i\n",{"type":569,"tag":606,"props":1156,"children":1158},{"class":608,"line":1157},11,[1159,1164,1169,1173],{"type":569,"tag":606,"props":1160,"children":1161},{"style":849},[1162],{"type":574,"value":1163},"  let",{"type":569,"tag":606,"props":1165,"children":1166},{"style":801},[1167],{"type":574,"value":1168}," res",{"type":569,"tag":606,"props":1170,"children":1171},{"style":773},[1172],{"type":574,"value":863},{"type":569,"tag":606,"props":1174,"children":1175},{"style":773},[1176],{"type":574,"value":1177}," [];\n",{"type":569,"tag":606,"props":1179,"children":1181},{"class":608,"line":1180},12,[1182,1186,1191,1195,1199,1203,1209,1214,1220],{"type":569,"tag":606,"props":1183,"children":1184},{"style":849},[1185],{"type":574,"value":1163},{"type":569,"tag":606,"props":1187,"children":1188},{"style":801},[1189],{"type":574,"value":1190}," i",{"type":569,"tag":606,"props":1192,"children":1193},{"style":773},[1194],{"type":574,"value":863},{"type":569,"tag":606,"props":1196,"children":1197},{"style":801},[1198],{"type":574,"value":902},{"type":569,"tag":606,"props":1200,"children":1201},{"style":773},[1202],{"type":574,"value":907},{"type":569,"tag":606,"props":1204,"children":1206},{"style":1205},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[1207],{"type":574,"value":1208},"length",{"type":569,"tag":606,"props":1210,"children":1211},{"style":849},[1212],{"type":574,"value":1213}," -",{"type":569,"tag":606,"props":1215,"children":1217},{"style":1216},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1218],{"type":574,"value":1219}," 1",{"type":569,"tag":606,"props":1221,"children":1222},{"style":773},[1223],{"type":574,"value":1224},";\n",{"type":569,"tag":606,"props":1226,"children":1228},{"class":608,"line":1227},13,[1229,1233,1238,1242,1246],{"type":569,"tag":606,"props":1230,"children":1231},{"style":849},[1232],{"type":574,"value":1163},{"type":569,"tag":606,"props":1234,"children":1235},{"style":801},[1236],{"type":574,"value":1237}," j",{"type":569,"tag":606,"props":1239,"children":1240},{"style":773},[1241],{"type":574,"value":863},{"type":569,"tag":606,"props":1243,"children":1244},{"style":801},[1245],{"type":574,"value":1190},{"type":569,"tag":606,"props":1247,"children":1248},{"style":773},[1249],{"type":574,"value":1224},{"type":569,"tag":606,"props":1251,"children":1253},{"class":608,"line":1252},14,[1254,1259,1263,1268,1273,1278,1282],{"type":569,"tag":606,"props":1255,"children":1256},{"style":779},[1257],{"type":574,"value":1258},"  while",{"type":569,"tag":606,"props":1260,"children":1261},{"style":773},[1262],{"type":574,"value":873},{"type":569,"tag":606,"props":1264,"children":1265},{"style":801},[1266],{"type":574,"value":1267},"i",{"type":569,"tag":606,"props":1269,"children":1270},{"style":773},[1271],{"type":574,"value":1272}," >=",{"type":569,"tag":606,"props":1274,"children":1275},{"style":1216},[1276],{"type":574,"value":1277}," 0",{"type":569,"tag":606,"props":1279,"children":1280},{"style":773},[1281],{"type":574,"value":883},{"type":569,"tag":606,"props":1283,"children":1284},{"style":773},[1285],{"type":574,"value":888},{"type":569,"tag":606,"props":1287,"children":1289},{"class":608,"line":1288},15,[1290,1295,1299,1303,1307,1311,1316,1320,1325,1329,1334,1339,1343,1347,1351,1355,1360,1365],{"type":569,"tag":606,"props":1291,"children":1292},{"style":779},[1293],{"type":574,"value":1294},"    while",{"type":569,"tag":606,"props":1296,"children":1297},{"style":773},[1298],{"type":574,"value":873},{"type":569,"tag":606,"props":1300,"children":1301},{"style":801},[1302],{"type":574,"value":1267},{"type":569,"tag":606,"props":1304,"children":1305},{"style":773},[1306],{"type":574,"value":1272},{"type":569,"tag":606,"props":1308,"children":1309},{"style":1216},[1310],{"type":574,"value":1277},{"type":569,"tag":606,"props":1312,"children":1313},{"style":849},[1314],{"type":574,"value":1315}," &&",{"type":569,"tag":606,"props":1317,"children":1318},{"style":801},[1319],{"type":574,"value":902},{"type":569,"tag":606,"props":1321,"children":1322},{"style":773},[1323],{"type":574,"value":1324},"[",{"type":569,"tag":606,"props":1326,"children":1327},{"style":801},[1328],{"type":574,"value":1267},{"type":569,"tag":606,"props":1330,"children":1331},{"style":773},[1332],{"type":574,"value":1333},"]",{"type":569,"tag":606,"props":1335,"children":1336},{"style":849},[1337],{"type":574,"value":1338}," !==",{"type":569,"tag":606,"props":1340,"children":1341},{"style":920},[1342],{"type":574,"value":928},{"type":569,"tag":606,"props":1344,"children":1345},{"style":920},[1346],{"type":574,"value":928},{"type":569,"tag":606,"props":1348,"children":1349},{"style":773},[1350],{"type":574,"value":883},{"type":569,"tag":606,"props":1352,"children":1353},{"style":801},[1354],{"type":574,"value":1190},{"type":569,"tag":606,"props":1356,"children":1357},{"style":849},[1358],{"type":574,"value":1359},"--",{"type":569,"tag":606,"props":1361,"children":1362},{"style":773},[1363],{"type":574,"value":1364},";",{"type":569,"tag":606,"props":1366,"children":1367},{"style":759},[1368],{"type":574,"value":1369}," // 搜索首个空格\n",{"type":569,"tag":606,"props":1371,"children":1373},{"class":608,"line":1372},16,[1374,1379,1383,1388,1392,1396,1400,1405,1409,1413,1418,1422,1427,1431,1435,1439,1444],{"type":569,"tag":606,"props":1375,"children":1376},{"style":801},[1377],{"type":574,"value":1378},"    res",{"type":569,"tag":606,"props":1380,"children":1381},{"style":773},[1382],{"type":574,"value":907},{"type":569,"tag":606,"props":1384,"children":1385},{"style":855},[1386],{"type":574,"value":1387},"push",{"type":569,"tag":606,"props":1389,"children":1390},{"style":773},[1391],{"type":574,"value":917},{"type":569,"tag":606,"props":1393,"children":1394},{"style":801},[1395],{"type":574,"value":878},{"type":569,"tag":606,"props":1397,"children":1398},{"style":773},[1399],{"type":574,"value":907},{"type":569,"tag":606,"props":1401,"children":1402},{"style":855},[1403],{"type":574,"value":1404},"substring",{"type":569,"tag":606,"props":1406,"children":1407},{"style":773},[1408],{"type":574,"value":917},{"type":569,"tag":606,"props":1410,"children":1411},{"style":801},[1412],{"type":574,"value":1267},{"type":569,"tag":606,"props":1414,"children":1415},{"style":849},[1416],{"type":574,"value":1417}," +",{"type":569,"tag":606,"props":1419,"children":1420},{"style":1216},[1421],{"type":574,"value":1219},{"type":569,"tag":606,"props":1423,"children":1424},{"style":773},[1425],{"type":574,"value":1426},",",{"type":569,"tag":606,"props":1428,"children":1429},{"style":801},[1430],{"type":574,"value":1237},{"type":569,"tag":606,"props":1432,"children":1433},{"style":849},[1434],{"type":574,"value":1417},{"type":569,"tag":606,"props":1436,"children":1437},{"style":1216},[1438],{"type":574,"value":1219},{"type":569,"tag":606,"props":1440,"children":1441},{"style":773},[1442],{"type":574,"value":1443},"));",{"type":569,"tag":606,"props":1445,"children":1446},{"style":759},[1447],{"type":574,"value":1448}," // 添加单词\n",{"type":569,"tag":606,"props":1450,"children":1452},{"class":608,"line":1451},17,[1453,1457,1461,1465,1469,1473,1477,1481,1485,1489,1493,1498,1502,1506,1510,1514,1518,1522],{"type":569,"tag":606,"props":1454,"children":1455},{"style":779},[1456],{"type":574,"value":1294},{"type":569,"tag":606,"props":1458,"children":1459},{"style":773},[1460],{"type":574,"value":873},{"type":569,"tag":606,"props":1462,"children":1463},{"style":801},[1464],{"type":574,"value":1267},{"type":569,"tag":606,"props":1466,"children":1467},{"style":773},[1468],{"type":574,"value":1272},{"type":569,"tag":606,"props":1470,"children":1471},{"style":1216},[1472],{"type":574,"value":1277},{"type":569,"tag":606,"props":1474,"children":1475},{"style":849},[1476],{"type":574,"value":1315},{"type":569,"tag":606,"props":1478,"children":1479},{"style":801},[1480],{"type":574,"value":902},{"type":569,"tag":606,"props":1482,"children":1483},{"style":773},[1484],{"type":574,"value":1324},{"type":569,"tag":606,"props":1486,"children":1487},{"style":801},[1488],{"type":574,"value":1267},{"type":569,"tag":606,"props":1490,"children":1491},{"style":773},[1492],{"type":574,"value":1333},{"type":569,"tag":606,"props":1494,"children":1495},{"style":849},[1496],{"type":574,"value":1497}," ===",{"type":569,"tag":606,"props":1499,"children":1500},{"style":920},[1501],{"type":574,"value":928},{"type":569,"tag":606,"props":1503,"children":1504},{"style":920},[1505],{"type":574,"value":928},{"type":569,"tag":606,"props":1507,"children":1508},{"style":773},[1509],{"type":574,"value":883},{"type":569,"tag":606,"props":1511,"children":1512},{"style":801},[1513],{"type":574,"value":1190},{"type":569,"tag":606,"props":1515,"children":1516},{"style":849},[1517],{"type":574,"value":1359},{"type":569,"tag":606,"props":1519,"children":1520},{"style":773},[1521],{"type":574,"value":1364},{"type":569,"tag":606,"props":1523,"children":1524},{"style":759},[1525],{"type":574,"value":1526}," // 跳过单词间空格\n",{"type":569,"tag":606,"props":1528,"children":1530},{"class":608,"line":1529},18,[1531,1536,1540,1544,1548],{"type":569,"tag":606,"props":1532,"children":1533},{"style":801},[1534],{"type":574,"value":1535},"    j",{"type":569,"tag":606,"props":1537,"children":1538},{"style":773},[1539],{"type":574,"value":863},{"type":569,"tag":606,"props":1541,"children":1542},{"style":801},[1543],{"type":574,"value":1190},{"type":569,"tag":606,"props":1545,"children":1546},{"style":773},[1547],{"type":574,"value":1364},{"type":569,"tag":606,"props":1549,"children":1550},{"style":759},[1551],{"type":574,"value":1552}," // 指针移动，指向下个单词的尾字符\n",{"type":569,"tag":606,"props":1554,"children":1556},{"class":608,"line":1555},19,[1557],{"type":569,"tag":606,"props":1558,"children":1559},{"style":773},[1560],{"type":574,"value":1561},"  }\n",{"type":569,"tag":606,"props":1563,"children":1565},{"class":608,"line":1564},20,[1566,1570,1574,1578,1582,1586,1590,1594,1598,1603],{"type":569,"tag":606,"props":1567,"children":1568},{"style":779},[1569],{"type":574,"value":897},{"type":569,"tag":606,"props":1571,"children":1572},{"style":801},[1573],{"type":574,"value":1168},{"type":569,"tag":606,"props":1575,"children":1576},{"style":773},[1577],{"type":574,"value":907},{"type":569,"tag":606,"props":1579,"children":1580},{"style":855},[1581],{"type":574,"value":966},{"type":569,"tag":606,"props":1583,"children":1584},{"style":773},[1585],{"type":574,"value":917},{"type":569,"tag":606,"props":1587,"children":1588},{"style":920},[1589],{"type":574,"value":923},{"type":569,"tag":606,"props":1591,"children":1592},{"style":920},[1593],{"type":574,"value":928},{"type":569,"tag":606,"props":1595,"children":1596},{"style":773},[1597],{"type":574,"value":933},{"type":569,"tag":606,"props":1599,"children":1600},{"style":855},[1601],{"type":574,"value":1602},"trim",{"type":569,"tag":606,"props":1604,"children":1605},{"style":773},[1606],{"type":574,"value":1607},"();\n",{"type":569,"tag":606,"props":1609,"children":1611},{"class":608,"line":1610},21,[1612],{"type":569,"tag":606,"props":1613,"children":1614},{"style":773},[1615],{"type":574,"value":992},{"type":569,"tag":1617,"props":1618,"children":1619},"style",{},[1620],{"type":574,"value":1621},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":562,"searchDepth":845,"depth":845,"links":1623},[1624,1625],{"id":731,"depth":618,"text":731},{"id":736,"depth":618,"text":736,"children":1626},[1627,1628],{"id":742,"depth":655,"text":742},{"id":995,"depth":655,"text":995},"markdown","content:1.algorithm:3.leetcode:3.major:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/3.major/151.reverse-words-in-a-string.md","md",[1635,1637],{"_path":177,"title":176,"description":1636},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":183,"title":182,"description":1638},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1717731140146]