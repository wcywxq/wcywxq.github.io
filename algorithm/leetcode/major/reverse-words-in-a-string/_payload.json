[{"data":1,"prerenderedAt":1623},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/reverse-words-in-a-string":543,"/algorithm/leetcode/major/reverse-words-in-a-string-surround":1618},[4,269,298,511,519,528],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":510},"代码考核","/code-assessment",[302,404,503],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,337,353,381,388,395,398,401],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328,331,334],{"title":311,"_path":312},"polyfill","/code-assessment/source/native-api/polyfill",{"title":314,"_path":315},"ajax","/code-assessment/source/native-api/ajax",{"title":317,"_path":318},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":320,"_path":321},"new 操作符","/code-assessment/source/native-api/new",{"title":323,"_path":324},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":326,"_path":327},"定时器","/code-assessment/source/native-api/timer",{"title":329,"_path":330},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":332,"_path":333},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":335,"_path":336},"extends","/code-assessment/source/native-api/extends",{"title":338,"_path":339,"children":340},"函数 Function","/code-assessment/source/function",[341,344,347,350],{"title":342,"_path":343},"函数防抖","/code-assessment/source/function/debounce",{"title":345,"_path":346},"函数节流","/code-assessment/source/function/throttle",{"title":348,"_path":349},"函数柯理化","/code-assessment/source/function/curry",{"title":351,"_path":352},"函数睡眠","/code-assessment/source/function/sleep",{"title":354,"_path":355,"children":356},"数组 Array","/code-assessment/source/array",[357,360,363,366,369,372,375,378],{"title":358,"_path":359},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":361,"_path":362},"数组扁平化","/code-assessment/source/array/flat",{"title":364,"_path":365},"原型方法","/code-assessment/source/array/prototype-method",{"title":367,"_path":368},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":370,"_path":371},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":373,"_path":374},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":376,"_path":377},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":379,"_path":380},"二维数组","/code-assessment/source/array/2d-array",{"title":382,"_path":383,"children":384},"字符串 String","/code-assessment/source/string",[385],{"title":386,"_path":387},"repeat()","/code-assessment/source/string/repeat",{"title":389,"_path":390,"children":391},"集合 Set","/code-assessment/source/set",[392],{"title":393,"_path":394},"遍历集合","/code-assessment/source/set/traverse",{"title":396,"_path":397},"获取通用类型","/code-assessment/source/get-generic-type",{"title":399,"_path":400},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":402,"_path":403},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":405,"_path":406,"children":407},"业务场景","/code-assessment/scene",[408,439,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500],{"title":409,"_path":410,"children":411},"Promise","/code-assessment/scene/promise",[412,415,418,421,424,427,430,433,436],{"title":413,"_path":414},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":416,"_path":417},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":419,"_path":420},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":422,"_path":423},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":425,"_path":426},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":428,"_path":429},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":431,"_path":432},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":434,"_path":435},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":437,"_path":438},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":440,"_path":441,"children":442},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[443,446],{"title":444,"_path":445},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":447,"_path":448},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":450,"_path":451},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":453,"_path":454},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":456,"_path":457},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":459,"_path":460},"倒计时","/code-assessment/scene/countdown",{"title":462,"_path":463},"日期格式化","/code-assessment/scene/date-format",{"title":465,"_path":466},"实现前端路由","/code-assessment/scene/frontend-route",{"title":468,"_path":469},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":471,"_path":472},"lodash.get","/code-assessment/scene/lodash-get",{"title":474,"_path":475},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":477,"_path":478},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":480,"_path":481},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":483,"_path":484},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":486,"_path":487},"随机数","/code-assessment/scene/random-number",{"title":489,"_path":490},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":492,"_path":493},"sku 算法实现","/code-assessment/scene/sku",{"title":495,"_path":496},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":498,"_path":499},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":501,"_path":502},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":504,"_path":505,"children":506},"Ts 类型挑战","/code-assessment/type-challeges",[507],{"title":508,"_path":509},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":512,"_path":513,"children":514,"icon":518},"项目","/project",[515],{"title":516,"_path":517},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":520,"_path":521,"children":522,"icon":527},"设计模式","/design-mode",[523,524],{"title":520,"_path":521},{"title":525,"_path":526},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":529,"_path":530,"children":531,"icon":542},"后端语言","/backend-languages",[532],{"title":533,"_path":534,"children":535},"Python","/backend-languages/python",[536,539],{"title":537,"_path":538},"基础","/backend-languages/python/base",{"title":540,"_path":541},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":180,"_dir":544,"_draft":545,"_partial":545,"_locale":546,"title":179,"description":547,"url":548,"body":549,"_type":1613,"_id":1614,"_source":1615,"_file":1616,"_extension":1617},"major",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":550,"children":551,"toc":1606},"root",[552,559,564,569,574,579,609,614,646,651,682,687,707,712,718,723,729,977,982,1600],{"type":553,"tag":554,"props":555,"children":556},"element","p",{},[557],{"type":558,"value":547},"text",{"type":553,"tag":554,"props":560,"children":561},{},[562],{"type":558,"value":563},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":553,"tag":554,"props":565,"children":566},{},[567],{"type":558,"value":568},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":553,"tag":554,"props":570,"children":571},{},[572],{"type":558,"value":573},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":553,"tag":554,"props":575,"children":576},{},[577],{"type":558,"value":578},"示例 1：",{"type":553,"tag":580,"props":581,"children":584},"pre",{"className":582,"code":583,"language":558,"meta":546,"style":546},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[585],{"type":553,"tag":586,"props":587,"children":588},"code",{"__ignoreMap":546},[589,600],{"type":553,"tag":590,"props":591,"children":594},"span",{"class":592,"line":593},"line",1,[595],{"type":553,"tag":590,"props":596,"children":597},{},[598],{"type":558,"value":599},"输入：s = \"the sky is blue\"\n",{"type":553,"tag":590,"props":601,"children":603},{"class":592,"line":602},2,[604],{"type":553,"tag":590,"props":605,"children":606},{},[607],{"type":558,"value":608},"输出：\"blue is sky the\"\n",{"type":553,"tag":554,"props":610,"children":611},{},[612],{"type":558,"value":613},"示例 2：",{"type":553,"tag":580,"props":615,"children":617},{"className":582,"code":616,"language":558,"meta":546,"style":546},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[618],{"type":553,"tag":586,"props":619,"children":620},{"__ignoreMap":546},[621,629,637],{"type":553,"tag":590,"props":622,"children":623},{"class":592,"line":593},[624],{"type":553,"tag":590,"props":625,"children":626},{},[627],{"type":558,"value":628},"输入：s = \" hello world \"\n",{"type":553,"tag":590,"props":630,"children":631},{"class":592,"line":602},[632],{"type":553,"tag":590,"props":633,"children":634},{},[635],{"type":558,"value":636},"输出：\"world hello\"\n",{"type":553,"tag":590,"props":638,"children":640},{"class":592,"line":639},3,[641],{"type":553,"tag":590,"props":642,"children":643},{},[644],{"type":558,"value":645},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":553,"tag":554,"props":647,"children":648},{},[649],{"type":558,"value":650},"示例 3：",{"type":553,"tag":580,"props":652,"children":654},{"className":582,"code":653,"language":558,"meta":546,"style":546},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[655],{"type":553,"tag":586,"props":656,"children":657},{"__ignoreMap":546},[658,666,674],{"type":553,"tag":590,"props":659,"children":660},{"class":592,"line":593},[661],{"type":553,"tag":590,"props":662,"children":663},{},[664],{"type":558,"value":665},"输入：s = \"a good example\"\n",{"type":553,"tag":590,"props":667,"children":668},{"class":592,"line":602},[669],{"type":553,"tag":590,"props":670,"children":671},{},[672],{"type":558,"value":673},"输出：\"example good a\"\n",{"type":553,"tag":590,"props":675,"children":676},{"class":592,"line":639},[677],{"type":553,"tag":590,"props":678,"children":679},{},[680],{"type":558,"value":681},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":553,"tag":554,"props":683,"children":684},{},[685],{"type":558,"value":686},"提示：",{"type":553,"tag":688,"props":689,"children":690},"ul",{},[691,697,702],{"type":553,"tag":692,"props":693,"children":694},"li",{},[695],{"type":558,"value":696},"1 \u003C= s.length \u003C= 10^4",{"type":553,"tag":692,"props":698,"children":699},{},[700],{"type":558,"value":701},"s 包含英文大小写字母、数字和空格 ' '",{"type":553,"tag":692,"props":703,"children":704},{},[705],{"type":558,"value":706},"s 中 至少存在一个 单词",{"type":553,"tag":554,"props":708,"children":709},{},[710],{"type":558,"value":711},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":553,"tag":713,"props":714,"children":716},"h2",{"id":715},"解题思路",[717],{"type":558,"value":715},{"type":553,"tag":713,"props":719,"children":721},{"id":720},"实现",[722],{"type":558,"value":720},{"type":553,"tag":724,"props":725,"children":727},"h3",{"id":726},"语言特性",[728],{"type":558,"value":726},{"type":553,"tag":580,"props":730,"children":734},{"className":731,"code":732,"language":733,"meta":546,"style":546},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[735],{"type":553,"tag":586,"props":736,"children":737},{"__ignoreMap":546},[738,747,789,818,827,873,968],{"type":553,"tag":590,"props":739,"children":740},{"class":592,"line":593},[741],{"type":553,"tag":590,"props":742,"children":744},{"style":743},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[745],{"type":558,"value":746},"/**\n",{"type":553,"tag":590,"props":748,"children":749},{"class":592,"line":602},[750,755,761,767,772,778,783],{"type":553,"tag":590,"props":751,"children":752},{"style":743},[753],{"type":558,"value":754}," * ",{"type":553,"tag":590,"props":756,"children":758},{"style":757},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[759],{"type":558,"value":760},"@",{"type":553,"tag":590,"props":762,"children":764},{"style":763},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[765],{"type":558,"value":766},"param",{"type":553,"tag":590,"props":768,"children":769},{"style":757},[770],{"type":558,"value":771}," {",{"type":553,"tag":590,"props":773,"children":775},{"style":774},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[776],{"type":558,"value":777},"string",{"type":553,"tag":590,"props":779,"children":780},{"style":757},[781],{"type":558,"value":782},"}",{"type":553,"tag":590,"props":784,"children":786},{"style":785},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[787],{"type":558,"value":788}," s\n",{"type":553,"tag":590,"props":790,"children":791},{"class":592,"line":639},[792,796,800,805,809,813],{"type":553,"tag":590,"props":793,"children":794},{"style":743},[795],{"type":558,"value":754},{"type":553,"tag":590,"props":797,"children":798},{"style":757},[799],{"type":558,"value":760},{"type":553,"tag":590,"props":801,"children":802},{"style":763},[803],{"type":558,"value":804},"return",{"type":553,"tag":590,"props":806,"children":807},{"style":757},[808],{"type":558,"value":771},{"type":553,"tag":590,"props":810,"children":811},{"style":774},[812],{"type":558,"value":777},{"type":553,"tag":590,"props":814,"children":815},{"style":757},[816],{"type":558,"value":817},"}\n",{"type":553,"tag":590,"props":819,"children":821},{"class":592,"line":820},4,[822],{"type":553,"tag":590,"props":823,"children":824},{"style":743},[825],{"type":558,"value":826}," */\n",{"type":553,"tag":590,"props":828,"children":830},{"class":592,"line":829},5,[831,837,843,848,853,858,863,868],{"type":553,"tag":590,"props":832,"children":834},{"style":833},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[835],{"type":558,"value":836},"var",{"type":553,"tag":590,"props":838,"children":840},{"style":839},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[841],{"type":558,"value":842}," reverseWords",{"type":553,"tag":590,"props":844,"children":845},{"style":757},[846],{"type":558,"value":847}," =",{"type":553,"tag":590,"props":849,"children":850},{"style":833},[851],{"type":558,"value":852}," function",{"type":553,"tag":590,"props":854,"children":855},{"style":757},[856],{"type":558,"value":857}," (",{"type":553,"tag":590,"props":859,"children":860},{"style":785},[861],{"type":558,"value":862},"s",{"type":553,"tag":590,"props":864,"children":865},{"style":757},[866],{"type":558,"value":867},")",{"type":553,"tag":590,"props":869,"children":870},{"style":757},[871],{"type":558,"value":872}," {\n",{"type":553,"tag":590,"props":874,"children":876},{"class":592,"line":875},6,[877,882,887,892,897,902,908,913,918,923,927,932,936,941,946,951,955,959,963],{"type":553,"tag":590,"props":878,"children":879},{"style":763},[880],{"type":558,"value":881},"  return",{"type":553,"tag":590,"props":883,"children":884},{"style":785},[885],{"type":558,"value":886}," s",{"type":553,"tag":590,"props":888,"children":889},{"style":757},[890],{"type":558,"value":891},".",{"type":553,"tag":590,"props":893,"children":894},{"style":839},[895],{"type":558,"value":896},"split",{"type":553,"tag":590,"props":898,"children":899},{"style":757},[900],{"type":558,"value":901},"(",{"type":553,"tag":590,"props":903,"children":905},{"style":904},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[906],{"type":558,"value":907},"\"",{"type":553,"tag":590,"props":909,"children":910},{"style":904},[911],{"type":558,"value":912}," \"",{"type":553,"tag":590,"props":914,"children":915},{"style":757},[916],{"type":558,"value":917},").",{"type":553,"tag":590,"props":919,"children":920},{"style":839},[921],{"type":558,"value":922},"filter",{"type":553,"tag":590,"props":924,"children":925},{"style":757},[926],{"type":558,"value":901},{"type":553,"tag":590,"props":928,"children":929},{"style":785},[930],{"type":558,"value":931},"Boolean",{"type":553,"tag":590,"props":933,"children":934},{"style":757},[935],{"type":558,"value":917},{"type":553,"tag":590,"props":937,"children":938},{"style":839},[939],{"type":558,"value":940},"reverse",{"type":553,"tag":590,"props":942,"children":943},{"style":757},[944],{"type":558,"value":945},"().",{"type":553,"tag":590,"props":947,"children":948},{"style":839},[949],{"type":558,"value":950},"join",{"type":553,"tag":590,"props":952,"children":953},{"style":757},[954],{"type":558,"value":901},{"type":553,"tag":590,"props":956,"children":957},{"style":904},[958],{"type":558,"value":907},{"type":553,"tag":590,"props":960,"children":961},{"style":904},[962],{"type":558,"value":912},{"type":553,"tag":590,"props":964,"children":965},{"style":757},[966],{"type":558,"value":967},");\n",{"type":553,"tag":590,"props":969,"children":971},{"class":592,"line":970},7,[972],{"type":553,"tag":590,"props":973,"children":974},{"style":757},[975],{"type":558,"value":976},"};\n",{"type":553,"tag":724,"props":978,"children":980},{"id":979},"双指针",[981],{"type":558,"value":979},{"type":553,"tag":580,"props":983,"children":985},{"className":731,"code":984,"language":733,"meta":546,"style":546},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[986],{"type":553,"tag":586,"props":987,"children":988},{"__ignoreMap":546},[989,996,1027,1054,1061,1096,1104,1112,1121,1130,1139,1162,1209,1234,1270,1354,1433,1511,1537,1546,1592],{"type":553,"tag":590,"props":990,"children":991},{"class":592,"line":593},[992],{"type":553,"tag":590,"props":993,"children":994},{"style":743},[995],{"type":558,"value":746},{"type":553,"tag":590,"props":997,"children":998},{"class":592,"line":602},[999,1003,1007,1011,1015,1019,1023],{"type":553,"tag":590,"props":1000,"children":1001},{"style":743},[1002],{"type":558,"value":754},{"type":553,"tag":590,"props":1004,"children":1005},{"style":757},[1006],{"type":558,"value":760},{"type":553,"tag":590,"props":1008,"children":1009},{"style":763},[1010],{"type":558,"value":766},{"type":553,"tag":590,"props":1012,"children":1013},{"style":757},[1014],{"type":558,"value":771},{"type":553,"tag":590,"props":1016,"children":1017},{"style":774},[1018],{"type":558,"value":777},{"type":553,"tag":590,"props":1020,"children":1021},{"style":757},[1022],{"type":558,"value":782},{"type":553,"tag":590,"props":1024,"children":1025},{"style":785},[1026],{"type":558,"value":788},{"type":553,"tag":590,"props":1028,"children":1029},{"class":592,"line":639},[1030,1034,1038,1042,1046,1050],{"type":553,"tag":590,"props":1031,"children":1032},{"style":743},[1033],{"type":558,"value":754},{"type":553,"tag":590,"props":1035,"children":1036},{"style":757},[1037],{"type":558,"value":760},{"type":553,"tag":590,"props":1039,"children":1040},{"style":763},[1041],{"type":558,"value":804},{"type":553,"tag":590,"props":1043,"children":1044},{"style":757},[1045],{"type":558,"value":771},{"type":553,"tag":590,"props":1047,"children":1048},{"style":774},[1049],{"type":558,"value":777},{"type":553,"tag":590,"props":1051,"children":1052},{"style":757},[1053],{"type":558,"value":817},{"type":553,"tag":590,"props":1055,"children":1056},{"class":592,"line":820},[1057],{"type":553,"tag":590,"props":1058,"children":1059},{"style":743},[1060],{"type":558,"value":826},{"type":553,"tag":590,"props":1062,"children":1063},{"class":592,"line":829},[1064,1068,1072,1076,1080,1084,1088,1092],{"type":553,"tag":590,"props":1065,"children":1066},{"style":833},[1067],{"type":558,"value":836},{"type":553,"tag":590,"props":1069,"children":1070},{"style":839},[1071],{"type":558,"value":842},{"type":553,"tag":590,"props":1073,"children":1074},{"style":757},[1075],{"type":558,"value":847},{"type":553,"tag":590,"props":1077,"children":1078},{"style":833},[1079],{"type":558,"value":852},{"type":553,"tag":590,"props":1081,"children":1082},{"style":757},[1083],{"type":558,"value":857},{"type":553,"tag":590,"props":1085,"children":1086},{"style":785},[1087],{"type":558,"value":862},{"type":553,"tag":590,"props":1089,"children":1090},{"style":757},[1091],{"type":558,"value":867},{"type":553,"tag":590,"props":1093,"children":1094},{"style":757},[1095],{"type":558,"value":872},{"type":553,"tag":590,"props":1097,"children":1098},{"class":592,"line":875},[1099],{"type":553,"tag":590,"props":1100,"children":1101},{"style":743},[1102],{"type":558,"value":1103},"  // 倒序遍历字符串\n",{"type":553,"tag":590,"props":1105,"children":1106},{"class":592,"line":970},[1107],{"type":553,"tag":590,"props":1108,"children":1109},{"style":743},[1110],{"type":558,"value":1111},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":553,"tag":590,"props":1113,"children":1115},{"class":592,"line":1114},8,[1116],{"type":553,"tag":590,"props":1117,"children":1118},{"style":743},[1119],{"type":558,"value":1120},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":553,"tag":590,"props":1122,"children":1124},{"class":592,"line":1123},9,[1125],{"type":553,"tag":590,"props":1126,"children":1127},{"style":743},[1128],{"type":558,"value":1129},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":553,"tag":590,"props":1131,"children":1133},{"class":592,"line":1132},10,[1134],{"type":553,"tag":590,"props":1135,"children":1136},{"style":743},[1137],{"type":558,"value":1138},"  // 4. 执行 j = i\n",{"type":553,"tag":590,"props":1140,"children":1142},{"class":592,"line":1141},11,[1143,1148,1153,1157],{"type":553,"tag":590,"props":1144,"children":1145},{"style":833},[1146],{"type":558,"value":1147},"  let",{"type":553,"tag":590,"props":1149,"children":1150},{"style":785},[1151],{"type":558,"value":1152}," res",{"type":553,"tag":590,"props":1154,"children":1155},{"style":757},[1156],{"type":558,"value":847},{"type":553,"tag":590,"props":1158,"children":1159},{"style":757},[1160],{"type":558,"value":1161}," [];\n",{"type":553,"tag":590,"props":1163,"children":1165},{"class":592,"line":1164},12,[1166,1170,1175,1179,1183,1187,1193,1198,1204],{"type":553,"tag":590,"props":1167,"children":1168},{"style":833},[1169],{"type":558,"value":1147},{"type":553,"tag":590,"props":1171,"children":1172},{"style":785},[1173],{"type":558,"value":1174}," i",{"type":553,"tag":590,"props":1176,"children":1177},{"style":757},[1178],{"type":558,"value":847},{"type":553,"tag":590,"props":1180,"children":1181},{"style":785},[1182],{"type":558,"value":886},{"type":553,"tag":590,"props":1184,"children":1185},{"style":757},[1186],{"type":558,"value":891},{"type":553,"tag":590,"props":1188,"children":1190},{"style":1189},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[1191],{"type":558,"value":1192},"length",{"type":553,"tag":590,"props":1194,"children":1195},{"style":833},[1196],{"type":558,"value":1197}," -",{"type":553,"tag":590,"props":1199,"children":1201},{"style":1200},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1202],{"type":558,"value":1203}," 1",{"type":553,"tag":590,"props":1205,"children":1206},{"style":757},[1207],{"type":558,"value":1208},";\n",{"type":553,"tag":590,"props":1210,"children":1212},{"class":592,"line":1211},13,[1213,1217,1222,1226,1230],{"type":553,"tag":590,"props":1214,"children":1215},{"style":833},[1216],{"type":558,"value":1147},{"type":553,"tag":590,"props":1218,"children":1219},{"style":785},[1220],{"type":558,"value":1221}," j",{"type":553,"tag":590,"props":1223,"children":1224},{"style":757},[1225],{"type":558,"value":847},{"type":553,"tag":590,"props":1227,"children":1228},{"style":785},[1229],{"type":558,"value":1174},{"type":553,"tag":590,"props":1231,"children":1232},{"style":757},[1233],{"type":558,"value":1208},{"type":553,"tag":590,"props":1235,"children":1237},{"class":592,"line":1236},14,[1238,1243,1247,1252,1257,1262,1266],{"type":553,"tag":590,"props":1239,"children":1240},{"style":763},[1241],{"type":558,"value":1242},"  while",{"type":553,"tag":590,"props":1244,"children":1245},{"style":757},[1246],{"type":558,"value":857},{"type":553,"tag":590,"props":1248,"children":1249},{"style":785},[1250],{"type":558,"value":1251},"i",{"type":553,"tag":590,"props":1253,"children":1254},{"style":757},[1255],{"type":558,"value":1256}," >=",{"type":553,"tag":590,"props":1258,"children":1259},{"style":1200},[1260],{"type":558,"value":1261}," 0",{"type":553,"tag":590,"props":1263,"children":1264},{"style":757},[1265],{"type":558,"value":867},{"type":553,"tag":590,"props":1267,"children":1268},{"style":757},[1269],{"type":558,"value":872},{"type":553,"tag":590,"props":1271,"children":1273},{"class":592,"line":1272},15,[1274,1279,1283,1287,1291,1295,1300,1304,1309,1313,1318,1323,1327,1331,1335,1339,1344,1349],{"type":553,"tag":590,"props":1275,"children":1276},{"style":763},[1277],{"type":558,"value":1278},"    while",{"type":553,"tag":590,"props":1280,"children":1281},{"style":757},[1282],{"type":558,"value":857},{"type":553,"tag":590,"props":1284,"children":1285},{"style":785},[1286],{"type":558,"value":1251},{"type":553,"tag":590,"props":1288,"children":1289},{"style":757},[1290],{"type":558,"value":1256},{"type":553,"tag":590,"props":1292,"children":1293},{"style":1200},[1294],{"type":558,"value":1261},{"type":553,"tag":590,"props":1296,"children":1297},{"style":833},[1298],{"type":558,"value":1299}," &&",{"type":553,"tag":590,"props":1301,"children":1302},{"style":785},[1303],{"type":558,"value":886},{"type":553,"tag":590,"props":1305,"children":1306},{"style":757},[1307],{"type":558,"value":1308},"[",{"type":553,"tag":590,"props":1310,"children":1311},{"style":785},[1312],{"type":558,"value":1251},{"type":553,"tag":590,"props":1314,"children":1315},{"style":757},[1316],{"type":558,"value":1317},"]",{"type":553,"tag":590,"props":1319,"children":1320},{"style":833},[1321],{"type":558,"value":1322}," !==",{"type":553,"tag":590,"props":1324,"children":1325},{"style":904},[1326],{"type":558,"value":912},{"type":553,"tag":590,"props":1328,"children":1329},{"style":904},[1330],{"type":558,"value":912},{"type":553,"tag":590,"props":1332,"children":1333},{"style":757},[1334],{"type":558,"value":867},{"type":553,"tag":590,"props":1336,"children":1337},{"style":785},[1338],{"type":558,"value":1174},{"type":553,"tag":590,"props":1340,"children":1341},{"style":833},[1342],{"type":558,"value":1343},"--",{"type":553,"tag":590,"props":1345,"children":1346},{"style":757},[1347],{"type":558,"value":1348},";",{"type":553,"tag":590,"props":1350,"children":1351},{"style":743},[1352],{"type":558,"value":1353}," // 搜索首个空格\n",{"type":553,"tag":590,"props":1355,"children":1357},{"class":592,"line":1356},16,[1358,1363,1367,1372,1376,1380,1384,1389,1393,1397,1402,1406,1411,1415,1419,1423,1428],{"type":553,"tag":590,"props":1359,"children":1360},{"style":785},[1361],{"type":558,"value":1362},"    res",{"type":553,"tag":590,"props":1364,"children":1365},{"style":757},[1366],{"type":558,"value":891},{"type":553,"tag":590,"props":1368,"children":1369},{"style":839},[1370],{"type":558,"value":1371},"push",{"type":553,"tag":590,"props":1373,"children":1374},{"style":757},[1375],{"type":558,"value":901},{"type":553,"tag":590,"props":1377,"children":1378},{"style":785},[1379],{"type":558,"value":862},{"type":553,"tag":590,"props":1381,"children":1382},{"style":757},[1383],{"type":558,"value":891},{"type":553,"tag":590,"props":1385,"children":1386},{"style":839},[1387],{"type":558,"value":1388},"substring",{"type":553,"tag":590,"props":1390,"children":1391},{"style":757},[1392],{"type":558,"value":901},{"type":553,"tag":590,"props":1394,"children":1395},{"style":785},[1396],{"type":558,"value":1251},{"type":553,"tag":590,"props":1398,"children":1399},{"style":833},[1400],{"type":558,"value":1401}," +",{"type":553,"tag":590,"props":1403,"children":1404},{"style":1200},[1405],{"type":558,"value":1203},{"type":553,"tag":590,"props":1407,"children":1408},{"style":757},[1409],{"type":558,"value":1410},",",{"type":553,"tag":590,"props":1412,"children":1413},{"style":785},[1414],{"type":558,"value":1221},{"type":553,"tag":590,"props":1416,"children":1417},{"style":833},[1418],{"type":558,"value":1401},{"type":553,"tag":590,"props":1420,"children":1421},{"style":1200},[1422],{"type":558,"value":1203},{"type":553,"tag":590,"props":1424,"children":1425},{"style":757},[1426],{"type":558,"value":1427},"));",{"type":553,"tag":590,"props":1429,"children":1430},{"style":743},[1431],{"type":558,"value":1432}," // 添加单词\n",{"type":553,"tag":590,"props":1434,"children":1436},{"class":592,"line":1435},17,[1437,1441,1445,1449,1453,1457,1461,1465,1469,1473,1477,1482,1486,1490,1494,1498,1502,1506],{"type":553,"tag":590,"props":1438,"children":1439},{"style":763},[1440],{"type":558,"value":1278},{"type":553,"tag":590,"props":1442,"children":1443},{"style":757},[1444],{"type":558,"value":857},{"type":553,"tag":590,"props":1446,"children":1447},{"style":785},[1448],{"type":558,"value":1251},{"type":553,"tag":590,"props":1450,"children":1451},{"style":757},[1452],{"type":558,"value":1256},{"type":553,"tag":590,"props":1454,"children":1455},{"style":1200},[1456],{"type":558,"value":1261},{"type":553,"tag":590,"props":1458,"children":1459},{"style":833},[1460],{"type":558,"value":1299},{"type":553,"tag":590,"props":1462,"children":1463},{"style":785},[1464],{"type":558,"value":886},{"type":553,"tag":590,"props":1466,"children":1467},{"style":757},[1468],{"type":558,"value":1308},{"type":553,"tag":590,"props":1470,"children":1471},{"style":785},[1472],{"type":558,"value":1251},{"type":553,"tag":590,"props":1474,"children":1475},{"style":757},[1476],{"type":558,"value":1317},{"type":553,"tag":590,"props":1478,"children":1479},{"style":833},[1480],{"type":558,"value":1481}," ===",{"type":553,"tag":590,"props":1483,"children":1484},{"style":904},[1485],{"type":558,"value":912},{"type":553,"tag":590,"props":1487,"children":1488},{"style":904},[1489],{"type":558,"value":912},{"type":553,"tag":590,"props":1491,"children":1492},{"style":757},[1493],{"type":558,"value":867},{"type":553,"tag":590,"props":1495,"children":1496},{"style":785},[1497],{"type":558,"value":1174},{"type":553,"tag":590,"props":1499,"children":1500},{"style":833},[1501],{"type":558,"value":1343},{"type":553,"tag":590,"props":1503,"children":1504},{"style":757},[1505],{"type":558,"value":1348},{"type":553,"tag":590,"props":1507,"children":1508},{"style":743},[1509],{"type":558,"value":1510}," // 跳过单词间空格\n",{"type":553,"tag":590,"props":1512,"children":1514},{"class":592,"line":1513},18,[1515,1520,1524,1528,1532],{"type":553,"tag":590,"props":1516,"children":1517},{"style":785},[1518],{"type":558,"value":1519},"    j",{"type":553,"tag":590,"props":1521,"children":1522},{"style":757},[1523],{"type":558,"value":847},{"type":553,"tag":590,"props":1525,"children":1526},{"style":785},[1527],{"type":558,"value":1174},{"type":553,"tag":590,"props":1529,"children":1530},{"style":757},[1531],{"type":558,"value":1348},{"type":553,"tag":590,"props":1533,"children":1534},{"style":743},[1535],{"type":558,"value":1536}," // 指针移动，指向下个单词的尾字符\n",{"type":553,"tag":590,"props":1538,"children":1540},{"class":592,"line":1539},19,[1541],{"type":553,"tag":590,"props":1542,"children":1543},{"style":757},[1544],{"type":558,"value":1545},"  }\n",{"type":553,"tag":590,"props":1547,"children":1549},{"class":592,"line":1548},20,[1550,1554,1558,1562,1566,1570,1574,1578,1582,1587],{"type":553,"tag":590,"props":1551,"children":1552},{"style":763},[1553],{"type":558,"value":881},{"type":553,"tag":590,"props":1555,"children":1556},{"style":785},[1557],{"type":558,"value":1152},{"type":553,"tag":590,"props":1559,"children":1560},{"style":757},[1561],{"type":558,"value":891},{"type":553,"tag":590,"props":1563,"children":1564},{"style":839},[1565],{"type":558,"value":950},{"type":553,"tag":590,"props":1567,"children":1568},{"style":757},[1569],{"type":558,"value":901},{"type":553,"tag":590,"props":1571,"children":1572},{"style":904},[1573],{"type":558,"value":907},{"type":553,"tag":590,"props":1575,"children":1576},{"style":904},[1577],{"type":558,"value":912},{"type":553,"tag":590,"props":1579,"children":1580},{"style":757},[1581],{"type":558,"value":917},{"type":553,"tag":590,"props":1583,"children":1584},{"style":839},[1585],{"type":558,"value":1586},"trim",{"type":553,"tag":590,"props":1588,"children":1589},{"style":757},[1590],{"type":558,"value":1591},"();\n",{"type":553,"tag":590,"props":1593,"children":1595},{"class":592,"line":1594},21,[1596],{"type":553,"tag":590,"props":1597,"children":1598},{"style":757},[1599],{"type":558,"value":976},{"type":553,"tag":1601,"props":1602,"children":1603},"style",{},[1604],{"type":558,"value":1605},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":546,"searchDepth":829,"depth":829,"links":1607},[1608,1609],{"id":715,"depth":602,"text":715},{"id":720,"depth":602,"text":720,"children":1610},[1611,1612],{"id":726,"depth":639,"text":726},{"id":979,"depth":639,"text":979},"markdown","content:1.algorithm:3.leetcode:3.major:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/3.major/151.reverse-words-in-a-string.md","md",[1619,1621],{"_path":177,"title":176,"description":1620},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":183,"title":182,"description":1622},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1714099679035]