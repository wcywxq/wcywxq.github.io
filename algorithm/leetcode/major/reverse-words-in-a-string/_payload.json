[{"data":1,"prerenderedAt":1604},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/reverse-words-in-a-string":524,"/algorithm/leetcode/major/reverse-words-in-a-string-surround":1599},[4,269,298,492,500,509],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":491},"代码考核","/code-assessment",[302,391,484],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,331,347,375,382,385,388],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328],{"title":311,"_path":312},"ajax","/code-assessment/source/native-api/ajax",{"title":314,"_path":315},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":317,"_path":318},"new 操作符","/code-assessment/source/native-api/new",{"title":320,"_path":321},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":323,"_path":324},"定时器","/code-assessment/source/native-api/timer",{"title":326,"_path":327},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":329,"_path":330},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":332,"_path":333,"children":334},"函数 Function","/code-assessment/source/function",[335,338,341,344],{"title":336,"_path":337},"函数防抖","/code-assessment/source/function/debounce",{"title":339,"_path":340},"函数节流","/code-assessment/source/function/throttle",{"title":342,"_path":343},"函数柯理化","/code-assessment/source/function/curry",{"title":345,"_path":346},"函数睡眠","/code-assessment/source/function/sleep",{"title":348,"_path":349,"children":350},"数组 Array","/code-assessment/source/array",[351,354,357,360,363,366,369,372],{"title":352,"_path":353},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":355,"_path":356},"数组扁平化","/code-assessment/source/array/flat",{"title":358,"_path":359},"原型方法","/code-assessment/source/array/prototype-method",{"title":361,"_path":362},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":364,"_path":365},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":367,"_path":368},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":370,"_path":371},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":373,"_path":374},"二维数组","/code-assessment/source/array/2d-array",{"title":376,"_path":377,"children":378},"字符串 String","/code-assessment/source/string",[379],{"title":380,"_path":381},"repeat()","/code-assessment/source/string/repeat",{"title":383,"_path":384},"获取通用类型","/code-assessment/source/get-generic-type",{"title":386,"_path":387},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":389,"_path":390},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":392,"_path":393,"children":394},"业务场景","/code-assessment/scene",[395,420,430,433,436,439,442,445,448,451,454,457,460,463,466,469,472,475,478,481],{"title":396,"_path":397,"children":398},"Promise","/code-assessment/scene/promise",[399,402,405,408,411,414,417],{"title":400,"_path":401},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":403,"_path":404},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":406,"_path":407},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":409,"_path":410},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":412,"_path":413},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":415,"_path":416},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":418,"_path":419},"promise 每隔 1s 输出","/code-assessment/scene/promise/promise-output-every-1s",{"title":421,"_path":422,"children":423},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[424,427],{"title":425,"_path":426},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":428,"_path":429},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":431,"_path":432},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":434,"_path":435},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":437,"_path":438},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":440,"_path":441},"倒计时","/code-assessment/scene/countdown",{"title":443,"_path":444},"日期格式化","/code-assessment/scene/date-format",{"title":446,"_path":447},"实现前端路由","/code-assessment/scene/frontend-route",{"title":449,"_path":450},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":452,"_path":453},"lodash.get","/code-assessment/scene/lodash-get",{"title":455,"_path":456},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":458,"_path":459},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":461,"_path":462},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":464,"_path":465},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":467,"_path":468},"随机数","/code-assessment/scene/random-number",{"title":470,"_path":471},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":473,"_path":474},"sku 算法实现","/code-assessment/scene/sku",{"title":476,"_path":477},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":479,"_path":480},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":482,"_path":483},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":485,"_path":486,"children":487},"Ts 类型挑战","/code-assessment/type-challeges",[488],{"title":489,"_path":490},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":493,"_path":494,"children":495,"icon":499},"项目","/project",[496],{"title":497,"_path":498},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":501,"_path":502,"children":503,"icon":508},"设计模式","/design-mode",[504,505],{"title":501,"_path":502},{"title":506,"_path":507},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":510,"_path":511,"children":512,"icon":523},"后端语言","/backend-languages",[513],{"title":514,"_path":515,"children":516},"Python","/backend-languages/python",[517,520],{"title":518,"_path":519},"基础","/backend-languages/python/base",{"title":521,"_path":522},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":180,"_dir":525,"_draft":526,"_partial":526,"_locale":527,"title":179,"description":528,"url":529,"body":530,"_type":1594,"_id":1595,"_source":1596,"_file":1597,"_extension":1598},"major",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":531,"children":532,"toc":1587},"root",[533,540,545,550,555,560,590,595,627,632,663,668,688,693,699,704,710,958,963,1581],{"type":534,"tag":535,"props":536,"children":537},"element","p",{},[538],{"type":539,"value":528},"text",{"type":534,"tag":535,"props":541,"children":542},{},[543],{"type":539,"value":544},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":534,"tag":535,"props":546,"children":547},{},[548],{"type":539,"value":549},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":534,"tag":535,"props":551,"children":552},{},[553],{"type":539,"value":554},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":534,"tag":535,"props":556,"children":557},{},[558],{"type":539,"value":559},"示例 1：",{"type":534,"tag":561,"props":562,"children":565},"pre",{"className":563,"code":564,"language":539,"meta":527,"style":527},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[566],{"type":534,"tag":567,"props":568,"children":569},"code",{"__ignoreMap":527},[570,581],{"type":534,"tag":571,"props":572,"children":575},"span",{"class":573,"line":574},"line",1,[576],{"type":534,"tag":571,"props":577,"children":578},{},[579],{"type":539,"value":580},"输入：s = \"the sky is blue\"\n",{"type":534,"tag":571,"props":582,"children":584},{"class":573,"line":583},2,[585],{"type":534,"tag":571,"props":586,"children":587},{},[588],{"type":539,"value":589},"输出：\"blue is sky the\"\n",{"type":534,"tag":535,"props":591,"children":592},{},[593],{"type":539,"value":594},"示例 2：",{"type":534,"tag":561,"props":596,"children":598},{"className":563,"code":597,"language":539,"meta":527,"style":527},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[599],{"type":534,"tag":567,"props":600,"children":601},{"__ignoreMap":527},[602,610,618],{"type":534,"tag":571,"props":603,"children":604},{"class":573,"line":574},[605],{"type":534,"tag":571,"props":606,"children":607},{},[608],{"type":539,"value":609},"输入：s = \" hello world \"\n",{"type":534,"tag":571,"props":611,"children":612},{"class":573,"line":583},[613],{"type":534,"tag":571,"props":614,"children":615},{},[616],{"type":539,"value":617},"输出：\"world hello\"\n",{"type":534,"tag":571,"props":619,"children":621},{"class":573,"line":620},3,[622],{"type":534,"tag":571,"props":623,"children":624},{},[625],{"type":539,"value":626},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":534,"tag":535,"props":628,"children":629},{},[630],{"type":539,"value":631},"示例 3：",{"type":534,"tag":561,"props":633,"children":635},{"className":563,"code":634,"language":539,"meta":527,"style":527},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[636],{"type":534,"tag":567,"props":637,"children":638},{"__ignoreMap":527},[639,647,655],{"type":534,"tag":571,"props":640,"children":641},{"class":573,"line":574},[642],{"type":534,"tag":571,"props":643,"children":644},{},[645],{"type":539,"value":646},"输入：s = \"a good example\"\n",{"type":534,"tag":571,"props":648,"children":649},{"class":573,"line":583},[650],{"type":534,"tag":571,"props":651,"children":652},{},[653],{"type":539,"value":654},"输出：\"example good a\"\n",{"type":534,"tag":571,"props":656,"children":657},{"class":573,"line":620},[658],{"type":534,"tag":571,"props":659,"children":660},{},[661],{"type":539,"value":662},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":534,"tag":535,"props":664,"children":665},{},[666],{"type":539,"value":667},"提示：",{"type":534,"tag":669,"props":670,"children":671},"ul",{},[672,678,683],{"type":534,"tag":673,"props":674,"children":675},"li",{},[676],{"type":539,"value":677},"1 \u003C= s.length \u003C= 10^4",{"type":534,"tag":673,"props":679,"children":680},{},[681],{"type":539,"value":682},"s 包含英文大小写字母、数字和空格 ' '",{"type":534,"tag":673,"props":684,"children":685},{},[686],{"type":539,"value":687},"s 中 至少存在一个 单词",{"type":534,"tag":535,"props":689,"children":690},{},[691],{"type":539,"value":692},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":534,"tag":694,"props":695,"children":697},"h2",{"id":696},"解题思路",[698],{"type":539,"value":696},{"type":534,"tag":694,"props":700,"children":702},{"id":701},"实现",[703],{"type":539,"value":701},{"type":534,"tag":705,"props":706,"children":708},"h3",{"id":707},"语言特性",[709],{"type":539,"value":707},{"type":534,"tag":561,"props":711,"children":715},{"className":712,"code":713,"language":714,"meta":527,"style":527},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[716],{"type":534,"tag":567,"props":717,"children":718},{"__ignoreMap":527},[719,728,770,799,808,854,949],{"type":534,"tag":571,"props":720,"children":721},{"class":573,"line":574},[722],{"type":534,"tag":571,"props":723,"children":725},{"style":724},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[726],{"type":539,"value":727},"/**\n",{"type":534,"tag":571,"props":729,"children":730},{"class":573,"line":583},[731,736,742,748,753,759,764],{"type":534,"tag":571,"props":732,"children":733},{"style":724},[734],{"type":539,"value":735}," * ",{"type":534,"tag":571,"props":737,"children":739},{"style":738},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[740],{"type":539,"value":741},"@",{"type":534,"tag":571,"props":743,"children":745},{"style":744},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[746],{"type":539,"value":747},"param",{"type":534,"tag":571,"props":749,"children":750},{"style":738},[751],{"type":539,"value":752}," {",{"type":534,"tag":571,"props":754,"children":756},{"style":755},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[757],{"type":539,"value":758},"string",{"type":534,"tag":571,"props":760,"children":761},{"style":738},[762],{"type":539,"value":763},"}",{"type":534,"tag":571,"props":765,"children":767},{"style":766},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[768],{"type":539,"value":769}," s\n",{"type":534,"tag":571,"props":771,"children":772},{"class":573,"line":620},[773,777,781,786,790,794],{"type":534,"tag":571,"props":774,"children":775},{"style":724},[776],{"type":539,"value":735},{"type":534,"tag":571,"props":778,"children":779},{"style":738},[780],{"type":539,"value":741},{"type":534,"tag":571,"props":782,"children":783},{"style":744},[784],{"type":539,"value":785},"return",{"type":534,"tag":571,"props":787,"children":788},{"style":738},[789],{"type":539,"value":752},{"type":534,"tag":571,"props":791,"children":792},{"style":755},[793],{"type":539,"value":758},{"type":534,"tag":571,"props":795,"children":796},{"style":738},[797],{"type":539,"value":798},"}\n",{"type":534,"tag":571,"props":800,"children":802},{"class":573,"line":801},4,[803],{"type":534,"tag":571,"props":804,"children":805},{"style":724},[806],{"type":539,"value":807}," */\n",{"type":534,"tag":571,"props":809,"children":811},{"class":573,"line":810},5,[812,818,824,829,834,839,844,849],{"type":534,"tag":571,"props":813,"children":815},{"style":814},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[816],{"type":539,"value":817},"var",{"type":534,"tag":571,"props":819,"children":821},{"style":820},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[822],{"type":539,"value":823}," reverseWords",{"type":534,"tag":571,"props":825,"children":826},{"style":738},[827],{"type":539,"value":828}," =",{"type":534,"tag":571,"props":830,"children":831},{"style":814},[832],{"type":539,"value":833}," function",{"type":534,"tag":571,"props":835,"children":836},{"style":738},[837],{"type":539,"value":838}," (",{"type":534,"tag":571,"props":840,"children":841},{"style":766},[842],{"type":539,"value":843},"s",{"type":534,"tag":571,"props":845,"children":846},{"style":738},[847],{"type":539,"value":848},")",{"type":534,"tag":571,"props":850,"children":851},{"style":738},[852],{"type":539,"value":853}," {\n",{"type":534,"tag":571,"props":855,"children":857},{"class":573,"line":856},6,[858,863,868,873,878,883,889,894,899,904,908,913,917,922,927,932,936,940,944],{"type":534,"tag":571,"props":859,"children":860},{"style":744},[861],{"type":539,"value":862},"  return",{"type":534,"tag":571,"props":864,"children":865},{"style":766},[866],{"type":539,"value":867}," s",{"type":534,"tag":571,"props":869,"children":870},{"style":738},[871],{"type":539,"value":872},".",{"type":534,"tag":571,"props":874,"children":875},{"style":820},[876],{"type":539,"value":877},"split",{"type":534,"tag":571,"props":879,"children":880},{"style":738},[881],{"type":539,"value":882},"(",{"type":534,"tag":571,"props":884,"children":886},{"style":885},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[887],{"type":539,"value":888},"\"",{"type":534,"tag":571,"props":890,"children":891},{"style":885},[892],{"type":539,"value":893}," \"",{"type":534,"tag":571,"props":895,"children":896},{"style":738},[897],{"type":539,"value":898},").",{"type":534,"tag":571,"props":900,"children":901},{"style":820},[902],{"type":539,"value":903},"filter",{"type":534,"tag":571,"props":905,"children":906},{"style":738},[907],{"type":539,"value":882},{"type":534,"tag":571,"props":909,"children":910},{"style":766},[911],{"type":539,"value":912},"Boolean",{"type":534,"tag":571,"props":914,"children":915},{"style":738},[916],{"type":539,"value":898},{"type":534,"tag":571,"props":918,"children":919},{"style":820},[920],{"type":539,"value":921},"reverse",{"type":534,"tag":571,"props":923,"children":924},{"style":738},[925],{"type":539,"value":926},"().",{"type":534,"tag":571,"props":928,"children":929},{"style":820},[930],{"type":539,"value":931},"join",{"type":534,"tag":571,"props":933,"children":934},{"style":738},[935],{"type":539,"value":882},{"type":534,"tag":571,"props":937,"children":938},{"style":885},[939],{"type":539,"value":888},{"type":534,"tag":571,"props":941,"children":942},{"style":885},[943],{"type":539,"value":893},{"type":534,"tag":571,"props":945,"children":946},{"style":738},[947],{"type":539,"value":948},");\n",{"type":534,"tag":571,"props":950,"children":952},{"class":573,"line":951},7,[953],{"type":534,"tag":571,"props":954,"children":955},{"style":738},[956],{"type":539,"value":957},"};\n",{"type":534,"tag":705,"props":959,"children":961},{"id":960},"双指针",[962],{"type":539,"value":960},{"type":534,"tag":561,"props":964,"children":966},{"className":712,"code":965,"language":714,"meta":527,"style":527},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[967],{"type":534,"tag":567,"props":968,"children":969},{"__ignoreMap":527},[970,977,1008,1035,1042,1077,1085,1093,1102,1111,1120,1143,1190,1215,1251,1335,1414,1492,1518,1527,1573],{"type":534,"tag":571,"props":971,"children":972},{"class":573,"line":574},[973],{"type":534,"tag":571,"props":974,"children":975},{"style":724},[976],{"type":539,"value":727},{"type":534,"tag":571,"props":978,"children":979},{"class":573,"line":583},[980,984,988,992,996,1000,1004],{"type":534,"tag":571,"props":981,"children":982},{"style":724},[983],{"type":539,"value":735},{"type":534,"tag":571,"props":985,"children":986},{"style":738},[987],{"type":539,"value":741},{"type":534,"tag":571,"props":989,"children":990},{"style":744},[991],{"type":539,"value":747},{"type":534,"tag":571,"props":993,"children":994},{"style":738},[995],{"type":539,"value":752},{"type":534,"tag":571,"props":997,"children":998},{"style":755},[999],{"type":539,"value":758},{"type":534,"tag":571,"props":1001,"children":1002},{"style":738},[1003],{"type":539,"value":763},{"type":534,"tag":571,"props":1005,"children":1006},{"style":766},[1007],{"type":539,"value":769},{"type":534,"tag":571,"props":1009,"children":1010},{"class":573,"line":620},[1011,1015,1019,1023,1027,1031],{"type":534,"tag":571,"props":1012,"children":1013},{"style":724},[1014],{"type":539,"value":735},{"type":534,"tag":571,"props":1016,"children":1017},{"style":738},[1018],{"type":539,"value":741},{"type":534,"tag":571,"props":1020,"children":1021},{"style":744},[1022],{"type":539,"value":785},{"type":534,"tag":571,"props":1024,"children":1025},{"style":738},[1026],{"type":539,"value":752},{"type":534,"tag":571,"props":1028,"children":1029},{"style":755},[1030],{"type":539,"value":758},{"type":534,"tag":571,"props":1032,"children":1033},{"style":738},[1034],{"type":539,"value":798},{"type":534,"tag":571,"props":1036,"children":1037},{"class":573,"line":801},[1038],{"type":534,"tag":571,"props":1039,"children":1040},{"style":724},[1041],{"type":539,"value":807},{"type":534,"tag":571,"props":1043,"children":1044},{"class":573,"line":810},[1045,1049,1053,1057,1061,1065,1069,1073],{"type":534,"tag":571,"props":1046,"children":1047},{"style":814},[1048],{"type":539,"value":817},{"type":534,"tag":571,"props":1050,"children":1051},{"style":820},[1052],{"type":539,"value":823},{"type":534,"tag":571,"props":1054,"children":1055},{"style":738},[1056],{"type":539,"value":828},{"type":534,"tag":571,"props":1058,"children":1059},{"style":814},[1060],{"type":539,"value":833},{"type":534,"tag":571,"props":1062,"children":1063},{"style":738},[1064],{"type":539,"value":838},{"type":534,"tag":571,"props":1066,"children":1067},{"style":766},[1068],{"type":539,"value":843},{"type":534,"tag":571,"props":1070,"children":1071},{"style":738},[1072],{"type":539,"value":848},{"type":534,"tag":571,"props":1074,"children":1075},{"style":738},[1076],{"type":539,"value":853},{"type":534,"tag":571,"props":1078,"children":1079},{"class":573,"line":856},[1080],{"type":534,"tag":571,"props":1081,"children":1082},{"style":724},[1083],{"type":539,"value":1084},"  // 倒序遍历字符串\n",{"type":534,"tag":571,"props":1086,"children":1087},{"class":573,"line":951},[1088],{"type":534,"tag":571,"props":1089,"children":1090},{"style":724},[1091],{"type":539,"value":1092},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":534,"tag":571,"props":1094,"children":1096},{"class":573,"line":1095},8,[1097],{"type":534,"tag":571,"props":1098,"children":1099},{"style":724},[1100],{"type":539,"value":1101},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":534,"tag":571,"props":1103,"children":1105},{"class":573,"line":1104},9,[1106],{"type":534,"tag":571,"props":1107,"children":1108},{"style":724},[1109],{"type":539,"value":1110},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":534,"tag":571,"props":1112,"children":1114},{"class":573,"line":1113},10,[1115],{"type":534,"tag":571,"props":1116,"children":1117},{"style":724},[1118],{"type":539,"value":1119},"  // 4. 执行 j = i\n",{"type":534,"tag":571,"props":1121,"children":1123},{"class":573,"line":1122},11,[1124,1129,1134,1138],{"type":534,"tag":571,"props":1125,"children":1126},{"style":814},[1127],{"type":539,"value":1128},"  let",{"type":534,"tag":571,"props":1130,"children":1131},{"style":766},[1132],{"type":539,"value":1133}," res",{"type":534,"tag":571,"props":1135,"children":1136},{"style":738},[1137],{"type":539,"value":828},{"type":534,"tag":571,"props":1139,"children":1140},{"style":738},[1141],{"type":539,"value":1142}," [];\n",{"type":534,"tag":571,"props":1144,"children":1146},{"class":573,"line":1145},12,[1147,1151,1156,1160,1164,1168,1174,1179,1185],{"type":534,"tag":571,"props":1148,"children":1149},{"style":814},[1150],{"type":539,"value":1128},{"type":534,"tag":571,"props":1152,"children":1153},{"style":766},[1154],{"type":539,"value":1155}," i",{"type":534,"tag":571,"props":1157,"children":1158},{"style":738},[1159],{"type":539,"value":828},{"type":534,"tag":571,"props":1161,"children":1162},{"style":766},[1163],{"type":539,"value":867},{"type":534,"tag":571,"props":1165,"children":1166},{"style":738},[1167],{"type":539,"value":872},{"type":534,"tag":571,"props":1169,"children":1171},{"style":1170},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[1172],{"type":539,"value":1173},"length",{"type":534,"tag":571,"props":1175,"children":1176},{"style":814},[1177],{"type":539,"value":1178}," -",{"type":534,"tag":571,"props":1180,"children":1182},{"style":1181},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1183],{"type":539,"value":1184}," 1",{"type":534,"tag":571,"props":1186,"children":1187},{"style":738},[1188],{"type":539,"value":1189},";\n",{"type":534,"tag":571,"props":1191,"children":1193},{"class":573,"line":1192},13,[1194,1198,1203,1207,1211],{"type":534,"tag":571,"props":1195,"children":1196},{"style":814},[1197],{"type":539,"value":1128},{"type":534,"tag":571,"props":1199,"children":1200},{"style":766},[1201],{"type":539,"value":1202}," j",{"type":534,"tag":571,"props":1204,"children":1205},{"style":738},[1206],{"type":539,"value":828},{"type":534,"tag":571,"props":1208,"children":1209},{"style":766},[1210],{"type":539,"value":1155},{"type":534,"tag":571,"props":1212,"children":1213},{"style":738},[1214],{"type":539,"value":1189},{"type":534,"tag":571,"props":1216,"children":1218},{"class":573,"line":1217},14,[1219,1224,1228,1233,1238,1243,1247],{"type":534,"tag":571,"props":1220,"children":1221},{"style":744},[1222],{"type":539,"value":1223},"  while",{"type":534,"tag":571,"props":1225,"children":1226},{"style":738},[1227],{"type":539,"value":838},{"type":534,"tag":571,"props":1229,"children":1230},{"style":766},[1231],{"type":539,"value":1232},"i",{"type":534,"tag":571,"props":1234,"children":1235},{"style":738},[1236],{"type":539,"value":1237}," >=",{"type":534,"tag":571,"props":1239,"children":1240},{"style":1181},[1241],{"type":539,"value":1242}," 0",{"type":534,"tag":571,"props":1244,"children":1245},{"style":738},[1246],{"type":539,"value":848},{"type":534,"tag":571,"props":1248,"children":1249},{"style":738},[1250],{"type":539,"value":853},{"type":534,"tag":571,"props":1252,"children":1254},{"class":573,"line":1253},15,[1255,1260,1264,1268,1272,1276,1281,1285,1290,1294,1299,1304,1308,1312,1316,1320,1325,1330],{"type":534,"tag":571,"props":1256,"children":1257},{"style":744},[1258],{"type":539,"value":1259},"    while",{"type":534,"tag":571,"props":1261,"children":1262},{"style":738},[1263],{"type":539,"value":838},{"type":534,"tag":571,"props":1265,"children":1266},{"style":766},[1267],{"type":539,"value":1232},{"type":534,"tag":571,"props":1269,"children":1270},{"style":738},[1271],{"type":539,"value":1237},{"type":534,"tag":571,"props":1273,"children":1274},{"style":1181},[1275],{"type":539,"value":1242},{"type":534,"tag":571,"props":1277,"children":1278},{"style":814},[1279],{"type":539,"value":1280}," &&",{"type":534,"tag":571,"props":1282,"children":1283},{"style":766},[1284],{"type":539,"value":867},{"type":534,"tag":571,"props":1286,"children":1287},{"style":738},[1288],{"type":539,"value":1289},"[",{"type":534,"tag":571,"props":1291,"children":1292},{"style":766},[1293],{"type":539,"value":1232},{"type":534,"tag":571,"props":1295,"children":1296},{"style":738},[1297],{"type":539,"value":1298},"]",{"type":534,"tag":571,"props":1300,"children":1301},{"style":814},[1302],{"type":539,"value":1303}," !==",{"type":534,"tag":571,"props":1305,"children":1306},{"style":885},[1307],{"type":539,"value":893},{"type":534,"tag":571,"props":1309,"children":1310},{"style":885},[1311],{"type":539,"value":893},{"type":534,"tag":571,"props":1313,"children":1314},{"style":738},[1315],{"type":539,"value":848},{"type":534,"tag":571,"props":1317,"children":1318},{"style":766},[1319],{"type":539,"value":1155},{"type":534,"tag":571,"props":1321,"children":1322},{"style":814},[1323],{"type":539,"value":1324},"--",{"type":534,"tag":571,"props":1326,"children":1327},{"style":738},[1328],{"type":539,"value":1329},";",{"type":534,"tag":571,"props":1331,"children":1332},{"style":724},[1333],{"type":539,"value":1334}," // 搜索首个空格\n",{"type":534,"tag":571,"props":1336,"children":1338},{"class":573,"line":1337},16,[1339,1344,1348,1353,1357,1361,1365,1370,1374,1378,1383,1387,1392,1396,1400,1404,1409],{"type":534,"tag":571,"props":1340,"children":1341},{"style":766},[1342],{"type":539,"value":1343},"    res",{"type":534,"tag":571,"props":1345,"children":1346},{"style":738},[1347],{"type":539,"value":872},{"type":534,"tag":571,"props":1349,"children":1350},{"style":820},[1351],{"type":539,"value":1352},"push",{"type":534,"tag":571,"props":1354,"children":1355},{"style":738},[1356],{"type":539,"value":882},{"type":534,"tag":571,"props":1358,"children":1359},{"style":766},[1360],{"type":539,"value":843},{"type":534,"tag":571,"props":1362,"children":1363},{"style":738},[1364],{"type":539,"value":872},{"type":534,"tag":571,"props":1366,"children":1367},{"style":820},[1368],{"type":539,"value":1369},"substring",{"type":534,"tag":571,"props":1371,"children":1372},{"style":738},[1373],{"type":539,"value":882},{"type":534,"tag":571,"props":1375,"children":1376},{"style":766},[1377],{"type":539,"value":1232},{"type":534,"tag":571,"props":1379,"children":1380},{"style":814},[1381],{"type":539,"value":1382}," +",{"type":534,"tag":571,"props":1384,"children":1385},{"style":1181},[1386],{"type":539,"value":1184},{"type":534,"tag":571,"props":1388,"children":1389},{"style":738},[1390],{"type":539,"value":1391},",",{"type":534,"tag":571,"props":1393,"children":1394},{"style":766},[1395],{"type":539,"value":1202},{"type":534,"tag":571,"props":1397,"children":1398},{"style":814},[1399],{"type":539,"value":1382},{"type":534,"tag":571,"props":1401,"children":1402},{"style":1181},[1403],{"type":539,"value":1184},{"type":534,"tag":571,"props":1405,"children":1406},{"style":738},[1407],{"type":539,"value":1408},"));",{"type":534,"tag":571,"props":1410,"children":1411},{"style":724},[1412],{"type":539,"value":1413}," // 添加单词\n",{"type":534,"tag":571,"props":1415,"children":1417},{"class":573,"line":1416},17,[1418,1422,1426,1430,1434,1438,1442,1446,1450,1454,1458,1463,1467,1471,1475,1479,1483,1487],{"type":534,"tag":571,"props":1419,"children":1420},{"style":744},[1421],{"type":539,"value":1259},{"type":534,"tag":571,"props":1423,"children":1424},{"style":738},[1425],{"type":539,"value":838},{"type":534,"tag":571,"props":1427,"children":1428},{"style":766},[1429],{"type":539,"value":1232},{"type":534,"tag":571,"props":1431,"children":1432},{"style":738},[1433],{"type":539,"value":1237},{"type":534,"tag":571,"props":1435,"children":1436},{"style":1181},[1437],{"type":539,"value":1242},{"type":534,"tag":571,"props":1439,"children":1440},{"style":814},[1441],{"type":539,"value":1280},{"type":534,"tag":571,"props":1443,"children":1444},{"style":766},[1445],{"type":539,"value":867},{"type":534,"tag":571,"props":1447,"children":1448},{"style":738},[1449],{"type":539,"value":1289},{"type":534,"tag":571,"props":1451,"children":1452},{"style":766},[1453],{"type":539,"value":1232},{"type":534,"tag":571,"props":1455,"children":1456},{"style":738},[1457],{"type":539,"value":1298},{"type":534,"tag":571,"props":1459,"children":1460},{"style":814},[1461],{"type":539,"value":1462}," ===",{"type":534,"tag":571,"props":1464,"children":1465},{"style":885},[1466],{"type":539,"value":893},{"type":534,"tag":571,"props":1468,"children":1469},{"style":885},[1470],{"type":539,"value":893},{"type":534,"tag":571,"props":1472,"children":1473},{"style":738},[1474],{"type":539,"value":848},{"type":534,"tag":571,"props":1476,"children":1477},{"style":766},[1478],{"type":539,"value":1155},{"type":534,"tag":571,"props":1480,"children":1481},{"style":814},[1482],{"type":539,"value":1324},{"type":534,"tag":571,"props":1484,"children":1485},{"style":738},[1486],{"type":539,"value":1329},{"type":534,"tag":571,"props":1488,"children":1489},{"style":724},[1490],{"type":539,"value":1491}," // 跳过单词间空格\n",{"type":534,"tag":571,"props":1493,"children":1495},{"class":573,"line":1494},18,[1496,1501,1505,1509,1513],{"type":534,"tag":571,"props":1497,"children":1498},{"style":766},[1499],{"type":539,"value":1500},"    j",{"type":534,"tag":571,"props":1502,"children":1503},{"style":738},[1504],{"type":539,"value":828},{"type":534,"tag":571,"props":1506,"children":1507},{"style":766},[1508],{"type":539,"value":1155},{"type":534,"tag":571,"props":1510,"children":1511},{"style":738},[1512],{"type":539,"value":1329},{"type":534,"tag":571,"props":1514,"children":1515},{"style":724},[1516],{"type":539,"value":1517}," // 指针移动，指向下个单词的尾字符\n",{"type":534,"tag":571,"props":1519,"children":1521},{"class":573,"line":1520},19,[1522],{"type":534,"tag":571,"props":1523,"children":1524},{"style":738},[1525],{"type":539,"value":1526},"  }\n",{"type":534,"tag":571,"props":1528,"children":1530},{"class":573,"line":1529},20,[1531,1535,1539,1543,1547,1551,1555,1559,1563,1568],{"type":534,"tag":571,"props":1532,"children":1533},{"style":744},[1534],{"type":539,"value":862},{"type":534,"tag":571,"props":1536,"children":1537},{"style":766},[1538],{"type":539,"value":1133},{"type":534,"tag":571,"props":1540,"children":1541},{"style":738},[1542],{"type":539,"value":872},{"type":534,"tag":571,"props":1544,"children":1545},{"style":820},[1546],{"type":539,"value":931},{"type":534,"tag":571,"props":1548,"children":1549},{"style":738},[1550],{"type":539,"value":882},{"type":534,"tag":571,"props":1552,"children":1553},{"style":885},[1554],{"type":539,"value":888},{"type":534,"tag":571,"props":1556,"children":1557},{"style":885},[1558],{"type":539,"value":893},{"type":534,"tag":571,"props":1560,"children":1561},{"style":738},[1562],{"type":539,"value":898},{"type":534,"tag":571,"props":1564,"children":1565},{"style":820},[1566],{"type":539,"value":1567},"trim",{"type":534,"tag":571,"props":1569,"children":1570},{"style":738},[1571],{"type":539,"value":1572},"();\n",{"type":534,"tag":571,"props":1574,"children":1576},{"class":573,"line":1575},21,[1577],{"type":534,"tag":571,"props":1578,"children":1579},{"style":738},[1580],{"type":539,"value":957},{"type":534,"tag":1582,"props":1583,"children":1584},"style",{},[1585],{"type":539,"value":1586},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":527,"searchDepth":810,"depth":810,"links":1588},[1589,1590],{"id":696,"depth":583,"text":696},{"id":701,"depth":583,"text":701,"children":1591},[1592,1593],{"id":707,"depth":620,"text":707},{"id":960,"depth":620,"text":960},"markdown","content:1.algorithm:3.leetcode:3.major:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/3.major/151.reverse-words-in-a-string.md","md",[1600,1602],{"_path":177,"title":176,"description":1601},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":183,"title":182,"description":1603},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1714096144179]