[{"data":1,"prerenderedAt":1268},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/maximum-subarray":552,"/algorithm/leetcode/major/maximum-subarray-surround":1263},[4,272,311,529,537],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":310},"八股文","/endorsement",[276,286,297],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"构建工具","/endorsement/build-tools",[290],{"title":291,"_path":292,"children":293},"Webpack","/endorsement/build-tools/webpack",[294],{"title":295,"_path":296},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":298,"_path":299,"children":300},"Html","/endorsement/html",[301,304,307],{"title":302,"_path":303},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":305,"_path":306},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":308,"_path":309},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":312,"_path":313,"children":314,"icon":528},"代码考核","/code-assessment",[315,420,521],{"title":316,"_path":317,"children":318},"源码实现","/code-assessment/source",[319,353,369,397,404,411,414,417],{"title":320,"_path":321,"children":322},"原生 api","/code-assessment/source/native-api",[323,326,329,332,335,338,341,344,347,350],{"title":324,"_path":325},"polyfill","/code-assessment/source/native-api/polyfill",{"title":327,"_path":328},"ajax","/code-assessment/source/native-api/ajax",{"title":330,"_path":331},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":333,"_path":334},"new 操作符","/code-assessment/source/native-api/new",{"title":336,"_path":337},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":339,"_path":340},"定时器","/code-assessment/source/native-api/timer",{"title":342,"_path":343},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":345,"_path":346},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":348,"_path":349},"extends","/code-assessment/source/native-api/extends",{"title":351,"_path":352},"Promise","/code-assessment/source/native-api/promise",{"title":354,"_path":355,"children":356},"函数 Function","/code-assessment/source/function",[357,360,363,366],{"title":358,"_path":359},"函数防抖","/code-assessment/source/function/debounce",{"title":361,"_path":362},"函数节流","/code-assessment/source/function/throttle",{"title":364,"_path":365},"函数柯理化","/code-assessment/source/function/curry",{"title":367,"_path":368},"函数睡眠","/code-assessment/source/function/sleep",{"title":370,"_path":371,"children":372},"数组 Array","/code-assessment/source/array",[373,376,379,382,385,388,391,394],{"title":374,"_path":375},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":377,"_path":378},"数组扁平化","/code-assessment/source/array/flat",{"title":380,"_path":381},"原型方法","/code-assessment/source/array/prototype-method",{"title":383,"_path":384},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":386,"_path":387},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":389,"_path":390},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":392,"_path":393},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":395,"_path":396},"二维数组","/code-assessment/source/array/2d-array",{"title":398,"_path":399,"children":400},"字符串 String","/code-assessment/source/string",[401],{"title":402,"_path":403},"repeat()","/code-assessment/source/string/repeat",{"title":405,"_path":406,"children":407},"集合 Set","/code-assessment/source/set",[408],{"title":409,"_path":410},"遍历集合","/code-assessment/source/set/traverse",{"title":412,"_path":413},"获取通用类型","/code-assessment/source/get-generic-type",{"title":415,"_path":416},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":418,"_path":419},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":421,"_path":422,"children":423},"业务场景","/code-assessment/scene",[424,454,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518],{"title":351,"_path":425,"children":426},"/code-assessment/scene/promise",[427,430,433,436,439,442,445,448,451],{"title":428,"_path":429},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":431,"_path":432},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":434,"_path":435},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":437,"_path":438},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":440,"_path":441},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":443,"_path":444},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":446,"_path":447},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":449,"_path":450},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":452,"_path":453},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":455,"_path":456,"children":457},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[458,461],{"title":459,"_path":460},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":462,"_path":463},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":465,"_path":466},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":468,"_path":469},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":471,"_path":472},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":474,"_path":475},"倒计时","/code-assessment/scene/countdown",{"title":477,"_path":478},"日期格式化","/code-assessment/scene/date-format",{"title":480,"_path":481},"实现前端路由","/code-assessment/scene/frontend-route",{"title":483,"_path":484},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":486,"_path":487},"lodash.get","/code-assessment/scene/lodash-get",{"title":489,"_path":490},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":492,"_path":493},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":495,"_path":496},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":498,"_path":499},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":501,"_path":502},"随机数","/code-assessment/scene/random-number",{"title":504,"_path":505},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":507,"_path":508},"sku 算法实现","/code-assessment/scene/sku",{"title":510,"_path":511},"整数分割","/code-assessment/scene/split-number",{"title":513,"_path":514},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":516,"_path":517},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":519,"_path":520},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":522,"_path":523,"children":524},"Ts 类型挑战","/code-assessment/type-challeges",[525],{"title":526,"_path":527},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":530,"_path":531,"children":532,"icon":536},"项目","/project",[533],{"title":534,"_path":535},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":538,"_path":539,"children":540,"icon":551},"后端语言","/backend-languages",[541],{"title":542,"_path":543,"children":544},"Python","/backend-languages/python",[545,548],{"title":546,"_path":547},"基础","/backend-languages/python/base",{"title":549,"_path":550},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":126,"_dir":553,"_draft":554,"_partial":554,"_locale":555,"title":125,"description":556,"url":557,"body":558,"_type":1258,"_id":1259,"_source":1260,"_file":1261,"_extension":1262},"major",false,"","给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。","https://leetcode.cn/problems/maximum-subarray",{"type":559,"children":560,"toc":1252},"root",[561,568,573,578,617,622,645,650,673,678,693,698,704,709,715,1246],{"type":562,"tag":563,"props":564,"children":565},"element","p",{},[566],{"type":567,"value":556},"text",{"type":562,"tag":563,"props":569,"children":570},{},[571],{"type":567,"value":572},"子数组\n是数组中的一个连续部分。",{"type":562,"tag":563,"props":574,"children":575},{},[576],{"type":567,"value":577},"示例 1：",{"type":562,"tag":579,"props":580,"children":583},"pre",{"className":581,"code":582,"language":567,"meta":555,"style":555},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n输出：6\n解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\n",[584],{"type":562,"tag":585,"props":586,"children":587},"code",{"__ignoreMap":555},[588,599,608],{"type":562,"tag":589,"props":590,"children":593},"span",{"class":591,"line":592},"line",1,[594],{"type":562,"tag":589,"props":595,"children":596},{},[597],{"type":567,"value":598},"输入：nums = [-2,1,-3,4,-1,2,1,-5,4]\n",{"type":562,"tag":589,"props":600,"children":602},{"class":591,"line":601},2,[603],{"type":562,"tag":589,"props":604,"children":605},{},[606],{"type":567,"value":607},"输出：6\n",{"type":562,"tag":589,"props":609,"children":611},{"class":591,"line":610},3,[612],{"type":562,"tag":589,"props":613,"children":614},{},[615],{"type":567,"value":616},"解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。\n",{"type":562,"tag":563,"props":618,"children":619},{},[620],{"type":567,"value":621},"示例 2：",{"type":562,"tag":579,"props":623,"children":625},{"className":581,"code":624,"language":567,"meta":555,"style":555},"输入：nums = [1]\n输出：1\n",[626],{"type":562,"tag":585,"props":627,"children":628},{"__ignoreMap":555},[629,637],{"type":562,"tag":589,"props":630,"children":631},{"class":591,"line":592},[632],{"type":562,"tag":589,"props":633,"children":634},{},[635],{"type":567,"value":636},"输入：nums = [1]\n",{"type":562,"tag":589,"props":638,"children":639},{"class":591,"line":601},[640],{"type":562,"tag":589,"props":641,"children":642},{},[643],{"type":567,"value":644},"输出：1\n",{"type":562,"tag":563,"props":646,"children":647},{},[648],{"type":567,"value":649},"示例 3：",{"type":562,"tag":579,"props":651,"children":653},{"className":581,"code":652,"language":567,"meta":555,"style":555},"输入：nums = [5,4,-1,7,8]\n输出：23\n",[654],{"type":562,"tag":585,"props":655,"children":656},{"__ignoreMap":555},[657,665],{"type":562,"tag":589,"props":658,"children":659},{"class":591,"line":592},[660],{"type":562,"tag":589,"props":661,"children":662},{},[663],{"type":567,"value":664},"输入：nums = [5,4,-1,7,8]\n",{"type":562,"tag":589,"props":666,"children":667},{"class":591,"line":601},[668],{"type":562,"tag":589,"props":669,"children":670},{},[671],{"type":567,"value":672},"输出：23\n",{"type":562,"tag":563,"props":674,"children":675},{},[676],{"type":567,"value":677},"提示：",{"type":562,"tag":679,"props":680,"children":681},"ul",{},[682,688],{"type":562,"tag":683,"props":684,"children":685},"li",{},[686],{"type":567,"value":687},"1 \u003C= nums.length \u003C= 105",{"type":562,"tag":683,"props":689,"children":690},{},[691],{"type":567,"value":692},"-104 \u003C= nums[i] \u003C= 104",{"type":562,"tag":563,"props":694,"children":695},{},[696],{"type":567,"value":697},"进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。",{"type":562,"tag":699,"props":700,"children":702},"h2",{"id":701},"解题思路",[703],{"type":567,"value":701},{"type":562,"tag":699,"props":705,"children":707},{"id":706},"实现",[708],{"type":567,"value":706},{"type":562,"tag":710,"props":711,"children":713},"h3",{"id":712},"动态规划",[714],{"type":567,"value":712},{"type":562,"tag":579,"props":716,"children":720},{"className":717,"code":718,"language":719,"meta":555,"style":555},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxSubArray = function (nums) {\n  let dp = [];\n  dp[0] = nums[0];\n  let res = dp[0];\n  for (let i = 1; i \u003C nums.length; i++) {\n    dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]);\n    res = Math.max(res, dp[i]);\n  }\n  return res;\n};\n","js",[721],{"type":562,"tag":585,"props":722,"children":723},{"__ignoreMap":555},[724,733,775,805,814,860,883,930,963,1045,1155,1210,1219,1237],{"type":562,"tag":589,"props":725,"children":726},{"class":591,"line":592},[727],{"type":562,"tag":589,"props":728,"children":730},{"style":729},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[731],{"type":567,"value":732},"/**\n",{"type":562,"tag":589,"props":734,"children":735},{"class":591,"line":601},[736,741,747,753,758,764,769],{"type":562,"tag":589,"props":737,"children":738},{"style":729},[739],{"type":567,"value":740}," * ",{"type":562,"tag":589,"props":742,"children":744},{"style":743},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[745],{"type":567,"value":746},"@",{"type":562,"tag":589,"props":748,"children":750},{"style":749},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[751],{"type":567,"value":752},"param",{"type":562,"tag":589,"props":754,"children":755},{"style":743},[756],{"type":567,"value":757}," {",{"type":562,"tag":589,"props":759,"children":761},{"style":760},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[762],{"type":567,"value":763},"number[]",{"type":562,"tag":589,"props":765,"children":766},{"style":743},[767],{"type":567,"value":768},"}",{"type":562,"tag":589,"props":770,"children":772},{"style":771},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[773],{"type":567,"value":774}," nums\n",{"type":562,"tag":589,"props":776,"children":777},{"class":591,"line":610},[778,782,786,791,795,800],{"type":562,"tag":589,"props":779,"children":780},{"style":729},[781],{"type":567,"value":740},{"type":562,"tag":589,"props":783,"children":784},{"style":743},[785],{"type":567,"value":746},{"type":562,"tag":589,"props":787,"children":788},{"style":749},[789],{"type":567,"value":790},"return",{"type":562,"tag":589,"props":792,"children":793},{"style":743},[794],{"type":567,"value":757},{"type":562,"tag":589,"props":796,"children":797},{"style":760},[798],{"type":567,"value":799},"number",{"type":562,"tag":589,"props":801,"children":802},{"style":743},[803],{"type":567,"value":804},"}\n",{"type":562,"tag":589,"props":806,"children":808},{"class":591,"line":807},4,[809],{"type":562,"tag":589,"props":810,"children":811},{"style":729},[812],{"type":567,"value":813}," */\n",{"type":562,"tag":589,"props":815,"children":817},{"class":591,"line":816},5,[818,824,830,835,840,845,850,855],{"type":562,"tag":589,"props":819,"children":821},{"style":820},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[822],{"type":567,"value":823},"var",{"type":562,"tag":589,"props":825,"children":827},{"style":826},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[828],{"type":567,"value":829}," maxSubArray",{"type":562,"tag":589,"props":831,"children":832},{"style":743},[833],{"type":567,"value":834}," =",{"type":562,"tag":589,"props":836,"children":837},{"style":820},[838],{"type":567,"value":839}," function",{"type":562,"tag":589,"props":841,"children":842},{"style":743},[843],{"type":567,"value":844}," (",{"type":562,"tag":589,"props":846,"children":847},{"style":771},[848],{"type":567,"value":849},"nums",{"type":562,"tag":589,"props":851,"children":852},{"style":743},[853],{"type":567,"value":854},")",{"type":562,"tag":589,"props":856,"children":857},{"style":743},[858],{"type":567,"value":859}," {\n",{"type":562,"tag":589,"props":861,"children":863},{"class":591,"line":862},6,[864,869,874,878],{"type":562,"tag":589,"props":865,"children":866},{"style":820},[867],{"type":567,"value":868},"  let",{"type":562,"tag":589,"props":870,"children":871},{"style":771},[872],{"type":567,"value":873}," dp",{"type":562,"tag":589,"props":875,"children":876},{"style":743},[877],{"type":567,"value":834},{"type":562,"tag":589,"props":879,"children":880},{"style":743},[881],{"type":567,"value":882}," [];\n",{"type":562,"tag":589,"props":884,"children":886},{"class":591,"line":885},7,[887,892,897,903,908,912,917,921,925],{"type":562,"tag":589,"props":888,"children":889},{"style":771},[890],{"type":567,"value":891},"  dp",{"type":562,"tag":589,"props":893,"children":894},{"style":743},[895],{"type":567,"value":896},"[",{"type":562,"tag":589,"props":898,"children":900},{"style":899},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[901],{"type":567,"value":902},"0",{"type":562,"tag":589,"props":904,"children":905},{"style":743},[906],{"type":567,"value":907},"]",{"type":562,"tag":589,"props":909,"children":910},{"style":743},[911],{"type":567,"value":834},{"type":562,"tag":589,"props":913,"children":914},{"style":771},[915],{"type":567,"value":916}," nums",{"type":562,"tag":589,"props":918,"children":919},{"style":743},[920],{"type":567,"value":896},{"type":562,"tag":589,"props":922,"children":923},{"style":899},[924],{"type":567,"value":902},{"type":562,"tag":589,"props":926,"children":927},{"style":743},[928],{"type":567,"value":929},"];\n",{"type":562,"tag":589,"props":931,"children":933},{"class":591,"line":932},8,[934,938,943,947,951,955,959],{"type":562,"tag":589,"props":935,"children":936},{"style":820},[937],{"type":567,"value":868},{"type":562,"tag":589,"props":939,"children":940},{"style":771},[941],{"type":567,"value":942}," res",{"type":562,"tag":589,"props":944,"children":945},{"style":743},[946],{"type":567,"value":834},{"type":562,"tag":589,"props":948,"children":949},{"style":771},[950],{"type":567,"value":873},{"type":562,"tag":589,"props":952,"children":953},{"style":743},[954],{"type":567,"value":896},{"type":562,"tag":589,"props":956,"children":957},{"style":899},[958],{"type":567,"value":902},{"type":562,"tag":589,"props":960,"children":961},{"style":743},[962],{"type":567,"value":929},{"type":562,"tag":589,"props":964,"children":966},{"class":591,"line":965},9,[967,972,976,981,986,990,995,1000,1004,1009,1013,1018,1024,1028,1032,1037,1041],{"type":562,"tag":589,"props":968,"children":969},{"style":749},[970],{"type":567,"value":971},"  for",{"type":562,"tag":589,"props":973,"children":974},{"style":743},[975],{"type":567,"value":844},{"type":562,"tag":589,"props":977,"children":978},{"style":820},[979],{"type":567,"value":980},"let",{"type":562,"tag":589,"props":982,"children":983},{"style":771},[984],{"type":567,"value":985}," i",{"type":562,"tag":589,"props":987,"children":988},{"style":743},[989],{"type":567,"value":834},{"type":562,"tag":589,"props":991,"children":992},{"style":899},[993],{"type":567,"value":994}," 1",{"type":562,"tag":589,"props":996,"children":997},{"style":743},[998],{"type":567,"value":999},";",{"type":562,"tag":589,"props":1001,"children":1002},{"style":771},[1003],{"type":567,"value":985},{"type":562,"tag":589,"props":1005,"children":1006},{"style":743},[1007],{"type":567,"value":1008}," \u003C",{"type":562,"tag":589,"props":1010,"children":1011},{"style":771},[1012],{"type":567,"value":916},{"type":562,"tag":589,"props":1014,"children":1015},{"style":743},[1016],{"type":567,"value":1017},".",{"type":562,"tag":589,"props":1019,"children":1021},{"style":1020},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[1022],{"type":567,"value":1023},"length",{"type":562,"tag":589,"props":1025,"children":1026},{"style":743},[1027],{"type":567,"value":999},{"type":562,"tag":589,"props":1029,"children":1030},{"style":771},[1031],{"type":567,"value":985},{"type":562,"tag":589,"props":1033,"children":1034},{"style":820},[1035],{"type":567,"value":1036},"++",{"type":562,"tag":589,"props":1038,"children":1039},{"style":743},[1040],{"type":567,"value":854},{"type":562,"tag":589,"props":1042,"children":1043},{"style":743},[1044],{"type":567,"value":859},{"type":562,"tag":589,"props":1046,"children":1048},{"class":591,"line":1047},10,[1049,1054,1058,1063,1067,1071,1076,1080,1085,1090,1095,1099,1103,1108,1112,1116,1121,1125,1129,1133,1138,1142,1146,1150],{"type":562,"tag":589,"props":1050,"children":1051},{"style":771},[1052],{"type":567,"value":1053},"    dp",{"type":562,"tag":589,"props":1055,"children":1056},{"style":743},[1057],{"type":567,"value":896},{"type":562,"tag":589,"props":1059,"children":1060},{"style":771},[1061],{"type":567,"value":1062},"i",{"type":562,"tag":589,"props":1064,"children":1065},{"style":743},[1066],{"type":567,"value":907},{"type":562,"tag":589,"props":1068,"children":1069},{"style":743},[1070],{"type":567,"value":834},{"type":562,"tag":589,"props":1072,"children":1073},{"style":771},[1074],{"type":567,"value":1075}," Math",{"type":562,"tag":589,"props":1077,"children":1078},{"style":743},[1079],{"type":567,"value":1017},{"type":562,"tag":589,"props":1081,"children":1082},{"style":826},[1083],{"type":567,"value":1084},"max",{"type":562,"tag":589,"props":1086,"children":1087},{"style":743},[1088],{"type":567,"value":1089},"(",{"type":562,"tag":589,"props":1091,"children":1092},{"style":771},[1093],{"type":567,"value":1094},"dp",{"type":562,"tag":589,"props":1096,"children":1097},{"style":743},[1098],{"type":567,"value":896},{"type":562,"tag":589,"props":1100,"children":1101},{"style":771},[1102],{"type":567,"value":1062},{"type":562,"tag":589,"props":1104,"children":1105},{"style":820},[1106],{"type":567,"value":1107}," -",{"type":562,"tag":589,"props":1109,"children":1110},{"style":899},[1111],{"type":567,"value":994},{"type":562,"tag":589,"props":1113,"children":1114},{"style":743},[1115],{"type":567,"value":907},{"type":562,"tag":589,"props":1117,"children":1118},{"style":820},[1119],{"type":567,"value":1120}," +",{"type":562,"tag":589,"props":1122,"children":1123},{"style":771},[1124],{"type":567,"value":916},{"type":562,"tag":589,"props":1126,"children":1127},{"style":743},[1128],{"type":567,"value":896},{"type":562,"tag":589,"props":1130,"children":1131},{"style":771},[1132],{"type":567,"value":1062},{"type":562,"tag":589,"props":1134,"children":1135},{"style":743},[1136],{"type":567,"value":1137},"],",{"type":562,"tag":589,"props":1139,"children":1140},{"style":771},[1141],{"type":567,"value":916},{"type":562,"tag":589,"props":1143,"children":1144},{"style":743},[1145],{"type":567,"value":896},{"type":562,"tag":589,"props":1147,"children":1148},{"style":771},[1149],{"type":567,"value":1062},{"type":562,"tag":589,"props":1151,"children":1152},{"style":743},[1153],{"type":567,"value":1154},"]);\n",{"type":562,"tag":589,"props":1156,"children":1158},{"class":591,"line":1157},11,[1159,1164,1168,1172,1176,1180,1184,1189,1194,1198,1202,1206],{"type":562,"tag":589,"props":1160,"children":1161},{"style":771},[1162],{"type":567,"value":1163},"    res",{"type":562,"tag":589,"props":1165,"children":1166},{"style":743},[1167],{"type":567,"value":834},{"type":562,"tag":589,"props":1169,"children":1170},{"style":771},[1171],{"type":567,"value":1075},{"type":562,"tag":589,"props":1173,"children":1174},{"style":743},[1175],{"type":567,"value":1017},{"type":562,"tag":589,"props":1177,"children":1178},{"style":826},[1179],{"type":567,"value":1084},{"type":562,"tag":589,"props":1181,"children":1182},{"style":743},[1183],{"type":567,"value":1089},{"type":562,"tag":589,"props":1185,"children":1186},{"style":771},[1187],{"type":567,"value":1188},"res",{"type":562,"tag":589,"props":1190,"children":1191},{"style":743},[1192],{"type":567,"value":1193},",",{"type":562,"tag":589,"props":1195,"children":1196},{"style":771},[1197],{"type":567,"value":873},{"type":562,"tag":589,"props":1199,"children":1200},{"style":743},[1201],{"type":567,"value":896},{"type":562,"tag":589,"props":1203,"children":1204},{"style":771},[1205],{"type":567,"value":1062},{"type":562,"tag":589,"props":1207,"children":1208},{"style":743},[1209],{"type":567,"value":1154},{"type":562,"tag":589,"props":1211,"children":1213},{"class":591,"line":1212},12,[1214],{"type":562,"tag":589,"props":1215,"children":1216},{"style":743},[1217],{"type":567,"value":1218},"  }\n",{"type":562,"tag":589,"props":1220,"children":1222},{"class":591,"line":1221},13,[1223,1228,1232],{"type":562,"tag":589,"props":1224,"children":1225},{"style":749},[1226],{"type":567,"value":1227},"  return",{"type":562,"tag":589,"props":1229,"children":1230},{"style":771},[1231],{"type":567,"value":942},{"type":562,"tag":589,"props":1233,"children":1234},{"style":743},[1235],{"type":567,"value":1236},";\n",{"type":562,"tag":589,"props":1238,"children":1240},{"class":591,"line":1239},14,[1241],{"type":562,"tag":589,"props":1242,"children":1243},{"style":743},[1244],{"type":567,"value":1245},"};\n",{"type":562,"tag":1247,"props":1248,"children":1249},"style",{},[1250],{"type":567,"value":1251},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":555,"searchDepth":816,"depth":816,"links":1253},[1254,1255],{"id":701,"depth":601,"text":701},{"id":706,"depth":601,"text":706,"children":1256},[1257],{"id":712,"depth":610,"text":712},"markdown","content:1.algorithm:3.leetcode:3.major:53.maximum-subarray.md","content","1.algorithm/3.leetcode/3.major/53.maximum-subarray.md","md",[1264,1266],{"_path":123,"title":122,"description":1265},"给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。",{"_path":129,"title":128,"description":1267},"以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [start_i, end_i] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。",1716810725109]