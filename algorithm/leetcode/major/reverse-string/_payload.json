[{"data":1,"prerenderedAt":1094},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/reverse-string":549,"/algorithm/leetcode/major/reverse-string-surround":1089},[4,272,301,517,525,534],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":300},"八股文","/endorsement",[276,287],{"title":277,"_path":278,"children":279},"构建工具","/endorsement/build-tools",[280],{"title":281,"_path":282,"children":283},"Webpack","/endorsement/build-tools/webpack",[284],{"title":285,"_path":286},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":288,"_path":289,"children":290},"Html","/endorsement/html",[291,294,297],{"title":292,"_path":293},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":295,"_path":296},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":298,"_path":299},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":302,"_path":303,"children":304,"icon":516},"代码考核","/code-assessment",[305,407,509],{"title":306,"_path":307,"children":308},"源码实现","/code-assessment/source",[309,340,356,384,391,398,401,404],{"title":310,"_path":311,"children":312},"原生 api","/code-assessment/source/native-api",[313,316,319,322,325,328,331,334,337],{"title":314,"_path":315},"polyfill","/code-assessment/source/native-api/polyfill",{"title":317,"_path":318},"ajax","/code-assessment/source/native-api/ajax",{"title":320,"_path":321},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":323,"_path":324},"new 操作符","/code-assessment/source/native-api/new",{"title":326,"_path":327},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":329,"_path":330},"定时器","/code-assessment/source/native-api/timer",{"title":332,"_path":333},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":335,"_path":336},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":338,"_path":339},"extends","/code-assessment/source/native-api/extends",{"title":341,"_path":342,"children":343},"函数 Function","/code-assessment/source/function",[344,347,350,353],{"title":345,"_path":346},"函数防抖","/code-assessment/source/function/debounce",{"title":348,"_path":349},"函数节流","/code-assessment/source/function/throttle",{"title":351,"_path":352},"函数柯理化","/code-assessment/source/function/curry",{"title":354,"_path":355},"函数睡眠","/code-assessment/source/function/sleep",{"title":357,"_path":358,"children":359},"数组 Array","/code-assessment/source/array",[360,363,366,369,372,375,378,381],{"title":361,"_path":362},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":364,"_path":365},"数组扁平化","/code-assessment/source/array/flat",{"title":367,"_path":368},"原型方法","/code-assessment/source/array/prototype-method",{"title":370,"_path":371},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":373,"_path":374},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":376,"_path":377},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":379,"_path":380},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":382,"_path":383},"二维数组","/code-assessment/source/array/2d-array",{"title":385,"_path":386,"children":387},"字符串 String","/code-assessment/source/string",[388],{"title":389,"_path":390},"repeat()","/code-assessment/source/string/repeat",{"title":392,"_path":393,"children":394},"集合 Set","/code-assessment/source/set",[395],{"title":396,"_path":397},"遍历集合","/code-assessment/source/set/traverse",{"title":399,"_path":400},"获取通用类型","/code-assessment/source/get-generic-type",{"title":402,"_path":403},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":405,"_path":406},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":408,"_path":409,"children":410},"业务场景","/code-assessment/scene",[411,442,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506],{"title":412,"_path":413,"children":414},"Promise","/code-assessment/scene/promise",[415,418,421,424,427,430,433,436,439],{"title":416,"_path":417},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":419,"_path":420},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":422,"_path":423},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":425,"_path":426},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":428,"_path":429},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":431,"_path":432},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":434,"_path":435},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":437,"_path":438},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":440,"_path":441},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":443,"_path":444,"children":445},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[446,449],{"title":447,"_path":448},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":450,"_path":451},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":453,"_path":454},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":456,"_path":457},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":459,"_path":460},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":462,"_path":463},"倒计时","/code-assessment/scene/countdown",{"title":465,"_path":466},"日期格式化","/code-assessment/scene/date-format",{"title":468,"_path":469},"实现前端路由","/code-assessment/scene/frontend-route",{"title":471,"_path":472},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":474,"_path":475},"lodash.get","/code-assessment/scene/lodash-get",{"title":477,"_path":478},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":480,"_path":481},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":483,"_path":484},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":486,"_path":487},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":489,"_path":490},"随机数","/code-assessment/scene/random-number",{"title":492,"_path":493},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":495,"_path":496},"sku 算法实现","/code-assessment/scene/sku",{"title":498,"_path":499},"整数分割","/code-assessment/scene/split-number",{"title":501,"_path":502},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":504,"_path":505},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":507,"_path":508},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":510,"_path":511,"children":512},"Ts 类型挑战","/code-assessment/type-challeges",[513],{"title":514,"_path":515},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":518,"_path":519,"children":520,"icon":524},"项目","/project",[521],{"title":522,"_path":523},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":526,"_path":527,"children":528,"icon":533},"设计模式","/design-mode",[529,530],{"title":526,"_path":527},{"title":531,"_path":532},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":535,"_path":536,"children":537,"icon":548},"后端语言","/backend-languages",[538],{"title":539,"_path":540,"children":541},"Python","/backend-languages/python",[542,545],{"title":543,"_path":544},"基础","/backend-languages/python/base",{"title":546,"_path":547},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":228,"_dir":550,"_draft":551,"_partial":551,"_locale":552,"title":227,"description":553,"url":554,"body":555,"_type":1084,"_id":1085,"_source":1086,"_file":1087,"_extension":1088},"major",false,"","编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。","https://leetcode.cn/problems/reverse-string",{"type":556,"children":557,"toc":1078},"root",[558,565,570,575,605,610,633,638,653,659,664,670,1072],{"type":559,"tag":560,"props":561,"children":562},"element","p",{},[563],{"type":564,"value":553},"text",{"type":559,"tag":560,"props":566,"children":567},{},[568],{"type":564,"value":569},"不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。",{"type":559,"tag":560,"props":571,"children":572},{},[573],{"type":564,"value":574},"示例 1：",{"type":559,"tag":576,"props":577,"children":580},"pre",{"className":578,"code":579,"language":564,"meta":552,"style":552},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]\n",[581],{"type":559,"tag":582,"props":583,"children":584},"code",{"__ignoreMap":552},[585,596],{"type":559,"tag":586,"props":587,"children":590},"span",{"class":588,"line":589},"line",1,[591],{"type":559,"tag":586,"props":592,"children":593},{},[594],{"type":564,"value":595},"输入：s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n",{"type":559,"tag":586,"props":597,"children":599},{"class":588,"line":598},2,[600],{"type":559,"tag":586,"props":601,"children":602},{},[603],{"type":564,"value":604},"输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]\n",{"type":559,"tag":560,"props":606,"children":607},{},[608],{"type":564,"value":609},"示例 2：",{"type":559,"tag":576,"props":611,"children":613},{"className":578,"code":612,"language":564,"meta":552,"style":552},"输入：s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n",[614],{"type":559,"tag":582,"props":615,"children":616},{"__ignoreMap":552},[617,625],{"type":559,"tag":586,"props":618,"children":619},{"class":588,"line":589},[620],{"type":559,"tag":586,"props":621,"children":622},{},[623],{"type":564,"value":624},"输入：s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n",{"type":559,"tag":586,"props":626,"children":627},{"class":588,"line":598},[628],{"type":559,"tag":586,"props":629,"children":630},{},[631],{"type":564,"value":632},"输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n",{"type":559,"tag":560,"props":634,"children":635},{},[636],{"type":564,"value":637},"提示：",{"type":559,"tag":639,"props":640,"children":641},"ul",{},[642,648],{"type":559,"tag":643,"props":644,"children":645},"li",{},[646],{"type":564,"value":647},"1 \u003C= s.length \u003C= 10^5",{"type":559,"tag":643,"props":649,"children":650},{},[651],{"type":564,"value":652},"s[i] 都是 ASCII 码表中的可打印字符",{"type":559,"tag":654,"props":655,"children":657},"h2",{"id":656},"解题思路",[658],{"type":564,"value":656},{"type":559,"tag":654,"props":660,"children":662},{"id":661},"实现",[663],{"type":564,"value":661},{"type":559,"tag":665,"props":666,"children":668},"h3",{"id":667},"双指针",[669],{"type":564,"value":667},{"type":559,"tag":576,"props":671,"children":675},{"className":672,"code":673,"language":674,"meta":552,"style":552},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {character[]} s\n * @return {void} Do not return anything, modify s in-place instead.\n */\nvar reverseString = function (s) {\n  let left = 0;\n  let right = s.length - 1;\n  while (left \u003C right) {\n    [s[left], s[right]] = [s[right], s[left]];\n    left++;\n    right--;\n  }\n};\n","js",[676],{"type":559,"tag":582,"props":677,"children":678},{"__ignoreMap":552},[679,688,730,765,774,820,849,896,931,1018,1036,1054,1063],{"type":559,"tag":586,"props":680,"children":681},{"class":588,"line":589},[682],{"type":559,"tag":586,"props":683,"children":685},{"style":684},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[686],{"type":564,"value":687},"/**\n",{"type":559,"tag":586,"props":689,"children":690},{"class":588,"line":598},[691,696,702,708,713,719,724],{"type":559,"tag":586,"props":692,"children":693},{"style":684},[694],{"type":564,"value":695}," * ",{"type":559,"tag":586,"props":697,"children":699},{"style":698},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[700],{"type":564,"value":701},"@",{"type":559,"tag":586,"props":703,"children":705},{"style":704},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[706],{"type":564,"value":707},"param",{"type":559,"tag":586,"props":709,"children":710},{"style":698},[711],{"type":564,"value":712}," {",{"type":559,"tag":586,"props":714,"children":716},{"style":715},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[717],{"type":564,"value":718},"character[]",{"type":559,"tag":586,"props":720,"children":721},{"style":698},[722],{"type":564,"value":723},"}",{"type":559,"tag":586,"props":725,"children":727},{"style":726},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[728],{"type":564,"value":729}," s\n",{"type":559,"tag":586,"props":731,"children":733},{"class":588,"line":732},3,[734,738,742,747,751,756,760],{"type":559,"tag":586,"props":735,"children":736},{"style":684},[737],{"type":564,"value":695},{"type":559,"tag":586,"props":739,"children":740},{"style":698},[741],{"type":564,"value":701},{"type":559,"tag":586,"props":743,"children":744},{"style":704},[745],{"type":564,"value":746},"return",{"type":559,"tag":586,"props":748,"children":749},{"style":698},[750],{"type":564,"value":712},{"type":559,"tag":586,"props":752,"children":753},{"style":715},[754],{"type":564,"value":755},"void",{"type":559,"tag":586,"props":757,"children":758},{"style":698},[759],{"type":564,"value":723},{"type":559,"tag":586,"props":761,"children":762},{"style":684},[763],{"type":564,"value":764}," Do not return anything, modify s in-place instead.\n",{"type":559,"tag":586,"props":766,"children":768},{"class":588,"line":767},4,[769],{"type":559,"tag":586,"props":770,"children":771},{"style":684},[772],{"type":564,"value":773}," */\n",{"type":559,"tag":586,"props":775,"children":777},{"class":588,"line":776},5,[778,784,790,795,800,805,810,815],{"type":559,"tag":586,"props":779,"children":781},{"style":780},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[782],{"type":564,"value":783},"var",{"type":559,"tag":586,"props":785,"children":787},{"style":786},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[788],{"type":564,"value":789}," reverseString",{"type":559,"tag":586,"props":791,"children":792},{"style":698},[793],{"type":564,"value":794}," =",{"type":559,"tag":586,"props":796,"children":797},{"style":780},[798],{"type":564,"value":799}," function",{"type":559,"tag":586,"props":801,"children":802},{"style":698},[803],{"type":564,"value":804}," (",{"type":559,"tag":586,"props":806,"children":807},{"style":726},[808],{"type":564,"value":809},"s",{"type":559,"tag":586,"props":811,"children":812},{"style":698},[813],{"type":564,"value":814},")",{"type":559,"tag":586,"props":816,"children":817},{"style":698},[818],{"type":564,"value":819}," {\n",{"type":559,"tag":586,"props":821,"children":823},{"class":588,"line":822},6,[824,829,834,838,844],{"type":559,"tag":586,"props":825,"children":826},{"style":780},[827],{"type":564,"value":828},"  let",{"type":559,"tag":586,"props":830,"children":831},{"style":726},[832],{"type":564,"value":833}," left",{"type":559,"tag":586,"props":835,"children":836},{"style":698},[837],{"type":564,"value":794},{"type":559,"tag":586,"props":839,"children":841},{"style":840},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[842],{"type":564,"value":843}," 0",{"type":559,"tag":586,"props":845,"children":846},{"style":698},[847],{"type":564,"value":848},";\n",{"type":559,"tag":586,"props":850,"children":852},{"class":588,"line":851},7,[853,857,862,866,871,876,882,887,892],{"type":559,"tag":586,"props":854,"children":855},{"style":780},[856],{"type":564,"value":828},{"type":559,"tag":586,"props":858,"children":859},{"style":726},[860],{"type":564,"value":861}," right",{"type":559,"tag":586,"props":863,"children":864},{"style":698},[865],{"type":564,"value":794},{"type":559,"tag":586,"props":867,"children":868},{"style":726},[869],{"type":564,"value":870}," s",{"type":559,"tag":586,"props":872,"children":873},{"style":698},[874],{"type":564,"value":875},".",{"type":559,"tag":586,"props":877,"children":879},{"style":878},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[880],{"type":564,"value":881},"length",{"type":559,"tag":586,"props":883,"children":884},{"style":780},[885],{"type":564,"value":886}," -",{"type":559,"tag":586,"props":888,"children":889},{"style":840},[890],{"type":564,"value":891}," 1",{"type":559,"tag":586,"props":893,"children":894},{"style":698},[895],{"type":564,"value":848},{"type":559,"tag":586,"props":897,"children":899},{"class":588,"line":898},8,[900,905,909,914,919,923,927],{"type":559,"tag":586,"props":901,"children":902},{"style":704},[903],{"type":564,"value":904},"  while",{"type":559,"tag":586,"props":906,"children":907},{"style":698},[908],{"type":564,"value":804},{"type":559,"tag":586,"props":910,"children":911},{"style":726},[912],{"type":564,"value":913},"left",{"type":559,"tag":586,"props":915,"children":916},{"style":698},[917],{"type":564,"value":918}," \u003C",{"type":559,"tag":586,"props":920,"children":921},{"style":726},[922],{"type":564,"value":861},{"type":559,"tag":586,"props":924,"children":925},{"style":698},[926],{"type":564,"value":814},{"type":559,"tag":586,"props":928,"children":929},{"style":698},[930],{"type":564,"value":819},{"type":559,"tag":586,"props":932,"children":934},{"class":588,"line":933},9,[935,940,944,949,953,958,962,966,971,976,980,985,989,993,997,1001,1005,1009,1013],{"type":559,"tag":586,"props":936,"children":937},{"style":698},[938],{"type":564,"value":939},"    [",{"type":559,"tag":586,"props":941,"children":942},{"style":726},[943],{"type":564,"value":809},{"type":559,"tag":586,"props":945,"children":946},{"style":698},[947],{"type":564,"value":948},"[",{"type":559,"tag":586,"props":950,"children":951},{"style":726},[952],{"type":564,"value":913},{"type":559,"tag":586,"props":954,"children":955},{"style":698},[956],{"type":564,"value":957},"],",{"type":559,"tag":586,"props":959,"children":960},{"style":726},[961],{"type":564,"value":870},{"type":559,"tag":586,"props":963,"children":964},{"style":698},[965],{"type":564,"value":948},{"type":559,"tag":586,"props":967,"children":968},{"style":726},[969],{"type":564,"value":970},"right",{"type":559,"tag":586,"props":972,"children":973},{"style":698},[974],{"type":564,"value":975},"]]",{"type":559,"tag":586,"props":977,"children":978},{"style":698},[979],{"type":564,"value":794},{"type":559,"tag":586,"props":981,"children":982},{"style":698},[983],{"type":564,"value":984}," [",{"type":559,"tag":586,"props":986,"children":987},{"style":726},[988],{"type":564,"value":809},{"type":559,"tag":586,"props":990,"children":991},{"style":698},[992],{"type":564,"value":948},{"type":559,"tag":586,"props":994,"children":995},{"style":726},[996],{"type":564,"value":970},{"type":559,"tag":586,"props":998,"children":999},{"style":698},[1000],{"type":564,"value":957},{"type":559,"tag":586,"props":1002,"children":1003},{"style":726},[1004],{"type":564,"value":870},{"type":559,"tag":586,"props":1006,"children":1007},{"style":698},[1008],{"type":564,"value":948},{"type":559,"tag":586,"props":1010,"children":1011},{"style":726},[1012],{"type":564,"value":913},{"type":559,"tag":586,"props":1014,"children":1015},{"style":698},[1016],{"type":564,"value":1017},"]];\n",{"type":559,"tag":586,"props":1019,"children":1021},{"class":588,"line":1020},10,[1022,1027,1032],{"type":559,"tag":586,"props":1023,"children":1024},{"style":726},[1025],{"type":564,"value":1026},"    left",{"type":559,"tag":586,"props":1028,"children":1029},{"style":780},[1030],{"type":564,"value":1031},"++",{"type":559,"tag":586,"props":1033,"children":1034},{"style":698},[1035],{"type":564,"value":848},{"type":559,"tag":586,"props":1037,"children":1039},{"class":588,"line":1038},11,[1040,1045,1050],{"type":559,"tag":586,"props":1041,"children":1042},{"style":726},[1043],{"type":564,"value":1044},"    right",{"type":559,"tag":586,"props":1046,"children":1047},{"style":780},[1048],{"type":564,"value":1049},"--",{"type":559,"tag":586,"props":1051,"children":1052},{"style":698},[1053],{"type":564,"value":848},{"type":559,"tag":586,"props":1055,"children":1057},{"class":588,"line":1056},12,[1058],{"type":559,"tag":586,"props":1059,"children":1060},{"style":698},[1061],{"type":564,"value":1062},"  }\n",{"type":559,"tag":586,"props":1064,"children":1066},{"class":588,"line":1065},13,[1067],{"type":559,"tag":586,"props":1068,"children":1069},{"style":698},[1070],{"type":564,"value":1071},"};\n",{"type":559,"tag":1073,"props":1074,"children":1075},"style",{},[1076],{"type":564,"value":1077},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":552,"searchDepth":776,"depth":776,"links":1079},[1080,1081],{"id":656,"depth":598,"text":656},{"id":661,"depth":598,"text":661,"children":1082},[1083],{"id":667,"depth":732,"text":667},"markdown","content:1.algorithm:3.leetcode:3.major:344.reverse-string.md","content","1.algorithm/3.leetcode/3.major/344.reverse-string.md","md",[1090,1092],{"_path":225,"title":224,"description":1091},"给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。",{"_path":231,"title":230,"description":1093},"给你一个字符串 s ，仅反转字符串中的所有元音字母，并返回结果字符串。",1715008127161]