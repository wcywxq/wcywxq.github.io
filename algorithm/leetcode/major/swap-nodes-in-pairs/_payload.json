[{"data":1,"prerenderedAt":1426},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/swap-nodes-in-pairs":559,"/algorithm/leetcode/major/swap-nodes-in-pairs-surround":1421},[4,272,318,536,544],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":317},"八股文","/endorsement",[276,286,293,304],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"JavaScript","/endorsement/javascript",[290],{"title":291,"_path":292},"语法和数据类型","/endorsement/javascript/grammar-data-types",{"title":294,"_path":295,"children":296},"构建工具","/endorsement/build-tools",[297],{"title":298,"_path":299,"children":300},"Webpack","/endorsement/build-tools/webpack",[301],{"title":302,"_path":303},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":305,"_path":306,"children":307},"Html","/endorsement/html",[308,311,314],{"title":309,"_path":310},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":312,"_path":313},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":315,"_path":316},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":319,"_path":320,"children":321,"icon":535},"代码考核","/code-assessment",[322,427,528],{"title":323,"_path":324,"children":325},"源码实现","/code-assessment/source",[326,360,376,404,411,418,421,424],{"title":327,"_path":328,"children":329},"原生 api","/code-assessment/source/native-api",[330,333,336,339,342,345,348,351,354,357],{"title":331,"_path":332},"polyfill","/code-assessment/source/native-api/polyfill",{"title":334,"_path":335},"ajax","/code-assessment/source/native-api/ajax",{"title":337,"_path":338},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":340,"_path":341},"new 操作符","/code-assessment/source/native-api/new",{"title":343,"_path":344},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":346,"_path":347},"定时器","/code-assessment/source/native-api/timer",{"title":349,"_path":350},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":352,"_path":353},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":355,"_path":356},"extends","/code-assessment/source/native-api/extends",{"title":358,"_path":359},"Promise","/code-assessment/source/native-api/promise",{"title":361,"_path":362,"children":363},"函数 Function","/code-assessment/source/function",[364,367,370,373],{"title":365,"_path":366},"函数防抖","/code-assessment/source/function/debounce",{"title":368,"_path":369},"函数节流","/code-assessment/source/function/throttle",{"title":371,"_path":372},"函数柯理化","/code-assessment/source/function/curry",{"title":374,"_path":375},"函数睡眠","/code-assessment/source/function/sleep",{"title":377,"_path":378,"children":379},"数组 Array","/code-assessment/source/array",[380,383,386,389,392,395,398,401],{"title":381,"_path":382},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":384,"_path":385},"数组扁平化","/code-assessment/source/array/flat",{"title":387,"_path":388},"原型方法","/code-assessment/source/array/prototype-method",{"title":390,"_path":391},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":393,"_path":394},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":396,"_path":397},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":399,"_path":400},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":402,"_path":403},"二维数组","/code-assessment/source/array/2d-array",{"title":405,"_path":406,"children":407},"字符串 String","/code-assessment/source/string",[408],{"title":409,"_path":410},"repeat()","/code-assessment/source/string/repeat",{"title":412,"_path":413,"children":414},"集合 Set","/code-assessment/source/set",[415],{"title":416,"_path":417},"遍历集合","/code-assessment/source/set/traverse",{"title":419,"_path":420},"获取通用类型","/code-assessment/source/get-generic-type",{"title":422,"_path":423},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":425,"_path":426},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":428,"_path":429,"children":430},"业务场景","/code-assessment/scene",[431,461,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525],{"title":358,"_path":432,"children":433},"/code-assessment/scene/promise",[434,437,440,443,446,449,452,455,458],{"title":435,"_path":436},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":438,"_path":439},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":441,"_path":442},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":444,"_path":445},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":447,"_path":448},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":450,"_path":451},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":453,"_path":454},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":456,"_path":457},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":459,"_path":460},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":462,"_path":463,"children":464},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[465,468],{"title":466,"_path":467},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":469,"_path":470},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":472,"_path":473},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":475,"_path":476},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":478,"_path":479},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":481,"_path":482},"倒计时","/code-assessment/scene/countdown",{"title":484,"_path":485},"日期格式化","/code-assessment/scene/date-format",{"title":487,"_path":488},"实现前端路由","/code-assessment/scene/frontend-route",{"title":490,"_path":491},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":493,"_path":494},"lodash.get","/code-assessment/scene/lodash-get",{"title":496,"_path":497},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":499,"_path":500},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":502,"_path":503},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":505,"_path":506},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":508,"_path":509},"随机数","/code-assessment/scene/random-number",{"title":511,"_path":512},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":514,"_path":515},"sku 算法实现","/code-assessment/scene/sku",{"title":517,"_path":518},"整数分割","/code-assessment/scene/split-number",{"title":520,"_path":521},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":523,"_path":524},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":526,"_path":527},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":529,"_path":530,"children":531},"Ts 类型挑战","/code-assessment/type-challeges",[532],{"title":533,"_path":534},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":537,"_path":538,"children":539,"icon":543},"项目","/project",[540],{"title":541,"_path":542},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":545,"_path":546,"children":547,"icon":558},"后端语言","/backend-languages",[548],{"title":549,"_path":550,"children":551},"Python","/backend-languages/python",[552,555],{"title":553,"_path":554},"基础","/backend-languages/python/base",{"title":556,"_path":557},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":99,"_dir":560,"_draft":561,"_partial":561,"_locale":562,"title":98,"description":563,"url":564,"body":565,"_type":1416,"_id":1417,"_source":1418,"_file":1419,"_extension":1420},"major",false,"","给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。","https://leetcode.cn/problems/swap-nodes-in-pairs",{"type":566,"children":567,"toc":1410},"root",[568,575,586,616,621,644,649,672,677,692,698,703,709,714,753,1404],{"type":569,"tag":570,"props":571,"children":572},"element","p",{},[573],{"type":574,"value":563},"text",{"type":569,"tag":570,"props":576,"children":577},{},[578,580],{"type":574,"value":579},"示例 1：\n",{"type":569,"tag":581,"props":582,"children":585},"img",{"alt":583,"src":584},"swap_ex1","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/code_leetcode_No.24_swap_ex1.png",[],{"type":569,"tag":587,"props":588,"children":591},"pre",{"className":589,"code":590,"language":574,"meta":562,"style":562},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：head = [1,2,3,4]\n输出：[2,1,4,3]\n",[592],{"type":569,"tag":593,"props":594,"children":595},"code",{"__ignoreMap":562},[596,607],{"type":569,"tag":597,"props":598,"children":601},"span",{"class":599,"line":600},"line",1,[602],{"type":569,"tag":597,"props":603,"children":604},{},[605],{"type":574,"value":606},"输入：head = [1,2,3,4]\n",{"type":569,"tag":597,"props":608,"children":610},{"class":599,"line":609},2,[611],{"type":569,"tag":597,"props":612,"children":613},{},[614],{"type":574,"value":615},"输出：[2,1,4,3]\n",{"type":569,"tag":570,"props":617,"children":618},{},[619],{"type":574,"value":620},"示例 2：",{"type":569,"tag":587,"props":622,"children":624},{"className":589,"code":623,"language":574,"meta":562,"style":562},"输入：head = []\n输出：[]\n",[625],{"type":569,"tag":593,"props":626,"children":627},{"__ignoreMap":562},[628,636],{"type":569,"tag":597,"props":629,"children":630},{"class":599,"line":600},[631],{"type":569,"tag":597,"props":632,"children":633},{},[634],{"type":574,"value":635},"输入：head = []\n",{"type":569,"tag":597,"props":637,"children":638},{"class":599,"line":609},[639],{"type":569,"tag":597,"props":640,"children":641},{},[642],{"type":574,"value":643},"输出：[]\n",{"type":569,"tag":570,"props":645,"children":646},{},[647],{"type":574,"value":648},"示例 3：",{"type":569,"tag":587,"props":650,"children":652},{"className":589,"code":651,"language":574,"meta":562,"style":562},"输入：head = [1]\n输出：[1]\n",[653],{"type":569,"tag":593,"props":654,"children":655},{"__ignoreMap":562},[656,664],{"type":569,"tag":597,"props":657,"children":658},{"class":599,"line":600},[659],{"type":569,"tag":597,"props":660,"children":661},{},[662],{"type":574,"value":663},"输入：head = [1]\n",{"type":569,"tag":597,"props":665,"children":666},{"class":599,"line":609},[667],{"type":569,"tag":597,"props":668,"children":669},{},[670],{"type":574,"value":671},"输出：[1]\n",{"type":569,"tag":570,"props":673,"children":674},{},[675],{"type":574,"value":676},"提示：",{"type":569,"tag":678,"props":679,"children":680},"ul",{},[681,687],{"type":569,"tag":682,"props":683,"children":684},"li",{},[685],{"type":574,"value":686},"链表中节点的数目在范围 [0, 100] 内",{"type":569,"tag":682,"props":688,"children":689},{},[690],{"type":574,"value":691},"0 \u003C= Node.val \u003C= 100",{"type":569,"tag":693,"props":694,"children":696},"h2",{"id":695},"解题思路",[697],{"type":574,"value":695},{"type":569,"tag":693,"props":699,"children":701},{"id":700},"实现",[702],{"type":574,"value":700},{"type":569,"tag":704,"props":705,"children":707},"h3",{"id":706},"双指针",[708],{"type":574,"value":706},{"type":569,"tag":570,"props":710,"children":711},{},[712],{"type":574,"value":713},"设置一个 dummy 节点简化操作，dummy.next 指向 head",{"type":569,"tag":715,"props":716,"children":717},"ol",{},[718,723,728,733,738,743,748],{"type":569,"tag":682,"props":719,"children":720},{},[721],{"type":574,"value":722},"初始化 first 为第一个节点",{"type":569,"tag":682,"props":724,"children":725},{},[726],{"type":574,"value":727},"初始化 second 为第二个节点",{"type":569,"tag":682,"props":729,"children":730},{},[731],{"type":574,"value":732},"初始化 current 为 dummy",{"type":569,"tag":682,"props":734,"children":735},{},[736],{"type":574,"value":737},"first.next = second.next",{"type":569,"tag":682,"props":739,"children":740},{},[741],{"type":574,"value":742},"current.next = second",{"type":569,"tag":682,"props":744,"children":745},{},[746],{"type":574,"value":747},"current 移动 2 格",{"type":569,"tag":682,"props":749,"children":750},{},[751],{"type":574,"value":752},"重复执行",{"type":569,"tag":587,"props":754,"children":758},{"className":755,"code":756,"language":757,"meta":562,"style":562},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar swapPairs = function (head) {\n  const dummy = new ListNode();\n  dummy.next = head;\n  let current = dummy;\n  while (current.next && current.next.next) {\n    // 初始化双指针\n    const first = current.next;\n    const second = current.next.next;\n\n    // 更新双指针和 current 指针\n    first.next = second.next;\n    second.next = first;\n    current.next = second;\n\n    // 指针移动\n    current = current.next.next;\n  }\n  return dummy.next;\n};\n","js",[759],{"type":569,"tag":593,"props":760,"children":761},{"__ignoreMap":562},[762,771,779,788,797,806,815,824,832,875,905,913,959,992,1025,1051,1110,1119,1153,1194,1204,1213,1250,1279,1308,1316,1325,1361,1370,1395],{"type":569,"tag":597,"props":763,"children":764},{"class":599,"line":600},[765],{"type":569,"tag":597,"props":766,"children":768},{"style":767},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[769],{"type":574,"value":770},"/**\n",{"type":569,"tag":597,"props":772,"children":773},{"class":599,"line":609},[774],{"type":569,"tag":597,"props":775,"children":776},{"style":767},[777],{"type":574,"value":778}," * Definition for singly-linked list.\n",{"type":569,"tag":597,"props":780,"children":782},{"class":599,"line":781},3,[783],{"type":569,"tag":597,"props":784,"children":785},{"style":767},[786],{"type":574,"value":787}," * function ListNode(val, next) {\n",{"type":569,"tag":597,"props":789,"children":791},{"class":599,"line":790},4,[792],{"type":569,"tag":597,"props":793,"children":794},{"style":767},[795],{"type":574,"value":796}," *     this.val = (val===undefined ? 0 : val)\n",{"type":569,"tag":597,"props":798,"children":800},{"class":599,"line":799},5,[801],{"type":569,"tag":597,"props":802,"children":803},{"style":767},[804],{"type":574,"value":805}," *     this.next = (next===undefined ? null : next)\n",{"type":569,"tag":597,"props":807,"children":809},{"class":599,"line":808},6,[810],{"type":569,"tag":597,"props":811,"children":812},{"style":767},[813],{"type":574,"value":814}," * }\n",{"type":569,"tag":597,"props":816,"children":818},{"class":599,"line":817},7,[819],{"type":569,"tag":597,"props":820,"children":821},{"style":767},[822],{"type":574,"value":823}," */\n",{"type":569,"tag":597,"props":825,"children":827},{"class":599,"line":826},8,[828],{"type":569,"tag":597,"props":829,"children":830},{"style":767},[831],{"type":574,"value":770},{"type":569,"tag":597,"props":833,"children":835},{"class":599,"line":834},9,[836,841,847,853,858,864,869],{"type":569,"tag":597,"props":837,"children":838},{"style":767},[839],{"type":574,"value":840}," * ",{"type":569,"tag":597,"props":842,"children":844},{"style":843},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[845],{"type":574,"value":846},"@",{"type":569,"tag":597,"props":848,"children":850},{"style":849},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[851],{"type":574,"value":852},"param",{"type":569,"tag":597,"props":854,"children":855},{"style":843},[856],{"type":574,"value":857}," {",{"type":569,"tag":597,"props":859,"children":861},{"style":860},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[862],{"type":574,"value":863},"ListNode",{"type":569,"tag":597,"props":865,"children":866},{"style":843},[867],{"type":574,"value":868},"}",{"type":569,"tag":597,"props":870,"children":872},{"style":871},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[873],{"type":574,"value":874}," head\n",{"type":569,"tag":597,"props":876,"children":878},{"class":599,"line":877},10,[879,883,887,892,896,900],{"type":569,"tag":597,"props":880,"children":881},{"style":767},[882],{"type":574,"value":840},{"type":569,"tag":597,"props":884,"children":885},{"style":843},[886],{"type":574,"value":846},{"type":569,"tag":597,"props":888,"children":889},{"style":849},[890],{"type":574,"value":891},"return",{"type":569,"tag":597,"props":893,"children":894},{"style":843},[895],{"type":574,"value":857},{"type":569,"tag":597,"props":897,"children":898},{"style":860},[899],{"type":574,"value":863},{"type":569,"tag":597,"props":901,"children":902},{"style":843},[903],{"type":574,"value":904},"}\n",{"type":569,"tag":597,"props":906,"children":908},{"class":599,"line":907},11,[909],{"type":569,"tag":597,"props":910,"children":911},{"style":767},[912],{"type":574,"value":823},{"type":569,"tag":597,"props":914,"children":916},{"class":599,"line":915},12,[917,923,929,934,939,944,949,954],{"type":569,"tag":597,"props":918,"children":920},{"style":919},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[921],{"type":574,"value":922},"var",{"type":569,"tag":597,"props":924,"children":926},{"style":925},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[927],{"type":574,"value":928}," swapPairs",{"type":569,"tag":597,"props":930,"children":931},{"style":843},[932],{"type":574,"value":933}," =",{"type":569,"tag":597,"props":935,"children":936},{"style":919},[937],{"type":574,"value":938}," function",{"type":569,"tag":597,"props":940,"children":941},{"style":843},[942],{"type":574,"value":943}," (",{"type":569,"tag":597,"props":945,"children":946},{"style":871},[947],{"type":574,"value":948},"head",{"type":569,"tag":597,"props":950,"children":951},{"style":843},[952],{"type":574,"value":953},")",{"type":569,"tag":597,"props":955,"children":956},{"style":843},[957],{"type":574,"value":958}," {\n",{"type":569,"tag":597,"props":960,"children":962},{"class":599,"line":961},13,[963,968,973,977,982,987],{"type":569,"tag":597,"props":964,"children":965},{"style":919},[966],{"type":574,"value":967},"  const",{"type":569,"tag":597,"props":969,"children":970},{"style":871},[971],{"type":574,"value":972}," dummy",{"type":569,"tag":597,"props":974,"children":975},{"style":843},[976],{"type":574,"value":933},{"type":569,"tag":597,"props":978,"children":979},{"style":919},[980],{"type":574,"value":981}," new",{"type":569,"tag":597,"props":983,"children":984},{"style":925},[985],{"type":574,"value":986}," ListNode",{"type":569,"tag":597,"props":988,"children":989},{"style":843},[990],{"type":574,"value":991},"();\n",{"type":569,"tag":597,"props":993,"children":995},{"class":599,"line":994},14,[996,1001,1006,1011,1015,1020],{"type":569,"tag":597,"props":997,"children":998},{"style":871},[999],{"type":574,"value":1000},"  dummy",{"type":569,"tag":597,"props":1002,"children":1003},{"style":843},[1004],{"type":574,"value":1005},".",{"type":569,"tag":597,"props":1007,"children":1008},{"style":871},[1009],{"type":574,"value":1010},"next",{"type":569,"tag":597,"props":1012,"children":1013},{"style":843},[1014],{"type":574,"value":933},{"type":569,"tag":597,"props":1016,"children":1017},{"style":871},[1018],{"type":574,"value":1019}," head",{"type":569,"tag":597,"props":1021,"children":1022},{"style":843},[1023],{"type":574,"value":1024},";\n",{"type":569,"tag":597,"props":1026,"children":1028},{"class":599,"line":1027},15,[1029,1034,1039,1043,1047],{"type":569,"tag":597,"props":1030,"children":1031},{"style":919},[1032],{"type":574,"value":1033},"  let",{"type":569,"tag":597,"props":1035,"children":1036},{"style":871},[1037],{"type":574,"value":1038}," current",{"type":569,"tag":597,"props":1040,"children":1041},{"style":843},[1042],{"type":574,"value":933},{"type":569,"tag":597,"props":1044,"children":1045},{"style":871},[1046],{"type":574,"value":972},{"type":569,"tag":597,"props":1048,"children":1049},{"style":843},[1050],{"type":574,"value":1024},{"type":569,"tag":597,"props":1052,"children":1054},{"class":599,"line":1053},16,[1055,1060,1064,1069,1073,1077,1082,1086,1090,1094,1098,1102,1106],{"type":569,"tag":597,"props":1056,"children":1057},{"style":849},[1058],{"type":574,"value":1059},"  while",{"type":569,"tag":597,"props":1061,"children":1062},{"style":843},[1063],{"type":574,"value":943},{"type":569,"tag":597,"props":1065,"children":1066},{"style":871},[1067],{"type":574,"value":1068},"current",{"type":569,"tag":597,"props":1070,"children":1071},{"style":843},[1072],{"type":574,"value":1005},{"type":569,"tag":597,"props":1074,"children":1075},{"style":871},[1076],{"type":574,"value":1010},{"type":569,"tag":597,"props":1078,"children":1079},{"style":919},[1080],{"type":574,"value":1081}," &&",{"type":569,"tag":597,"props":1083,"children":1084},{"style":871},[1085],{"type":574,"value":1038},{"type":569,"tag":597,"props":1087,"children":1088},{"style":843},[1089],{"type":574,"value":1005},{"type":569,"tag":597,"props":1091,"children":1092},{"style":871},[1093],{"type":574,"value":1010},{"type":569,"tag":597,"props":1095,"children":1096},{"style":843},[1097],{"type":574,"value":1005},{"type":569,"tag":597,"props":1099,"children":1100},{"style":871},[1101],{"type":574,"value":1010},{"type":569,"tag":597,"props":1103,"children":1104},{"style":843},[1105],{"type":574,"value":953},{"type":569,"tag":597,"props":1107,"children":1108},{"style":843},[1109],{"type":574,"value":958},{"type":569,"tag":597,"props":1111,"children":1113},{"class":599,"line":1112},17,[1114],{"type":569,"tag":597,"props":1115,"children":1116},{"style":767},[1117],{"type":574,"value":1118},"    // 初始化双指针\n",{"type":569,"tag":597,"props":1120,"children":1122},{"class":599,"line":1121},18,[1123,1128,1133,1137,1141,1145,1149],{"type":569,"tag":597,"props":1124,"children":1125},{"style":919},[1126],{"type":574,"value":1127},"    const",{"type":569,"tag":597,"props":1129,"children":1130},{"style":871},[1131],{"type":574,"value":1132}," first",{"type":569,"tag":597,"props":1134,"children":1135},{"style":843},[1136],{"type":574,"value":933},{"type":569,"tag":597,"props":1138,"children":1139},{"style":871},[1140],{"type":574,"value":1038},{"type":569,"tag":597,"props":1142,"children":1143},{"style":843},[1144],{"type":574,"value":1005},{"type":569,"tag":597,"props":1146,"children":1147},{"style":871},[1148],{"type":574,"value":1010},{"type":569,"tag":597,"props":1150,"children":1151},{"style":843},[1152],{"type":574,"value":1024},{"type":569,"tag":597,"props":1154,"children":1156},{"class":599,"line":1155},19,[1157,1161,1166,1170,1174,1178,1182,1186,1190],{"type":569,"tag":597,"props":1158,"children":1159},{"style":919},[1160],{"type":574,"value":1127},{"type":569,"tag":597,"props":1162,"children":1163},{"style":871},[1164],{"type":574,"value":1165}," second",{"type":569,"tag":597,"props":1167,"children":1168},{"style":843},[1169],{"type":574,"value":933},{"type":569,"tag":597,"props":1171,"children":1172},{"style":871},[1173],{"type":574,"value":1038},{"type":569,"tag":597,"props":1175,"children":1176},{"style":843},[1177],{"type":574,"value":1005},{"type":569,"tag":597,"props":1179,"children":1180},{"style":871},[1181],{"type":574,"value":1010},{"type":569,"tag":597,"props":1183,"children":1184},{"style":843},[1185],{"type":574,"value":1005},{"type":569,"tag":597,"props":1187,"children":1188},{"style":871},[1189],{"type":574,"value":1010},{"type":569,"tag":597,"props":1191,"children":1192},{"style":843},[1193],{"type":574,"value":1024},{"type":569,"tag":597,"props":1195,"children":1197},{"class":599,"line":1196},20,[1198],{"type":569,"tag":597,"props":1199,"children":1201},{"emptyLinePlaceholder":1200},true,[1202],{"type":574,"value":1203},"\n",{"type":569,"tag":597,"props":1205,"children":1207},{"class":599,"line":1206},21,[1208],{"type":569,"tag":597,"props":1209,"children":1210},{"style":767},[1211],{"type":574,"value":1212},"    // 更新双指针和 current 指针\n",{"type":569,"tag":597,"props":1214,"children":1216},{"class":599,"line":1215},22,[1217,1222,1226,1230,1234,1238,1242,1246],{"type":569,"tag":597,"props":1218,"children":1219},{"style":871},[1220],{"type":574,"value":1221},"    first",{"type":569,"tag":597,"props":1223,"children":1224},{"style":843},[1225],{"type":574,"value":1005},{"type":569,"tag":597,"props":1227,"children":1228},{"style":871},[1229],{"type":574,"value":1010},{"type":569,"tag":597,"props":1231,"children":1232},{"style":843},[1233],{"type":574,"value":933},{"type":569,"tag":597,"props":1235,"children":1236},{"style":871},[1237],{"type":574,"value":1165},{"type":569,"tag":597,"props":1239,"children":1240},{"style":843},[1241],{"type":574,"value":1005},{"type":569,"tag":597,"props":1243,"children":1244},{"style":871},[1245],{"type":574,"value":1010},{"type":569,"tag":597,"props":1247,"children":1248},{"style":843},[1249],{"type":574,"value":1024},{"type":569,"tag":597,"props":1251,"children":1253},{"class":599,"line":1252},23,[1254,1259,1263,1267,1271,1275],{"type":569,"tag":597,"props":1255,"children":1256},{"style":871},[1257],{"type":574,"value":1258},"    second",{"type":569,"tag":597,"props":1260,"children":1261},{"style":843},[1262],{"type":574,"value":1005},{"type":569,"tag":597,"props":1264,"children":1265},{"style":871},[1266],{"type":574,"value":1010},{"type":569,"tag":597,"props":1268,"children":1269},{"style":843},[1270],{"type":574,"value":933},{"type":569,"tag":597,"props":1272,"children":1273},{"style":871},[1274],{"type":574,"value":1132},{"type":569,"tag":597,"props":1276,"children":1277},{"style":843},[1278],{"type":574,"value":1024},{"type":569,"tag":597,"props":1280,"children":1282},{"class":599,"line":1281},24,[1283,1288,1292,1296,1300,1304],{"type":569,"tag":597,"props":1284,"children":1285},{"style":871},[1286],{"type":574,"value":1287},"    current",{"type":569,"tag":597,"props":1289,"children":1290},{"style":843},[1291],{"type":574,"value":1005},{"type":569,"tag":597,"props":1293,"children":1294},{"style":871},[1295],{"type":574,"value":1010},{"type":569,"tag":597,"props":1297,"children":1298},{"style":843},[1299],{"type":574,"value":933},{"type":569,"tag":597,"props":1301,"children":1302},{"style":871},[1303],{"type":574,"value":1165},{"type":569,"tag":597,"props":1305,"children":1306},{"style":843},[1307],{"type":574,"value":1024},{"type":569,"tag":597,"props":1309,"children":1311},{"class":599,"line":1310},25,[1312],{"type":569,"tag":597,"props":1313,"children":1314},{"emptyLinePlaceholder":1200},[1315],{"type":574,"value":1203},{"type":569,"tag":597,"props":1317,"children":1319},{"class":599,"line":1318},26,[1320],{"type":569,"tag":597,"props":1321,"children":1322},{"style":767},[1323],{"type":574,"value":1324},"    // 指针移动\n",{"type":569,"tag":597,"props":1326,"children":1328},{"class":599,"line":1327},27,[1329,1333,1337,1341,1345,1349,1353,1357],{"type":569,"tag":597,"props":1330,"children":1331},{"style":871},[1332],{"type":574,"value":1287},{"type":569,"tag":597,"props":1334,"children":1335},{"style":843},[1336],{"type":574,"value":933},{"type":569,"tag":597,"props":1338,"children":1339},{"style":871},[1340],{"type":574,"value":1038},{"type":569,"tag":597,"props":1342,"children":1343},{"style":843},[1344],{"type":574,"value":1005},{"type":569,"tag":597,"props":1346,"children":1347},{"style":871},[1348],{"type":574,"value":1010},{"type":569,"tag":597,"props":1350,"children":1351},{"style":843},[1352],{"type":574,"value":1005},{"type":569,"tag":597,"props":1354,"children":1355},{"style":871},[1356],{"type":574,"value":1010},{"type":569,"tag":597,"props":1358,"children":1359},{"style":843},[1360],{"type":574,"value":1024},{"type":569,"tag":597,"props":1362,"children":1364},{"class":599,"line":1363},28,[1365],{"type":569,"tag":597,"props":1366,"children":1367},{"style":843},[1368],{"type":574,"value":1369},"  }\n",{"type":569,"tag":597,"props":1371,"children":1373},{"class":599,"line":1372},29,[1374,1379,1383,1387,1391],{"type":569,"tag":597,"props":1375,"children":1376},{"style":849},[1377],{"type":574,"value":1378},"  return",{"type":569,"tag":597,"props":1380,"children":1381},{"style":871},[1382],{"type":574,"value":972},{"type":569,"tag":597,"props":1384,"children":1385},{"style":843},[1386],{"type":574,"value":1005},{"type":569,"tag":597,"props":1388,"children":1389},{"style":871},[1390],{"type":574,"value":1010},{"type":569,"tag":597,"props":1392,"children":1393},{"style":843},[1394],{"type":574,"value":1024},{"type":569,"tag":597,"props":1396,"children":1398},{"class":599,"line":1397},30,[1399],{"type":569,"tag":597,"props":1400,"children":1401},{"style":843},[1402],{"type":574,"value":1403},"};\n",{"type":569,"tag":1405,"props":1406,"children":1407},"style",{},[1408],{"type":574,"value":1409},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":562,"searchDepth":799,"depth":799,"links":1411},[1412,1413],{"id":695,"depth":609,"text":695},{"id":700,"depth":609,"text":700,"children":1414},[1415],{"id":706,"depth":781,"text":706},"markdown","content:1.algorithm:3.leetcode:3.major:24.swap-nodes-in-pairs.md","content","1.algorithm/3.leetcode/3.major/24.swap-nodes-in-pairs.md","md",[1422,1424],{"_path":96,"title":95,"description":1423},"给你一个链表数组，每个链表都已经按升序排列。",{"_path":102,"title":101,"description":1425},"给你链表的头节点 head ，每 k 个节点一组进行翻转，请你返回修改后的链表。",1717731137687]