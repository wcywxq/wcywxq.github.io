[{"data":1,"prerenderedAt":1499},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/generate-parentheses":559,"/algorithm/leetcode/major/generate-parentheses-surround":1494},[4,272,318,536,544],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":317},"八股文","/endorsement",[276,286,293,304],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"JavaScript","/endorsement/javascript",[290],{"title":291,"_path":292},"语法和数据类型","/endorsement/javascript/grammar-data-types",{"title":294,"_path":295,"children":296},"构建工具","/endorsement/build-tools",[297],{"title":298,"_path":299,"children":300},"Webpack","/endorsement/build-tools/webpack",[301],{"title":302,"_path":303},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":305,"_path":306,"children":307},"Html","/endorsement/html",[308,311,314],{"title":309,"_path":310},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":312,"_path":313},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":315,"_path":316},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":319,"_path":320,"children":321,"icon":535},"代码考核","/code-assessment",[322,427,528],{"title":323,"_path":324,"children":325},"源码实现","/code-assessment/source",[326,360,376,404,411,418,421,424],{"title":327,"_path":328,"children":329},"原生 api","/code-assessment/source/native-api",[330,333,336,339,342,345,348,351,354,357],{"title":331,"_path":332},"polyfill","/code-assessment/source/native-api/polyfill",{"title":334,"_path":335},"ajax","/code-assessment/source/native-api/ajax",{"title":337,"_path":338},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":340,"_path":341},"new 操作符","/code-assessment/source/native-api/new",{"title":343,"_path":344},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":346,"_path":347},"定时器","/code-assessment/source/native-api/timer",{"title":349,"_path":350},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":352,"_path":353},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":355,"_path":356},"extends","/code-assessment/source/native-api/extends",{"title":358,"_path":359},"Promise","/code-assessment/source/native-api/promise",{"title":361,"_path":362,"children":363},"函数 Function","/code-assessment/source/function",[364,367,370,373],{"title":365,"_path":366},"函数防抖","/code-assessment/source/function/debounce",{"title":368,"_path":369},"函数节流","/code-assessment/source/function/throttle",{"title":371,"_path":372},"函数柯理化","/code-assessment/source/function/curry",{"title":374,"_path":375},"函数睡眠","/code-assessment/source/function/sleep",{"title":377,"_path":378,"children":379},"数组 Array","/code-assessment/source/array",[380,383,386,389,392,395,398,401],{"title":381,"_path":382},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":384,"_path":385},"数组扁平化","/code-assessment/source/array/flat",{"title":387,"_path":388},"原型方法","/code-assessment/source/array/prototype-method",{"title":390,"_path":391},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":393,"_path":394},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":396,"_path":397},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":399,"_path":400},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":402,"_path":403},"二维数组","/code-assessment/source/array/2d-array",{"title":405,"_path":406,"children":407},"字符串 String","/code-assessment/source/string",[408],{"title":409,"_path":410},"repeat()","/code-assessment/source/string/repeat",{"title":412,"_path":413,"children":414},"集合 Set","/code-assessment/source/set",[415],{"title":416,"_path":417},"遍历集合","/code-assessment/source/set/traverse",{"title":419,"_path":420},"获取通用类型","/code-assessment/source/get-generic-type",{"title":422,"_path":423},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":425,"_path":426},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":428,"_path":429,"children":430},"业务场景","/code-assessment/scene",[431,461,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525],{"title":358,"_path":432,"children":433},"/code-assessment/scene/promise",[434,437,440,443,446,449,452,455,458],{"title":435,"_path":436},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":438,"_path":439},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":441,"_path":442},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":444,"_path":445},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":447,"_path":448},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":450,"_path":451},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":453,"_path":454},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":456,"_path":457},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":459,"_path":460},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":462,"_path":463,"children":464},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[465,468],{"title":466,"_path":467},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":469,"_path":470},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":472,"_path":473},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":475,"_path":476},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":478,"_path":479},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":481,"_path":482},"倒计时","/code-assessment/scene/countdown",{"title":484,"_path":485},"日期格式化","/code-assessment/scene/date-format",{"title":487,"_path":488},"实现前端路由","/code-assessment/scene/frontend-route",{"title":490,"_path":491},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":493,"_path":494},"lodash.get","/code-assessment/scene/lodash-get",{"title":496,"_path":497},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":499,"_path":500},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":502,"_path":503},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":505,"_path":506},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":508,"_path":509},"随机数","/code-assessment/scene/random-number",{"title":511,"_path":512},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":514,"_path":515},"sku 算法实现","/code-assessment/scene/sku",{"title":517,"_path":518},"整数分割","/code-assessment/scene/split-number",{"title":520,"_path":521},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":523,"_path":524},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":526,"_path":527},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":529,"_path":530,"children":531},"Ts 类型挑战","/code-assessment/type-challeges",[532],{"title":533,"_path":534},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":537,"_path":538,"children":539,"icon":543},"项目","/project",[540],{"title":541,"_path":542},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":545,"_path":546,"children":547,"icon":558},"后端语言","/backend-languages",[548],{"title":549,"_path":550,"children":551},"Python","/backend-languages/python",[552,555],{"title":553,"_path":554},"基础","/backend-languages/python/base",{"title":556,"_path":557},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":93,"_dir":560,"_draft":561,"_partial":561,"_locale":562,"title":92,"description":563,"url":564,"body":565,"_type":1489,"_id":1490,"_source":1491,"_file":1492,"_extension":1493},"major",false,"","数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。","https://leetcode.cn/problems/generate-parentheses",{"type":566,"children":567,"toc":1483},"root",[568,575,580,610,615,638,643,653,659,664,677,682,688,1477],{"type":569,"tag":570,"props":571,"children":572},"element","p",{},[573],{"type":574,"value":563},"text",{"type":569,"tag":570,"props":576,"children":577},{},[578],{"type":574,"value":579},"示例 1：",{"type":569,"tag":581,"props":582,"children":585},"pre",{"className":583,"code":584,"language":574,"meta":562,"style":562},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：n = 3\n输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",[586],{"type":569,"tag":587,"props":588,"children":589},"code",{"__ignoreMap":562},[590,601],{"type":569,"tag":591,"props":592,"children":595},"span",{"class":593,"line":594},"line",1,[596],{"type":569,"tag":591,"props":597,"children":598},{},[599],{"type":574,"value":600},"输入：n = 3\n",{"type":569,"tag":591,"props":602,"children":604},{"class":593,"line":603},2,[605],{"type":569,"tag":591,"props":606,"children":607},{},[608],{"type":574,"value":609},"输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",{"type":569,"tag":570,"props":611,"children":612},{},[613],{"type":574,"value":614},"示例 2：",{"type":569,"tag":581,"props":616,"children":618},{"className":583,"code":617,"language":574,"meta":562,"style":562},"输入：n = 1\n输出：[\"()\"]\n",[619],{"type":569,"tag":587,"props":620,"children":621},{"__ignoreMap":562},[622,630],{"type":569,"tag":591,"props":623,"children":624},{"class":593,"line":594},[625],{"type":569,"tag":591,"props":626,"children":627},{},[628],{"type":574,"value":629},"输入：n = 1\n",{"type":569,"tag":591,"props":631,"children":632},{"class":593,"line":603},[633],{"type":569,"tag":591,"props":634,"children":635},{},[636],{"type":574,"value":637},"输出：[\"()\"]\n",{"type":569,"tag":570,"props":639,"children":640},{},[641],{"type":574,"value":642},"提示：",{"type":569,"tag":644,"props":645,"children":646},"ul",{},[647],{"type":569,"tag":648,"props":649,"children":650},"li",{},[651],{"type":574,"value":652},"1 \u003C= n \u003C= 8",{"type":569,"tag":654,"props":655,"children":657},"h2",{"id":656},"解题思路",[658],{"type":574,"value":656},{"type":569,"tag":570,"props":660,"children":661},{},[662],{"type":574,"value":663},"由于需要求解所有的可能，因此回溯就不难想到，回溯的思路和写法相对比较固定，并且回溯的优化手段大多是剪枝。\n不难想到，如果左括号的数据小于右括号，我们可以提前退出，这就是这道题的剪枝。例如：())...，后面就不用看了，直接退出即可。回溯的退出条件也不难想到：",{"type":569,"tag":644,"props":665,"children":666},{},[667,672],{"type":569,"tag":648,"props":668,"children":669},{},[670],{"type":574,"value":671},"左括号数目 = 右括号数目",{"type":569,"tag":648,"props":673,"children":674},{},[675],{"type":574,"value":676},"左括号数据 + 右括号数据 = 2 * n\n因此这道题可以使用深度优先搜索（回溯思想），从空字符串开始构造，做加法，即 dfs(左括号数目，右括号数据，路径)，我们从 dfs(0, 0, \"\") 开始",{"type":569,"tag":654,"props":678,"children":680},{"id":679},"实现",[681],{"type":574,"value":679},{"type":569,"tag":683,"props":684,"children":686},"h3",{"id":685},"回溯",[687],{"type":574,"value":685},{"type":569,"tag":581,"props":689,"children":693},{"className":690,"code":691,"language":692,"meta":562,"style":562},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const res = [];\n\n  /**\n   * @param l 左侧括号已经用了几个\n   * @param r 右侧括号已经用了几个\n   * @param str 当前递归得到的拼接字符串结果\n   */\n  function dfs(l, r, str) {\n    if (l === n && r === n) {\n      return res.push(str);\n    }\n    // l \u003C r 时不满足条件，剪枝\n    if (l \u003C r) return;\n    // l \u003C n 时可插入左括号，最多可以插入 n 个\n    if (l \u003C n) {\n      dfs(l + 1, r, str + \"(\");\n    }\n    // r \u003C l 时，可以插入右括号\n    if (r \u003C l) {\n      dfs(l, r + 1, str + \")\");\n    }\n  }\n\n  dfs(0, 0, \"\");\n\n  return res;\n};\n","js",[694],{"type":569,"tag":587,"props":695,"children":696},{"__ignoreMap":562},[697,706,748,779,788,834,857,867,876,903,929,955,964,1013,1065,1102,1111,1120,1159,1168,1200,1268,1276,1285,1318,1378,1386,1395,1403,1443,1451,1468],{"type":569,"tag":591,"props":698,"children":699},{"class":593,"line":594},[700],{"type":569,"tag":591,"props":701,"children":703},{"style":702},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[704],{"type":574,"value":705},"/**\n",{"type":569,"tag":591,"props":707,"children":708},{"class":593,"line":603},[709,714,720,726,731,737,742],{"type":569,"tag":591,"props":710,"children":711},{"style":702},[712],{"type":574,"value":713}," * ",{"type":569,"tag":591,"props":715,"children":717},{"style":716},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[718],{"type":574,"value":719},"@",{"type":569,"tag":591,"props":721,"children":723},{"style":722},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[724],{"type":574,"value":725},"param",{"type":569,"tag":591,"props":727,"children":728},{"style":716},[729],{"type":574,"value":730}," {",{"type":569,"tag":591,"props":732,"children":734},{"style":733},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[735],{"type":574,"value":736},"number",{"type":569,"tag":591,"props":738,"children":739},{"style":716},[740],{"type":574,"value":741},"}",{"type":569,"tag":591,"props":743,"children":745},{"style":744},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[746],{"type":574,"value":747}," n\n",{"type":569,"tag":591,"props":749,"children":751},{"class":593,"line":750},3,[752,756,760,765,769,774],{"type":569,"tag":591,"props":753,"children":754},{"style":702},[755],{"type":574,"value":713},{"type":569,"tag":591,"props":757,"children":758},{"style":716},[759],{"type":574,"value":719},{"type":569,"tag":591,"props":761,"children":762},{"style":722},[763],{"type":574,"value":764},"return",{"type":569,"tag":591,"props":766,"children":767},{"style":716},[768],{"type":574,"value":730},{"type":569,"tag":591,"props":770,"children":771},{"style":733},[772],{"type":574,"value":773},"string[]",{"type":569,"tag":591,"props":775,"children":776},{"style":716},[777],{"type":574,"value":778},"}\n",{"type":569,"tag":591,"props":780,"children":782},{"class":593,"line":781},4,[783],{"type":569,"tag":591,"props":784,"children":785},{"style":702},[786],{"type":574,"value":787}," */\n",{"type":569,"tag":591,"props":789,"children":791},{"class":593,"line":790},5,[792,798,804,809,814,819,824,829],{"type":569,"tag":591,"props":793,"children":795},{"style":794},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[796],{"type":574,"value":797},"var",{"type":569,"tag":591,"props":799,"children":801},{"style":800},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[802],{"type":574,"value":803}," generateParenthesis",{"type":569,"tag":591,"props":805,"children":806},{"style":716},[807],{"type":574,"value":808}," =",{"type":569,"tag":591,"props":810,"children":811},{"style":794},[812],{"type":574,"value":813}," function",{"type":569,"tag":591,"props":815,"children":816},{"style":716},[817],{"type":574,"value":818}," (",{"type":569,"tag":591,"props":820,"children":821},{"style":744},[822],{"type":574,"value":823},"n",{"type":569,"tag":591,"props":825,"children":826},{"style":716},[827],{"type":574,"value":828},")",{"type":569,"tag":591,"props":830,"children":831},{"style":716},[832],{"type":574,"value":833}," {\n",{"type":569,"tag":591,"props":835,"children":837},{"class":593,"line":836},6,[838,843,848,852],{"type":569,"tag":591,"props":839,"children":840},{"style":794},[841],{"type":574,"value":842},"  const",{"type":569,"tag":591,"props":844,"children":845},{"style":744},[846],{"type":574,"value":847}," res",{"type":569,"tag":591,"props":849,"children":850},{"style":716},[851],{"type":574,"value":808},{"type":569,"tag":591,"props":853,"children":854},{"style":716},[855],{"type":574,"value":856}," [];\n",{"type":569,"tag":591,"props":858,"children":860},{"class":593,"line":859},7,[861],{"type":569,"tag":591,"props":862,"children":864},{"emptyLinePlaceholder":863},true,[865],{"type":574,"value":866},"\n",{"type":569,"tag":591,"props":868,"children":870},{"class":593,"line":869},8,[871],{"type":569,"tag":591,"props":872,"children":873},{"style":702},[874],{"type":574,"value":875},"  /**\n",{"type":569,"tag":591,"props":877,"children":879},{"class":593,"line":878},9,[880,885,889,893,898],{"type":569,"tag":591,"props":881,"children":882},{"style":702},[883],{"type":574,"value":884},"   * ",{"type":569,"tag":591,"props":886,"children":887},{"style":716},[888],{"type":574,"value":719},{"type":569,"tag":591,"props":890,"children":891},{"style":722},[892],{"type":574,"value":725},{"type":569,"tag":591,"props":894,"children":895},{"style":744},[896],{"type":574,"value":897}," l",{"type":569,"tag":591,"props":899,"children":900},{"style":702},[901],{"type":574,"value":902}," 左侧括号已经用了几个\n",{"type":569,"tag":591,"props":904,"children":906},{"class":593,"line":905},10,[907,911,915,919,924],{"type":569,"tag":591,"props":908,"children":909},{"style":702},[910],{"type":574,"value":884},{"type":569,"tag":591,"props":912,"children":913},{"style":716},[914],{"type":574,"value":719},{"type":569,"tag":591,"props":916,"children":917},{"style":722},[918],{"type":574,"value":725},{"type":569,"tag":591,"props":920,"children":921},{"style":744},[922],{"type":574,"value":923}," r",{"type":569,"tag":591,"props":925,"children":926},{"style":702},[927],{"type":574,"value":928}," 右侧括号已经用了几个\n",{"type":569,"tag":591,"props":930,"children":932},{"class":593,"line":931},11,[933,937,941,945,950],{"type":569,"tag":591,"props":934,"children":935},{"style":702},[936],{"type":574,"value":884},{"type":569,"tag":591,"props":938,"children":939},{"style":716},[940],{"type":574,"value":719},{"type":569,"tag":591,"props":942,"children":943},{"style":722},[944],{"type":574,"value":725},{"type":569,"tag":591,"props":946,"children":947},{"style":744},[948],{"type":574,"value":949}," str",{"type":569,"tag":591,"props":951,"children":952},{"style":702},[953],{"type":574,"value":954}," 当前递归得到的拼接字符串结果\n",{"type":569,"tag":591,"props":956,"children":958},{"class":593,"line":957},12,[959],{"type":569,"tag":591,"props":960,"children":961},{"style":702},[962],{"type":574,"value":963},"   */\n",{"type":569,"tag":591,"props":965,"children":967},{"class":593,"line":966},13,[968,973,978,983,988,993,997,1001,1005,1009],{"type":569,"tag":591,"props":969,"children":970},{"style":794},[971],{"type":574,"value":972},"  function",{"type":569,"tag":591,"props":974,"children":975},{"style":800},[976],{"type":574,"value":977}," dfs",{"type":569,"tag":591,"props":979,"children":980},{"style":716},[981],{"type":574,"value":982},"(",{"type":569,"tag":591,"props":984,"children":985},{"style":744},[986],{"type":574,"value":987},"l",{"type":569,"tag":591,"props":989,"children":990},{"style":716},[991],{"type":574,"value":992},",",{"type":569,"tag":591,"props":994,"children":995},{"style":744},[996],{"type":574,"value":923},{"type":569,"tag":591,"props":998,"children":999},{"style":716},[1000],{"type":574,"value":992},{"type":569,"tag":591,"props":1002,"children":1003},{"style":744},[1004],{"type":574,"value":949},{"type":569,"tag":591,"props":1006,"children":1007},{"style":716},[1008],{"type":574,"value":828},{"type":569,"tag":591,"props":1010,"children":1011},{"style":716},[1012],{"type":574,"value":833},{"type":569,"tag":591,"props":1014,"children":1016},{"class":593,"line":1015},14,[1017,1022,1026,1030,1035,1040,1045,1049,1053,1057,1061],{"type":569,"tag":591,"props":1018,"children":1019},{"style":722},[1020],{"type":574,"value":1021},"    if",{"type":569,"tag":591,"props":1023,"children":1024},{"style":716},[1025],{"type":574,"value":818},{"type":569,"tag":591,"props":1027,"children":1028},{"style":744},[1029],{"type":574,"value":987},{"type":569,"tag":591,"props":1031,"children":1032},{"style":794},[1033],{"type":574,"value":1034}," ===",{"type":569,"tag":591,"props":1036,"children":1037},{"style":744},[1038],{"type":574,"value":1039}," n",{"type":569,"tag":591,"props":1041,"children":1042},{"style":794},[1043],{"type":574,"value":1044}," &&",{"type":569,"tag":591,"props":1046,"children":1047},{"style":744},[1048],{"type":574,"value":923},{"type":569,"tag":591,"props":1050,"children":1051},{"style":794},[1052],{"type":574,"value":1034},{"type":569,"tag":591,"props":1054,"children":1055},{"style":744},[1056],{"type":574,"value":1039},{"type":569,"tag":591,"props":1058,"children":1059},{"style":716},[1060],{"type":574,"value":828},{"type":569,"tag":591,"props":1062,"children":1063},{"style":716},[1064],{"type":574,"value":833},{"type":569,"tag":591,"props":1066,"children":1068},{"class":593,"line":1067},15,[1069,1074,1078,1083,1088,1092,1097],{"type":569,"tag":591,"props":1070,"children":1071},{"style":722},[1072],{"type":574,"value":1073},"      return",{"type":569,"tag":591,"props":1075,"children":1076},{"style":744},[1077],{"type":574,"value":847},{"type":569,"tag":591,"props":1079,"children":1080},{"style":716},[1081],{"type":574,"value":1082},".",{"type":569,"tag":591,"props":1084,"children":1085},{"style":800},[1086],{"type":574,"value":1087},"push",{"type":569,"tag":591,"props":1089,"children":1090},{"style":716},[1091],{"type":574,"value":982},{"type":569,"tag":591,"props":1093,"children":1094},{"style":744},[1095],{"type":574,"value":1096},"str",{"type":569,"tag":591,"props":1098,"children":1099},{"style":716},[1100],{"type":574,"value":1101},");\n",{"type":569,"tag":591,"props":1103,"children":1105},{"class":593,"line":1104},16,[1106],{"type":569,"tag":591,"props":1107,"children":1108},{"style":716},[1109],{"type":574,"value":1110},"    }\n",{"type":569,"tag":591,"props":1112,"children":1114},{"class":593,"line":1113},17,[1115],{"type":569,"tag":591,"props":1116,"children":1117},{"style":702},[1118],{"type":574,"value":1119},"    // l \u003C r 时不满足条件，剪枝\n",{"type":569,"tag":591,"props":1121,"children":1123},{"class":593,"line":1122},18,[1124,1128,1132,1136,1141,1145,1149,1154],{"type":569,"tag":591,"props":1125,"children":1126},{"style":722},[1127],{"type":574,"value":1021},{"type":569,"tag":591,"props":1129,"children":1130},{"style":716},[1131],{"type":574,"value":818},{"type":569,"tag":591,"props":1133,"children":1134},{"style":744},[1135],{"type":574,"value":987},{"type":569,"tag":591,"props":1137,"children":1138},{"style":716},[1139],{"type":574,"value":1140}," \u003C",{"type":569,"tag":591,"props":1142,"children":1143},{"style":744},[1144],{"type":574,"value":923},{"type":569,"tag":591,"props":1146,"children":1147},{"style":716},[1148],{"type":574,"value":828},{"type":569,"tag":591,"props":1150,"children":1151},{"style":722},[1152],{"type":574,"value":1153}," return",{"type":569,"tag":591,"props":1155,"children":1156},{"style":716},[1157],{"type":574,"value":1158},";\n",{"type":569,"tag":591,"props":1160,"children":1162},{"class":593,"line":1161},19,[1163],{"type":569,"tag":591,"props":1164,"children":1165},{"style":702},[1166],{"type":574,"value":1167},"    // l \u003C n 时可插入左括号，最多可以插入 n 个\n",{"type":569,"tag":591,"props":1169,"children":1171},{"class":593,"line":1170},20,[1172,1176,1180,1184,1188,1192,1196],{"type":569,"tag":591,"props":1173,"children":1174},{"style":722},[1175],{"type":574,"value":1021},{"type":569,"tag":591,"props":1177,"children":1178},{"style":716},[1179],{"type":574,"value":818},{"type":569,"tag":591,"props":1181,"children":1182},{"style":744},[1183],{"type":574,"value":987},{"type":569,"tag":591,"props":1185,"children":1186},{"style":716},[1187],{"type":574,"value":1140},{"type":569,"tag":591,"props":1189,"children":1190},{"style":744},[1191],{"type":574,"value":1039},{"type":569,"tag":591,"props":1193,"children":1194},{"style":716},[1195],{"type":574,"value":828},{"type":569,"tag":591,"props":1197,"children":1198},{"style":716},[1199],{"type":574,"value":833},{"type":569,"tag":591,"props":1201,"children":1203},{"class":593,"line":1202},21,[1204,1209,1213,1217,1222,1228,1232,1236,1240,1244,1248,1254,1259,1264],{"type":569,"tag":591,"props":1205,"children":1206},{"style":800},[1207],{"type":574,"value":1208},"      dfs",{"type":569,"tag":591,"props":1210,"children":1211},{"style":716},[1212],{"type":574,"value":982},{"type":569,"tag":591,"props":1214,"children":1215},{"style":744},[1216],{"type":574,"value":987},{"type":569,"tag":591,"props":1218,"children":1219},{"style":794},[1220],{"type":574,"value":1221}," +",{"type":569,"tag":591,"props":1223,"children":1225},{"style":1224},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1226],{"type":574,"value":1227}," 1",{"type":569,"tag":591,"props":1229,"children":1230},{"style":716},[1231],{"type":574,"value":992},{"type":569,"tag":591,"props":1233,"children":1234},{"style":744},[1235],{"type":574,"value":923},{"type":569,"tag":591,"props":1237,"children":1238},{"style":716},[1239],{"type":574,"value":992},{"type":569,"tag":591,"props":1241,"children":1242},{"style":744},[1243],{"type":574,"value":949},{"type":569,"tag":591,"props":1245,"children":1246},{"style":794},[1247],{"type":574,"value":1221},{"type":569,"tag":591,"props":1249,"children":1251},{"style":1250},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1252],{"type":574,"value":1253}," \"",{"type":569,"tag":591,"props":1255,"children":1257},{"style":1256},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1258],{"type":574,"value":982},{"type":569,"tag":591,"props":1260,"children":1261},{"style":1250},[1262],{"type":574,"value":1263},"\"",{"type":569,"tag":591,"props":1265,"children":1266},{"style":716},[1267],{"type":574,"value":1101},{"type":569,"tag":591,"props":1269,"children":1271},{"class":593,"line":1270},22,[1272],{"type":569,"tag":591,"props":1273,"children":1274},{"style":716},[1275],{"type":574,"value":1110},{"type":569,"tag":591,"props":1277,"children":1279},{"class":593,"line":1278},23,[1280],{"type":569,"tag":591,"props":1281,"children":1282},{"style":702},[1283],{"type":574,"value":1284},"    // r \u003C l 时，可以插入右括号\n",{"type":569,"tag":591,"props":1286,"children":1288},{"class":593,"line":1287},24,[1289,1293,1297,1302,1306,1310,1314],{"type":569,"tag":591,"props":1290,"children":1291},{"style":722},[1292],{"type":574,"value":1021},{"type":569,"tag":591,"props":1294,"children":1295},{"style":716},[1296],{"type":574,"value":818},{"type":569,"tag":591,"props":1298,"children":1299},{"style":744},[1300],{"type":574,"value":1301},"r",{"type":569,"tag":591,"props":1303,"children":1304},{"style":716},[1305],{"type":574,"value":1140},{"type":569,"tag":591,"props":1307,"children":1308},{"style":744},[1309],{"type":574,"value":897},{"type":569,"tag":591,"props":1311,"children":1312},{"style":716},[1313],{"type":574,"value":828},{"type":569,"tag":591,"props":1315,"children":1316},{"style":716},[1317],{"type":574,"value":833},{"type":569,"tag":591,"props":1319,"children":1321},{"class":593,"line":1320},25,[1322,1326,1330,1334,1338,1342,1346,1350,1354,1358,1362,1366,1370,1374],{"type":569,"tag":591,"props":1323,"children":1324},{"style":800},[1325],{"type":574,"value":1208},{"type":569,"tag":591,"props":1327,"children":1328},{"style":716},[1329],{"type":574,"value":982},{"type":569,"tag":591,"props":1331,"children":1332},{"style":744},[1333],{"type":574,"value":987},{"type":569,"tag":591,"props":1335,"children":1336},{"style":716},[1337],{"type":574,"value":992},{"type":569,"tag":591,"props":1339,"children":1340},{"style":744},[1341],{"type":574,"value":923},{"type":569,"tag":591,"props":1343,"children":1344},{"style":794},[1345],{"type":574,"value":1221},{"type":569,"tag":591,"props":1347,"children":1348},{"style":1224},[1349],{"type":574,"value":1227},{"type":569,"tag":591,"props":1351,"children":1352},{"style":716},[1353],{"type":574,"value":992},{"type":569,"tag":591,"props":1355,"children":1356},{"style":744},[1357],{"type":574,"value":949},{"type":569,"tag":591,"props":1359,"children":1360},{"style":794},[1361],{"type":574,"value":1221},{"type":569,"tag":591,"props":1363,"children":1364},{"style":1250},[1365],{"type":574,"value":1253},{"type":569,"tag":591,"props":1367,"children":1368},{"style":1256},[1369],{"type":574,"value":828},{"type":569,"tag":591,"props":1371,"children":1372},{"style":1250},[1373],{"type":574,"value":1263},{"type":569,"tag":591,"props":1375,"children":1376},{"style":716},[1377],{"type":574,"value":1101},{"type":569,"tag":591,"props":1379,"children":1381},{"class":593,"line":1380},26,[1382],{"type":569,"tag":591,"props":1383,"children":1384},{"style":716},[1385],{"type":574,"value":1110},{"type":569,"tag":591,"props":1387,"children":1389},{"class":593,"line":1388},27,[1390],{"type":569,"tag":591,"props":1391,"children":1392},{"style":716},[1393],{"type":574,"value":1394},"  }\n",{"type":569,"tag":591,"props":1396,"children":1398},{"class":593,"line":1397},28,[1399],{"type":569,"tag":591,"props":1400,"children":1401},{"emptyLinePlaceholder":863},[1402],{"type":574,"value":866},{"type":569,"tag":591,"props":1404,"children":1406},{"class":593,"line":1405},29,[1407,1412,1416,1421,1425,1430,1434,1439],{"type":569,"tag":591,"props":1408,"children":1409},{"style":800},[1410],{"type":574,"value":1411},"  dfs",{"type":569,"tag":591,"props":1413,"children":1414},{"style":716},[1415],{"type":574,"value":982},{"type":569,"tag":591,"props":1417,"children":1418},{"style":1224},[1419],{"type":574,"value":1420},"0",{"type":569,"tag":591,"props":1422,"children":1423},{"style":716},[1424],{"type":574,"value":992},{"type":569,"tag":591,"props":1426,"children":1427},{"style":1224},[1428],{"type":574,"value":1429}," 0",{"type":569,"tag":591,"props":1431,"children":1432},{"style":716},[1433],{"type":574,"value":992},{"type":569,"tag":591,"props":1435,"children":1436},{"style":1250},[1437],{"type":574,"value":1438}," \"\"",{"type":569,"tag":591,"props":1440,"children":1441},{"style":716},[1442],{"type":574,"value":1101},{"type":569,"tag":591,"props":1444,"children":1446},{"class":593,"line":1445},30,[1447],{"type":569,"tag":591,"props":1448,"children":1449},{"emptyLinePlaceholder":863},[1450],{"type":574,"value":866},{"type":569,"tag":591,"props":1452,"children":1454},{"class":593,"line":1453},31,[1455,1460,1464],{"type":569,"tag":591,"props":1456,"children":1457},{"style":722},[1458],{"type":574,"value":1459},"  return",{"type":569,"tag":591,"props":1461,"children":1462},{"style":744},[1463],{"type":574,"value":847},{"type":569,"tag":591,"props":1465,"children":1466},{"style":716},[1467],{"type":574,"value":1158},{"type":569,"tag":591,"props":1469,"children":1471},{"class":593,"line":1470},32,[1472],{"type":569,"tag":591,"props":1473,"children":1474},{"style":716},[1475],{"type":574,"value":1476},"};\n",{"type":569,"tag":1478,"props":1479,"children":1480},"style",{},[1481],{"type":574,"value":1482},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":562,"searchDepth":790,"depth":790,"links":1484},[1485,1486],{"id":656,"depth":603,"text":656},{"id":679,"depth":603,"text":679,"children":1487},[1488],{"id":685,"depth":750,"text":685},"markdown","content:1.algorithm:3.leetcode:3.major:22.generate-parentheses.md","content","1.algorithm/3.leetcode/3.major/22.generate-parentheses.md","md",[1495,1497],{"_path":90,"title":89,"description":1496},"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",{"_path":96,"title":95,"description":1498},"给你一个链表数组，每个链表都已经按升序排列。",1717731137658]