[{"data":1,"prerenderedAt":1486},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/generate-parentheses":546,"/algorithm/leetcode/major/generate-parentheses-surround":1481},[4,269,298,514,522,531],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":513},"代码考核","/code-assessment",[302,404,506],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,337,353,381,388,395,398,401],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328,331,334],{"title":311,"_path":312},"polyfill","/code-assessment/source/native-api/polyfill",{"title":314,"_path":315},"ajax","/code-assessment/source/native-api/ajax",{"title":317,"_path":318},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":320,"_path":321},"new 操作符","/code-assessment/source/native-api/new",{"title":323,"_path":324},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":326,"_path":327},"定时器","/code-assessment/source/native-api/timer",{"title":329,"_path":330},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":332,"_path":333},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":335,"_path":336},"extends","/code-assessment/source/native-api/extends",{"title":338,"_path":339,"children":340},"函数 Function","/code-assessment/source/function",[341,344,347,350],{"title":342,"_path":343},"函数防抖","/code-assessment/source/function/debounce",{"title":345,"_path":346},"函数节流","/code-assessment/source/function/throttle",{"title":348,"_path":349},"函数柯理化","/code-assessment/source/function/curry",{"title":351,"_path":352},"函数睡眠","/code-assessment/source/function/sleep",{"title":354,"_path":355,"children":356},"数组 Array","/code-assessment/source/array",[357,360,363,366,369,372,375,378],{"title":358,"_path":359},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":361,"_path":362},"数组扁平化","/code-assessment/source/array/flat",{"title":364,"_path":365},"原型方法","/code-assessment/source/array/prototype-method",{"title":367,"_path":368},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":370,"_path":371},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":373,"_path":374},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":376,"_path":377},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":379,"_path":380},"二维数组","/code-assessment/source/array/2d-array",{"title":382,"_path":383,"children":384},"字符串 String","/code-assessment/source/string",[385],{"title":386,"_path":387},"repeat()","/code-assessment/source/string/repeat",{"title":389,"_path":390,"children":391},"集合 Set","/code-assessment/source/set",[392],{"title":393,"_path":394},"遍历集合","/code-assessment/source/set/traverse",{"title":396,"_path":397},"获取通用类型","/code-assessment/source/get-generic-type",{"title":399,"_path":400},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":402,"_path":403},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":405,"_path":406,"children":407},"业务场景","/code-assessment/scene",[408,439,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503],{"title":409,"_path":410,"children":411},"Promise","/code-assessment/scene/promise",[412,415,418,421,424,427,430,433,436],{"title":413,"_path":414},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":416,"_path":417},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":419,"_path":420},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":422,"_path":423},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":425,"_path":426},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":428,"_path":429},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":431,"_path":432},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":434,"_path":435},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":437,"_path":438},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":440,"_path":441,"children":442},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[443,446],{"title":444,"_path":445},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":447,"_path":448},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":450,"_path":451},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":453,"_path":454},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":456,"_path":457},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":459,"_path":460},"倒计时","/code-assessment/scene/countdown",{"title":462,"_path":463},"日期格式化","/code-assessment/scene/date-format",{"title":465,"_path":466},"实现前端路由","/code-assessment/scene/frontend-route",{"title":468,"_path":469},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":471,"_path":472},"lodash.get","/code-assessment/scene/lodash-get",{"title":474,"_path":475},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":477,"_path":478},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":480,"_path":481},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":483,"_path":484},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":486,"_path":487},"随机数","/code-assessment/scene/random-number",{"title":489,"_path":490},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":492,"_path":493},"sku 算法实现","/code-assessment/scene/sku",{"title":495,"_path":496},"整数分割","/code-assessment/scene/split-number",{"title":498,"_path":499},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":501,"_path":502},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":504,"_path":505},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":507,"_path":508,"children":509},"Ts 类型挑战","/code-assessment/type-challeges",[510],{"title":511,"_path":512},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":515,"_path":516,"children":517,"icon":521},"项目","/project",[518],{"title":519,"_path":520},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":523,"_path":524,"children":525,"icon":530},"设计模式","/design-mode",[526,527],{"title":523,"_path":524},{"title":528,"_path":529},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":532,"_path":533,"children":534,"icon":545},"后端语言","/backend-languages",[535],{"title":536,"_path":537,"children":538},"Python","/backend-languages/python",[539,542],{"title":540,"_path":541},"基础","/backend-languages/python/base",{"title":543,"_path":544},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":93,"_dir":547,"_draft":548,"_partial":548,"_locale":549,"title":92,"description":550,"url":551,"body":552,"_type":1476,"_id":1477,"_source":1478,"_file":1479,"_extension":1480},"major",false,"","数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。","https://leetcode.cn/problems/generate-parentheses",{"type":553,"children":554,"toc":1470},"root",[555,562,567,597,602,625,630,640,646,651,664,669,675,1464],{"type":556,"tag":557,"props":558,"children":559},"element","p",{},[560],{"type":561,"value":550},"text",{"type":556,"tag":557,"props":563,"children":564},{},[565],{"type":561,"value":566},"示例 1：",{"type":556,"tag":568,"props":569,"children":572},"pre",{"className":570,"code":571,"language":561,"meta":549,"style":549},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：n = 3\n输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",[573],{"type":556,"tag":574,"props":575,"children":576},"code",{"__ignoreMap":549},[577,588],{"type":556,"tag":578,"props":579,"children":582},"span",{"class":580,"line":581},"line",1,[583],{"type":556,"tag":578,"props":584,"children":585},{},[586],{"type":561,"value":587},"输入：n = 3\n",{"type":556,"tag":578,"props":589,"children":591},{"class":580,"line":590},2,[592],{"type":556,"tag":578,"props":593,"children":594},{},[595],{"type":561,"value":596},"输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",{"type":556,"tag":557,"props":598,"children":599},{},[600],{"type":561,"value":601},"示例 2：",{"type":556,"tag":568,"props":603,"children":605},{"className":570,"code":604,"language":561,"meta":549,"style":549},"输入：n = 1\n输出：[\"()\"]\n",[606],{"type":556,"tag":574,"props":607,"children":608},{"__ignoreMap":549},[609,617],{"type":556,"tag":578,"props":610,"children":611},{"class":580,"line":581},[612],{"type":556,"tag":578,"props":613,"children":614},{},[615],{"type":561,"value":616},"输入：n = 1\n",{"type":556,"tag":578,"props":618,"children":619},{"class":580,"line":590},[620],{"type":556,"tag":578,"props":621,"children":622},{},[623],{"type":561,"value":624},"输出：[\"()\"]\n",{"type":556,"tag":557,"props":626,"children":627},{},[628],{"type":561,"value":629},"提示：",{"type":556,"tag":631,"props":632,"children":633},"ul",{},[634],{"type":556,"tag":635,"props":636,"children":637},"li",{},[638],{"type":561,"value":639},"1 \u003C= n \u003C= 8",{"type":556,"tag":641,"props":642,"children":644},"h2",{"id":643},"解题思路",[645],{"type":561,"value":643},{"type":556,"tag":557,"props":647,"children":648},{},[649],{"type":561,"value":650},"由于需要求解所有的可能，因此回溯就不难想到，回溯的思路和写法相对比较固定，并且回溯的优化手段大多是剪枝。\n不难想到，如果左括号的数据小于右括号，我们可以提前退出，这就是这道题的剪枝。例如：())...，后面就不用看了，直接退出即可。回溯的退出条件也不难想到：",{"type":556,"tag":631,"props":652,"children":653},{},[654,659],{"type":556,"tag":635,"props":655,"children":656},{},[657],{"type":561,"value":658},"左括号数目 = 右括号数目",{"type":556,"tag":635,"props":660,"children":661},{},[662],{"type":561,"value":663},"左括号数据 + 右括号数据 = 2 * n\n因此这道题可以使用深度优先搜索（回溯思想），从空字符串开始构造，做加法，即 dfs(左括号数目，右括号数据，路径)，我们从 dfs(0, 0, \"\") 开始",{"type":556,"tag":641,"props":665,"children":667},{"id":666},"实现",[668],{"type":561,"value":666},{"type":556,"tag":670,"props":671,"children":673},"h3",{"id":672},"回溯",[674],{"type":561,"value":672},{"type":556,"tag":568,"props":676,"children":680},{"className":677,"code":678,"language":679,"meta":549,"style":549},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const res = [];\n\n  /**\n   * @param l 左侧括号已经用了几个\n   * @param r 右侧括号已经用了几个\n   * @param str 当前递归得到的拼接字符串结果\n   */\n  function dfs(l, r, str) {\n    if (l === n && r === n) {\n      return res.push(str);\n    }\n    // l \u003C r 时不满足条件，剪枝\n    if (l \u003C r) return;\n    // l \u003C n 时可插入左括号，最多可以插入 n 个\n    if (l \u003C n) {\n      dfs(l + 1, r, str + \"(\");\n    }\n    // r \u003C l 时，可以插入右括号\n    if (r \u003C l) {\n      dfs(l, r + 1, str + \")\");\n    }\n  }\n\n  dfs(0, 0, \"\");\n\n  return res;\n};\n","js",[681],{"type":556,"tag":574,"props":682,"children":683},{"__ignoreMap":549},[684,693,735,766,775,821,844,854,863,890,916,942,951,1000,1052,1089,1098,1107,1146,1155,1187,1255,1263,1272,1305,1365,1373,1382,1390,1430,1438,1455],{"type":556,"tag":578,"props":685,"children":686},{"class":580,"line":581},[687],{"type":556,"tag":578,"props":688,"children":690},{"style":689},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[691],{"type":561,"value":692},"/**\n",{"type":556,"tag":578,"props":694,"children":695},{"class":580,"line":590},[696,701,707,713,718,724,729],{"type":556,"tag":578,"props":697,"children":698},{"style":689},[699],{"type":561,"value":700}," * ",{"type":556,"tag":578,"props":702,"children":704},{"style":703},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[705],{"type":561,"value":706},"@",{"type":556,"tag":578,"props":708,"children":710},{"style":709},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[711],{"type":561,"value":712},"param",{"type":556,"tag":578,"props":714,"children":715},{"style":703},[716],{"type":561,"value":717}," {",{"type":556,"tag":578,"props":719,"children":721},{"style":720},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[722],{"type":561,"value":723},"number",{"type":556,"tag":578,"props":725,"children":726},{"style":703},[727],{"type":561,"value":728},"}",{"type":556,"tag":578,"props":730,"children":732},{"style":731},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[733],{"type":561,"value":734}," n\n",{"type":556,"tag":578,"props":736,"children":738},{"class":580,"line":737},3,[739,743,747,752,756,761],{"type":556,"tag":578,"props":740,"children":741},{"style":689},[742],{"type":561,"value":700},{"type":556,"tag":578,"props":744,"children":745},{"style":703},[746],{"type":561,"value":706},{"type":556,"tag":578,"props":748,"children":749},{"style":709},[750],{"type":561,"value":751},"return",{"type":556,"tag":578,"props":753,"children":754},{"style":703},[755],{"type":561,"value":717},{"type":556,"tag":578,"props":757,"children":758},{"style":720},[759],{"type":561,"value":760},"string[]",{"type":556,"tag":578,"props":762,"children":763},{"style":703},[764],{"type":561,"value":765},"}\n",{"type":556,"tag":578,"props":767,"children":769},{"class":580,"line":768},4,[770],{"type":556,"tag":578,"props":771,"children":772},{"style":689},[773],{"type":561,"value":774}," */\n",{"type":556,"tag":578,"props":776,"children":778},{"class":580,"line":777},5,[779,785,791,796,801,806,811,816],{"type":556,"tag":578,"props":780,"children":782},{"style":781},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[783],{"type":561,"value":784},"var",{"type":556,"tag":578,"props":786,"children":788},{"style":787},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[789],{"type":561,"value":790}," generateParenthesis",{"type":556,"tag":578,"props":792,"children":793},{"style":703},[794],{"type":561,"value":795}," =",{"type":556,"tag":578,"props":797,"children":798},{"style":781},[799],{"type":561,"value":800}," function",{"type":556,"tag":578,"props":802,"children":803},{"style":703},[804],{"type":561,"value":805}," (",{"type":556,"tag":578,"props":807,"children":808},{"style":731},[809],{"type":561,"value":810},"n",{"type":556,"tag":578,"props":812,"children":813},{"style":703},[814],{"type":561,"value":815},")",{"type":556,"tag":578,"props":817,"children":818},{"style":703},[819],{"type":561,"value":820}," {\n",{"type":556,"tag":578,"props":822,"children":824},{"class":580,"line":823},6,[825,830,835,839],{"type":556,"tag":578,"props":826,"children":827},{"style":781},[828],{"type":561,"value":829},"  const",{"type":556,"tag":578,"props":831,"children":832},{"style":731},[833],{"type":561,"value":834}," res",{"type":556,"tag":578,"props":836,"children":837},{"style":703},[838],{"type":561,"value":795},{"type":556,"tag":578,"props":840,"children":841},{"style":703},[842],{"type":561,"value":843}," [];\n",{"type":556,"tag":578,"props":845,"children":847},{"class":580,"line":846},7,[848],{"type":556,"tag":578,"props":849,"children":851},{"emptyLinePlaceholder":850},true,[852],{"type":561,"value":853},"\n",{"type":556,"tag":578,"props":855,"children":857},{"class":580,"line":856},8,[858],{"type":556,"tag":578,"props":859,"children":860},{"style":689},[861],{"type":561,"value":862},"  /**\n",{"type":556,"tag":578,"props":864,"children":866},{"class":580,"line":865},9,[867,872,876,880,885],{"type":556,"tag":578,"props":868,"children":869},{"style":689},[870],{"type":561,"value":871},"   * ",{"type":556,"tag":578,"props":873,"children":874},{"style":703},[875],{"type":561,"value":706},{"type":556,"tag":578,"props":877,"children":878},{"style":709},[879],{"type":561,"value":712},{"type":556,"tag":578,"props":881,"children":882},{"style":731},[883],{"type":561,"value":884}," l",{"type":556,"tag":578,"props":886,"children":887},{"style":689},[888],{"type":561,"value":889}," 左侧括号已经用了几个\n",{"type":556,"tag":578,"props":891,"children":893},{"class":580,"line":892},10,[894,898,902,906,911],{"type":556,"tag":578,"props":895,"children":896},{"style":689},[897],{"type":561,"value":871},{"type":556,"tag":578,"props":899,"children":900},{"style":703},[901],{"type":561,"value":706},{"type":556,"tag":578,"props":903,"children":904},{"style":709},[905],{"type":561,"value":712},{"type":556,"tag":578,"props":907,"children":908},{"style":731},[909],{"type":561,"value":910}," r",{"type":556,"tag":578,"props":912,"children":913},{"style":689},[914],{"type":561,"value":915}," 右侧括号已经用了几个\n",{"type":556,"tag":578,"props":917,"children":919},{"class":580,"line":918},11,[920,924,928,932,937],{"type":556,"tag":578,"props":921,"children":922},{"style":689},[923],{"type":561,"value":871},{"type":556,"tag":578,"props":925,"children":926},{"style":703},[927],{"type":561,"value":706},{"type":556,"tag":578,"props":929,"children":930},{"style":709},[931],{"type":561,"value":712},{"type":556,"tag":578,"props":933,"children":934},{"style":731},[935],{"type":561,"value":936}," str",{"type":556,"tag":578,"props":938,"children":939},{"style":689},[940],{"type":561,"value":941}," 当前递归得到的拼接字符串结果\n",{"type":556,"tag":578,"props":943,"children":945},{"class":580,"line":944},12,[946],{"type":556,"tag":578,"props":947,"children":948},{"style":689},[949],{"type":561,"value":950},"   */\n",{"type":556,"tag":578,"props":952,"children":954},{"class":580,"line":953},13,[955,960,965,970,975,980,984,988,992,996],{"type":556,"tag":578,"props":956,"children":957},{"style":781},[958],{"type":561,"value":959},"  function",{"type":556,"tag":578,"props":961,"children":962},{"style":787},[963],{"type":561,"value":964}," dfs",{"type":556,"tag":578,"props":966,"children":967},{"style":703},[968],{"type":561,"value":969},"(",{"type":556,"tag":578,"props":971,"children":972},{"style":731},[973],{"type":561,"value":974},"l",{"type":556,"tag":578,"props":976,"children":977},{"style":703},[978],{"type":561,"value":979},",",{"type":556,"tag":578,"props":981,"children":982},{"style":731},[983],{"type":561,"value":910},{"type":556,"tag":578,"props":985,"children":986},{"style":703},[987],{"type":561,"value":979},{"type":556,"tag":578,"props":989,"children":990},{"style":731},[991],{"type":561,"value":936},{"type":556,"tag":578,"props":993,"children":994},{"style":703},[995],{"type":561,"value":815},{"type":556,"tag":578,"props":997,"children":998},{"style":703},[999],{"type":561,"value":820},{"type":556,"tag":578,"props":1001,"children":1003},{"class":580,"line":1002},14,[1004,1009,1013,1017,1022,1027,1032,1036,1040,1044,1048],{"type":556,"tag":578,"props":1005,"children":1006},{"style":709},[1007],{"type":561,"value":1008},"    if",{"type":556,"tag":578,"props":1010,"children":1011},{"style":703},[1012],{"type":561,"value":805},{"type":556,"tag":578,"props":1014,"children":1015},{"style":731},[1016],{"type":561,"value":974},{"type":556,"tag":578,"props":1018,"children":1019},{"style":781},[1020],{"type":561,"value":1021}," ===",{"type":556,"tag":578,"props":1023,"children":1024},{"style":731},[1025],{"type":561,"value":1026}," n",{"type":556,"tag":578,"props":1028,"children":1029},{"style":781},[1030],{"type":561,"value":1031}," &&",{"type":556,"tag":578,"props":1033,"children":1034},{"style":731},[1035],{"type":561,"value":910},{"type":556,"tag":578,"props":1037,"children":1038},{"style":781},[1039],{"type":561,"value":1021},{"type":556,"tag":578,"props":1041,"children":1042},{"style":731},[1043],{"type":561,"value":1026},{"type":556,"tag":578,"props":1045,"children":1046},{"style":703},[1047],{"type":561,"value":815},{"type":556,"tag":578,"props":1049,"children":1050},{"style":703},[1051],{"type":561,"value":820},{"type":556,"tag":578,"props":1053,"children":1055},{"class":580,"line":1054},15,[1056,1061,1065,1070,1075,1079,1084],{"type":556,"tag":578,"props":1057,"children":1058},{"style":709},[1059],{"type":561,"value":1060},"      return",{"type":556,"tag":578,"props":1062,"children":1063},{"style":731},[1064],{"type":561,"value":834},{"type":556,"tag":578,"props":1066,"children":1067},{"style":703},[1068],{"type":561,"value":1069},".",{"type":556,"tag":578,"props":1071,"children":1072},{"style":787},[1073],{"type":561,"value":1074},"push",{"type":556,"tag":578,"props":1076,"children":1077},{"style":703},[1078],{"type":561,"value":969},{"type":556,"tag":578,"props":1080,"children":1081},{"style":731},[1082],{"type":561,"value":1083},"str",{"type":556,"tag":578,"props":1085,"children":1086},{"style":703},[1087],{"type":561,"value":1088},");\n",{"type":556,"tag":578,"props":1090,"children":1092},{"class":580,"line":1091},16,[1093],{"type":556,"tag":578,"props":1094,"children":1095},{"style":703},[1096],{"type":561,"value":1097},"    }\n",{"type":556,"tag":578,"props":1099,"children":1101},{"class":580,"line":1100},17,[1102],{"type":556,"tag":578,"props":1103,"children":1104},{"style":689},[1105],{"type":561,"value":1106},"    // l \u003C r 时不满足条件，剪枝\n",{"type":556,"tag":578,"props":1108,"children":1110},{"class":580,"line":1109},18,[1111,1115,1119,1123,1128,1132,1136,1141],{"type":556,"tag":578,"props":1112,"children":1113},{"style":709},[1114],{"type":561,"value":1008},{"type":556,"tag":578,"props":1116,"children":1117},{"style":703},[1118],{"type":561,"value":805},{"type":556,"tag":578,"props":1120,"children":1121},{"style":731},[1122],{"type":561,"value":974},{"type":556,"tag":578,"props":1124,"children":1125},{"style":703},[1126],{"type":561,"value":1127}," \u003C",{"type":556,"tag":578,"props":1129,"children":1130},{"style":731},[1131],{"type":561,"value":910},{"type":556,"tag":578,"props":1133,"children":1134},{"style":703},[1135],{"type":561,"value":815},{"type":556,"tag":578,"props":1137,"children":1138},{"style":709},[1139],{"type":561,"value":1140}," return",{"type":556,"tag":578,"props":1142,"children":1143},{"style":703},[1144],{"type":561,"value":1145},";\n",{"type":556,"tag":578,"props":1147,"children":1149},{"class":580,"line":1148},19,[1150],{"type":556,"tag":578,"props":1151,"children":1152},{"style":689},[1153],{"type":561,"value":1154},"    // l \u003C n 时可插入左括号，最多可以插入 n 个\n",{"type":556,"tag":578,"props":1156,"children":1158},{"class":580,"line":1157},20,[1159,1163,1167,1171,1175,1179,1183],{"type":556,"tag":578,"props":1160,"children":1161},{"style":709},[1162],{"type":561,"value":1008},{"type":556,"tag":578,"props":1164,"children":1165},{"style":703},[1166],{"type":561,"value":805},{"type":556,"tag":578,"props":1168,"children":1169},{"style":731},[1170],{"type":561,"value":974},{"type":556,"tag":578,"props":1172,"children":1173},{"style":703},[1174],{"type":561,"value":1127},{"type":556,"tag":578,"props":1176,"children":1177},{"style":731},[1178],{"type":561,"value":1026},{"type":556,"tag":578,"props":1180,"children":1181},{"style":703},[1182],{"type":561,"value":815},{"type":556,"tag":578,"props":1184,"children":1185},{"style":703},[1186],{"type":561,"value":820},{"type":556,"tag":578,"props":1188,"children":1190},{"class":580,"line":1189},21,[1191,1196,1200,1204,1209,1215,1219,1223,1227,1231,1235,1241,1246,1251],{"type":556,"tag":578,"props":1192,"children":1193},{"style":787},[1194],{"type":561,"value":1195},"      dfs",{"type":556,"tag":578,"props":1197,"children":1198},{"style":703},[1199],{"type":561,"value":969},{"type":556,"tag":578,"props":1201,"children":1202},{"style":731},[1203],{"type":561,"value":974},{"type":556,"tag":578,"props":1205,"children":1206},{"style":781},[1207],{"type":561,"value":1208}," +",{"type":556,"tag":578,"props":1210,"children":1212},{"style":1211},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1213],{"type":561,"value":1214}," 1",{"type":556,"tag":578,"props":1216,"children":1217},{"style":703},[1218],{"type":561,"value":979},{"type":556,"tag":578,"props":1220,"children":1221},{"style":731},[1222],{"type":561,"value":910},{"type":556,"tag":578,"props":1224,"children":1225},{"style":703},[1226],{"type":561,"value":979},{"type":556,"tag":578,"props":1228,"children":1229},{"style":731},[1230],{"type":561,"value":936},{"type":556,"tag":578,"props":1232,"children":1233},{"style":781},[1234],{"type":561,"value":1208},{"type":556,"tag":578,"props":1236,"children":1238},{"style":1237},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1239],{"type":561,"value":1240}," \"",{"type":556,"tag":578,"props":1242,"children":1244},{"style":1243},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1245],{"type":561,"value":969},{"type":556,"tag":578,"props":1247,"children":1248},{"style":1237},[1249],{"type":561,"value":1250},"\"",{"type":556,"tag":578,"props":1252,"children":1253},{"style":703},[1254],{"type":561,"value":1088},{"type":556,"tag":578,"props":1256,"children":1258},{"class":580,"line":1257},22,[1259],{"type":556,"tag":578,"props":1260,"children":1261},{"style":703},[1262],{"type":561,"value":1097},{"type":556,"tag":578,"props":1264,"children":1266},{"class":580,"line":1265},23,[1267],{"type":556,"tag":578,"props":1268,"children":1269},{"style":689},[1270],{"type":561,"value":1271},"    // r \u003C l 时，可以插入右括号\n",{"type":556,"tag":578,"props":1273,"children":1275},{"class":580,"line":1274},24,[1276,1280,1284,1289,1293,1297,1301],{"type":556,"tag":578,"props":1277,"children":1278},{"style":709},[1279],{"type":561,"value":1008},{"type":556,"tag":578,"props":1281,"children":1282},{"style":703},[1283],{"type":561,"value":805},{"type":556,"tag":578,"props":1285,"children":1286},{"style":731},[1287],{"type":561,"value":1288},"r",{"type":556,"tag":578,"props":1290,"children":1291},{"style":703},[1292],{"type":561,"value":1127},{"type":556,"tag":578,"props":1294,"children":1295},{"style":731},[1296],{"type":561,"value":884},{"type":556,"tag":578,"props":1298,"children":1299},{"style":703},[1300],{"type":561,"value":815},{"type":556,"tag":578,"props":1302,"children":1303},{"style":703},[1304],{"type":561,"value":820},{"type":556,"tag":578,"props":1306,"children":1308},{"class":580,"line":1307},25,[1309,1313,1317,1321,1325,1329,1333,1337,1341,1345,1349,1353,1357,1361],{"type":556,"tag":578,"props":1310,"children":1311},{"style":787},[1312],{"type":561,"value":1195},{"type":556,"tag":578,"props":1314,"children":1315},{"style":703},[1316],{"type":561,"value":969},{"type":556,"tag":578,"props":1318,"children":1319},{"style":731},[1320],{"type":561,"value":974},{"type":556,"tag":578,"props":1322,"children":1323},{"style":703},[1324],{"type":561,"value":979},{"type":556,"tag":578,"props":1326,"children":1327},{"style":731},[1328],{"type":561,"value":910},{"type":556,"tag":578,"props":1330,"children":1331},{"style":781},[1332],{"type":561,"value":1208},{"type":556,"tag":578,"props":1334,"children":1335},{"style":1211},[1336],{"type":561,"value":1214},{"type":556,"tag":578,"props":1338,"children":1339},{"style":703},[1340],{"type":561,"value":979},{"type":556,"tag":578,"props":1342,"children":1343},{"style":731},[1344],{"type":561,"value":936},{"type":556,"tag":578,"props":1346,"children":1347},{"style":781},[1348],{"type":561,"value":1208},{"type":556,"tag":578,"props":1350,"children":1351},{"style":1237},[1352],{"type":561,"value":1240},{"type":556,"tag":578,"props":1354,"children":1355},{"style":1243},[1356],{"type":561,"value":815},{"type":556,"tag":578,"props":1358,"children":1359},{"style":1237},[1360],{"type":561,"value":1250},{"type":556,"tag":578,"props":1362,"children":1363},{"style":703},[1364],{"type":561,"value":1088},{"type":556,"tag":578,"props":1366,"children":1368},{"class":580,"line":1367},26,[1369],{"type":556,"tag":578,"props":1370,"children":1371},{"style":703},[1372],{"type":561,"value":1097},{"type":556,"tag":578,"props":1374,"children":1376},{"class":580,"line":1375},27,[1377],{"type":556,"tag":578,"props":1378,"children":1379},{"style":703},[1380],{"type":561,"value":1381},"  }\n",{"type":556,"tag":578,"props":1383,"children":1385},{"class":580,"line":1384},28,[1386],{"type":556,"tag":578,"props":1387,"children":1388},{"emptyLinePlaceholder":850},[1389],{"type":561,"value":853},{"type":556,"tag":578,"props":1391,"children":1393},{"class":580,"line":1392},29,[1394,1399,1403,1408,1412,1417,1421,1426],{"type":556,"tag":578,"props":1395,"children":1396},{"style":787},[1397],{"type":561,"value":1398},"  dfs",{"type":556,"tag":578,"props":1400,"children":1401},{"style":703},[1402],{"type":561,"value":969},{"type":556,"tag":578,"props":1404,"children":1405},{"style":1211},[1406],{"type":561,"value":1407},"0",{"type":556,"tag":578,"props":1409,"children":1410},{"style":703},[1411],{"type":561,"value":979},{"type":556,"tag":578,"props":1413,"children":1414},{"style":1211},[1415],{"type":561,"value":1416}," 0",{"type":556,"tag":578,"props":1418,"children":1419},{"style":703},[1420],{"type":561,"value":979},{"type":556,"tag":578,"props":1422,"children":1423},{"style":1237},[1424],{"type":561,"value":1425}," \"\"",{"type":556,"tag":578,"props":1427,"children":1428},{"style":703},[1429],{"type":561,"value":1088},{"type":556,"tag":578,"props":1431,"children":1433},{"class":580,"line":1432},30,[1434],{"type":556,"tag":578,"props":1435,"children":1436},{"emptyLinePlaceholder":850},[1437],{"type":561,"value":853},{"type":556,"tag":578,"props":1439,"children":1441},{"class":580,"line":1440},31,[1442,1447,1451],{"type":556,"tag":578,"props":1443,"children":1444},{"style":709},[1445],{"type":561,"value":1446},"  return",{"type":556,"tag":578,"props":1448,"children":1449},{"style":731},[1450],{"type":561,"value":834},{"type":556,"tag":578,"props":1452,"children":1453},{"style":703},[1454],{"type":561,"value":1145},{"type":556,"tag":578,"props":1456,"children":1458},{"class":580,"line":1457},32,[1459],{"type":556,"tag":578,"props":1460,"children":1461},{"style":703},[1462],{"type":561,"value":1463},"};\n",{"type":556,"tag":1465,"props":1466,"children":1467},"style",{},[1468],{"type":561,"value":1469},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":549,"searchDepth":777,"depth":777,"links":1471},[1472,1473],{"id":643,"depth":590,"text":643},{"id":666,"depth":590,"text":666,"children":1474},[1475],{"id":672,"depth":737,"text":672},"markdown","content:1.algorithm:3.leetcode:3.major:22.generate-parentheses.md","content","1.algorithm/3.leetcode/3.major/22.generate-parentheses.md","md",[1482,1484],{"_path":90,"title":89,"description":1483},"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",{"_path":96,"title":95,"description":1485},"给你一个链表数组，每个链表都已经按升序排列。",1714279832141]