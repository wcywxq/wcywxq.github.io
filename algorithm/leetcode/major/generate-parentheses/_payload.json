[{"data":1,"prerenderedAt":1483},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/generate-parentheses":543,"/algorithm/leetcode/major/generate-parentheses-surround":1478},[4,269,298,511,519,528],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":510},"代码考核","/code-assessment",[302,404,503],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,337,353,381,388,395,398,401],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328,331,334],{"title":311,"_path":312},"polyfill","/code-assessment/source/native-api/polyfill",{"title":314,"_path":315},"ajax","/code-assessment/source/native-api/ajax",{"title":317,"_path":318},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":320,"_path":321},"new 操作符","/code-assessment/source/native-api/new",{"title":323,"_path":324},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":326,"_path":327},"定时器","/code-assessment/source/native-api/timer",{"title":329,"_path":330},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":332,"_path":333},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":335,"_path":336},"extends","/code-assessment/source/native-api/extends",{"title":338,"_path":339,"children":340},"函数 Function","/code-assessment/source/function",[341,344,347,350],{"title":342,"_path":343},"函数防抖","/code-assessment/source/function/debounce",{"title":345,"_path":346},"函数节流","/code-assessment/source/function/throttle",{"title":348,"_path":349},"函数柯理化","/code-assessment/source/function/curry",{"title":351,"_path":352},"函数睡眠","/code-assessment/source/function/sleep",{"title":354,"_path":355,"children":356},"数组 Array","/code-assessment/source/array",[357,360,363,366,369,372,375,378],{"title":358,"_path":359},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":361,"_path":362},"数组扁平化","/code-assessment/source/array/flat",{"title":364,"_path":365},"原型方法","/code-assessment/source/array/prototype-method",{"title":367,"_path":368},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":370,"_path":371},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":373,"_path":374},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":376,"_path":377},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":379,"_path":380},"二维数组","/code-assessment/source/array/2d-array",{"title":382,"_path":383,"children":384},"字符串 String","/code-assessment/source/string",[385],{"title":386,"_path":387},"repeat()","/code-assessment/source/string/repeat",{"title":389,"_path":390,"children":391},"集合 Set","/code-assessment/source/set",[392],{"title":393,"_path":394},"遍历集合","/code-assessment/source/set/traverse",{"title":396,"_path":397},"获取通用类型","/code-assessment/source/get-generic-type",{"title":399,"_path":400},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":402,"_path":403},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":405,"_path":406,"children":407},"业务场景","/code-assessment/scene",[408,439,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500],{"title":409,"_path":410,"children":411},"Promise","/code-assessment/scene/promise",[412,415,418,421,424,427,430,433,436],{"title":413,"_path":414},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":416,"_path":417},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":419,"_path":420},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":422,"_path":423},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":425,"_path":426},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":428,"_path":429},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":431,"_path":432},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":434,"_path":435},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":437,"_path":438},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":440,"_path":441,"children":442},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[443,446],{"title":444,"_path":445},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":447,"_path":448},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":450,"_path":451},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":453,"_path":454},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":456,"_path":457},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":459,"_path":460},"倒计时","/code-assessment/scene/countdown",{"title":462,"_path":463},"日期格式化","/code-assessment/scene/date-format",{"title":465,"_path":466},"实现前端路由","/code-assessment/scene/frontend-route",{"title":468,"_path":469},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":471,"_path":472},"lodash.get","/code-assessment/scene/lodash-get",{"title":474,"_path":475},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":477,"_path":478},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":480,"_path":481},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":483,"_path":484},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":486,"_path":487},"随机数","/code-assessment/scene/random-number",{"title":489,"_path":490},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":492,"_path":493},"sku 算法实现","/code-assessment/scene/sku",{"title":495,"_path":496},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":498,"_path":499},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":501,"_path":502},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":504,"_path":505,"children":506},"Ts 类型挑战","/code-assessment/type-challeges",[507],{"title":508,"_path":509},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":512,"_path":513,"children":514,"icon":518},"项目","/project",[515],{"title":516,"_path":517},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":520,"_path":521,"children":522,"icon":527},"设计模式","/design-mode",[523,524],{"title":520,"_path":521},{"title":525,"_path":526},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":529,"_path":530,"children":531,"icon":542},"后端语言","/backend-languages",[532],{"title":533,"_path":534,"children":535},"Python","/backend-languages/python",[536,539],{"title":537,"_path":538},"基础","/backend-languages/python/base",{"title":540,"_path":541},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":93,"_dir":544,"_draft":545,"_partial":545,"_locale":546,"title":92,"description":547,"url":548,"body":549,"_type":1473,"_id":1474,"_source":1475,"_file":1476,"_extension":1477},"major",false,"","数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。","https://leetcode.cn/problems/generate-parentheses",{"type":550,"children":551,"toc":1467},"root",[552,559,564,594,599,622,627,637,643,648,661,666,672,1461],{"type":553,"tag":554,"props":555,"children":556},"element","p",{},[557],{"type":558,"value":547},"text",{"type":553,"tag":554,"props":560,"children":561},{},[562],{"type":558,"value":563},"示例 1：",{"type":553,"tag":565,"props":566,"children":569},"pre",{"className":567,"code":568,"language":558,"meta":546,"style":546},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：n = 3\n输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",[570],{"type":553,"tag":571,"props":572,"children":573},"code",{"__ignoreMap":546},[574,585],{"type":553,"tag":575,"props":576,"children":579},"span",{"class":577,"line":578},"line",1,[580],{"type":553,"tag":575,"props":581,"children":582},{},[583],{"type":558,"value":584},"输入：n = 3\n",{"type":553,"tag":575,"props":586,"children":588},{"class":577,"line":587},2,[589],{"type":553,"tag":575,"props":590,"children":591},{},[592],{"type":558,"value":593},"输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",{"type":553,"tag":554,"props":595,"children":596},{},[597],{"type":558,"value":598},"示例 2：",{"type":553,"tag":565,"props":600,"children":602},{"className":567,"code":601,"language":558,"meta":546,"style":546},"输入：n = 1\n输出：[\"()\"]\n",[603],{"type":553,"tag":571,"props":604,"children":605},{"__ignoreMap":546},[606,614],{"type":553,"tag":575,"props":607,"children":608},{"class":577,"line":578},[609],{"type":553,"tag":575,"props":610,"children":611},{},[612],{"type":558,"value":613},"输入：n = 1\n",{"type":553,"tag":575,"props":615,"children":616},{"class":577,"line":587},[617],{"type":553,"tag":575,"props":618,"children":619},{},[620],{"type":558,"value":621},"输出：[\"()\"]\n",{"type":553,"tag":554,"props":623,"children":624},{},[625],{"type":558,"value":626},"提示：",{"type":553,"tag":628,"props":629,"children":630},"ul",{},[631],{"type":553,"tag":632,"props":633,"children":634},"li",{},[635],{"type":558,"value":636},"1 \u003C= n \u003C= 8",{"type":553,"tag":638,"props":639,"children":641},"h2",{"id":640},"解题思路",[642],{"type":558,"value":640},{"type":553,"tag":554,"props":644,"children":645},{},[646],{"type":558,"value":647},"由于需要求解所有的可能，因此回溯就不难想到，回溯的思路和写法相对比较固定，并且回溯的优化手段大多是剪枝。\n不难想到，如果左括号的数据小于右括号，我们可以提前退出，这就是这道题的剪枝。例如：())...，后面就不用看了，直接退出即可。回溯的退出条件也不难想到：",{"type":553,"tag":628,"props":649,"children":650},{},[651,656],{"type":553,"tag":632,"props":652,"children":653},{},[654],{"type":558,"value":655},"左括号数目 = 右括号数目",{"type":553,"tag":632,"props":657,"children":658},{},[659],{"type":558,"value":660},"左括号数据 + 右括号数据 = 2 * n\n因此这道题可以使用深度优先搜索（回溯思想），从空字符串开始构造，做加法，即 dfs(左括号数目，右括号数据，路径)，我们从 dfs(0, 0, \"\") 开始",{"type":553,"tag":638,"props":662,"children":664},{"id":663},"实现",[665],{"type":558,"value":663},{"type":553,"tag":667,"props":668,"children":670},"h3",{"id":669},"回溯",[671],{"type":558,"value":669},{"type":553,"tag":565,"props":673,"children":677},{"className":674,"code":675,"language":676,"meta":546,"style":546},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const res = [];\n\n  /**\n   * @param l 左侧括号已经用了几个\n   * @param r 右侧括号已经用了几个\n   * @param str 当前递归得到的拼接字符串结果\n   */\n  function dfs(l, r, str) {\n    if (l === n && r === n) {\n      return res.push(str);\n    }\n    // l \u003C r 时不满足条件，剪枝\n    if (l \u003C r) return;\n    // l \u003C n 时可插入左括号，最多可以插入 n 个\n    if (l \u003C n) {\n      dfs(l + 1, r, str + \"(\");\n    }\n    // r \u003C l 时，可以插入右括号\n    if (r \u003C l) {\n      dfs(l, r + 1, str + \")\");\n    }\n  }\n\n  dfs(0, 0, \"\");\n\n  return res;\n};\n","js",[678],{"type":553,"tag":571,"props":679,"children":680},{"__ignoreMap":546},[681,690,732,763,772,818,841,851,860,887,913,939,948,997,1049,1086,1095,1104,1143,1152,1184,1252,1260,1269,1302,1362,1370,1379,1387,1427,1435,1452],{"type":553,"tag":575,"props":682,"children":683},{"class":577,"line":578},[684],{"type":553,"tag":575,"props":685,"children":687},{"style":686},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[688],{"type":558,"value":689},"/**\n",{"type":553,"tag":575,"props":691,"children":692},{"class":577,"line":587},[693,698,704,710,715,721,726],{"type":553,"tag":575,"props":694,"children":695},{"style":686},[696],{"type":558,"value":697}," * ",{"type":553,"tag":575,"props":699,"children":701},{"style":700},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[702],{"type":558,"value":703},"@",{"type":553,"tag":575,"props":705,"children":707},{"style":706},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[708],{"type":558,"value":709},"param",{"type":553,"tag":575,"props":711,"children":712},{"style":700},[713],{"type":558,"value":714}," {",{"type":553,"tag":575,"props":716,"children":718},{"style":717},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[719],{"type":558,"value":720},"number",{"type":553,"tag":575,"props":722,"children":723},{"style":700},[724],{"type":558,"value":725},"}",{"type":553,"tag":575,"props":727,"children":729},{"style":728},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[730],{"type":558,"value":731}," n\n",{"type":553,"tag":575,"props":733,"children":735},{"class":577,"line":734},3,[736,740,744,749,753,758],{"type":553,"tag":575,"props":737,"children":738},{"style":686},[739],{"type":558,"value":697},{"type":553,"tag":575,"props":741,"children":742},{"style":700},[743],{"type":558,"value":703},{"type":553,"tag":575,"props":745,"children":746},{"style":706},[747],{"type":558,"value":748},"return",{"type":553,"tag":575,"props":750,"children":751},{"style":700},[752],{"type":558,"value":714},{"type":553,"tag":575,"props":754,"children":755},{"style":717},[756],{"type":558,"value":757},"string[]",{"type":553,"tag":575,"props":759,"children":760},{"style":700},[761],{"type":558,"value":762},"}\n",{"type":553,"tag":575,"props":764,"children":766},{"class":577,"line":765},4,[767],{"type":553,"tag":575,"props":768,"children":769},{"style":686},[770],{"type":558,"value":771}," */\n",{"type":553,"tag":575,"props":773,"children":775},{"class":577,"line":774},5,[776,782,788,793,798,803,808,813],{"type":553,"tag":575,"props":777,"children":779},{"style":778},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[780],{"type":558,"value":781},"var",{"type":553,"tag":575,"props":783,"children":785},{"style":784},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[786],{"type":558,"value":787}," generateParenthesis",{"type":553,"tag":575,"props":789,"children":790},{"style":700},[791],{"type":558,"value":792}," =",{"type":553,"tag":575,"props":794,"children":795},{"style":778},[796],{"type":558,"value":797}," function",{"type":553,"tag":575,"props":799,"children":800},{"style":700},[801],{"type":558,"value":802}," (",{"type":553,"tag":575,"props":804,"children":805},{"style":728},[806],{"type":558,"value":807},"n",{"type":553,"tag":575,"props":809,"children":810},{"style":700},[811],{"type":558,"value":812},")",{"type":553,"tag":575,"props":814,"children":815},{"style":700},[816],{"type":558,"value":817}," {\n",{"type":553,"tag":575,"props":819,"children":821},{"class":577,"line":820},6,[822,827,832,836],{"type":553,"tag":575,"props":823,"children":824},{"style":778},[825],{"type":558,"value":826},"  const",{"type":553,"tag":575,"props":828,"children":829},{"style":728},[830],{"type":558,"value":831}," res",{"type":553,"tag":575,"props":833,"children":834},{"style":700},[835],{"type":558,"value":792},{"type":553,"tag":575,"props":837,"children":838},{"style":700},[839],{"type":558,"value":840}," [];\n",{"type":553,"tag":575,"props":842,"children":844},{"class":577,"line":843},7,[845],{"type":553,"tag":575,"props":846,"children":848},{"emptyLinePlaceholder":847},true,[849],{"type":558,"value":850},"\n",{"type":553,"tag":575,"props":852,"children":854},{"class":577,"line":853},8,[855],{"type":553,"tag":575,"props":856,"children":857},{"style":686},[858],{"type":558,"value":859},"  /**\n",{"type":553,"tag":575,"props":861,"children":863},{"class":577,"line":862},9,[864,869,873,877,882],{"type":553,"tag":575,"props":865,"children":866},{"style":686},[867],{"type":558,"value":868},"   * ",{"type":553,"tag":575,"props":870,"children":871},{"style":700},[872],{"type":558,"value":703},{"type":553,"tag":575,"props":874,"children":875},{"style":706},[876],{"type":558,"value":709},{"type":553,"tag":575,"props":878,"children":879},{"style":728},[880],{"type":558,"value":881}," l",{"type":553,"tag":575,"props":883,"children":884},{"style":686},[885],{"type":558,"value":886}," 左侧括号已经用了几个\n",{"type":553,"tag":575,"props":888,"children":890},{"class":577,"line":889},10,[891,895,899,903,908],{"type":553,"tag":575,"props":892,"children":893},{"style":686},[894],{"type":558,"value":868},{"type":553,"tag":575,"props":896,"children":897},{"style":700},[898],{"type":558,"value":703},{"type":553,"tag":575,"props":900,"children":901},{"style":706},[902],{"type":558,"value":709},{"type":553,"tag":575,"props":904,"children":905},{"style":728},[906],{"type":558,"value":907}," r",{"type":553,"tag":575,"props":909,"children":910},{"style":686},[911],{"type":558,"value":912}," 右侧括号已经用了几个\n",{"type":553,"tag":575,"props":914,"children":916},{"class":577,"line":915},11,[917,921,925,929,934],{"type":553,"tag":575,"props":918,"children":919},{"style":686},[920],{"type":558,"value":868},{"type":553,"tag":575,"props":922,"children":923},{"style":700},[924],{"type":558,"value":703},{"type":553,"tag":575,"props":926,"children":927},{"style":706},[928],{"type":558,"value":709},{"type":553,"tag":575,"props":930,"children":931},{"style":728},[932],{"type":558,"value":933}," str",{"type":553,"tag":575,"props":935,"children":936},{"style":686},[937],{"type":558,"value":938}," 当前递归得到的拼接字符串结果\n",{"type":553,"tag":575,"props":940,"children":942},{"class":577,"line":941},12,[943],{"type":553,"tag":575,"props":944,"children":945},{"style":686},[946],{"type":558,"value":947},"   */\n",{"type":553,"tag":575,"props":949,"children":951},{"class":577,"line":950},13,[952,957,962,967,972,977,981,985,989,993],{"type":553,"tag":575,"props":953,"children":954},{"style":778},[955],{"type":558,"value":956},"  function",{"type":553,"tag":575,"props":958,"children":959},{"style":784},[960],{"type":558,"value":961}," dfs",{"type":553,"tag":575,"props":963,"children":964},{"style":700},[965],{"type":558,"value":966},"(",{"type":553,"tag":575,"props":968,"children":969},{"style":728},[970],{"type":558,"value":971},"l",{"type":553,"tag":575,"props":973,"children":974},{"style":700},[975],{"type":558,"value":976},",",{"type":553,"tag":575,"props":978,"children":979},{"style":728},[980],{"type":558,"value":907},{"type":553,"tag":575,"props":982,"children":983},{"style":700},[984],{"type":558,"value":976},{"type":553,"tag":575,"props":986,"children":987},{"style":728},[988],{"type":558,"value":933},{"type":553,"tag":575,"props":990,"children":991},{"style":700},[992],{"type":558,"value":812},{"type":553,"tag":575,"props":994,"children":995},{"style":700},[996],{"type":558,"value":817},{"type":553,"tag":575,"props":998,"children":1000},{"class":577,"line":999},14,[1001,1006,1010,1014,1019,1024,1029,1033,1037,1041,1045],{"type":553,"tag":575,"props":1002,"children":1003},{"style":706},[1004],{"type":558,"value":1005},"    if",{"type":553,"tag":575,"props":1007,"children":1008},{"style":700},[1009],{"type":558,"value":802},{"type":553,"tag":575,"props":1011,"children":1012},{"style":728},[1013],{"type":558,"value":971},{"type":553,"tag":575,"props":1015,"children":1016},{"style":778},[1017],{"type":558,"value":1018}," ===",{"type":553,"tag":575,"props":1020,"children":1021},{"style":728},[1022],{"type":558,"value":1023}," n",{"type":553,"tag":575,"props":1025,"children":1026},{"style":778},[1027],{"type":558,"value":1028}," &&",{"type":553,"tag":575,"props":1030,"children":1031},{"style":728},[1032],{"type":558,"value":907},{"type":553,"tag":575,"props":1034,"children":1035},{"style":778},[1036],{"type":558,"value":1018},{"type":553,"tag":575,"props":1038,"children":1039},{"style":728},[1040],{"type":558,"value":1023},{"type":553,"tag":575,"props":1042,"children":1043},{"style":700},[1044],{"type":558,"value":812},{"type":553,"tag":575,"props":1046,"children":1047},{"style":700},[1048],{"type":558,"value":817},{"type":553,"tag":575,"props":1050,"children":1052},{"class":577,"line":1051},15,[1053,1058,1062,1067,1072,1076,1081],{"type":553,"tag":575,"props":1054,"children":1055},{"style":706},[1056],{"type":558,"value":1057},"      return",{"type":553,"tag":575,"props":1059,"children":1060},{"style":728},[1061],{"type":558,"value":831},{"type":553,"tag":575,"props":1063,"children":1064},{"style":700},[1065],{"type":558,"value":1066},".",{"type":553,"tag":575,"props":1068,"children":1069},{"style":784},[1070],{"type":558,"value":1071},"push",{"type":553,"tag":575,"props":1073,"children":1074},{"style":700},[1075],{"type":558,"value":966},{"type":553,"tag":575,"props":1077,"children":1078},{"style":728},[1079],{"type":558,"value":1080},"str",{"type":553,"tag":575,"props":1082,"children":1083},{"style":700},[1084],{"type":558,"value":1085},");\n",{"type":553,"tag":575,"props":1087,"children":1089},{"class":577,"line":1088},16,[1090],{"type":553,"tag":575,"props":1091,"children":1092},{"style":700},[1093],{"type":558,"value":1094},"    }\n",{"type":553,"tag":575,"props":1096,"children":1098},{"class":577,"line":1097},17,[1099],{"type":553,"tag":575,"props":1100,"children":1101},{"style":686},[1102],{"type":558,"value":1103},"    // l \u003C r 时不满足条件，剪枝\n",{"type":553,"tag":575,"props":1105,"children":1107},{"class":577,"line":1106},18,[1108,1112,1116,1120,1125,1129,1133,1138],{"type":553,"tag":575,"props":1109,"children":1110},{"style":706},[1111],{"type":558,"value":1005},{"type":553,"tag":575,"props":1113,"children":1114},{"style":700},[1115],{"type":558,"value":802},{"type":553,"tag":575,"props":1117,"children":1118},{"style":728},[1119],{"type":558,"value":971},{"type":553,"tag":575,"props":1121,"children":1122},{"style":700},[1123],{"type":558,"value":1124}," \u003C",{"type":553,"tag":575,"props":1126,"children":1127},{"style":728},[1128],{"type":558,"value":907},{"type":553,"tag":575,"props":1130,"children":1131},{"style":700},[1132],{"type":558,"value":812},{"type":553,"tag":575,"props":1134,"children":1135},{"style":706},[1136],{"type":558,"value":1137}," return",{"type":553,"tag":575,"props":1139,"children":1140},{"style":700},[1141],{"type":558,"value":1142},";\n",{"type":553,"tag":575,"props":1144,"children":1146},{"class":577,"line":1145},19,[1147],{"type":553,"tag":575,"props":1148,"children":1149},{"style":686},[1150],{"type":558,"value":1151},"    // l \u003C n 时可插入左括号，最多可以插入 n 个\n",{"type":553,"tag":575,"props":1153,"children":1155},{"class":577,"line":1154},20,[1156,1160,1164,1168,1172,1176,1180],{"type":553,"tag":575,"props":1157,"children":1158},{"style":706},[1159],{"type":558,"value":1005},{"type":553,"tag":575,"props":1161,"children":1162},{"style":700},[1163],{"type":558,"value":802},{"type":553,"tag":575,"props":1165,"children":1166},{"style":728},[1167],{"type":558,"value":971},{"type":553,"tag":575,"props":1169,"children":1170},{"style":700},[1171],{"type":558,"value":1124},{"type":553,"tag":575,"props":1173,"children":1174},{"style":728},[1175],{"type":558,"value":1023},{"type":553,"tag":575,"props":1177,"children":1178},{"style":700},[1179],{"type":558,"value":812},{"type":553,"tag":575,"props":1181,"children":1182},{"style":700},[1183],{"type":558,"value":817},{"type":553,"tag":575,"props":1185,"children":1187},{"class":577,"line":1186},21,[1188,1193,1197,1201,1206,1212,1216,1220,1224,1228,1232,1238,1243,1248],{"type":553,"tag":575,"props":1189,"children":1190},{"style":784},[1191],{"type":558,"value":1192},"      dfs",{"type":553,"tag":575,"props":1194,"children":1195},{"style":700},[1196],{"type":558,"value":966},{"type":553,"tag":575,"props":1198,"children":1199},{"style":728},[1200],{"type":558,"value":971},{"type":553,"tag":575,"props":1202,"children":1203},{"style":778},[1204],{"type":558,"value":1205}," +",{"type":553,"tag":575,"props":1207,"children":1209},{"style":1208},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1210],{"type":558,"value":1211}," 1",{"type":553,"tag":575,"props":1213,"children":1214},{"style":700},[1215],{"type":558,"value":976},{"type":553,"tag":575,"props":1217,"children":1218},{"style":728},[1219],{"type":558,"value":907},{"type":553,"tag":575,"props":1221,"children":1222},{"style":700},[1223],{"type":558,"value":976},{"type":553,"tag":575,"props":1225,"children":1226},{"style":728},[1227],{"type":558,"value":933},{"type":553,"tag":575,"props":1229,"children":1230},{"style":778},[1231],{"type":558,"value":1205},{"type":553,"tag":575,"props":1233,"children":1235},{"style":1234},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1236],{"type":558,"value":1237}," \"",{"type":553,"tag":575,"props":1239,"children":1241},{"style":1240},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1242],{"type":558,"value":966},{"type":553,"tag":575,"props":1244,"children":1245},{"style":1234},[1246],{"type":558,"value":1247},"\"",{"type":553,"tag":575,"props":1249,"children":1250},{"style":700},[1251],{"type":558,"value":1085},{"type":553,"tag":575,"props":1253,"children":1255},{"class":577,"line":1254},22,[1256],{"type":553,"tag":575,"props":1257,"children":1258},{"style":700},[1259],{"type":558,"value":1094},{"type":553,"tag":575,"props":1261,"children":1263},{"class":577,"line":1262},23,[1264],{"type":553,"tag":575,"props":1265,"children":1266},{"style":686},[1267],{"type":558,"value":1268},"    // r \u003C l 时，可以插入右括号\n",{"type":553,"tag":575,"props":1270,"children":1272},{"class":577,"line":1271},24,[1273,1277,1281,1286,1290,1294,1298],{"type":553,"tag":575,"props":1274,"children":1275},{"style":706},[1276],{"type":558,"value":1005},{"type":553,"tag":575,"props":1278,"children":1279},{"style":700},[1280],{"type":558,"value":802},{"type":553,"tag":575,"props":1282,"children":1283},{"style":728},[1284],{"type":558,"value":1285},"r",{"type":553,"tag":575,"props":1287,"children":1288},{"style":700},[1289],{"type":558,"value":1124},{"type":553,"tag":575,"props":1291,"children":1292},{"style":728},[1293],{"type":558,"value":881},{"type":553,"tag":575,"props":1295,"children":1296},{"style":700},[1297],{"type":558,"value":812},{"type":553,"tag":575,"props":1299,"children":1300},{"style":700},[1301],{"type":558,"value":817},{"type":553,"tag":575,"props":1303,"children":1305},{"class":577,"line":1304},25,[1306,1310,1314,1318,1322,1326,1330,1334,1338,1342,1346,1350,1354,1358],{"type":553,"tag":575,"props":1307,"children":1308},{"style":784},[1309],{"type":558,"value":1192},{"type":553,"tag":575,"props":1311,"children":1312},{"style":700},[1313],{"type":558,"value":966},{"type":553,"tag":575,"props":1315,"children":1316},{"style":728},[1317],{"type":558,"value":971},{"type":553,"tag":575,"props":1319,"children":1320},{"style":700},[1321],{"type":558,"value":976},{"type":553,"tag":575,"props":1323,"children":1324},{"style":728},[1325],{"type":558,"value":907},{"type":553,"tag":575,"props":1327,"children":1328},{"style":778},[1329],{"type":558,"value":1205},{"type":553,"tag":575,"props":1331,"children":1332},{"style":1208},[1333],{"type":558,"value":1211},{"type":553,"tag":575,"props":1335,"children":1336},{"style":700},[1337],{"type":558,"value":976},{"type":553,"tag":575,"props":1339,"children":1340},{"style":728},[1341],{"type":558,"value":933},{"type":553,"tag":575,"props":1343,"children":1344},{"style":778},[1345],{"type":558,"value":1205},{"type":553,"tag":575,"props":1347,"children":1348},{"style":1234},[1349],{"type":558,"value":1237},{"type":553,"tag":575,"props":1351,"children":1352},{"style":1240},[1353],{"type":558,"value":812},{"type":553,"tag":575,"props":1355,"children":1356},{"style":1234},[1357],{"type":558,"value":1247},{"type":553,"tag":575,"props":1359,"children":1360},{"style":700},[1361],{"type":558,"value":1085},{"type":553,"tag":575,"props":1363,"children":1365},{"class":577,"line":1364},26,[1366],{"type":553,"tag":575,"props":1367,"children":1368},{"style":700},[1369],{"type":558,"value":1094},{"type":553,"tag":575,"props":1371,"children":1373},{"class":577,"line":1372},27,[1374],{"type":553,"tag":575,"props":1375,"children":1376},{"style":700},[1377],{"type":558,"value":1378},"  }\n",{"type":553,"tag":575,"props":1380,"children":1382},{"class":577,"line":1381},28,[1383],{"type":553,"tag":575,"props":1384,"children":1385},{"emptyLinePlaceholder":847},[1386],{"type":558,"value":850},{"type":553,"tag":575,"props":1388,"children":1390},{"class":577,"line":1389},29,[1391,1396,1400,1405,1409,1414,1418,1423],{"type":553,"tag":575,"props":1392,"children":1393},{"style":784},[1394],{"type":558,"value":1395},"  dfs",{"type":553,"tag":575,"props":1397,"children":1398},{"style":700},[1399],{"type":558,"value":966},{"type":553,"tag":575,"props":1401,"children":1402},{"style":1208},[1403],{"type":558,"value":1404},"0",{"type":553,"tag":575,"props":1406,"children":1407},{"style":700},[1408],{"type":558,"value":976},{"type":553,"tag":575,"props":1410,"children":1411},{"style":1208},[1412],{"type":558,"value":1413}," 0",{"type":553,"tag":575,"props":1415,"children":1416},{"style":700},[1417],{"type":558,"value":976},{"type":553,"tag":575,"props":1419,"children":1420},{"style":1234},[1421],{"type":558,"value":1422}," \"\"",{"type":553,"tag":575,"props":1424,"children":1425},{"style":700},[1426],{"type":558,"value":1085},{"type":553,"tag":575,"props":1428,"children":1430},{"class":577,"line":1429},30,[1431],{"type":553,"tag":575,"props":1432,"children":1433},{"emptyLinePlaceholder":847},[1434],{"type":558,"value":850},{"type":553,"tag":575,"props":1436,"children":1438},{"class":577,"line":1437},31,[1439,1444,1448],{"type":553,"tag":575,"props":1440,"children":1441},{"style":706},[1442],{"type":558,"value":1443},"  return",{"type":553,"tag":575,"props":1445,"children":1446},{"style":728},[1447],{"type":558,"value":831},{"type":553,"tag":575,"props":1449,"children":1450},{"style":700},[1451],{"type":558,"value":1142},{"type":553,"tag":575,"props":1453,"children":1455},{"class":577,"line":1454},32,[1456],{"type":553,"tag":575,"props":1457,"children":1458},{"style":700},[1459],{"type":558,"value":1460},"};\n",{"type":553,"tag":1462,"props":1463,"children":1464},"style",{},[1465],{"type":558,"value":1466},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":546,"searchDepth":774,"depth":774,"links":1468},[1469,1470],{"id":640,"depth":587,"text":640},{"id":663,"depth":587,"text":663,"children":1471},[1472],{"id":669,"depth":734,"text":669},"markdown","content:1.algorithm:3.leetcode:3.major:22.generate-parentheses.md","content","1.algorithm/3.leetcode/3.major/22.generate-parentheses.md","md",[1479,1481],{"_path":90,"title":89,"description":1480},"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",{"_path":96,"title":95,"description":1482},"给你一个链表数组，每个链表都已经按升序排列。",1714099676561]