[{"data":1,"prerenderedAt":1350},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/generate-parentheses":457,"/algorithm/leetcode/major/generate-parentheses-surround":1345},[4,260,289,434,442],{"title":5,"_path":6,"children":7,"icon":259},"算法","/algorithm",[8,22],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24,"children":25},"Leetcode 力扣","/algorithm/leetcode",[26,32,45],{"title":27,"_path":28,"children":29},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[30],{"title":31,"_path":28},"刷题索引",{"title":33,"_path":34,"children":35},"剑指 offer","/algorithm/leetcode/sword-ofter",[36,39,42],{"title":37,"_path":38},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":40,"_path":41},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":43,"_path":44},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":46,"_path":47,"children":48},"主题单","/algorithm/leetcode/major",[49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256],{"title":50,"_path":51},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":53,"_path":54},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":56,"_path":57},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":59,"_path":60},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":62,"_path":63},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":65,"_path":66},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":68,"_path":69},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":71,"_path":72},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":74,"_path":75},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":77,"_path":78},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":80,"_path":81},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":83,"_path":84},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":86,"_path":87},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":89,"_path":90},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":92,"_path":93},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":95,"_path":96},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":98,"_path":99},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":101,"_path":102},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":104,"_path":105},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":107,"_path":108},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":110,"_path":111},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":113,"_path":114},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":116,"_path":117},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":119,"_path":120},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":122,"_path":123},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":125,"_path":126},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":128,"_path":129},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":131,"_path":132},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":134,"_path":135},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":137,"_path":138},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":140,"_path":141},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":143,"_path":144},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":146,"_path":147},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":149,"_path":150},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":152,"_path":153},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":155,"_path":156},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":158,"_path":159},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":161,"_path":162},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":164,"_path":165},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":167,"_path":168},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":170,"_path":171},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":173,"_path":174},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":176,"_path":177},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":179,"_path":180},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":182,"_path":183},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":185,"_path":186},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":188,"_path":189},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":191,"_path":192},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":194,"_path":195},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":197,"_path":198},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":200,"_path":201},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":203,"_path":204},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":206,"_path":207},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":209,"_path":210},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":212,"_path":213},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":215,"_path":216},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":218,"_path":219},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":221,"_path":222},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":224,"_path":225},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":227,"_path":228},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":230,"_path":231},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":233,"_path":234},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":236,"_path":237},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":239,"_path":240},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":242,"_path":243},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":245,"_path":246},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":248,"_path":249},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":251,"_path":252},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":254,"_path":255},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":257,"_path":258},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":261,"_path":262,"children":263,"icon":288},"前端八股文","/frontend-endorsement",[264,275],{"title":265,"_path":266,"children":267},"构建工具","/frontend-endorsement/build-tools",[268],{"title":269,"_path":270,"children":271},"Webpack","/frontend-endorsement/build-tools/webpack",[272],{"title":273,"_path":274},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":276,"_path":277,"children":278},"Html","/frontend-endorsement/html",[279,282,285],{"title":280,"_path":281},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":283,"_path":284},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":286,"_path":287},"离线存储","/frontend-endorsement/html/offline-storage","i-heroicons-newspaper",{"title":290,"_path":291,"children":292,"icon":433},"前端代码考核","/frontend-code-assessment",[293,342,426],{"title":294,"_path":295,"children":296},"源码实现","/frontend-code-assessment/source",[297,322,335],{"title":298,"_path":299,"children":300},"原生 api","/frontend-code-assessment/source/native-api",[301,304,307,310,313,316,319],{"title":302,"_path":303},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":305,"_path":306},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":308,"_path":309},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":311,"_path":312},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":314,"_path":315},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":317,"_path":318},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":320,"_path":321},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":323,"_path":324,"children":325},"数组 Array","/frontend-code-assessment/source/array",[326,329,332],{"title":327,"_path":328},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":330,"_path":331},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":333,"_path":334},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":336,"_path":337,"children":338},"字符串 String","/frontend-code-assessment/source/string",[339],{"title":340,"_path":341},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":343,"_path":344,"children":345},"业务场景","/frontend-code-assessment/scene",[346,368,375,378,381,384,387,390,393,396,399,402,405,408,411,414,417,420,423],{"title":347,"_path":348,"children":349},"Promise","/frontend-code-assessment/scene/promise",[350,353,356,359,362,365],{"title":351,"_path":352},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":354,"_path":355},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":357,"_path":358},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":360,"_path":361},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":363,"_path":364},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":366,"_path":367},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":369,"_path":370,"children":371},"框架和设计模式","/frontend-code-assessment/scene/framework-and-design-mode",[372],{"title":373,"_path":374},"event bus","/frontend-code-assessment/scene/framework-and-design-mode/event-bus",{"title":376,"_path":377},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":379,"_path":380},"倒计时","/frontend-code-assessment/scene/countdown",{"title":382,"_path":383},"日期格式化","/frontend-code-assessment/scene/date-format",{"title":385,"_path":386},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":388,"_path":389},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":391,"_path":392},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":394,"_path":395},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":397,"_path":398},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":400,"_path":401},"对象是否循环引用","/frontend-code-assessment/scene/object-is-or-not-circular-reference",{"title":403,"_path":404},"解析 url 参数","/frontend-code-assessment/scene/parse-url-query",{"title":406,"_path":407},"原型链输出","/frontend-code-assessment/scene/prototype-chain-output",{"title":409,"_path":410},"随机数","/frontend-code-assessment/scene/random-number",{"title":412,"_path":413},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":415,"_path":416},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":418,"_path":419},"千分位分隔数字字符串","/frontend-code-assessment/scene/thousandth-separated-number-string",{"title":421,"_path":422},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":424,"_path":425},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":427,"_path":428,"children":429},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[430],{"title":431,"_path":432},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":435,"_path":436,"children":437,"icon":441},"项目","/pro",[438],{"title":439,"_path":440},"Vue 如何对 Store 进行单元测试","/pro/unit-test-vue-store","i-heroicons-squares-plus",{"title":443,"_path":444,"children":445,"icon":456},"后端语言","/backend-languages",[446],{"title":447,"_path":448,"children":449},"Python","/backend-languages/python",[450,453],{"title":451,"_path":452},"基础","/backend-languages/python/base",{"title":454,"_path":455},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":84,"_dir":458,"_draft":459,"_partial":459,"_locale":460,"title":83,"description":461,"url":462,"body":463,"_type":1340,"_id":1341,"_source":1342,"_file":1343,"_extension":1344},"major",false,"","数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。","https://leetcode.cn/problems/generate-parentheses",{"type":464,"children":465,"toc":1334},"root",[466,473,478,508,513,536,541,551,557,562,575,580,586,1328],{"type":467,"tag":468,"props":469,"children":470},"element","p",{},[471],{"type":472,"value":461},"text",{"type":467,"tag":468,"props":474,"children":475},{},[476],{"type":472,"value":477},"示例 1：",{"type":467,"tag":479,"props":480,"children":483},"pre",{"className":481,"code":482,"language":472,"meta":460,"style":460},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：n = 3\n输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",[484],{"type":467,"tag":485,"props":486,"children":487},"code",{"__ignoreMap":460},[488,499],{"type":467,"tag":489,"props":490,"children":493},"span",{"class":491,"line":492},"line",1,[494],{"type":467,"tag":489,"props":495,"children":496},{},[497],{"type":472,"value":498},"输入：n = 3\n",{"type":467,"tag":489,"props":500,"children":502},{"class":491,"line":501},2,[503],{"type":467,"tag":489,"props":504,"children":505},{},[506],{"type":472,"value":507},"输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",{"type":467,"tag":468,"props":509,"children":510},{},[511],{"type":472,"value":512},"示例 2：",{"type":467,"tag":479,"props":514,"children":516},{"className":481,"code":515,"language":472,"meta":460,"style":460},"输入：n = 1\n输出：[\"()\"]\n",[517],{"type":467,"tag":485,"props":518,"children":519},{"__ignoreMap":460},[520,528],{"type":467,"tag":489,"props":521,"children":522},{"class":491,"line":492},[523],{"type":467,"tag":489,"props":524,"children":525},{},[526],{"type":472,"value":527},"输入：n = 1\n",{"type":467,"tag":489,"props":529,"children":530},{"class":491,"line":501},[531],{"type":467,"tag":489,"props":532,"children":533},{},[534],{"type":472,"value":535},"输出：[\"()\"]\n",{"type":467,"tag":468,"props":537,"children":538},{},[539],{"type":472,"value":540},"提示：",{"type":467,"tag":542,"props":543,"children":544},"ul",{},[545],{"type":467,"tag":546,"props":547,"children":548},"li",{},[549],{"type":472,"value":550},"1 \u003C= n \u003C= 8",{"type":467,"tag":552,"props":553,"children":555},"h2",{"id":554},"解题思路",[556],{"type":472,"value":554},{"type":467,"tag":468,"props":558,"children":559},{},[560],{"type":472,"value":561},"由于需要求解所有的可能，因此回溯就不难想到，回溯的思路和写法相对比较固定，并且回溯的优化手段大多是剪枝。\n不难想到，如果左括号的数据小于右括号，我们可以提前退出，这就是这道题的剪枝。例如：())...，后面就不用看了，直接退出即可。回溯的退出条件也不难想到：",{"type":467,"tag":542,"props":563,"children":564},{},[565,570],{"type":467,"tag":546,"props":566,"children":567},{},[568],{"type":472,"value":569},"左括号数目 = 右括号数目",{"type":467,"tag":546,"props":571,"children":572},{},[573],{"type":472,"value":574},"左括号数据 + 右括号数据 = 2 * n\n因此这道题可以使用深度优先搜索（回溯思想），从空字符串开始构造，做加法，即 dfs(左括号数目，右括号数据，路径)，我们从 dfs(0, 0, \"\") 开始",{"type":467,"tag":552,"props":576,"children":578},{"id":577},"实现",[579],{"type":472,"value":577},{"type":467,"tag":581,"props":582,"children":584},"h3",{"id":583},"回溯",[585],{"type":472,"value":583},{"type":467,"tag":479,"props":587,"children":591},{"className":588,"code":589,"language":590,"meta":460,"style":460},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const res = [];\n\n  /**\n   * @param l 左侧括号已经用了几个\n   * @param r 右侧括号已经用了几个\n   * @param str 当前递归得到的拼接字符串结果\n   */\n  function dfs(l, r, str) {\n    if (l === n && r === n) {\n      return res.push(str);\n    }\n    // l \u003C r 时不满足条件，剪枝\n    if (l \u003C r) return;\n    // l \u003C n 时可插入左括号，最多可以插入 n 个\n    if (l \u003C n) {\n      dfs(l + 1, r, str + \"(\");\n    }\n    // r \u003C l 时，可以插入右括号\n    if (r \u003C l) {\n      dfs(l, r + 1, str + \")\");\n    }\n  }\n\n  dfs(0, 0, \"\");\n\n  return res;\n};\n","js",[592],{"type":467,"tag":485,"props":593,"children":594},{"__ignoreMap":460},[595,604,630,648,657,701,731,741,750,773,795,817,826,871,920,962,971,980,1019,1028,1056,1118,1126,1135,1164,1221,1229,1238,1246,1290,1298,1315],{"type":467,"tag":489,"props":596,"children":597},{"class":491,"line":492},[598],{"type":467,"tag":489,"props":599,"children":601},{"style":600},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[602],{"type":472,"value":603},"/**\n",{"type":467,"tag":489,"props":605,"children":606},{"class":491,"line":501},[607,612,618,624],{"type":467,"tag":489,"props":608,"children":609},{"style":600},[610],{"type":472,"value":611}," * ",{"type":467,"tag":489,"props":613,"children":615},{"style":614},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[616],{"type":472,"value":617},"@param",{"type":467,"tag":489,"props":619,"children":621},{"style":620},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[622],{"type":472,"value":623}," {number}",{"type":467,"tag":489,"props":625,"children":627},{"style":626},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[628],{"type":472,"value":629}," n\n",{"type":467,"tag":489,"props":631,"children":633},{"class":491,"line":632},3,[634,638,643],{"type":467,"tag":489,"props":635,"children":636},{"style":600},[637],{"type":472,"value":611},{"type":467,"tag":489,"props":639,"children":640},{"style":614},[641],{"type":472,"value":642},"@return",{"type":467,"tag":489,"props":644,"children":645},{"style":620},[646],{"type":472,"value":647}," {string[]}\n",{"type":467,"tag":489,"props":649,"children":651},{"class":491,"line":650},4,[652],{"type":467,"tag":489,"props":653,"children":654},{"style":600},[655],{"type":472,"value":656}," */\n",{"type":467,"tag":489,"props":658,"children":660},{"class":491,"line":659},5,[661,667,673,679,684,690,696],{"type":467,"tag":489,"props":662,"children":664},{"style":663},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[665],{"type":472,"value":666},"var",{"type":467,"tag":489,"props":668,"children":670},{"style":669},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[671],{"type":472,"value":672}," generateParenthesis",{"type":467,"tag":489,"props":674,"children":676},{"style":675},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[677],{"type":472,"value":678}," =",{"type":467,"tag":489,"props":680,"children":681},{"style":663},[682],{"type":472,"value":683}," function",{"type":467,"tag":489,"props":685,"children":687},{"style":686},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[688],{"type":472,"value":689}," (",{"type":467,"tag":489,"props":691,"children":693},{"style":692},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[694],{"type":472,"value":695},"n",{"type":467,"tag":489,"props":697,"children":698},{"style":686},[699],{"type":472,"value":700},") {\n",{"type":467,"tag":489,"props":702,"children":704},{"class":491,"line":703},6,[705,710,716,720,725],{"type":467,"tag":489,"props":706,"children":707},{"style":663},[708],{"type":472,"value":709},"  const",{"type":467,"tag":489,"props":711,"children":713},{"style":712},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[714],{"type":472,"value":715}," res",{"type":467,"tag":489,"props":717,"children":718},{"style":675},[719],{"type":472,"value":678},{"type":467,"tag":489,"props":721,"children":722},{"style":686},[723],{"type":472,"value":724}," []",{"type":467,"tag":489,"props":726,"children":728},{"style":727},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[729],{"type":472,"value":730},";\n",{"type":467,"tag":489,"props":732,"children":734},{"class":491,"line":733},7,[735],{"type":467,"tag":489,"props":736,"children":738},{"emptyLinePlaceholder":737},true,[739],{"type":472,"value":740},"\n",{"type":467,"tag":489,"props":742,"children":744},{"class":491,"line":743},8,[745],{"type":467,"tag":489,"props":746,"children":747},{"style":600},[748],{"type":472,"value":749},"  /**\n",{"type":467,"tag":489,"props":751,"children":753},{"class":491,"line":752},9,[754,759,763,768],{"type":467,"tag":489,"props":755,"children":756},{"style":600},[757],{"type":472,"value":758},"   * ",{"type":467,"tag":489,"props":760,"children":761},{"style":614},[762],{"type":472,"value":617},{"type":467,"tag":489,"props":764,"children":765},{"style":626},[766],{"type":472,"value":767}," l",{"type":467,"tag":489,"props":769,"children":770},{"style":600},[771],{"type":472,"value":772}," 左侧括号已经用了几个\n",{"type":467,"tag":489,"props":774,"children":776},{"class":491,"line":775},10,[777,781,785,790],{"type":467,"tag":489,"props":778,"children":779},{"style":600},[780],{"type":472,"value":758},{"type":467,"tag":489,"props":782,"children":783},{"style":614},[784],{"type":472,"value":617},{"type":467,"tag":489,"props":786,"children":787},{"style":626},[788],{"type":472,"value":789}," r",{"type":467,"tag":489,"props":791,"children":792},{"style":600},[793],{"type":472,"value":794}," 右侧括号已经用了几个\n",{"type":467,"tag":489,"props":796,"children":798},{"class":491,"line":797},11,[799,803,807,812],{"type":467,"tag":489,"props":800,"children":801},{"style":600},[802],{"type":472,"value":758},{"type":467,"tag":489,"props":804,"children":805},{"style":614},[806],{"type":472,"value":617},{"type":467,"tag":489,"props":808,"children":809},{"style":626},[810],{"type":472,"value":811}," str",{"type":467,"tag":489,"props":813,"children":814},{"style":600},[815],{"type":472,"value":816}," 当前递归得到的拼接字符串结果\n",{"type":467,"tag":489,"props":818,"children":820},{"class":491,"line":819},12,[821],{"type":467,"tag":489,"props":822,"children":823},{"style":600},[824],{"type":472,"value":825},"   */\n",{"type":467,"tag":489,"props":827,"children":829},{"class":491,"line":828},13,[830,835,840,845,850,855,859,863,867],{"type":467,"tag":489,"props":831,"children":832},{"style":663},[833],{"type":472,"value":834},"  function",{"type":467,"tag":489,"props":836,"children":837},{"style":669},[838],{"type":472,"value":839}," dfs",{"type":467,"tag":489,"props":841,"children":842},{"style":686},[843],{"type":472,"value":844},"(",{"type":467,"tag":489,"props":846,"children":847},{"style":692},[848],{"type":472,"value":849},"l",{"type":467,"tag":489,"props":851,"children":852},{"style":727},[853],{"type":472,"value":854},",",{"type":467,"tag":489,"props":856,"children":857},{"style":692},[858],{"type":472,"value":789},{"type":467,"tag":489,"props":860,"children":861},{"style":727},[862],{"type":472,"value":854},{"type":467,"tag":489,"props":864,"children":865},{"style":692},[866],{"type":472,"value":811},{"type":467,"tag":489,"props":868,"children":869},{"style":686},[870],{"type":472,"value":700},{"type":467,"tag":489,"props":872,"children":874},{"class":491,"line":873},14,[875,881,885,889,894,899,904,908,912,916],{"type":467,"tag":489,"props":876,"children":878},{"style":877},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[879],{"type":472,"value":880},"    if",{"type":467,"tag":489,"props":882,"children":883},{"style":686},[884],{"type":472,"value":689},{"type":467,"tag":489,"props":886,"children":887},{"style":712},[888],{"type":472,"value":849},{"type":467,"tag":489,"props":890,"children":891},{"style":675},[892],{"type":472,"value":893}," ===",{"type":467,"tag":489,"props":895,"children":896},{"style":712},[897],{"type":472,"value":898}," n",{"type":467,"tag":489,"props":900,"children":901},{"style":675},[902],{"type":472,"value":903}," &&",{"type":467,"tag":489,"props":905,"children":906},{"style":712},[907],{"type":472,"value":789},{"type":467,"tag":489,"props":909,"children":910},{"style":675},[911],{"type":472,"value":893},{"type":467,"tag":489,"props":913,"children":914},{"style":712},[915],{"type":472,"value":898},{"type":467,"tag":489,"props":917,"children":918},{"style":686},[919],{"type":472,"value":700},{"type":467,"tag":489,"props":921,"children":923},{"class":491,"line":922},15,[924,929,933,939,944,948,953,958],{"type":467,"tag":489,"props":925,"children":926},{"style":877},[927],{"type":472,"value":928},"      return",{"type":467,"tag":489,"props":930,"children":931},{"style":712},[932],{"type":472,"value":715},{"type":467,"tag":489,"props":934,"children":936},{"style":935},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[937],{"type":472,"value":938},".",{"type":467,"tag":489,"props":940,"children":941},{"style":669},[942],{"type":472,"value":943},"push",{"type":467,"tag":489,"props":945,"children":946},{"style":686},[947],{"type":472,"value":844},{"type":467,"tag":489,"props":949,"children":950},{"style":712},[951],{"type":472,"value":952},"str",{"type":467,"tag":489,"props":954,"children":955},{"style":686},[956],{"type":472,"value":957},")",{"type":467,"tag":489,"props":959,"children":960},{"style":727},[961],{"type":472,"value":730},{"type":467,"tag":489,"props":963,"children":965},{"class":491,"line":964},16,[966],{"type":467,"tag":489,"props":967,"children":968},{"style":686},[969],{"type":472,"value":970},"    }\n",{"type":467,"tag":489,"props":972,"children":974},{"class":491,"line":973},17,[975],{"type":467,"tag":489,"props":976,"children":977},{"style":600},[978],{"type":472,"value":979},"    // l \u003C r 时不满足条件，剪枝\n",{"type":467,"tag":489,"props":981,"children":983},{"class":491,"line":982},18,[984,988,992,996,1001,1005,1010,1015],{"type":467,"tag":489,"props":985,"children":986},{"style":877},[987],{"type":472,"value":880},{"type":467,"tag":489,"props":989,"children":990},{"style":686},[991],{"type":472,"value":689},{"type":467,"tag":489,"props":993,"children":994},{"style":712},[995],{"type":472,"value":849},{"type":467,"tag":489,"props":997,"children":998},{"style":675},[999],{"type":472,"value":1000}," \u003C",{"type":467,"tag":489,"props":1002,"children":1003},{"style":712},[1004],{"type":472,"value":789},{"type":467,"tag":489,"props":1006,"children":1007},{"style":686},[1008],{"type":472,"value":1009},") ",{"type":467,"tag":489,"props":1011,"children":1012},{"style":877},[1013],{"type":472,"value":1014},"return",{"type":467,"tag":489,"props":1016,"children":1017},{"style":727},[1018],{"type":472,"value":730},{"type":467,"tag":489,"props":1020,"children":1022},{"class":491,"line":1021},19,[1023],{"type":467,"tag":489,"props":1024,"children":1025},{"style":600},[1026],{"type":472,"value":1027},"    // l \u003C n 时可插入左括号，最多可以插入 n 个\n",{"type":467,"tag":489,"props":1029,"children":1031},{"class":491,"line":1030},20,[1032,1036,1040,1044,1048,1052],{"type":467,"tag":489,"props":1033,"children":1034},{"style":877},[1035],{"type":472,"value":880},{"type":467,"tag":489,"props":1037,"children":1038},{"style":686},[1039],{"type":472,"value":689},{"type":467,"tag":489,"props":1041,"children":1042},{"style":712},[1043],{"type":472,"value":849},{"type":467,"tag":489,"props":1045,"children":1046},{"style":675},[1047],{"type":472,"value":1000},{"type":467,"tag":489,"props":1049,"children":1050},{"style":712},[1051],{"type":472,"value":898},{"type":467,"tag":489,"props":1053,"children":1054},{"style":686},[1055],{"type":472,"value":700},{"type":467,"tag":489,"props":1057,"children":1059},{"class":491,"line":1058},21,[1060,1065,1069,1073,1078,1084,1088,1092,1096,1100,1104,1110,1114],{"type":467,"tag":489,"props":1061,"children":1062},{"style":669},[1063],{"type":472,"value":1064},"      dfs",{"type":467,"tag":489,"props":1066,"children":1067},{"style":686},[1068],{"type":472,"value":844},{"type":467,"tag":489,"props":1070,"children":1071},{"style":712},[1072],{"type":472,"value":849},{"type":467,"tag":489,"props":1074,"children":1075},{"style":675},[1076],{"type":472,"value":1077}," +",{"type":467,"tag":489,"props":1079,"children":1081},{"style":1080},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[1082],{"type":472,"value":1083}," 1",{"type":467,"tag":489,"props":1085,"children":1086},{"style":727},[1087],{"type":472,"value":854},{"type":467,"tag":489,"props":1089,"children":1090},{"style":712},[1091],{"type":472,"value":789},{"type":467,"tag":489,"props":1093,"children":1094},{"style":727},[1095],{"type":472,"value":854},{"type":467,"tag":489,"props":1097,"children":1098},{"style":712},[1099],{"type":472,"value":811},{"type":467,"tag":489,"props":1101,"children":1102},{"style":675},[1103],{"type":472,"value":1077},{"type":467,"tag":489,"props":1105,"children":1107},{"style":1106},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[1108],{"type":472,"value":1109}," \"(\"",{"type":467,"tag":489,"props":1111,"children":1112},{"style":686},[1113],{"type":472,"value":957},{"type":467,"tag":489,"props":1115,"children":1116},{"style":727},[1117],{"type":472,"value":730},{"type":467,"tag":489,"props":1119,"children":1121},{"class":491,"line":1120},22,[1122],{"type":467,"tag":489,"props":1123,"children":1124},{"style":686},[1125],{"type":472,"value":970},{"type":467,"tag":489,"props":1127,"children":1129},{"class":491,"line":1128},23,[1130],{"type":467,"tag":489,"props":1131,"children":1132},{"style":600},[1133],{"type":472,"value":1134},"    // r \u003C l 时，可以插入右括号\n",{"type":467,"tag":489,"props":1136,"children":1138},{"class":491,"line":1137},24,[1139,1143,1147,1152,1156,1160],{"type":467,"tag":489,"props":1140,"children":1141},{"style":877},[1142],{"type":472,"value":880},{"type":467,"tag":489,"props":1144,"children":1145},{"style":686},[1146],{"type":472,"value":689},{"type":467,"tag":489,"props":1148,"children":1149},{"style":712},[1150],{"type":472,"value":1151},"r",{"type":467,"tag":489,"props":1153,"children":1154},{"style":675},[1155],{"type":472,"value":1000},{"type":467,"tag":489,"props":1157,"children":1158},{"style":712},[1159],{"type":472,"value":767},{"type":467,"tag":489,"props":1161,"children":1162},{"style":686},[1163],{"type":472,"value":700},{"type":467,"tag":489,"props":1165,"children":1167},{"class":491,"line":1166},25,[1168,1172,1176,1180,1184,1188,1192,1196,1200,1204,1208,1213,1217],{"type":467,"tag":489,"props":1169,"children":1170},{"style":669},[1171],{"type":472,"value":1064},{"type":467,"tag":489,"props":1173,"children":1174},{"style":686},[1175],{"type":472,"value":844},{"type":467,"tag":489,"props":1177,"children":1178},{"style":712},[1179],{"type":472,"value":849},{"type":467,"tag":489,"props":1181,"children":1182},{"style":727},[1183],{"type":472,"value":854},{"type":467,"tag":489,"props":1185,"children":1186},{"style":712},[1187],{"type":472,"value":789},{"type":467,"tag":489,"props":1189,"children":1190},{"style":675},[1191],{"type":472,"value":1077},{"type":467,"tag":489,"props":1193,"children":1194},{"style":1080},[1195],{"type":472,"value":1083},{"type":467,"tag":489,"props":1197,"children":1198},{"style":727},[1199],{"type":472,"value":854},{"type":467,"tag":489,"props":1201,"children":1202},{"style":712},[1203],{"type":472,"value":811},{"type":467,"tag":489,"props":1205,"children":1206},{"style":675},[1207],{"type":472,"value":1077},{"type":467,"tag":489,"props":1209,"children":1210},{"style":1106},[1211],{"type":472,"value":1212}," \")\"",{"type":467,"tag":489,"props":1214,"children":1215},{"style":686},[1216],{"type":472,"value":957},{"type":467,"tag":489,"props":1218,"children":1219},{"style":727},[1220],{"type":472,"value":730},{"type":467,"tag":489,"props":1222,"children":1224},{"class":491,"line":1223},26,[1225],{"type":467,"tag":489,"props":1226,"children":1227},{"style":686},[1228],{"type":472,"value":970},{"type":467,"tag":489,"props":1230,"children":1232},{"class":491,"line":1231},27,[1233],{"type":467,"tag":489,"props":1234,"children":1235},{"style":686},[1236],{"type":472,"value":1237},"  }\n",{"type":467,"tag":489,"props":1239,"children":1241},{"class":491,"line":1240},28,[1242],{"type":467,"tag":489,"props":1243,"children":1244},{"emptyLinePlaceholder":737},[1245],{"type":472,"value":740},{"type":467,"tag":489,"props":1247,"children":1249},{"class":491,"line":1248},29,[1250,1255,1259,1264,1268,1273,1277,1282,1286],{"type":467,"tag":489,"props":1251,"children":1252},{"style":669},[1253],{"type":472,"value":1254},"  dfs",{"type":467,"tag":489,"props":1256,"children":1257},{"style":686},[1258],{"type":472,"value":844},{"type":467,"tag":489,"props":1260,"children":1261},{"style":1080},[1262],{"type":472,"value":1263},"0",{"type":467,"tag":489,"props":1265,"children":1266},{"style":727},[1267],{"type":472,"value":854},{"type":467,"tag":489,"props":1269,"children":1270},{"style":1080},[1271],{"type":472,"value":1272}," 0",{"type":467,"tag":489,"props":1274,"children":1275},{"style":727},[1276],{"type":472,"value":854},{"type":467,"tag":489,"props":1278,"children":1279},{"style":1106},[1280],{"type":472,"value":1281}," \"\"",{"type":467,"tag":489,"props":1283,"children":1284},{"style":686},[1285],{"type":472,"value":957},{"type":467,"tag":489,"props":1287,"children":1288},{"style":727},[1289],{"type":472,"value":730},{"type":467,"tag":489,"props":1291,"children":1293},{"class":491,"line":1292},30,[1294],{"type":467,"tag":489,"props":1295,"children":1296},{"emptyLinePlaceholder":737},[1297],{"type":472,"value":740},{"type":467,"tag":489,"props":1299,"children":1301},{"class":491,"line":1300},31,[1302,1307,1311],{"type":467,"tag":489,"props":1303,"children":1304},{"style":877},[1305],{"type":472,"value":1306},"  return",{"type":467,"tag":489,"props":1308,"children":1309},{"style":712},[1310],{"type":472,"value":715},{"type":467,"tag":489,"props":1312,"children":1313},{"style":727},[1314],{"type":472,"value":730},{"type":467,"tag":489,"props":1316,"children":1318},{"class":491,"line":1317},32,[1319,1324],{"type":467,"tag":489,"props":1320,"children":1321},{"style":686},[1322],{"type":472,"value":1323},"}",{"type":467,"tag":489,"props":1325,"children":1326},{"style":727},[1327],{"type":472,"value":730},{"type":467,"tag":1329,"props":1330,"children":1331},"style",{},[1332],{"type":472,"value":1333},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":460,"searchDepth":659,"depth":659,"links":1335},[1336,1337],{"id":554,"depth":501,"text":554},{"id":577,"depth":501,"text":577,"children":1338},[1339],{"id":583,"depth":632,"text":583},"markdown","content:1.algorithm:3.leetcode:3.major:22.generate-parentheses.md","content","1.algorithm/3.leetcode/3.major/22.generate-parentheses.md","md",[1346,1348],{"_path":81,"title":80,"description":1347},"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",{"_path":87,"title":86,"description":1349},"给你一个链表数组，每个链表都已经按升序排列。",1713512817035]