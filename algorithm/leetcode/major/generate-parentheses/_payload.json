[{"data":1,"prerenderedAt":1345},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/generate-parentheses":452,"/algorithm/leetcode/major/generate-parentheses-surround":1340},[4,259,287,431,438],{"title":5,"_path":6,"children":7},"算法","/algorithm",[8,22],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24,"children":25},"Leetcode 力扣","/algorithm/leetcode",[26,32,45],{"title":27,"_path":28,"children":29},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[30],{"title":31,"_path":28},"刷题索引",{"title":33,"_path":34,"children":35},"剑指 offer","/algorithm/leetcode/sword-ofter",[36,39,42],{"title":37,"_path":38},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":40,"_path":41},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":43,"_path":44},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":46,"_path":47,"children":48},"主题单","/algorithm/leetcode/major",[49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256],{"title":50,"_path":51},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":53,"_path":54},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":56,"_path":57},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":59,"_path":60},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":62,"_path":63},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":65,"_path":66},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":68,"_path":69},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":71,"_path":72},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":74,"_path":75},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":77,"_path":78},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":80,"_path":81},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":83,"_path":84},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":86,"_path":87},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":89,"_path":90},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":92,"_path":93},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":95,"_path":96},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":98,"_path":99},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":101,"_path":102},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":104,"_path":105},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":107,"_path":108},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":110,"_path":111},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":113,"_path":114},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":116,"_path":117},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":119,"_path":120},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":122,"_path":123},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":125,"_path":126},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":128,"_path":129},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":131,"_path":132},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":134,"_path":135},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":137,"_path":138},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":140,"_path":141},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":143,"_path":144},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":146,"_path":147},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":149,"_path":150},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":152,"_path":153},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":155,"_path":156},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":158,"_path":159},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":161,"_path":162},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":164,"_path":165},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":167,"_path":168},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":170,"_path":171},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":173,"_path":174},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":176,"_path":177},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":179,"_path":180},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":182,"_path":183},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":185,"_path":186},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":188,"_path":189},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":191,"_path":192},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":194,"_path":195},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":197,"_path":198},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":200,"_path":201},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":203,"_path":204},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":206,"_path":207},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":209,"_path":210},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":212,"_path":213},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":215,"_path":216},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":218,"_path":219},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":221,"_path":222},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":224,"_path":225},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":227,"_path":228},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":230,"_path":231},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":233,"_path":234},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":236,"_path":237},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":239,"_path":240},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":242,"_path":243},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":245,"_path":246},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":248,"_path":249},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":251,"_path":252},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":254,"_path":255},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":257,"_path":258},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately",{"title":260,"_path":261,"children":262},"前端八股文","/frontend-endorsement",[263,274],{"title":264,"_path":265,"children":266},"构建工具","/frontend-endorsement/build-tools",[267],{"title":268,"_path":269,"children":270},"Webpack","/frontend-endorsement/build-tools/webpack",[271],{"title":272,"_path":273},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":275,"_path":276,"children":277},"Html","/frontend-endorsement/html",[278,281,284],{"title":279,"_path":280},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":282,"_path":283},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":285,"_path":286},"离线存储","/frontend-endorsement/html/offline-storage",{"title":288,"_path":289,"children":290},"前端代码考核","/frontend-code-assessment",[291,340,424],{"title":292,"_path":293,"children":294},"源码实现","/frontend-code-assessment/source",[295,320,333],{"title":296,"_path":297,"children":298},"原生 api","/frontend-code-assessment/source/native-api",[299,302,305,308,311,314,317],{"title":300,"_path":301},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":303,"_path":304},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":306,"_path":307},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":309,"_path":310},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":312,"_path":313},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":315,"_path":316},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":318,"_path":319},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":321,"_path":322,"children":323},"数组 Array","/frontend-code-assessment/source/array",[324,327,330],{"title":325,"_path":326},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":328,"_path":329},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":331,"_path":332},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":334,"_path":335,"children":336},"字符串 String","/frontend-code-assessment/source/string",[337],{"title":338,"_path":339},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":341,"_path":342,"children":343},"业务场景","/frontend-code-assessment/scene",[344,366,373,376,379,382,385,388,391,394,397,400,403,406,409,412,415,418,421],{"title":345,"_path":346,"children":347},"Promise","/frontend-code-assessment/scene/promise",[348,351,354,357,360,363],{"title":349,"_path":350},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":352,"_path":353},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":355,"_path":356},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":358,"_path":359},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":361,"_path":362},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":364,"_path":365},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":367,"_path":368,"children":369},"框架和设计模式","/frontend-code-assessment/scene/framework-and-design-mode",[370],{"title":371,"_path":372},"event bus","/frontend-code-assessment/scene/framework-and-design-mode/event-bus",{"title":374,"_path":375},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":377,"_path":378},"倒计时","/frontend-code-assessment/scene/countdown",{"title":380,"_path":381},"日期格式化","/frontend-code-assessment/scene/date-format",{"title":383,"_path":384},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":386,"_path":387},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":389,"_path":390},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":392,"_path":393},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":395,"_path":396},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":398,"_path":399},"对象是否循环引用","/frontend-code-assessment/scene/object-is-or-not-circular-reference",{"title":401,"_path":402},"解析 url 参数","/frontend-code-assessment/scene/parse-url-query",{"title":404,"_path":405},"原型链输出","/frontend-code-assessment/scene/prototype-chain-output",{"title":407,"_path":408},"随机数","/frontend-code-assessment/scene/random-number",{"title":410,"_path":411},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":413,"_path":414},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":416,"_path":417},"千分位分隔数字字符串","/frontend-code-assessment/scene/thousandth-separated-number-string",{"title":419,"_path":420},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":422,"_path":423},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":425,"_path":426,"children":427},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[428],{"title":429,"_path":430},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union",{"title":432,"_path":433,"children":434},"项目","/pro",[435],{"title":436,"_path":437},"Vue 如何对 Store 进行单元测试","/pro/unit-test-vue-store",{"title":439,"_path":440,"children":441},"后端语言","/backend-languages",[442],{"title":443,"_path":444,"children":445},"Python","/backend-languages/python",[446,449],{"title":447,"_path":448},"基础","/backend-languages/python/base",{"title":450,"_path":451},"函数","/backend-languages/python/function",{"_path":84,"_dir":453,"_draft":454,"_partial":454,"_locale":455,"title":83,"description":456,"url":457,"body":458,"_type":1335,"_id":1336,"_source":1337,"_file":1338,"_extension":1339},"major",false,"","数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。","https://leetcode.cn/problems/generate-parentheses",{"type":459,"children":460,"toc":1329},"root",[461,468,473,503,508,531,536,546,552,557,570,575,581,1323],{"type":462,"tag":463,"props":464,"children":465},"element","p",{},[466],{"type":467,"value":456},"text",{"type":462,"tag":463,"props":469,"children":470},{},[471],{"type":467,"value":472},"示例 1：",{"type":462,"tag":474,"props":475,"children":478},"pre",{"className":476,"code":477,"language":467,"meta":455,"style":455},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：n = 3\n输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",[479],{"type":462,"tag":480,"props":481,"children":482},"code",{"__ignoreMap":455},[483,494],{"type":462,"tag":484,"props":485,"children":488},"span",{"class":486,"line":487},"line",1,[489],{"type":462,"tag":484,"props":490,"children":491},{},[492],{"type":467,"value":493},"输入：n = 3\n",{"type":462,"tag":484,"props":495,"children":497},{"class":486,"line":496},2,[498],{"type":462,"tag":484,"props":499,"children":500},{},[501],{"type":467,"value":502},"输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",{"type":462,"tag":463,"props":504,"children":505},{},[506],{"type":467,"value":507},"示例 2：",{"type":462,"tag":474,"props":509,"children":511},{"className":476,"code":510,"language":467,"meta":455,"style":455},"输入：n = 1\n输出：[\"()\"]\n",[512],{"type":462,"tag":480,"props":513,"children":514},{"__ignoreMap":455},[515,523],{"type":462,"tag":484,"props":516,"children":517},{"class":486,"line":487},[518],{"type":462,"tag":484,"props":519,"children":520},{},[521],{"type":467,"value":522},"输入：n = 1\n",{"type":462,"tag":484,"props":524,"children":525},{"class":486,"line":496},[526],{"type":462,"tag":484,"props":527,"children":528},{},[529],{"type":467,"value":530},"输出：[\"()\"]\n",{"type":462,"tag":463,"props":532,"children":533},{},[534],{"type":467,"value":535},"提示：",{"type":462,"tag":537,"props":538,"children":539},"ul",{},[540],{"type":462,"tag":541,"props":542,"children":543},"li",{},[544],{"type":467,"value":545},"1 \u003C= n \u003C= 8",{"type":462,"tag":547,"props":548,"children":550},"h2",{"id":549},"解题思路",[551],{"type":467,"value":549},{"type":462,"tag":463,"props":553,"children":554},{},[555],{"type":467,"value":556},"由于需要求解所有的可能，因此回溯就不难想到，回溯的思路和写法相对比较固定，并且回溯的优化手段大多是剪枝。\n不难想到，如果左括号的数据小于右括号，我们可以提前退出，这就是这道题的剪枝。例如：())...，后面就不用看了，直接退出即可。回溯的退出条件也不难想到：",{"type":462,"tag":537,"props":558,"children":559},{},[560,565],{"type":462,"tag":541,"props":561,"children":562},{},[563],{"type":467,"value":564},"左括号数目 = 右括号数目",{"type":462,"tag":541,"props":566,"children":567},{},[568],{"type":467,"value":569},"左括号数据 + 右括号数据 = 2 * n\n因此这道题可以使用深度优先搜索（回溯思想），从空字符串开始构造，做加法，即 dfs(左括号数目，右括号数据，路径)，我们从 dfs(0, 0, \"\") 开始",{"type":462,"tag":547,"props":571,"children":573},{"id":572},"实现",[574],{"type":467,"value":572},{"type":462,"tag":576,"props":577,"children":579},"h3",{"id":578},"回溯",[580],{"type":467,"value":578},{"type":462,"tag":474,"props":582,"children":586},{"className":583,"code":584,"language":585,"meta":455,"style":455},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const res = [];\n\n  /**\n   * @param l 左侧括号已经用了几个\n   * @param r 右侧括号已经用了几个\n   * @param str 当前递归得到的拼接字符串结果\n   */\n  function dfs(l, r, str) {\n    if (l === n && r === n) {\n      return res.push(str);\n    }\n    // l \u003C r 时不满足条件，剪枝\n    if (l \u003C r) return;\n    // l \u003C n 时可插入左括号，最多可以插入 n 个\n    if (l \u003C n) {\n      dfs(l + 1, r, str + \"(\");\n    }\n    // r \u003C l 时，可以插入右括号\n    if (r \u003C l) {\n      dfs(l, r + 1, str + \")\");\n    }\n  }\n\n  dfs(0, 0, \"\");\n\n  return res;\n};\n","js",[587],{"type":462,"tag":480,"props":588,"children":589},{"__ignoreMap":455},[590,599,625,643,652,696,726,736,745,768,790,812,821,866,915,957,966,975,1014,1023,1051,1113,1121,1130,1159,1216,1224,1233,1241,1285,1293,1310],{"type":462,"tag":484,"props":591,"children":592},{"class":486,"line":487},[593],{"type":462,"tag":484,"props":594,"children":596},{"style":595},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[597],{"type":467,"value":598},"/**\n",{"type":462,"tag":484,"props":600,"children":601},{"class":486,"line":496},[602,607,613,619],{"type":462,"tag":484,"props":603,"children":604},{"style":595},[605],{"type":467,"value":606}," * ",{"type":462,"tag":484,"props":608,"children":610},{"style":609},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[611],{"type":467,"value":612},"@param",{"type":462,"tag":484,"props":614,"children":616},{"style":615},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[617],{"type":467,"value":618}," {number}",{"type":462,"tag":484,"props":620,"children":622},{"style":621},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[623],{"type":467,"value":624}," n\n",{"type":462,"tag":484,"props":626,"children":628},{"class":486,"line":627},3,[629,633,638],{"type":462,"tag":484,"props":630,"children":631},{"style":595},[632],{"type":467,"value":606},{"type":462,"tag":484,"props":634,"children":635},{"style":609},[636],{"type":467,"value":637},"@return",{"type":462,"tag":484,"props":639,"children":640},{"style":615},[641],{"type":467,"value":642}," {string[]}\n",{"type":462,"tag":484,"props":644,"children":646},{"class":486,"line":645},4,[647],{"type":462,"tag":484,"props":648,"children":649},{"style":595},[650],{"type":467,"value":651}," */\n",{"type":462,"tag":484,"props":653,"children":655},{"class":486,"line":654},5,[656,662,668,674,679,685,691],{"type":462,"tag":484,"props":657,"children":659},{"style":658},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[660],{"type":467,"value":661},"var",{"type":462,"tag":484,"props":663,"children":665},{"style":664},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[666],{"type":467,"value":667}," generateParenthesis",{"type":462,"tag":484,"props":669,"children":671},{"style":670},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[672],{"type":467,"value":673}," =",{"type":462,"tag":484,"props":675,"children":676},{"style":658},[677],{"type":467,"value":678}," function",{"type":462,"tag":484,"props":680,"children":682},{"style":681},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[683],{"type":467,"value":684}," (",{"type":462,"tag":484,"props":686,"children":688},{"style":687},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[689],{"type":467,"value":690},"n",{"type":462,"tag":484,"props":692,"children":693},{"style":681},[694],{"type":467,"value":695},") {\n",{"type":462,"tag":484,"props":697,"children":699},{"class":486,"line":698},6,[700,705,711,715,720],{"type":462,"tag":484,"props":701,"children":702},{"style":658},[703],{"type":467,"value":704},"  const",{"type":462,"tag":484,"props":706,"children":708},{"style":707},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[709],{"type":467,"value":710}," res",{"type":462,"tag":484,"props":712,"children":713},{"style":670},[714],{"type":467,"value":673},{"type":462,"tag":484,"props":716,"children":717},{"style":681},[718],{"type":467,"value":719}," []",{"type":462,"tag":484,"props":721,"children":723},{"style":722},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[724],{"type":467,"value":725},";\n",{"type":462,"tag":484,"props":727,"children":729},{"class":486,"line":728},7,[730],{"type":462,"tag":484,"props":731,"children":733},{"emptyLinePlaceholder":732},true,[734],{"type":467,"value":735},"\n",{"type":462,"tag":484,"props":737,"children":739},{"class":486,"line":738},8,[740],{"type":462,"tag":484,"props":741,"children":742},{"style":595},[743],{"type":467,"value":744},"  /**\n",{"type":462,"tag":484,"props":746,"children":748},{"class":486,"line":747},9,[749,754,758,763],{"type":462,"tag":484,"props":750,"children":751},{"style":595},[752],{"type":467,"value":753},"   * ",{"type":462,"tag":484,"props":755,"children":756},{"style":609},[757],{"type":467,"value":612},{"type":462,"tag":484,"props":759,"children":760},{"style":621},[761],{"type":467,"value":762}," l",{"type":462,"tag":484,"props":764,"children":765},{"style":595},[766],{"type":467,"value":767}," 左侧括号已经用了几个\n",{"type":462,"tag":484,"props":769,"children":771},{"class":486,"line":770},10,[772,776,780,785],{"type":462,"tag":484,"props":773,"children":774},{"style":595},[775],{"type":467,"value":753},{"type":462,"tag":484,"props":777,"children":778},{"style":609},[779],{"type":467,"value":612},{"type":462,"tag":484,"props":781,"children":782},{"style":621},[783],{"type":467,"value":784}," r",{"type":462,"tag":484,"props":786,"children":787},{"style":595},[788],{"type":467,"value":789}," 右侧括号已经用了几个\n",{"type":462,"tag":484,"props":791,"children":793},{"class":486,"line":792},11,[794,798,802,807],{"type":462,"tag":484,"props":795,"children":796},{"style":595},[797],{"type":467,"value":753},{"type":462,"tag":484,"props":799,"children":800},{"style":609},[801],{"type":467,"value":612},{"type":462,"tag":484,"props":803,"children":804},{"style":621},[805],{"type":467,"value":806}," str",{"type":462,"tag":484,"props":808,"children":809},{"style":595},[810],{"type":467,"value":811}," 当前递归得到的拼接字符串结果\n",{"type":462,"tag":484,"props":813,"children":815},{"class":486,"line":814},12,[816],{"type":462,"tag":484,"props":817,"children":818},{"style":595},[819],{"type":467,"value":820},"   */\n",{"type":462,"tag":484,"props":822,"children":824},{"class":486,"line":823},13,[825,830,835,840,845,850,854,858,862],{"type":462,"tag":484,"props":826,"children":827},{"style":658},[828],{"type":467,"value":829},"  function",{"type":462,"tag":484,"props":831,"children":832},{"style":664},[833],{"type":467,"value":834}," dfs",{"type":462,"tag":484,"props":836,"children":837},{"style":681},[838],{"type":467,"value":839},"(",{"type":462,"tag":484,"props":841,"children":842},{"style":687},[843],{"type":467,"value":844},"l",{"type":462,"tag":484,"props":846,"children":847},{"style":722},[848],{"type":467,"value":849},",",{"type":462,"tag":484,"props":851,"children":852},{"style":687},[853],{"type":467,"value":784},{"type":462,"tag":484,"props":855,"children":856},{"style":722},[857],{"type":467,"value":849},{"type":462,"tag":484,"props":859,"children":860},{"style":687},[861],{"type":467,"value":806},{"type":462,"tag":484,"props":863,"children":864},{"style":681},[865],{"type":467,"value":695},{"type":462,"tag":484,"props":867,"children":869},{"class":486,"line":868},14,[870,876,880,884,889,894,899,903,907,911],{"type":462,"tag":484,"props":871,"children":873},{"style":872},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[874],{"type":467,"value":875},"    if",{"type":462,"tag":484,"props":877,"children":878},{"style":681},[879],{"type":467,"value":684},{"type":462,"tag":484,"props":881,"children":882},{"style":707},[883],{"type":467,"value":844},{"type":462,"tag":484,"props":885,"children":886},{"style":670},[887],{"type":467,"value":888}," ===",{"type":462,"tag":484,"props":890,"children":891},{"style":707},[892],{"type":467,"value":893}," n",{"type":462,"tag":484,"props":895,"children":896},{"style":670},[897],{"type":467,"value":898}," &&",{"type":462,"tag":484,"props":900,"children":901},{"style":707},[902],{"type":467,"value":784},{"type":462,"tag":484,"props":904,"children":905},{"style":670},[906],{"type":467,"value":888},{"type":462,"tag":484,"props":908,"children":909},{"style":707},[910],{"type":467,"value":893},{"type":462,"tag":484,"props":912,"children":913},{"style":681},[914],{"type":467,"value":695},{"type":462,"tag":484,"props":916,"children":918},{"class":486,"line":917},15,[919,924,928,934,939,943,948,953],{"type":462,"tag":484,"props":920,"children":921},{"style":872},[922],{"type":467,"value":923},"      return",{"type":462,"tag":484,"props":925,"children":926},{"style":707},[927],{"type":467,"value":710},{"type":462,"tag":484,"props":929,"children":931},{"style":930},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[932],{"type":467,"value":933},".",{"type":462,"tag":484,"props":935,"children":936},{"style":664},[937],{"type":467,"value":938},"push",{"type":462,"tag":484,"props":940,"children":941},{"style":681},[942],{"type":467,"value":839},{"type":462,"tag":484,"props":944,"children":945},{"style":707},[946],{"type":467,"value":947},"str",{"type":462,"tag":484,"props":949,"children":950},{"style":681},[951],{"type":467,"value":952},")",{"type":462,"tag":484,"props":954,"children":955},{"style":722},[956],{"type":467,"value":725},{"type":462,"tag":484,"props":958,"children":960},{"class":486,"line":959},16,[961],{"type":462,"tag":484,"props":962,"children":963},{"style":681},[964],{"type":467,"value":965},"    }\n",{"type":462,"tag":484,"props":967,"children":969},{"class":486,"line":968},17,[970],{"type":462,"tag":484,"props":971,"children":972},{"style":595},[973],{"type":467,"value":974},"    // l \u003C r 时不满足条件，剪枝\n",{"type":462,"tag":484,"props":976,"children":978},{"class":486,"line":977},18,[979,983,987,991,996,1000,1005,1010],{"type":462,"tag":484,"props":980,"children":981},{"style":872},[982],{"type":467,"value":875},{"type":462,"tag":484,"props":984,"children":985},{"style":681},[986],{"type":467,"value":684},{"type":462,"tag":484,"props":988,"children":989},{"style":707},[990],{"type":467,"value":844},{"type":462,"tag":484,"props":992,"children":993},{"style":670},[994],{"type":467,"value":995}," \u003C",{"type":462,"tag":484,"props":997,"children":998},{"style":707},[999],{"type":467,"value":784},{"type":462,"tag":484,"props":1001,"children":1002},{"style":681},[1003],{"type":467,"value":1004},") ",{"type":462,"tag":484,"props":1006,"children":1007},{"style":872},[1008],{"type":467,"value":1009},"return",{"type":462,"tag":484,"props":1011,"children":1012},{"style":722},[1013],{"type":467,"value":725},{"type":462,"tag":484,"props":1015,"children":1017},{"class":486,"line":1016},19,[1018],{"type":462,"tag":484,"props":1019,"children":1020},{"style":595},[1021],{"type":467,"value":1022},"    // l \u003C n 时可插入左括号，最多可以插入 n 个\n",{"type":462,"tag":484,"props":1024,"children":1026},{"class":486,"line":1025},20,[1027,1031,1035,1039,1043,1047],{"type":462,"tag":484,"props":1028,"children":1029},{"style":872},[1030],{"type":467,"value":875},{"type":462,"tag":484,"props":1032,"children":1033},{"style":681},[1034],{"type":467,"value":684},{"type":462,"tag":484,"props":1036,"children":1037},{"style":707},[1038],{"type":467,"value":844},{"type":462,"tag":484,"props":1040,"children":1041},{"style":670},[1042],{"type":467,"value":995},{"type":462,"tag":484,"props":1044,"children":1045},{"style":707},[1046],{"type":467,"value":893},{"type":462,"tag":484,"props":1048,"children":1049},{"style":681},[1050],{"type":467,"value":695},{"type":462,"tag":484,"props":1052,"children":1054},{"class":486,"line":1053},21,[1055,1060,1064,1068,1073,1079,1083,1087,1091,1095,1099,1105,1109],{"type":462,"tag":484,"props":1056,"children":1057},{"style":664},[1058],{"type":467,"value":1059},"      dfs",{"type":462,"tag":484,"props":1061,"children":1062},{"style":681},[1063],{"type":467,"value":839},{"type":462,"tag":484,"props":1065,"children":1066},{"style":707},[1067],{"type":467,"value":844},{"type":462,"tag":484,"props":1069,"children":1070},{"style":670},[1071],{"type":467,"value":1072}," +",{"type":462,"tag":484,"props":1074,"children":1076},{"style":1075},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[1077],{"type":467,"value":1078}," 1",{"type":462,"tag":484,"props":1080,"children":1081},{"style":722},[1082],{"type":467,"value":849},{"type":462,"tag":484,"props":1084,"children":1085},{"style":707},[1086],{"type":467,"value":784},{"type":462,"tag":484,"props":1088,"children":1089},{"style":722},[1090],{"type":467,"value":849},{"type":462,"tag":484,"props":1092,"children":1093},{"style":707},[1094],{"type":467,"value":806},{"type":462,"tag":484,"props":1096,"children":1097},{"style":670},[1098],{"type":467,"value":1072},{"type":462,"tag":484,"props":1100,"children":1102},{"style":1101},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[1103],{"type":467,"value":1104}," \"(\"",{"type":462,"tag":484,"props":1106,"children":1107},{"style":681},[1108],{"type":467,"value":952},{"type":462,"tag":484,"props":1110,"children":1111},{"style":722},[1112],{"type":467,"value":725},{"type":462,"tag":484,"props":1114,"children":1116},{"class":486,"line":1115},22,[1117],{"type":462,"tag":484,"props":1118,"children":1119},{"style":681},[1120],{"type":467,"value":965},{"type":462,"tag":484,"props":1122,"children":1124},{"class":486,"line":1123},23,[1125],{"type":462,"tag":484,"props":1126,"children":1127},{"style":595},[1128],{"type":467,"value":1129},"    // r \u003C l 时，可以插入右括号\n",{"type":462,"tag":484,"props":1131,"children":1133},{"class":486,"line":1132},24,[1134,1138,1142,1147,1151,1155],{"type":462,"tag":484,"props":1135,"children":1136},{"style":872},[1137],{"type":467,"value":875},{"type":462,"tag":484,"props":1139,"children":1140},{"style":681},[1141],{"type":467,"value":684},{"type":462,"tag":484,"props":1143,"children":1144},{"style":707},[1145],{"type":467,"value":1146},"r",{"type":462,"tag":484,"props":1148,"children":1149},{"style":670},[1150],{"type":467,"value":995},{"type":462,"tag":484,"props":1152,"children":1153},{"style":707},[1154],{"type":467,"value":762},{"type":462,"tag":484,"props":1156,"children":1157},{"style":681},[1158],{"type":467,"value":695},{"type":462,"tag":484,"props":1160,"children":1162},{"class":486,"line":1161},25,[1163,1167,1171,1175,1179,1183,1187,1191,1195,1199,1203,1208,1212],{"type":462,"tag":484,"props":1164,"children":1165},{"style":664},[1166],{"type":467,"value":1059},{"type":462,"tag":484,"props":1168,"children":1169},{"style":681},[1170],{"type":467,"value":839},{"type":462,"tag":484,"props":1172,"children":1173},{"style":707},[1174],{"type":467,"value":844},{"type":462,"tag":484,"props":1176,"children":1177},{"style":722},[1178],{"type":467,"value":849},{"type":462,"tag":484,"props":1180,"children":1181},{"style":707},[1182],{"type":467,"value":784},{"type":462,"tag":484,"props":1184,"children":1185},{"style":670},[1186],{"type":467,"value":1072},{"type":462,"tag":484,"props":1188,"children":1189},{"style":1075},[1190],{"type":467,"value":1078},{"type":462,"tag":484,"props":1192,"children":1193},{"style":722},[1194],{"type":467,"value":849},{"type":462,"tag":484,"props":1196,"children":1197},{"style":707},[1198],{"type":467,"value":806},{"type":462,"tag":484,"props":1200,"children":1201},{"style":670},[1202],{"type":467,"value":1072},{"type":462,"tag":484,"props":1204,"children":1205},{"style":1101},[1206],{"type":467,"value":1207}," \")\"",{"type":462,"tag":484,"props":1209,"children":1210},{"style":681},[1211],{"type":467,"value":952},{"type":462,"tag":484,"props":1213,"children":1214},{"style":722},[1215],{"type":467,"value":725},{"type":462,"tag":484,"props":1217,"children":1219},{"class":486,"line":1218},26,[1220],{"type":462,"tag":484,"props":1221,"children":1222},{"style":681},[1223],{"type":467,"value":965},{"type":462,"tag":484,"props":1225,"children":1227},{"class":486,"line":1226},27,[1228],{"type":462,"tag":484,"props":1229,"children":1230},{"style":681},[1231],{"type":467,"value":1232},"  }\n",{"type":462,"tag":484,"props":1234,"children":1236},{"class":486,"line":1235},28,[1237],{"type":462,"tag":484,"props":1238,"children":1239},{"emptyLinePlaceholder":732},[1240],{"type":467,"value":735},{"type":462,"tag":484,"props":1242,"children":1244},{"class":486,"line":1243},29,[1245,1250,1254,1259,1263,1268,1272,1277,1281],{"type":462,"tag":484,"props":1246,"children":1247},{"style":664},[1248],{"type":467,"value":1249},"  dfs",{"type":462,"tag":484,"props":1251,"children":1252},{"style":681},[1253],{"type":467,"value":839},{"type":462,"tag":484,"props":1255,"children":1256},{"style":1075},[1257],{"type":467,"value":1258},"0",{"type":462,"tag":484,"props":1260,"children":1261},{"style":722},[1262],{"type":467,"value":849},{"type":462,"tag":484,"props":1264,"children":1265},{"style":1075},[1266],{"type":467,"value":1267}," 0",{"type":462,"tag":484,"props":1269,"children":1270},{"style":722},[1271],{"type":467,"value":849},{"type":462,"tag":484,"props":1273,"children":1274},{"style":1101},[1275],{"type":467,"value":1276}," \"\"",{"type":462,"tag":484,"props":1278,"children":1279},{"style":681},[1280],{"type":467,"value":952},{"type":462,"tag":484,"props":1282,"children":1283},{"style":722},[1284],{"type":467,"value":725},{"type":462,"tag":484,"props":1286,"children":1288},{"class":486,"line":1287},30,[1289],{"type":462,"tag":484,"props":1290,"children":1291},{"emptyLinePlaceholder":732},[1292],{"type":467,"value":735},{"type":462,"tag":484,"props":1294,"children":1296},{"class":486,"line":1295},31,[1297,1302,1306],{"type":462,"tag":484,"props":1298,"children":1299},{"style":872},[1300],{"type":467,"value":1301},"  return",{"type":462,"tag":484,"props":1303,"children":1304},{"style":707},[1305],{"type":467,"value":710},{"type":462,"tag":484,"props":1307,"children":1308},{"style":722},[1309],{"type":467,"value":725},{"type":462,"tag":484,"props":1311,"children":1313},{"class":486,"line":1312},32,[1314,1319],{"type":462,"tag":484,"props":1315,"children":1316},{"style":681},[1317],{"type":467,"value":1318},"}",{"type":462,"tag":484,"props":1320,"children":1321},{"style":722},[1322],{"type":467,"value":725},{"type":462,"tag":1324,"props":1325,"children":1326},"style",{},[1327],{"type":467,"value":1328},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":455,"searchDepth":654,"depth":654,"links":1330},[1331,1332],{"id":549,"depth":496,"text":549},{"id":572,"depth":496,"text":572,"children":1333},[1334],{"id":578,"depth":627,"text":578},"markdown","content:1.algorithm:3.leetcode:3.major:22.generate-parentheses.md","content","1.algorithm/3.leetcode/3.major/22.generate-parentheses.md","md",[1341,1343],{"_path":81,"title":80,"description":1342},"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",{"_path":87,"title":86,"description":1344},"给你一个链表数组，每个链表都已经按升序排列。",1713457419938]