[{"data":1,"prerenderedAt":1464},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/generate-parentheses":524,"/algorithm/leetcode/major/generate-parentheses-surround":1459},[4,269,298,492,500,509],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":491},"代码考核","/code-assessment",[302,391,484],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,331,347,375,382,385,388],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328],{"title":311,"_path":312},"ajax","/code-assessment/source/native-api/ajax",{"title":314,"_path":315},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":317,"_path":318},"new 操作符","/code-assessment/source/native-api/new",{"title":320,"_path":321},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":323,"_path":324},"定时器","/code-assessment/source/native-api/timer",{"title":326,"_path":327},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":329,"_path":330},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":332,"_path":333,"children":334},"函数 Function","/code-assessment/source/function",[335,338,341,344],{"title":336,"_path":337},"函数防抖","/code-assessment/source/function/debounce",{"title":339,"_path":340},"函数节流","/code-assessment/source/function/throttle",{"title":342,"_path":343},"函数柯理化","/code-assessment/source/function/curry",{"title":345,"_path":346},"函数睡眠","/code-assessment/source/function/sleep",{"title":348,"_path":349,"children":350},"数组 Array","/code-assessment/source/array",[351,354,357,360,363,366,369,372],{"title":352,"_path":353},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":355,"_path":356},"数组扁平化","/code-assessment/source/array/flat",{"title":358,"_path":359},"原型方法","/code-assessment/source/array/prototype-method",{"title":361,"_path":362},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":364,"_path":365},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":367,"_path":368},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":370,"_path":371},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":373,"_path":374},"二维数组","/code-assessment/source/array/2d-array",{"title":376,"_path":377,"children":378},"字符串 String","/code-assessment/source/string",[379],{"title":380,"_path":381},"repeat()","/code-assessment/source/string/repeat",{"title":383,"_path":384},"获取通用类型","/code-assessment/source/get-generic-type",{"title":386,"_path":387},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":389,"_path":390},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":392,"_path":393,"children":394},"业务场景","/code-assessment/scene",[395,420,430,433,436,439,442,445,448,451,454,457,460,463,466,469,472,475,478,481],{"title":396,"_path":397,"children":398},"Promise","/code-assessment/scene/promise",[399,402,405,408,411,414,417],{"title":400,"_path":401},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":403,"_path":404},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":406,"_path":407},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":409,"_path":410},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":412,"_path":413},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":415,"_path":416},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":418,"_path":419},"promise 每隔 1s 输出","/code-assessment/scene/promise/promise-output-every-1s",{"title":421,"_path":422,"children":423},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[424,427],{"title":425,"_path":426},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":428,"_path":429},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":431,"_path":432},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":434,"_path":435},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":437,"_path":438},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":440,"_path":441},"倒计时","/code-assessment/scene/countdown",{"title":443,"_path":444},"日期格式化","/code-assessment/scene/date-format",{"title":446,"_path":447},"实现前端路由","/code-assessment/scene/frontend-route",{"title":449,"_path":450},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":452,"_path":453},"lodash.get","/code-assessment/scene/lodash-get",{"title":455,"_path":456},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":458,"_path":459},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":461,"_path":462},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":464,"_path":465},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":467,"_path":468},"随机数","/code-assessment/scene/random-number",{"title":470,"_path":471},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":473,"_path":474},"sku 算法实现","/code-assessment/scene/sku",{"title":476,"_path":477},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":479,"_path":480},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":482,"_path":483},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":485,"_path":486,"children":487},"Ts 类型挑战","/code-assessment/type-challeges",[488],{"title":489,"_path":490},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":493,"_path":494,"children":495,"icon":499},"项目","/project",[496],{"title":497,"_path":498},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":501,"_path":502,"children":503,"icon":508},"设计模式","/design-mode",[504,505],{"title":501,"_path":502},{"title":506,"_path":507},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":510,"_path":511,"children":512,"icon":523},"后端语言","/backend-languages",[513],{"title":514,"_path":515,"children":516},"Python","/backend-languages/python",[517,520],{"title":518,"_path":519},"基础","/backend-languages/python/base",{"title":521,"_path":522},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":93,"_dir":525,"_draft":526,"_partial":526,"_locale":527,"title":92,"description":528,"url":529,"body":530,"_type":1454,"_id":1455,"_source":1456,"_file":1457,"_extension":1458},"major",false,"","数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。","https://leetcode.cn/problems/generate-parentheses",{"type":531,"children":532,"toc":1448},"root",[533,540,545,575,580,603,608,618,624,629,642,647,653,1442],{"type":534,"tag":535,"props":536,"children":537},"element","p",{},[538],{"type":539,"value":528},"text",{"type":534,"tag":535,"props":541,"children":542},{},[543],{"type":539,"value":544},"示例 1：",{"type":534,"tag":546,"props":547,"children":550},"pre",{"className":548,"code":549,"language":539,"meta":527,"style":527},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：n = 3\n输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",[551],{"type":534,"tag":552,"props":553,"children":554},"code",{"__ignoreMap":527},[555,566],{"type":534,"tag":556,"props":557,"children":560},"span",{"class":558,"line":559},"line",1,[561],{"type":534,"tag":556,"props":562,"children":563},{},[564],{"type":539,"value":565},"输入：n = 3\n",{"type":534,"tag":556,"props":567,"children":569},{"class":558,"line":568},2,[570],{"type":534,"tag":556,"props":571,"children":572},{},[573],{"type":539,"value":574},"输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",{"type":534,"tag":535,"props":576,"children":577},{},[578],{"type":539,"value":579},"示例 2：",{"type":534,"tag":546,"props":581,"children":583},{"className":548,"code":582,"language":539,"meta":527,"style":527},"输入：n = 1\n输出：[\"()\"]\n",[584],{"type":534,"tag":552,"props":585,"children":586},{"__ignoreMap":527},[587,595],{"type":534,"tag":556,"props":588,"children":589},{"class":558,"line":559},[590],{"type":534,"tag":556,"props":591,"children":592},{},[593],{"type":539,"value":594},"输入：n = 1\n",{"type":534,"tag":556,"props":596,"children":597},{"class":558,"line":568},[598],{"type":534,"tag":556,"props":599,"children":600},{},[601],{"type":539,"value":602},"输出：[\"()\"]\n",{"type":534,"tag":535,"props":604,"children":605},{},[606],{"type":539,"value":607},"提示：",{"type":534,"tag":609,"props":610,"children":611},"ul",{},[612],{"type":534,"tag":613,"props":614,"children":615},"li",{},[616],{"type":539,"value":617},"1 \u003C= n \u003C= 8",{"type":534,"tag":619,"props":620,"children":622},"h2",{"id":621},"解题思路",[623],{"type":539,"value":621},{"type":534,"tag":535,"props":625,"children":626},{},[627],{"type":539,"value":628},"由于需要求解所有的可能，因此回溯就不难想到，回溯的思路和写法相对比较固定，并且回溯的优化手段大多是剪枝。\n不难想到，如果左括号的数据小于右括号，我们可以提前退出，这就是这道题的剪枝。例如：())...，后面就不用看了，直接退出即可。回溯的退出条件也不难想到：",{"type":534,"tag":609,"props":630,"children":631},{},[632,637],{"type":534,"tag":613,"props":633,"children":634},{},[635],{"type":539,"value":636},"左括号数目 = 右括号数目",{"type":534,"tag":613,"props":638,"children":639},{},[640],{"type":539,"value":641},"左括号数据 + 右括号数据 = 2 * n\n因此这道题可以使用深度优先搜索（回溯思想），从空字符串开始构造，做加法，即 dfs(左括号数目，右括号数据，路径)，我们从 dfs(0, 0, \"\") 开始",{"type":534,"tag":619,"props":643,"children":645},{"id":644},"实现",[646],{"type":539,"value":644},{"type":534,"tag":648,"props":649,"children":651},"h3",{"id":650},"回溯",[652],{"type":539,"value":650},{"type":534,"tag":546,"props":654,"children":658},{"className":655,"code":656,"language":657,"meta":527,"style":527},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const res = [];\n\n  /**\n   * @param l 左侧括号已经用了几个\n   * @param r 右侧括号已经用了几个\n   * @param str 当前递归得到的拼接字符串结果\n   */\n  function dfs(l, r, str) {\n    if (l === n && r === n) {\n      return res.push(str);\n    }\n    // l \u003C r 时不满足条件，剪枝\n    if (l \u003C r) return;\n    // l \u003C n 时可插入左括号，最多可以插入 n 个\n    if (l \u003C n) {\n      dfs(l + 1, r, str + \"(\");\n    }\n    // r \u003C l 时，可以插入右括号\n    if (r \u003C l) {\n      dfs(l, r + 1, str + \")\");\n    }\n  }\n\n  dfs(0, 0, \"\");\n\n  return res;\n};\n","js",[659],{"type":534,"tag":552,"props":660,"children":661},{"__ignoreMap":527},[662,671,713,744,753,799,822,832,841,868,894,920,929,978,1030,1067,1076,1085,1124,1133,1165,1233,1241,1250,1283,1343,1351,1360,1368,1408,1416,1433],{"type":534,"tag":556,"props":663,"children":664},{"class":558,"line":559},[665],{"type":534,"tag":556,"props":666,"children":668},{"style":667},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[669],{"type":539,"value":670},"/**\n",{"type":534,"tag":556,"props":672,"children":673},{"class":558,"line":568},[674,679,685,691,696,702,707],{"type":534,"tag":556,"props":675,"children":676},{"style":667},[677],{"type":539,"value":678}," * ",{"type":534,"tag":556,"props":680,"children":682},{"style":681},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[683],{"type":539,"value":684},"@",{"type":534,"tag":556,"props":686,"children":688},{"style":687},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[689],{"type":539,"value":690},"param",{"type":534,"tag":556,"props":692,"children":693},{"style":681},[694],{"type":539,"value":695}," {",{"type":534,"tag":556,"props":697,"children":699},{"style":698},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[700],{"type":539,"value":701},"number",{"type":534,"tag":556,"props":703,"children":704},{"style":681},[705],{"type":539,"value":706},"}",{"type":534,"tag":556,"props":708,"children":710},{"style":709},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[711],{"type":539,"value":712}," n\n",{"type":534,"tag":556,"props":714,"children":716},{"class":558,"line":715},3,[717,721,725,730,734,739],{"type":534,"tag":556,"props":718,"children":719},{"style":667},[720],{"type":539,"value":678},{"type":534,"tag":556,"props":722,"children":723},{"style":681},[724],{"type":539,"value":684},{"type":534,"tag":556,"props":726,"children":727},{"style":687},[728],{"type":539,"value":729},"return",{"type":534,"tag":556,"props":731,"children":732},{"style":681},[733],{"type":539,"value":695},{"type":534,"tag":556,"props":735,"children":736},{"style":698},[737],{"type":539,"value":738},"string[]",{"type":534,"tag":556,"props":740,"children":741},{"style":681},[742],{"type":539,"value":743},"}\n",{"type":534,"tag":556,"props":745,"children":747},{"class":558,"line":746},4,[748],{"type":534,"tag":556,"props":749,"children":750},{"style":667},[751],{"type":539,"value":752}," */\n",{"type":534,"tag":556,"props":754,"children":756},{"class":558,"line":755},5,[757,763,769,774,779,784,789,794],{"type":534,"tag":556,"props":758,"children":760},{"style":759},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[761],{"type":539,"value":762},"var",{"type":534,"tag":556,"props":764,"children":766},{"style":765},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[767],{"type":539,"value":768}," generateParenthesis",{"type":534,"tag":556,"props":770,"children":771},{"style":681},[772],{"type":539,"value":773}," =",{"type":534,"tag":556,"props":775,"children":776},{"style":759},[777],{"type":539,"value":778}," function",{"type":534,"tag":556,"props":780,"children":781},{"style":681},[782],{"type":539,"value":783}," (",{"type":534,"tag":556,"props":785,"children":786},{"style":709},[787],{"type":539,"value":788},"n",{"type":534,"tag":556,"props":790,"children":791},{"style":681},[792],{"type":539,"value":793},")",{"type":534,"tag":556,"props":795,"children":796},{"style":681},[797],{"type":539,"value":798}," {\n",{"type":534,"tag":556,"props":800,"children":802},{"class":558,"line":801},6,[803,808,813,817],{"type":534,"tag":556,"props":804,"children":805},{"style":759},[806],{"type":539,"value":807},"  const",{"type":534,"tag":556,"props":809,"children":810},{"style":709},[811],{"type":539,"value":812}," res",{"type":534,"tag":556,"props":814,"children":815},{"style":681},[816],{"type":539,"value":773},{"type":534,"tag":556,"props":818,"children":819},{"style":681},[820],{"type":539,"value":821}," [];\n",{"type":534,"tag":556,"props":823,"children":825},{"class":558,"line":824},7,[826],{"type":534,"tag":556,"props":827,"children":829},{"emptyLinePlaceholder":828},true,[830],{"type":539,"value":831},"\n",{"type":534,"tag":556,"props":833,"children":835},{"class":558,"line":834},8,[836],{"type":534,"tag":556,"props":837,"children":838},{"style":667},[839],{"type":539,"value":840},"  /**\n",{"type":534,"tag":556,"props":842,"children":844},{"class":558,"line":843},9,[845,850,854,858,863],{"type":534,"tag":556,"props":846,"children":847},{"style":667},[848],{"type":539,"value":849},"   * ",{"type":534,"tag":556,"props":851,"children":852},{"style":681},[853],{"type":539,"value":684},{"type":534,"tag":556,"props":855,"children":856},{"style":687},[857],{"type":539,"value":690},{"type":534,"tag":556,"props":859,"children":860},{"style":709},[861],{"type":539,"value":862}," l",{"type":534,"tag":556,"props":864,"children":865},{"style":667},[866],{"type":539,"value":867}," 左侧括号已经用了几个\n",{"type":534,"tag":556,"props":869,"children":871},{"class":558,"line":870},10,[872,876,880,884,889],{"type":534,"tag":556,"props":873,"children":874},{"style":667},[875],{"type":539,"value":849},{"type":534,"tag":556,"props":877,"children":878},{"style":681},[879],{"type":539,"value":684},{"type":534,"tag":556,"props":881,"children":882},{"style":687},[883],{"type":539,"value":690},{"type":534,"tag":556,"props":885,"children":886},{"style":709},[887],{"type":539,"value":888}," r",{"type":534,"tag":556,"props":890,"children":891},{"style":667},[892],{"type":539,"value":893}," 右侧括号已经用了几个\n",{"type":534,"tag":556,"props":895,"children":897},{"class":558,"line":896},11,[898,902,906,910,915],{"type":534,"tag":556,"props":899,"children":900},{"style":667},[901],{"type":539,"value":849},{"type":534,"tag":556,"props":903,"children":904},{"style":681},[905],{"type":539,"value":684},{"type":534,"tag":556,"props":907,"children":908},{"style":687},[909],{"type":539,"value":690},{"type":534,"tag":556,"props":911,"children":912},{"style":709},[913],{"type":539,"value":914}," str",{"type":534,"tag":556,"props":916,"children":917},{"style":667},[918],{"type":539,"value":919}," 当前递归得到的拼接字符串结果\n",{"type":534,"tag":556,"props":921,"children":923},{"class":558,"line":922},12,[924],{"type":534,"tag":556,"props":925,"children":926},{"style":667},[927],{"type":539,"value":928},"   */\n",{"type":534,"tag":556,"props":930,"children":932},{"class":558,"line":931},13,[933,938,943,948,953,958,962,966,970,974],{"type":534,"tag":556,"props":934,"children":935},{"style":759},[936],{"type":539,"value":937},"  function",{"type":534,"tag":556,"props":939,"children":940},{"style":765},[941],{"type":539,"value":942}," dfs",{"type":534,"tag":556,"props":944,"children":945},{"style":681},[946],{"type":539,"value":947},"(",{"type":534,"tag":556,"props":949,"children":950},{"style":709},[951],{"type":539,"value":952},"l",{"type":534,"tag":556,"props":954,"children":955},{"style":681},[956],{"type":539,"value":957},",",{"type":534,"tag":556,"props":959,"children":960},{"style":709},[961],{"type":539,"value":888},{"type":534,"tag":556,"props":963,"children":964},{"style":681},[965],{"type":539,"value":957},{"type":534,"tag":556,"props":967,"children":968},{"style":709},[969],{"type":539,"value":914},{"type":534,"tag":556,"props":971,"children":972},{"style":681},[973],{"type":539,"value":793},{"type":534,"tag":556,"props":975,"children":976},{"style":681},[977],{"type":539,"value":798},{"type":534,"tag":556,"props":979,"children":981},{"class":558,"line":980},14,[982,987,991,995,1000,1005,1010,1014,1018,1022,1026],{"type":534,"tag":556,"props":983,"children":984},{"style":687},[985],{"type":539,"value":986},"    if",{"type":534,"tag":556,"props":988,"children":989},{"style":681},[990],{"type":539,"value":783},{"type":534,"tag":556,"props":992,"children":993},{"style":709},[994],{"type":539,"value":952},{"type":534,"tag":556,"props":996,"children":997},{"style":759},[998],{"type":539,"value":999}," ===",{"type":534,"tag":556,"props":1001,"children":1002},{"style":709},[1003],{"type":539,"value":1004}," n",{"type":534,"tag":556,"props":1006,"children":1007},{"style":759},[1008],{"type":539,"value":1009}," &&",{"type":534,"tag":556,"props":1011,"children":1012},{"style":709},[1013],{"type":539,"value":888},{"type":534,"tag":556,"props":1015,"children":1016},{"style":759},[1017],{"type":539,"value":999},{"type":534,"tag":556,"props":1019,"children":1020},{"style":709},[1021],{"type":539,"value":1004},{"type":534,"tag":556,"props":1023,"children":1024},{"style":681},[1025],{"type":539,"value":793},{"type":534,"tag":556,"props":1027,"children":1028},{"style":681},[1029],{"type":539,"value":798},{"type":534,"tag":556,"props":1031,"children":1033},{"class":558,"line":1032},15,[1034,1039,1043,1048,1053,1057,1062],{"type":534,"tag":556,"props":1035,"children":1036},{"style":687},[1037],{"type":539,"value":1038},"      return",{"type":534,"tag":556,"props":1040,"children":1041},{"style":709},[1042],{"type":539,"value":812},{"type":534,"tag":556,"props":1044,"children":1045},{"style":681},[1046],{"type":539,"value":1047},".",{"type":534,"tag":556,"props":1049,"children":1050},{"style":765},[1051],{"type":539,"value":1052},"push",{"type":534,"tag":556,"props":1054,"children":1055},{"style":681},[1056],{"type":539,"value":947},{"type":534,"tag":556,"props":1058,"children":1059},{"style":709},[1060],{"type":539,"value":1061},"str",{"type":534,"tag":556,"props":1063,"children":1064},{"style":681},[1065],{"type":539,"value":1066},");\n",{"type":534,"tag":556,"props":1068,"children":1070},{"class":558,"line":1069},16,[1071],{"type":534,"tag":556,"props":1072,"children":1073},{"style":681},[1074],{"type":539,"value":1075},"    }\n",{"type":534,"tag":556,"props":1077,"children":1079},{"class":558,"line":1078},17,[1080],{"type":534,"tag":556,"props":1081,"children":1082},{"style":667},[1083],{"type":539,"value":1084},"    // l \u003C r 时不满足条件，剪枝\n",{"type":534,"tag":556,"props":1086,"children":1088},{"class":558,"line":1087},18,[1089,1093,1097,1101,1106,1110,1114,1119],{"type":534,"tag":556,"props":1090,"children":1091},{"style":687},[1092],{"type":539,"value":986},{"type":534,"tag":556,"props":1094,"children":1095},{"style":681},[1096],{"type":539,"value":783},{"type":534,"tag":556,"props":1098,"children":1099},{"style":709},[1100],{"type":539,"value":952},{"type":534,"tag":556,"props":1102,"children":1103},{"style":681},[1104],{"type":539,"value":1105}," \u003C",{"type":534,"tag":556,"props":1107,"children":1108},{"style":709},[1109],{"type":539,"value":888},{"type":534,"tag":556,"props":1111,"children":1112},{"style":681},[1113],{"type":539,"value":793},{"type":534,"tag":556,"props":1115,"children":1116},{"style":687},[1117],{"type":539,"value":1118}," return",{"type":534,"tag":556,"props":1120,"children":1121},{"style":681},[1122],{"type":539,"value":1123},";\n",{"type":534,"tag":556,"props":1125,"children":1127},{"class":558,"line":1126},19,[1128],{"type":534,"tag":556,"props":1129,"children":1130},{"style":667},[1131],{"type":539,"value":1132},"    // l \u003C n 时可插入左括号，最多可以插入 n 个\n",{"type":534,"tag":556,"props":1134,"children":1136},{"class":558,"line":1135},20,[1137,1141,1145,1149,1153,1157,1161],{"type":534,"tag":556,"props":1138,"children":1139},{"style":687},[1140],{"type":539,"value":986},{"type":534,"tag":556,"props":1142,"children":1143},{"style":681},[1144],{"type":539,"value":783},{"type":534,"tag":556,"props":1146,"children":1147},{"style":709},[1148],{"type":539,"value":952},{"type":534,"tag":556,"props":1150,"children":1151},{"style":681},[1152],{"type":539,"value":1105},{"type":534,"tag":556,"props":1154,"children":1155},{"style":709},[1156],{"type":539,"value":1004},{"type":534,"tag":556,"props":1158,"children":1159},{"style":681},[1160],{"type":539,"value":793},{"type":534,"tag":556,"props":1162,"children":1163},{"style":681},[1164],{"type":539,"value":798},{"type":534,"tag":556,"props":1166,"children":1168},{"class":558,"line":1167},21,[1169,1174,1178,1182,1187,1193,1197,1201,1205,1209,1213,1219,1224,1229],{"type":534,"tag":556,"props":1170,"children":1171},{"style":765},[1172],{"type":539,"value":1173},"      dfs",{"type":534,"tag":556,"props":1175,"children":1176},{"style":681},[1177],{"type":539,"value":947},{"type":534,"tag":556,"props":1179,"children":1180},{"style":709},[1181],{"type":539,"value":952},{"type":534,"tag":556,"props":1183,"children":1184},{"style":759},[1185],{"type":539,"value":1186}," +",{"type":534,"tag":556,"props":1188,"children":1190},{"style":1189},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[1191],{"type":539,"value":1192}," 1",{"type":534,"tag":556,"props":1194,"children":1195},{"style":681},[1196],{"type":539,"value":957},{"type":534,"tag":556,"props":1198,"children":1199},{"style":709},[1200],{"type":539,"value":888},{"type":534,"tag":556,"props":1202,"children":1203},{"style":681},[1204],{"type":539,"value":957},{"type":534,"tag":556,"props":1206,"children":1207},{"style":709},[1208],{"type":539,"value":914},{"type":534,"tag":556,"props":1210,"children":1211},{"style":759},[1212],{"type":539,"value":1186},{"type":534,"tag":556,"props":1214,"children":1216},{"style":1215},"--shiki-light:#B5695999;--shiki-default:#B5695999;--shiki-dark:#C98A7D99",[1217],{"type":539,"value":1218}," \"",{"type":534,"tag":556,"props":1220,"children":1222},{"style":1221},"--shiki-light:#B56959;--shiki-default:#B56959;--shiki-dark:#C98A7D",[1223],{"type":539,"value":947},{"type":534,"tag":556,"props":1225,"children":1226},{"style":1215},[1227],{"type":539,"value":1228},"\"",{"type":534,"tag":556,"props":1230,"children":1231},{"style":681},[1232],{"type":539,"value":1066},{"type":534,"tag":556,"props":1234,"children":1236},{"class":558,"line":1235},22,[1237],{"type":534,"tag":556,"props":1238,"children":1239},{"style":681},[1240],{"type":539,"value":1075},{"type":534,"tag":556,"props":1242,"children":1244},{"class":558,"line":1243},23,[1245],{"type":534,"tag":556,"props":1246,"children":1247},{"style":667},[1248],{"type":539,"value":1249},"    // r \u003C l 时，可以插入右括号\n",{"type":534,"tag":556,"props":1251,"children":1253},{"class":558,"line":1252},24,[1254,1258,1262,1267,1271,1275,1279],{"type":534,"tag":556,"props":1255,"children":1256},{"style":687},[1257],{"type":539,"value":986},{"type":534,"tag":556,"props":1259,"children":1260},{"style":681},[1261],{"type":539,"value":783},{"type":534,"tag":556,"props":1263,"children":1264},{"style":709},[1265],{"type":539,"value":1266},"r",{"type":534,"tag":556,"props":1268,"children":1269},{"style":681},[1270],{"type":539,"value":1105},{"type":534,"tag":556,"props":1272,"children":1273},{"style":709},[1274],{"type":539,"value":862},{"type":534,"tag":556,"props":1276,"children":1277},{"style":681},[1278],{"type":539,"value":793},{"type":534,"tag":556,"props":1280,"children":1281},{"style":681},[1282],{"type":539,"value":798},{"type":534,"tag":556,"props":1284,"children":1286},{"class":558,"line":1285},25,[1287,1291,1295,1299,1303,1307,1311,1315,1319,1323,1327,1331,1335,1339],{"type":534,"tag":556,"props":1288,"children":1289},{"style":765},[1290],{"type":539,"value":1173},{"type":534,"tag":556,"props":1292,"children":1293},{"style":681},[1294],{"type":539,"value":947},{"type":534,"tag":556,"props":1296,"children":1297},{"style":709},[1298],{"type":539,"value":952},{"type":534,"tag":556,"props":1300,"children":1301},{"style":681},[1302],{"type":539,"value":957},{"type":534,"tag":556,"props":1304,"children":1305},{"style":709},[1306],{"type":539,"value":888},{"type":534,"tag":556,"props":1308,"children":1309},{"style":759},[1310],{"type":539,"value":1186},{"type":534,"tag":556,"props":1312,"children":1313},{"style":1189},[1314],{"type":539,"value":1192},{"type":534,"tag":556,"props":1316,"children":1317},{"style":681},[1318],{"type":539,"value":957},{"type":534,"tag":556,"props":1320,"children":1321},{"style":709},[1322],{"type":539,"value":914},{"type":534,"tag":556,"props":1324,"children":1325},{"style":759},[1326],{"type":539,"value":1186},{"type":534,"tag":556,"props":1328,"children":1329},{"style":1215},[1330],{"type":539,"value":1218},{"type":534,"tag":556,"props":1332,"children":1333},{"style":1221},[1334],{"type":539,"value":793},{"type":534,"tag":556,"props":1336,"children":1337},{"style":1215},[1338],{"type":539,"value":1228},{"type":534,"tag":556,"props":1340,"children":1341},{"style":681},[1342],{"type":539,"value":1066},{"type":534,"tag":556,"props":1344,"children":1346},{"class":558,"line":1345},26,[1347],{"type":534,"tag":556,"props":1348,"children":1349},{"style":681},[1350],{"type":539,"value":1075},{"type":534,"tag":556,"props":1352,"children":1354},{"class":558,"line":1353},27,[1355],{"type":534,"tag":556,"props":1356,"children":1357},{"style":681},[1358],{"type":539,"value":1359},"  }\n",{"type":534,"tag":556,"props":1361,"children":1363},{"class":558,"line":1362},28,[1364],{"type":534,"tag":556,"props":1365,"children":1366},{"emptyLinePlaceholder":828},[1367],{"type":539,"value":831},{"type":534,"tag":556,"props":1369,"children":1371},{"class":558,"line":1370},29,[1372,1377,1381,1386,1390,1395,1399,1404],{"type":534,"tag":556,"props":1373,"children":1374},{"style":765},[1375],{"type":539,"value":1376},"  dfs",{"type":534,"tag":556,"props":1378,"children":1379},{"style":681},[1380],{"type":539,"value":947},{"type":534,"tag":556,"props":1382,"children":1383},{"style":1189},[1384],{"type":539,"value":1385},"0",{"type":534,"tag":556,"props":1387,"children":1388},{"style":681},[1389],{"type":539,"value":957},{"type":534,"tag":556,"props":1391,"children":1392},{"style":1189},[1393],{"type":539,"value":1394}," 0",{"type":534,"tag":556,"props":1396,"children":1397},{"style":681},[1398],{"type":539,"value":957},{"type":534,"tag":556,"props":1400,"children":1401},{"style":1215},[1402],{"type":539,"value":1403}," \"\"",{"type":534,"tag":556,"props":1405,"children":1406},{"style":681},[1407],{"type":539,"value":1066},{"type":534,"tag":556,"props":1409,"children":1411},{"class":558,"line":1410},30,[1412],{"type":534,"tag":556,"props":1413,"children":1414},{"emptyLinePlaceholder":828},[1415],{"type":539,"value":831},{"type":534,"tag":556,"props":1417,"children":1419},{"class":558,"line":1418},31,[1420,1425,1429],{"type":534,"tag":556,"props":1421,"children":1422},{"style":687},[1423],{"type":539,"value":1424},"  return",{"type":534,"tag":556,"props":1426,"children":1427},{"style":709},[1428],{"type":539,"value":812},{"type":534,"tag":556,"props":1430,"children":1431},{"style":681},[1432],{"type":539,"value":1123},{"type":534,"tag":556,"props":1434,"children":1436},{"class":558,"line":1435},32,[1437],{"type":534,"tag":556,"props":1438,"children":1439},{"style":681},[1440],{"type":539,"value":1441},"};\n",{"type":534,"tag":1443,"props":1444,"children":1445},"style",{},[1446],{"type":539,"value":1447},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":527,"searchDepth":755,"depth":755,"links":1449},[1450,1451],{"id":621,"depth":568,"text":621},{"id":644,"depth":568,"text":644,"children":1452},[1453],{"id":650,"depth":715,"text":650},"markdown","content:1.algorithm:3.leetcode:3.major:22.generate-parentheses.md","content","1.algorithm/3.leetcode/3.major/22.generate-parentheses.md","md",[1460,1462],{"_path":90,"title":89,"description":1461},"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",{"_path":96,"title":95,"description":1463},"给你一个链表数组，每个链表都已经按升序排列。",1714096141796]