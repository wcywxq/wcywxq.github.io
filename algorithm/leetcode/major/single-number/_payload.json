[{"data":1,"prerenderedAt":1023},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/single-number":552,"/algorithm/leetcode/major/single-number-surround":1018},[4,272,311,529,537],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":310},"八股文","/endorsement",[276,286,297],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"构建工具","/endorsement/build-tools",[290],{"title":291,"_path":292,"children":293},"Webpack","/endorsement/build-tools/webpack",[294],{"title":295,"_path":296},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":298,"_path":299,"children":300},"Html","/endorsement/html",[301,304,307],{"title":302,"_path":303},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":305,"_path":306},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":308,"_path":309},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":312,"_path":313,"children":314,"icon":528},"代码考核","/code-assessment",[315,420,521],{"title":316,"_path":317,"children":318},"源码实现","/code-assessment/source",[319,353,369,397,404,411,414,417],{"title":320,"_path":321,"children":322},"原生 api","/code-assessment/source/native-api",[323,326,329,332,335,338,341,344,347,350],{"title":324,"_path":325},"polyfill","/code-assessment/source/native-api/polyfill",{"title":327,"_path":328},"ajax","/code-assessment/source/native-api/ajax",{"title":330,"_path":331},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":333,"_path":334},"new 操作符","/code-assessment/source/native-api/new",{"title":336,"_path":337},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":339,"_path":340},"定时器","/code-assessment/source/native-api/timer",{"title":342,"_path":343},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":345,"_path":346},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":348,"_path":349},"extends","/code-assessment/source/native-api/extends",{"title":351,"_path":352},"Promise","/code-assessment/source/native-api/promise",{"title":354,"_path":355,"children":356},"函数 Function","/code-assessment/source/function",[357,360,363,366],{"title":358,"_path":359},"函数防抖","/code-assessment/source/function/debounce",{"title":361,"_path":362},"函数节流","/code-assessment/source/function/throttle",{"title":364,"_path":365},"函数柯理化","/code-assessment/source/function/curry",{"title":367,"_path":368},"函数睡眠","/code-assessment/source/function/sleep",{"title":370,"_path":371,"children":372},"数组 Array","/code-assessment/source/array",[373,376,379,382,385,388,391,394],{"title":374,"_path":375},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":377,"_path":378},"数组扁平化","/code-assessment/source/array/flat",{"title":380,"_path":381},"原型方法","/code-assessment/source/array/prototype-method",{"title":383,"_path":384},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":386,"_path":387},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":389,"_path":390},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":392,"_path":393},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":395,"_path":396},"二维数组","/code-assessment/source/array/2d-array",{"title":398,"_path":399,"children":400},"字符串 String","/code-assessment/source/string",[401],{"title":402,"_path":403},"repeat()","/code-assessment/source/string/repeat",{"title":405,"_path":406,"children":407},"集合 Set","/code-assessment/source/set",[408],{"title":409,"_path":410},"遍历集合","/code-assessment/source/set/traverse",{"title":412,"_path":413},"获取通用类型","/code-assessment/source/get-generic-type",{"title":415,"_path":416},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":418,"_path":419},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":421,"_path":422,"children":423},"业务场景","/code-assessment/scene",[424,454,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518],{"title":351,"_path":425,"children":426},"/code-assessment/scene/promise",[427,430,433,436,439,442,445,448,451],{"title":428,"_path":429},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":431,"_path":432},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":434,"_path":435},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":437,"_path":438},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":440,"_path":441},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":443,"_path":444},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":446,"_path":447},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":449,"_path":450},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":452,"_path":453},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":455,"_path":456,"children":457},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[458,461],{"title":459,"_path":460},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":462,"_path":463},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":465,"_path":466},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":468,"_path":469},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":471,"_path":472},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":474,"_path":475},"倒计时","/code-assessment/scene/countdown",{"title":477,"_path":478},"日期格式化","/code-assessment/scene/date-format",{"title":480,"_path":481},"实现前端路由","/code-assessment/scene/frontend-route",{"title":483,"_path":484},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":486,"_path":487},"lodash.get","/code-assessment/scene/lodash-get",{"title":489,"_path":490},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":492,"_path":493},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":495,"_path":496},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":498,"_path":499},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":501,"_path":502},"随机数","/code-assessment/scene/random-number",{"title":504,"_path":505},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":507,"_path":508},"sku 算法实现","/code-assessment/scene/sku",{"title":510,"_path":511},"整数分割","/code-assessment/scene/split-number",{"title":513,"_path":514},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":516,"_path":517},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":519,"_path":520},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":522,"_path":523,"children":524},"Ts 类型挑战","/code-assessment/type-challeges",[525],{"title":526,"_path":527},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":530,"_path":531,"children":532,"icon":536},"项目","/project",[533],{"title":534,"_path":535},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":538,"_path":539,"children":540,"icon":551},"后端语言","/backend-languages",[541],{"title":542,"_path":543,"children":544},"Python","/backend-languages/python",[545,548],{"title":546,"_path":547},"基础","/backend-languages/python/base",{"title":549,"_path":550},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":171,"_dir":553,"_draft":554,"_partial":554,"_locale":555,"title":170,"description":556,"url":557,"body":558,"_type":1013,"_id":1014,"_source":1015,"_file":1016,"_extension":1017},"major",false,"","给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。","https://leetcode.cn/problems/single-number",{"type":559,"children":560,"toc":1007},"root",[561,568,573,578,608,613,636,641,663,668,688,694,699,717,722,728,1001],{"type":562,"tag":563,"props":564,"children":565},"element","p",{},[566],{"type":567,"value":556},"text",{"type":562,"tag":563,"props":569,"children":570},{},[571],{"type":567,"value":572},"你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。",{"type":562,"tag":563,"props":574,"children":575},{},[576],{"type":567,"value":577},"示例 1 ：",{"type":562,"tag":579,"props":580,"children":583},"pre",{"className":581,"code":582,"language":567,"meta":555,"style":555},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：nums = [2,2,1]\n输出：1\n",[584],{"type":562,"tag":585,"props":586,"children":587},"code",{"__ignoreMap":555},[588,599],{"type":562,"tag":589,"props":590,"children":593},"span",{"class":591,"line":592},"line",1,[594],{"type":562,"tag":589,"props":595,"children":596},{},[597],{"type":567,"value":598},"输入：nums = [2,2,1]\n",{"type":562,"tag":589,"props":600,"children":602},{"class":591,"line":601},2,[603],{"type":562,"tag":589,"props":604,"children":605},{},[606],{"type":567,"value":607},"输出：1\n",{"type":562,"tag":563,"props":609,"children":610},{},[611],{"type":567,"value":612},"示例 2 ：",{"type":562,"tag":579,"props":614,"children":616},{"className":581,"code":615,"language":567,"meta":555,"style":555},"输入：nums = [4,1,2,1,2]\n输出：4\n",[617],{"type":562,"tag":585,"props":618,"children":619},{"__ignoreMap":555},[620,628],{"type":562,"tag":589,"props":621,"children":622},{"class":591,"line":592},[623],{"type":562,"tag":589,"props":624,"children":625},{},[626],{"type":567,"value":627},"输入：nums = [4,1,2,1,2]\n",{"type":562,"tag":589,"props":629,"children":630},{"class":591,"line":601},[631],{"type":562,"tag":589,"props":632,"children":633},{},[634],{"type":567,"value":635},"输出：4\n",{"type":562,"tag":563,"props":637,"children":638},{},[639],{"type":567,"value":640},"示例 3 ：",{"type":562,"tag":579,"props":642,"children":644},{"className":581,"code":643,"language":567,"meta":555,"style":555},"输入：nums = [1]\n输出：1\n",[645],{"type":562,"tag":585,"props":646,"children":647},{"__ignoreMap":555},[648,656],{"type":562,"tag":589,"props":649,"children":650},{"class":591,"line":592},[651],{"type":562,"tag":589,"props":652,"children":653},{},[654],{"type":567,"value":655},"输入：nums = [1]\n",{"type":562,"tag":589,"props":657,"children":658},{"class":591,"line":601},[659],{"type":562,"tag":589,"props":660,"children":661},{},[662],{"type":567,"value":607},{"type":562,"tag":563,"props":664,"children":665},{},[666],{"type":567,"value":667},"提示：",{"type":562,"tag":669,"props":670,"children":671},"ul",{},[672,678,683],{"type":562,"tag":673,"props":674,"children":675},"li",{},[676],{"type":567,"value":677},"1 \u003C= nums.length \u003C= 3 * 10^4",{"type":562,"tag":673,"props":679,"children":680},{},[681],{"type":567,"value":682},"-3 * 10^4 \u003C= nums[i] \u003C= 3 * 10^4",{"type":562,"tag":673,"props":684,"children":685},{},[686],{"type":567,"value":687},"除了某个元素只出现一次以外，其余每个元素均出现两次。",{"type":562,"tag":689,"props":690,"children":692},"h2",{"id":691},"解题思路",[693],{"type":567,"value":691},{"type":562,"tag":563,"props":695,"children":696},{},[697],{"type":567,"value":698},"异或满足以下行为：",{"type":562,"tag":669,"props":700,"children":701},{},[702,707,712],{"type":562,"tag":673,"props":703,"children":704},{},[705],{"type":567,"value":706},"a ^ 0 = a；",{"type":562,"tag":673,"props":708,"children":709},{},[710],{"type":567,"value":711},"a ^ a = 0；",{"type":562,"tag":673,"props":713,"children":714},{},[715],{"type":567,"value":716},"a ^ b ^ a = (a ^ a) ^ b = 0 ^ b = b",{"type":562,"tag":689,"props":718,"children":720},{"id":719},"实现",[721],{"type":567,"value":719},{"type":562,"tag":723,"props":724,"children":726},"h3",{"id":725},"异或",[727],{"type":567,"value":725},{"type":562,"tag":579,"props":729,"children":733},{"className":730,"code":731,"language":732,"meta":555,"style":555},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumber = function (nums) {\n  let ans = 0;\n  for (let num of nums) {\n    ans ^= num;\n  }\n  return ans;\n};\n","js",[734],{"type":562,"tag":585,"props":735,"children":736},{"__ignoreMap":555},[737,746,788,819,828,874,903,944,966,975,992],{"type":562,"tag":589,"props":738,"children":739},{"class":591,"line":592},[740],{"type":562,"tag":589,"props":741,"children":743},{"style":742},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[744],{"type":567,"value":745},"/**\n",{"type":562,"tag":589,"props":747,"children":748},{"class":591,"line":601},[749,754,760,766,771,777,782],{"type":562,"tag":589,"props":750,"children":751},{"style":742},[752],{"type":567,"value":753}," * ",{"type":562,"tag":589,"props":755,"children":757},{"style":756},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[758],{"type":567,"value":759},"@",{"type":562,"tag":589,"props":761,"children":763},{"style":762},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[764],{"type":567,"value":765},"param",{"type":562,"tag":589,"props":767,"children":768},{"style":756},[769],{"type":567,"value":770}," {",{"type":562,"tag":589,"props":772,"children":774},{"style":773},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[775],{"type":567,"value":776},"number[]",{"type":562,"tag":589,"props":778,"children":779},{"style":756},[780],{"type":567,"value":781},"}",{"type":562,"tag":589,"props":783,"children":785},{"style":784},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[786],{"type":567,"value":787}," nums\n",{"type":562,"tag":589,"props":789,"children":791},{"class":591,"line":790},3,[792,796,800,805,809,814],{"type":562,"tag":589,"props":793,"children":794},{"style":742},[795],{"type":567,"value":753},{"type":562,"tag":589,"props":797,"children":798},{"style":756},[799],{"type":567,"value":759},{"type":562,"tag":589,"props":801,"children":802},{"style":762},[803],{"type":567,"value":804},"return",{"type":562,"tag":589,"props":806,"children":807},{"style":756},[808],{"type":567,"value":770},{"type":562,"tag":589,"props":810,"children":811},{"style":773},[812],{"type":567,"value":813},"number",{"type":562,"tag":589,"props":815,"children":816},{"style":756},[817],{"type":567,"value":818},"}\n",{"type":562,"tag":589,"props":820,"children":822},{"class":591,"line":821},4,[823],{"type":562,"tag":589,"props":824,"children":825},{"style":742},[826],{"type":567,"value":827}," */\n",{"type":562,"tag":589,"props":829,"children":831},{"class":591,"line":830},5,[832,838,844,849,854,859,864,869],{"type":562,"tag":589,"props":833,"children":835},{"style":834},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[836],{"type":567,"value":837},"var",{"type":562,"tag":589,"props":839,"children":841},{"style":840},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[842],{"type":567,"value":843}," singleNumber",{"type":562,"tag":589,"props":845,"children":846},{"style":756},[847],{"type":567,"value":848}," =",{"type":562,"tag":589,"props":850,"children":851},{"style":834},[852],{"type":567,"value":853}," function",{"type":562,"tag":589,"props":855,"children":856},{"style":756},[857],{"type":567,"value":858}," (",{"type":562,"tag":589,"props":860,"children":861},{"style":784},[862],{"type":567,"value":863},"nums",{"type":562,"tag":589,"props":865,"children":866},{"style":756},[867],{"type":567,"value":868},")",{"type":562,"tag":589,"props":870,"children":871},{"style":756},[872],{"type":567,"value":873}," {\n",{"type":562,"tag":589,"props":875,"children":877},{"class":591,"line":876},6,[878,883,888,892,898],{"type":562,"tag":589,"props":879,"children":880},{"style":834},[881],{"type":567,"value":882},"  let",{"type":562,"tag":589,"props":884,"children":885},{"style":784},[886],{"type":567,"value":887}," ans",{"type":562,"tag":589,"props":889,"children":890},{"style":756},[891],{"type":567,"value":848},{"type":562,"tag":589,"props":893,"children":895},{"style":894},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[896],{"type":567,"value":897}," 0",{"type":562,"tag":589,"props":899,"children":900},{"style":756},[901],{"type":567,"value":902},";\n",{"type":562,"tag":589,"props":904,"children":906},{"class":591,"line":905},7,[907,912,916,921,926,931,936,940],{"type":562,"tag":589,"props":908,"children":909},{"style":762},[910],{"type":567,"value":911},"  for",{"type":562,"tag":589,"props":913,"children":914},{"style":756},[915],{"type":567,"value":858},{"type":562,"tag":589,"props":917,"children":918},{"style":834},[919],{"type":567,"value":920},"let",{"type":562,"tag":589,"props":922,"children":923},{"style":784},[924],{"type":567,"value":925}," num",{"type":562,"tag":589,"props":927,"children":928},{"style":834},[929],{"type":567,"value":930}," of",{"type":562,"tag":589,"props":932,"children":933},{"style":784},[934],{"type":567,"value":935}," nums",{"type":562,"tag":589,"props":937,"children":938},{"style":756},[939],{"type":567,"value":868},{"type":562,"tag":589,"props":941,"children":942},{"style":756},[943],{"type":567,"value":873},{"type":562,"tag":589,"props":945,"children":947},{"class":591,"line":946},8,[948,953,958,962],{"type":562,"tag":589,"props":949,"children":950},{"style":784},[951],{"type":567,"value":952},"    ans",{"type":562,"tag":589,"props":954,"children":955},{"style":834},[956],{"type":567,"value":957}," ^=",{"type":562,"tag":589,"props":959,"children":960},{"style":784},[961],{"type":567,"value":925},{"type":562,"tag":589,"props":963,"children":964},{"style":756},[965],{"type":567,"value":902},{"type":562,"tag":589,"props":967,"children":969},{"class":591,"line":968},9,[970],{"type":562,"tag":589,"props":971,"children":972},{"style":756},[973],{"type":567,"value":974},"  }\n",{"type":562,"tag":589,"props":976,"children":978},{"class":591,"line":977},10,[979,984,988],{"type":562,"tag":589,"props":980,"children":981},{"style":762},[982],{"type":567,"value":983},"  return",{"type":562,"tag":589,"props":985,"children":986},{"style":784},[987],{"type":567,"value":887},{"type":562,"tag":589,"props":989,"children":990},{"style":756},[991],{"type":567,"value":902},{"type":562,"tag":589,"props":993,"children":995},{"class":591,"line":994},11,[996],{"type":562,"tag":589,"props":997,"children":998},{"style":756},[999],{"type":567,"value":1000},"};\n",{"type":562,"tag":1002,"props":1003,"children":1004},"style",{},[1005],{"type":567,"value":1006},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":555,"searchDepth":830,"depth":830,"links":1008},[1009,1010],{"id":691,"depth":601,"text":691},{"id":719,"depth":601,"text":719,"children":1011},[1012],{"id":725,"depth":790,"text":725},"markdown","content:1.algorithm:3.leetcode:3.major:136.single-number.md","content","1.algorithm/3.leetcode/3.major/136.single-number.md","md",[1019,1021],{"_path":168,"title":167,"description":1020},"给你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。\n每条从根节点到叶节点的路径都代表一个数字：",{"_path":174,"title":173,"description":1022},"给你一个链表的头节点 head ，判断链表中是否有环。",1715137599952]