[{"data":1,"prerenderedAt":1529},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/path-sum":559,"/algorithm/leetcode/major/path-sum-surround":1524},[4,272,318,536,544],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":317},"八股文","/endorsement",[276,286,293,304],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"JavaScript","/endorsement/javascript",[290],{"title":291,"_path":292},"语法和数据类型","/endorsement/javascript/grammar-data-types",{"title":294,"_path":295,"children":296},"构建工具","/endorsement/build-tools",[297],{"title":298,"_path":299,"children":300},"Webpack","/endorsement/build-tools/webpack",[301],{"title":302,"_path":303},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":305,"_path":306,"children":307},"Html","/endorsement/html",[308,311,314],{"title":309,"_path":310},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":312,"_path":313},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":315,"_path":316},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":319,"_path":320,"children":321,"icon":535},"代码考核","/code-assessment",[322,427,528],{"title":323,"_path":324,"children":325},"源码实现","/code-assessment/source",[326,360,376,404,411,418,421,424],{"title":327,"_path":328,"children":329},"原生 api","/code-assessment/source/native-api",[330,333,336,339,342,345,348,351,354,357],{"title":331,"_path":332},"polyfill","/code-assessment/source/native-api/polyfill",{"title":334,"_path":335},"ajax","/code-assessment/source/native-api/ajax",{"title":337,"_path":338},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":340,"_path":341},"new 操作符","/code-assessment/source/native-api/new",{"title":343,"_path":344},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":346,"_path":347},"定时器","/code-assessment/source/native-api/timer",{"title":349,"_path":350},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":352,"_path":353},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":355,"_path":356},"extends","/code-assessment/source/native-api/extends",{"title":358,"_path":359},"Promise","/code-assessment/source/native-api/promise",{"title":361,"_path":362,"children":363},"函数 Function","/code-assessment/source/function",[364,367,370,373],{"title":365,"_path":366},"函数防抖","/code-assessment/source/function/debounce",{"title":368,"_path":369},"函数节流","/code-assessment/source/function/throttle",{"title":371,"_path":372},"函数柯理化","/code-assessment/source/function/curry",{"title":374,"_path":375},"函数睡眠","/code-assessment/source/function/sleep",{"title":377,"_path":378,"children":379},"数组 Array","/code-assessment/source/array",[380,383,386,389,392,395,398,401],{"title":381,"_path":382},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":384,"_path":385},"数组扁平化","/code-assessment/source/array/flat",{"title":387,"_path":388},"原型方法","/code-assessment/source/array/prototype-method",{"title":390,"_path":391},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":393,"_path":394},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":396,"_path":397},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":399,"_path":400},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":402,"_path":403},"二维数组","/code-assessment/source/array/2d-array",{"title":405,"_path":406,"children":407},"字符串 String","/code-assessment/source/string",[408],{"title":409,"_path":410},"repeat()","/code-assessment/source/string/repeat",{"title":412,"_path":413,"children":414},"集合 Set","/code-assessment/source/set",[415],{"title":416,"_path":417},"遍历集合","/code-assessment/source/set/traverse",{"title":419,"_path":420},"获取通用类型","/code-assessment/source/get-generic-type",{"title":422,"_path":423},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":425,"_path":426},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":428,"_path":429,"children":430},"业务场景","/code-assessment/scene",[431,461,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525],{"title":358,"_path":432,"children":433},"/code-assessment/scene/promise",[434,437,440,443,446,449,452,455,458],{"title":435,"_path":436},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":438,"_path":439},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":441,"_path":442},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":444,"_path":445},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":447,"_path":448},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":450,"_path":451},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":453,"_path":454},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":456,"_path":457},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":459,"_path":460},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":462,"_path":463,"children":464},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[465,468],{"title":466,"_path":467},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":469,"_path":470},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":472,"_path":473},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":475,"_path":476},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":478,"_path":479},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":481,"_path":482},"倒计时","/code-assessment/scene/countdown",{"title":484,"_path":485},"日期格式化","/code-assessment/scene/date-format",{"title":487,"_path":488},"实现前端路由","/code-assessment/scene/frontend-route",{"title":490,"_path":491},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":493,"_path":494},"lodash.get","/code-assessment/scene/lodash-get",{"title":496,"_path":497},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":499,"_path":500},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":502,"_path":503},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":505,"_path":506},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":508,"_path":509},"随机数","/code-assessment/scene/random-number",{"title":511,"_path":512},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":514,"_path":515},"sku 算法实现","/code-assessment/scene/sku",{"title":517,"_path":518},"整数分割","/code-assessment/scene/split-number",{"title":520,"_path":521},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":523,"_path":524},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":526,"_path":527},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":529,"_path":530,"children":531},"Ts 类型挑战","/code-assessment/type-challeges",[532],{"title":533,"_path":534},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":537,"_path":538,"children":539,"icon":543},"项目","/project",[540],{"title":541,"_path":542},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":545,"_path":546,"children":547,"icon":558},"后端语言","/backend-languages",[548],{"title":549,"_path":550,"children":551},"Python","/backend-languages/python",[552,555],{"title":553,"_path":554},"基础","/backend-languages/python/base",{"title":556,"_path":557},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":162,"_dir":560,"_draft":561,"_partial":561,"_locale":562,"title":161,"description":563,"url":564,"body":565,"_type":1519,"_id":1520,"_source":1521,"_file":1522,"_extension":1523},"major",false,"","给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。","https://leetcode.cn/problems/path-sum",{"type":566,"children":567,"toc":1513},"root",[568,575,580,585,594,633,638,646,704,709,739,744,764,770,775,782,1507],{"type":569,"tag":570,"props":571,"children":572},"element","p",{},[573],{"type":574,"value":563},"text",{"type":569,"tag":570,"props":576,"children":577},{},[578],{"type":574,"value":579},"叶子节点 是指没有子节点的节点。",{"type":569,"tag":570,"props":581,"children":582},{},[583],{"type":574,"value":584},"示例 1：",{"type":569,"tag":570,"props":586,"children":587},{},[588],{"type":569,"tag":589,"props":590,"children":593},"img",{"alt":591,"src":592},"pathsum1","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/code_leetcode_No.112_pathsum1.png",[],{"type":569,"tag":595,"props":596,"children":599},"pre",{"className":597,"code":598,"language":574,"meta":562,"style":562},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n输出：true\n解释：等于目标和的根节点到叶节点路径如上图所示。\n",[600],{"type":569,"tag":601,"props":602,"children":603},"code",{"__ignoreMap":562},[604,615,624],{"type":569,"tag":605,"props":606,"children":609},"span",{"class":607,"line":608},"line",1,[610],{"type":569,"tag":605,"props":611,"children":612},{},[613],{"type":574,"value":614},"输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n",{"type":569,"tag":605,"props":616,"children":618},{"class":607,"line":617},2,[619],{"type":569,"tag":605,"props":620,"children":621},{},[622],{"type":574,"value":623},"输出：true\n",{"type":569,"tag":605,"props":625,"children":627},{"class":607,"line":626},3,[628],{"type":569,"tag":605,"props":629,"children":630},{},[631],{"type":574,"value":632},"解释：等于目标和的根节点到叶节点路径如上图所示。\n",{"type":569,"tag":570,"props":634,"children":635},{},[636],{"type":574,"value":637},"示例 2：",{"type":569,"tag":570,"props":639,"children":640},{},[641],{"type":569,"tag":589,"props":642,"children":645},{"alt":643,"src":644},"pathsum2","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/code_leetcode_No.112_pathsum2.png",[],{"type":569,"tag":595,"props":647,"children":649},{"className":597,"code":648,"language":574,"meta":562,"style":562},"输入：root = [1,2,3], targetSum = 5\n输出：false\n解释：树中存在两条根节点到叶子节点的路径：\n(1 --> 2): 和为 3\n(1 --> 3): 和为 4\n不存在 sum = 5 的根节点到叶子节点的路径。\n",[650],{"type":569,"tag":601,"props":651,"children":652},{"__ignoreMap":562},[653,661,669,677,686,695],{"type":569,"tag":605,"props":654,"children":655},{"class":607,"line":608},[656],{"type":569,"tag":605,"props":657,"children":658},{},[659],{"type":574,"value":660},"输入：root = [1,2,3], targetSum = 5\n",{"type":569,"tag":605,"props":662,"children":663},{"class":607,"line":617},[664],{"type":569,"tag":605,"props":665,"children":666},{},[667],{"type":574,"value":668},"输出：false\n",{"type":569,"tag":605,"props":670,"children":671},{"class":607,"line":626},[672],{"type":569,"tag":605,"props":673,"children":674},{},[675],{"type":574,"value":676},"解释：树中存在两条根节点到叶子节点的路径：\n",{"type":569,"tag":605,"props":678,"children":680},{"class":607,"line":679},4,[681],{"type":569,"tag":605,"props":682,"children":683},{},[684],{"type":574,"value":685},"(1 --> 2): 和为 3\n",{"type":569,"tag":605,"props":687,"children":689},{"class":607,"line":688},5,[690],{"type":569,"tag":605,"props":691,"children":692},{},[693],{"type":574,"value":694},"(1 --> 3): 和为 4\n",{"type":569,"tag":605,"props":696,"children":698},{"class":607,"line":697},6,[699],{"type":569,"tag":605,"props":700,"children":701},{},[702],{"type":574,"value":703},"不存在 sum = 5 的根节点到叶子节点的路径。\n",{"type":569,"tag":570,"props":705,"children":706},{},[707],{"type":574,"value":708},"示例 3：",{"type":569,"tag":595,"props":710,"children":712},{"className":597,"code":711,"language":574,"meta":562,"style":562},"输入：root = [], targetSum = 0\n输出：false\n解释：由于树是空的，所以不存在根节点到叶子节点的路径。\n",[713],{"type":569,"tag":601,"props":714,"children":715},{"__ignoreMap":562},[716,724,731],{"type":569,"tag":605,"props":717,"children":718},{"class":607,"line":608},[719],{"type":569,"tag":605,"props":720,"children":721},{},[722],{"type":574,"value":723},"输入：root = [], targetSum = 0\n",{"type":569,"tag":605,"props":725,"children":726},{"class":607,"line":617},[727],{"type":569,"tag":605,"props":728,"children":729},{},[730],{"type":574,"value":668},{"type":569,"tag":605,"props":732,"children":733},{"class":607,"line":626},[734],{"type":569,"tag":605,"props":735,"children":736},{},[737],{"type":574,"value":738},"解释：由于树是空的，所以不存在根节点到叶子节点的路径。\n",{"type":569,"tag":570,"props":740,"children":741},{},[742],{"type":574,"value":743},"提示：",{"type":569,"tag":745,"props":746,"children":747},"ul",{},[748,754,759],{"type":569,"tag":749,"props":750,"children":751},"li",{},[752],{"type":574,"value":753},"树中节点的数目在范围 [0, 5000] 内",{"type":569,"tag":749,"props":755,"children":756},{},[757],{"type":574,"value":758},"-1000 \u003C= Node.val \u003C= 1000",{"type":569,"tag":749,"props":760,"children":761},{},[762],{"type":574,"value":763},"-1000 \u003C= targetSum \u003C= 1000",{"type":569,"tag":765,"props":766,"children":768},"h2",{"id":767},"解题思路",[769],{"type":574,"value":767},{"type":569,"tag":765,"props":771,"children":773},{"id":772},"实现",[774],{"type":574,"value":772},{"type":569,"tag":776,"props":777,"children":779},"h3",{"id":778},"深度优先搜索-dfs",[780],{"type":574,"value":781},"深度优先搜索 - dfs",{"type":569,"tag":595,"props":783,"children":787},{"className":784,"code":785,"language":786,"meta":562,"style":562},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * Definition for a binary tree node.\n */\nfunction TreeNode(val, left, right) {\n  this.val = val === undefined ? 0 : val;\n  this.left = left === undefined ? null : left;\n  this.right = right === undefined ? null : right;\n}\n\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {boolean}\n */\nvar hasPathSum = function (root, targetSum) {\n  if (root === null) return false;\n  if (root.left === null && root.right === null) return root.val === targetSum;\n  return (\n    hasPathSum(root.left, targetSum - root.val) ||\n    hasPathSum(root.right, targetSum - root.val)\n  );\n};\n","js",[788],{"type":569,"tag":601,"props":789,"children":790},{"__ignoreMap":562},[791,800,808,816,872,935,988,1041,1050,1060,1068,1109,1143,1173,1181,1230,1273,1363,1377,1436,1489,1498],{"type":569,"tag":605,"props":792,"children":793},{"class":607,"line":608},[794],{"type":569,"tag":605,"props":795,"children":797},{"style":796},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[798],{"type":574,"value":799},"/**\n",{"type":569,"tag":605,"props":801,"children":802},{"class":607,"line":617},[803],{"type":569,"tag":605,"props":804,"children":805},{"style":796},[806],{"type":574,"value":807}," * Definition for a binary tree node.\n",{"type":569,"tag":605,"props":809,"children":810},{"class":607,"line":626},[811],{"type":569,"tag":605,"props":812,"children":813},{"style":796},[814],{"type":574,"value":815}," */\n",{"type":569,"tag":605,"props":817,"children":818},{"class":607,"line":679},[819,825,831,837,843,848,853,857,862,867],{"type":569,"tag":605,"props":820,"children":822},{"style":821},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[823],{"type":574,"value":824},"function",{"type":569,"tag":605,"props":826,"children":828},{"style":827},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[829],{"type":574,"value":830}," TreeNode",{"type":569,"tag":605,"props":832,"children":834},{"style":833},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[835],{"type":574,"value":836},"(",{"type":569,"tag":605,"props":838,"children":840},{"style":839},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[841],{"type":574,"value":842},"val",{"type":569,"tag":605,"props":844,"children":845},{"style":833},[846],{"type":574,"value":847},",",{"type":569,"tag":605,"props":849,"children":850},{"style":839},[851],{"type":574,"value":852}," left",{"type":569,"tag":605,"props":854,"children":855},{"style":833},[856],{"type":574,"value":847},{"type":569,"tag":605,"props":858,"children":859},{"style":839},[860],{"type":574,"value":861}," right",{"type":569,"tag":605,"props":863,"children":864},{"style":833},[865],{"type":574,"value":866},")",{"type":569,"tag":605,"props":868,"children":869},{"style":833},[870],{"type":574,"value":871}," {\n",{"type":569,"tag":605,"props":873,"children":874},{"class":607,"line":688},[875,881,886,890,895,900,905,910,915,921,926,930],{"type":569,"tag":605,"props":876,"children":878},{"style":877},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[879],{"type":574,"value":880},"  this",{"type":569,"tag":605,"props":882,"children":883},{"style":833},[884],{"type":574,"value":885},".",{"type":569,"tag":605,"props":887,"children":888},{"style":839},[889],{"type":574,"value":842},{"type":569,"tag":605,"props":891,"children":892},{"style":833},[893],{"type":574,"value":894}," =",{"type":569,"tag":605,"props":896,"children":897},{"style":839},[898],{"type":574,"value":899}," val",{"type":569,"tag":605,"props":901,"children":902},{"style":821},[903],{"type":574,"value":904}," ===",{"type":569,"tag":605,"props":906,"children":907},{"style":821},[908],{"type":574,"value":909}," undefined",{"type":569,"tag":605,"props":911,"children":912},{"style":821},[913],{"type":574,"value":914}," ?",{"type":569,"tag":605,"props":916,"children":918},{"style":917},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[919],{"type":574,"value":920}," 0",{"type":569,"tag":605,"props":922,"children":923},{"style":821},[924],{"type":574,"value":925}," :",{"type":569,"tag":605,"props":927,"children":928},{"style":839},[929],{"type":574,"value":899},{"type":569,"tag":605,"props":931,"children":932},{"style":833},[933],{"type":574,"value":934},";\n",{"type":569,"tag":605,"props":936,"children":937},{"class":607,"line":697},[938,942,946,951,955,959,963,967,971,976,980,984],{"type":569,"tag":605,"props":939,"children":940},{"style":877},[941],{"type":574,"value":880},{"type":569,"tag":605,"props":943,"children":944},{"style":833},[945],{"type":574,"value":885},{"type":569,"tag":605,"props":947,"children":948},{"style":839},[949],{"type":574,"value":950},"left",{"type":569,"tag":605,"props":952,"children":953},{"style":833},[954],{"type":574,"value":894},{"type":569,"tag":605,"props":956,"children":957},{"style":839},[958],{"type":574,"value":852},{"type":569,"tag":605,"props":960,"children":961},{"style":821},[962],{"type":574,"value":904},{"type":569,"tag":605,"props":964,"children":965},{"style":821},[966],{"type":574,"value":909},{"type":569,"tag":605,"props":968,"children":969},{"style":821},[970],{"type":574,"value":914},{"type":569,"tag":605,"props":972,"children":973},{"style":821},[974],{"type":574,"value":975}," null",{"type":569,"tag":605,"props":977,"children":978},{"style":821},[979],{"type":574,"value":925},{"type":569,"tag":605,"props":981,"children":982},{"style":839},[983],{"type":574,"value":852},{"type":569,"tag":605,"props":985,"children":986},{"style":833},[987],{"type":574,"value":934},{"type":569,"tag":605,"props":989,"children":991},{"class":607,"line":990},7,[992,996,1000,1005,1009,1013,1017,1021,1025,1029,1033,1037],{"type":569,"tag":605,"props":993,"children":994},{"style":877},[995],{"type":574,"value":880},{"type":569,"tag":605,"props":997,"children":998},{"style":833},[999],{"type":574,"value":885},{"type":569,"tag":605,"props":1001,"children":1002},{"style":839},[1003],{"type":574,"value":1004},"right",{"type":569,"tag":605,"props":1006,"children":1007},{"style":833},[1008],{"type":574,"value":894},{"type":569,"tag":605,"props":1010,"children":1011},{"style":839},[1012],{"type":574,"value":861},{"type":569,"tag":605,"props":1014,"children":1015},{"style":821},[1016],{"type":574,"value":904},{"type":569,"tag":605,"props":1018,"children":1019},{"style":821},[1020],{"type":574,"value":909},{"type":569,"tag":605,"props":1022,"children":1023},{"style":821},[1024],{"type":574,"value":914},{"type":569,"tag":605,"props":1026,"children":1027},{"style":821},[1028],{"type":574,"value":975},{"type":569,"tag":605,"props":1030,"children":1031},{"style":821},[1032],{"type":574,"value":925},{"type":569,"tag":605,"props":1034,"children":1035},{"style":839},[1036],{"type":574,"value":861},{"type":569,"tag":605,"props":1038,"children":1039},{"style":833},[1040],{"type":574,"value":934},{"type":569,"tag":605,"props":1042,"children":1044},{"class":607,"line":1043},8,[1045],{"type":569,"tag":605,"props":1046,"children":1047},{"style":833},[1048],{"type":574,"value":1049},"}\n",{"type":569,"tag":605,"props":1051,"children":1053},{"class":607,"line":1052},9,[1054],{"type":569,"tag":605,"props":1055,"children":1057},{"emptyLinePlaceholder":1056},true,[1058],{"type":574,"value":1059},"\n",{"type":569,"tag":605,"props":1061,"children":1063},{"class":607,"line":1062},10,[1064],{"type":569,"tag":605,"props":1065,"children":1066},{"style":796},[1067],{"type":574,"value":799},{"type":569,"tag":605,"props":1069,"children":1071},{"class":607,"line":1070},11,[1072,1077,1082,1088,1093,1099,1104],{"type":569,"tag":605,"props":1073,"children":1074},{"style":796},[1075],{"type":574,"value":1076}," * ",{"type":569,"tag":605,"props":1078,"children":1079},{"style":833},[1080],{"type":574,"value":1081},"@",{"type":569,"tag":605,"props":1083,"children":1085},{"style":1084},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1086],{"type":574,"value":1087},"param",{"type":569,"tag":605,"props":1089,"children":1090},{"style":833},[1091],{"type":574,"value":1092}," {",{"type":569,"tag":605,"props":1094,"children":1096},{"style":1095},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[1097],{"type":574,"value":1098},"TreeNode",{"type":569,"tag":605,"props":1100,"children":1101},{"style":833},[1102],{"type":574,"value":1103},"}",{"type":569,"tag":605,"props":1105,"children":1106},{"style":839},[1107],{"type":574,"value":1108}," root\n",{"type":569,"tag":605,"props":1110,"children":1112},{"class":607,"line":1111},12,[1113,1117,1121,1125,1129,1134,1138],{"type":569,"tag":605,"props":1114,"children":1115},{"style":796},[1116],{"type":574,"value":1076},{"type":569,"tag":605,"props":1118,"children":1119},{"style":833},[1120],{"type":574,"value":1081},{"type":569,"tag":605,"props":1122,"children":1123},{"style":1084},[1124],{"type":574,"value":1087},{"type":569,"tag":605,"props":1126,"children":1127},{"style":833},[1128],{"type":574,"value":1092},{"type":569,"tag":605,"props":1130,"children":1131},{"style":1095},[1132],{"type":574,"value":1133},"number",{"type":569,"tag":605,"props":1135,"children":1136},{"style":833},[1137],{"type":574,"value":1103},{"type":569,"tag":605,"props":1139,"children":1140},{"style":839},[1141],{"type":574,"value":1142}," targetSum\n",{"type":569,"tag":605,"props":1144,"children":1146},{"class":607,"line":1145},13,[1147,1151,1155,1160,1164,1169],{"type":569,"tag":605,"props":1148,"children":1149},{"style":796},[1150],{"type":574,"value":1076},{"type":569,"tag":605,"props":1152,"children":1153},{"style":833},[1154],{"type":574,"value":1081},{"type":569,"tag":605,"props":1156,"children":1157},{"style":1084},[1158],{"type":574,"value":1159},"return",{"type":569,"tag":605,"props":1161,"children":1162},{"style":833},[1163],{"type":574,"value":1092},{"type":569,"tag":605,"props":1165,"children":1166},{"style":1095},[1167],{"type":574,"value":1168},"boolean",{"type":569,"tag":605,"props":1170,"children":1171},{"style":833},[1172],{"type":574,"value":1049},{"type":569,"tag":605,"props":1174,"children":1176},{"class":607,"line":1175},14,[1177],{"type":569,"tag":605,"props":1178,"children":1179},{"style":796},[1180],{"type":574,"value":815},{"type":569,"tag":605,"props":1182,"children":1184},{"class":607,"line":1183},15,[1185,1190,1195,1199,1204,1209,1213,1217,1222,1226],{"type":569,"tag":605,"props":1186,"children":1187},{"style":821},[1188],{"type":574,"value":1189},"var",{"type":569,"tag":605,"props":1191,"children":1192},{"style":827},[1193],{"type":574,"value":1194}," hasPathSum",{"type":569,"tag":605,"props":1196,"children":1197},{"style":833},[1198],{"type":574,"value":894},{"type":569,"tag":605,"props":1200,"children":1201},{"style":821},[1202],{"type":574,"value":1203}," function",{"type":569,"tag":605,"props":1205,"children":1206},{"style":833},[1207],{"type":574,"value":1208}," (",{"type":569,"tag":605,"props":1210,"children":1211},{"style":839},[1212],{"type":574,"value":566},{"type":569,"tag":605,"props":1214,"children":1215},{"style":833},[1216],{"type":574,"value":847},{"type":569,"tag":605,"props":1218,"children":1219},{"style":839},[1220],{"type":574,"value":1221}," targetSum",{"type":569,"tag":605,"props":1223,"children":1224},{"style":833},[1225],{"type":574,"value":866},{"type":569,"tag":605,"props":1227,"children":1228},{"style":833},[1229],{"type":574,"value":871},{"type":569,"tag":605,"props":1231,"children":1233},{"class":607,"line":1232},16,[1234,1239,1243,1247,1251,1255,1259,1264,1269],{"type":569,"tag":605,"props":1235,"children":1236},{"style":1084},[1237],{"type":574,"value":1238},"  if",{"type":569,"tag":605,"props":1240,"children":1241},{"style":833},[1242],{"type":574,"value":1208},{"type":569,"tag":605,"props":1244,"children":1245},{"style":839},[1246],{"type":574,"value":566},{"type":569,"tag":605,"props":1248,"children":1249},{"style":821},[1250],{"type":574,"value":904},{"type":569,"tag":605,"props":1252,"children":1253},{"style":821},[1254],{"type":574,"value":975},{"type":569,"tag":605,"props":1256,"children":1257},{"style":833},[1258],{"type":574,"value":866},{"type":569,"tag":605,"props":1260,"children":1261},{"style":1084},[1262],{"type":574,"value":1263}," return",{"type":569,"tag":605,"props":1265,"children":1266},{"style":1084},[1267],{"type":574,"value":1268}," false",{"type":569,"tag":605,"props":1270,"children":1271},{"style":833},[1272],{"type":574,"value":934},{"type":569,"tag":605,"props":1274,"children":1276},{"class":607,"line":1275},17,[1277,1281,1285,1289,1293,1297,1301,1305,1310,1315,1319,1323,1327,1331,1335,1339,1343,1347,1351,1355,1359],{"type":569,"tag":605,"props":1278,"children":1279},{"style":1084},[1280],{"type":574,"value":1238},{"type":569,"tag":605,"props":1282,"children":1283},{"style":833},[1284],{"type":574,"value":1208},{"type":569,"tag":605,"props":1286,"children":1287},{"style":839},[1288],{"type":574,"value":566},{"type":569,"tag":605,"props":1290,"children":1291},{"style":833},[1292],{"type":574,"value":885},{"type":569,"tag":605,"props":1294,"children":1295},{"style":839},[1296],{"type":574,"value":950},{"type":569,"tag":605,"props":1298,"children":1299},{"style":821},[1300],{"type":574,"value":904},{"type":569,"tag":605,"props":1302,"children":1303},{"style":821},[1304],{"type":574,"value":975},{"type":569,"tag":605,"props":1306,"children":1307},{"style":821},[1308],{"type":574,"value":1309}," &&",{"type":569,"tag":605,"props":1311,"children":1312},{"style":839},[1313],{"type":574,"value":1314}," root",{"type":569,"tag":605,"props":1316,"children":1317},{"style":833},[1318],{"type":574,"value":885},{"type":569,"tag":605,"props":1320,"children":1321},{"style":839},[1322],{"type":574,"value":1004},{"type":569,"tag":605,"props":1324,"children":1325},{"style":821},[1326],{"type":574,"value":904},{"type":569,"tag":605,"props":1328,"children":1329},{"style":821},[1330],{"type":574,"value":975},{"type":569,"tag":605,"props":1332,"children":1333},{"style":833},[1334],{"type":574,"value":866},{"type":569,"tag":605,"props":1336,"children":1337},{"style":1084},[1338],{"type":574,"value":1263},{"type":569,"tag":605,"props":1340,"children":1341},{"style":839},[1342],{"type":574,"value":1314},{"type":569,"tag":605,"props":1344,"children":1345},{"style":833},[1346],{"type":574,"value":885},{"type":569,"tag":605,"props":1348,"children":1349},{"style":839},[1350],{"type":574,"value":842},{"type":569,"tag":605,"props":1352,"children":1353},{"style":821},[1354],{"type":574,"value":904},{"type":569,"tag":605,"props":1356,"children":1357},{"style":839},[1358],{"type":574,"value":1221},{"type":569,"tag":605,"props":1360,"children":1361},{"style":833},[1362],{"type":574,"value":934},{"type":569,"tag":605,"props":1364,"children":1366},{"class":607,"line":1365},18,[1367,1372],{"type":569,"tag":605,"props":1368,"children":1369},{"style":1084},[1370],{"type":574,"value":1371},"  return",{"type":569,"tag":605,"props":1373,"children":1374},{"style":833},[1375],{"type":574,"value":1376}," (\n",{"type":569,"tag":605,"props":1378,"children":1380},{"class":607,"line":1379},19,[1381,1386,1390,1394,1398,1402,1406,1410,1415,1419,1423,1427,1431],{"type":569,"tag":605,"props":1382,"children":1383},{"style":827},[1384],{"type":574,"value":1385},"    hasPathSum",{"type":569,"tag":605,"props":1387,"children":1388},{"style":833},[1389],{"type":574,"value":836},{"type":569,"tag":605,"props":1391,"children":1392},{"style":839},[1393],{"type":574,"value":566},{"type":569,"tag":605,"props":1395,"children":1396},{"style":833},[1397],{"type":574,"value":885},{"type":569,"tag":605,"props":1399,"children":1400},{"style":839},[1401],{"type":574,"value":950},{"type":569,"tag":605,"props":1403,"children":1404},{"style":833},[1405],{"type":574,"value":847},{"type":569,"tag":605,"props":1407,"children":1408},{"style":839},[1409],{"type":574,"value":1221},{"type":569,"tag":605,"props":1411,"children":1412},{"style":821},[1413],{"type":574,"value":1414}," -",{"type":569,"tag":605,"props":1416,"children":1417},{"style":839},[1418],{"type":574,"value":1314},{"type":569,"tag":605,"props":1420,"children":1421},{"style":833},[1422],{"type":574,"value":885},{"type":569,"tag":605,"props":1424,"children":1425},{"style":839},[1426],{"type":574,"value":842},{"type":569,"tag":605,"props":1428,"children":1429},{"style":833},[1430],{"type":574,"value":866},{"type":569,"tag":605,"props":1432,"children":1433},{"style":821},[1434],{"type":574,"value":1435}," ||\n",{"type":569,"tag":605,"props":1437,"children":1439},{"class":607,"line":1438},20,[1440,1444,1448,1452,1456,1460,1464,1468,1472,1476,1480,1484],{"type":569,"tag":605,"props":1441,"children":1442},{"style":827},[1443],{"type":574,"value":1385},{"type":569,"tag":605,"props":1445,"children":1446},{"style":833},[1447],{"type":574,"value":836},{"type":569,"tag":605,"props":1449,"children":1450},{"style":839},[1451],{"type":574,"value":566},{"type":569,"tag":605,"props":1453,"children":1454},{"style":833},[1455],{"type":574,"value":885},{"type":569,"tag":605,"props":1457,"children":1458},{"style":839},[1459],{"type":574,"value":1004},{"type":569,"tag":605,"props":1461,"children":1462},{"style":833},[1463],{"type":574,"value":847},{"type":569,"tag":605,"props":1465,"children":1466},{"style":839},[1467],{"type":574,"value":1221},{"type":569,"tag":605,"props":1469,"children":1470},{"style":821},[1471],{"type":574,"value":1414},{"type":569,"tag":605,"props":1473,"children":1474},{"style":839},[1475],{"type":574,"value":1314},{"type":569,"tag":605,"props":1477,"children":1478},{"style":833},[1479],{"type":574,"value":885},{"type":569,"tag":605,"props":1481,"children":1482},{"style":839},[1483],{"type":574,"value":842},{"type":569,"tag":605,"props":1485,"children":1486},{"style":833},[1487],{"type":574,"value":1488},")\n",{"type":569,"tag":605,"props":1490,"children":1492},{"class":607,"line":1491},21,[1493],{"type":569,"tag":605,"props":1494,"children":1495},{"style":833},[1496],{"type":574,"value":1497},"  );\n",{"type":569,"tag":605,"props":1499,"children":1501},{"class":607,"line":1500},22,[1502],{"type":569,"tag":605,"props":1503,"children":1504},{"style":833},[1505],{"type":574,"value":1506},"};\n",{"type":569,"tag":1508,"props":1509,"children":1510},"style",{},[1511],{"type":574,"value":1512},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":562,"searchDepth":688,"depth":688,"links":1514},[1515,1516],{"id":767,"depth":617,"text":767},{"id":772,"depth":617,"text":772,"children":1517},[1518],{"id":778,"depth":626,"text":781},"markdown","content:1.algorithm:3.leetcode:3.major:112.path-sum.md","content","1.algorithm/3.leetcode/3.major/112.path-sum.md","md",[1525,1527],{"_path":159,"title":158,"description":1526},"给定一个二叉树，找出其最小深度。",{"_path":165,"title":164,"description":1528},"给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。",1717731139098]