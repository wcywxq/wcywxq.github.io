[{"data":1,"prerenderedAt":1522},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/path-sum":552,"/algorithm/leetcode/major/path-sum-surround":1517},[4,272,311,529,537],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":310},"八股文","/endorsement",[276,286,297],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"构建工具","/endorsement/build-tools",[290],{"title":291,"_path":292,"children":293},"Webpack","/endorsement/build-tools/webpack",[294],{"title":295,"_path":296},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":298,"_path":299,"children":300},"Html","/endorsement/html",[301,304,307],{"title":302,"_path":303},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":305,"_path":306},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":308,"_path":309},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":312,"_path":313,"children":314,"icon":528},"代码考核","/code-assessment",[315,420,521],{"title":316,"_path":317,"children":318},"源码实现","/code-assessment/source",[319,353,369,397,404,411,414,417],{"title":320,"_path":321,"children":322},"原生 api","/code-assessment/source/native-api",[323,326,329,332,335,338,341,344,347,350],{"title":324,"_path":325},"polyfill","/code-assessment/source/native-api/polyfill",{"title":327,"_path":328},"ajax","/code-assessment/source/native-api/ajax",{"title":330,"_path":331},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":333,"_path":334},"new 操作符","/code-assessment/source/native-api/new",{"title":336,"_path":337},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":339,"_path":340},"定时器","/code-assessment/source/native-api/timer",{"title":342,"_path":343},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":345,"_path":346},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":348,"_path":349},"extends","/code-assessment/source/native-api/extends",{"title":351,"_path":352},"Promise","/code-assessment/source/native-api/promise",{"title":354,"_path":355,"children":356},"函数 Function","/code-assessment/source/function",[357,360,363,366],{"title":358,"_path":359},"函数防抖","/code-assessment/source/function/debounce",{"title":361,"_path":362},"函数节流","/code-assessment/source/function/throttle",{"title":364,"_path":365},"函数柯理化","/code-assessment/source/function/curry",{"title":367,"_path":368},"函数睡眠","/code-assessment/source/function/sleep",{"title":370,"_path":371,"children":372},"数组 Array","/code-assessment/source/array",[373,376,379,382,385,388,391,394],{"title":374,"_path":375},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":377,"_path":378},"数组扁平化","/code-assessment/source/array/flat",{"title":380,"_path":381},"原型方法","/code-assessment/source/array/prototype-method",{"title":383,"_path":384},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":386,"_path":387},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":389,"_path":390},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":392,"_path":393},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":395,"_path":396},"二维数组","/code-assessment/source/array/2d-array",{"title":398,"_path":399,"children":400},"字符串 String","/code-assessment/source/string",[401],{"title":402,"_path":403},"repeat()","/code-assessment/source/string/repeat",{"title":405,"_path":406,"children":407},"集合 Set","/code-assessment/source/set",[408],{"title":409,"_path":410},"遍历集合","/code-assessment/source/set/traverse",{"title":412,"_path":413},"获取通用类型","/code-assessment/source/get-generic-type",{"title":415,"_path":416},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":418,"_path":419},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":421,"_path":422,"children":423},"业务场景","/code-assessment/scene",[424,454,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518],{"title":351,"_path":425,"children":426},"/code-assessment/scene/promise",[427,430,433,436,439,442,445,448,451],{"title":428,"_path":429},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":431,"_path":432},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":434,"_path":435},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":437,"_path":438},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":440,"_path":441},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":443,"_path":444},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":446,"_path":447},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":449,"_path":450},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":452,"_path":453},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":455,"_path":456,"children":457},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[458,461],{"title":459,"_path":460},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":462,"_path":463},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":465,"_path":466},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":468,"_path":469},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":471,"_path":472},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":474,"_path":475},"倒计时","/code-assessment/scene/countdown",{"title":477,"_path":478},"日期格式化","/code-assessment/scene/date-format",{"title":480,"_path":481},"实现前端路由","/code-assessment/scene/frontend-route",{"title":483,"_path":484},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":486,"_path":487},"lodash.get","/code-assessment/scene/lodash-get",{"title":489,"_path":490},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":492,"_path":493},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":495,"_path":496},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":498,"_path":499},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":501,"_path":502},"随机数","/code-assessment/scene/random-number",{"title":504,"_path":505},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":507,"_path":508},"sku 算法实现","/code-assessment/scene/sku",{"title":510,"_path":511},"整数分割","/code-assessment/scene/split-number",{"title":513,"_path":514},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":516,"_path":517},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":519,"_path":520},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":522,"_path":523,"children":524},"Ts 类型挑战","/code-assessment/type-challeges",[525],{"title":526,"_path":527},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":530,"_path":531,"children":532,"icon":536},"项目","/project",[533],{"title":534,"_path":535},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":538,"_path":539,"children":540,"icon":551},"后端语言","/backend-languages",[541],{"title":542,"_path":543,"children":544},"Python","/backend-languages/python",[545,548],{"title":546,"_path":547},"基础","/backend-languages/python/base",{"title":549,"_path":550},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":162,"_dir":553,"_draft":554,"_partial":554,"_locale":555,"title":161,"description":556,"url":557,"body":558,"_type":1512,"_id":1513,"_source":1514,"_file":1515,"_extension":1516},"major",false,"","给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。","https://leetcode.cn/problems/path-sum",{"type":559,"children":560,"toc":1506},"root",[561,568,573,578,587,626,631,639,697,702,732,737,757,763,768,775,1500],{"type":562,"tag":563,"props":564,"children":565},"element","p",{},[566],{"type":567,"value":556},"text",{"type":562,"tag":563,"props":569,"children":570},{},[571],{"type":567,"value":572},"叶子节点 是指没有子节点的节点。",{"type":562,"tag":563,"props":574,"children":575},{},[576],{"type":567,"value":577},"示例 1：",{"type":562,"tag":563,"props":579,"children":580},{},[581],{"type":562,"tag":582,"props":583,"children":586},"img",{"alt":584,"src":585},"pathsum1","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/code_leetcode_No.112_pathsum1.png",[],{"type":562,"tag":588,"props":589,"children":592},"pre",{"className":590,"code":591,"language":567,"meta":555,"style":555},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n输出：true\n解释：等于目标和的根节点到叶节点路径如上图所示。\n",[593],{"type":562,"tag":594,"props":595,"children":596},"code",{"__ignoreMap":555},[597,608,617],{"type":562,"tag":598,"props":599,"children":602},"span",{"class":600,"line":601},"line",1,[603],{"type":562,"tag":598,"props":604,"children":605},{},[606],{"type":567,"value":607},"输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n",{"type":562,"tag":598,"props":609,"children":611},{"class":600,"line":610},2,[612],{"type":562,"tag":598,"props":613,"children":614},{},[615],{"type":567,"value":616},"输出：true\n",{"type":562,"tag":598,"props":618,"children":620},{"class":600,"line":619},3,[621],{"type":562,"tag":598,"props":622,"children":623},{},[624],{"type":567,"value":625},"解释：等于目标和的根节点到叶节点路径如上图所示。\n",{"type":562,"tag":563,"props":627,"children":628},{},[629],{"type":567,"value":630},"示例 2：",{"type":562,"tag":563,"props":632,"children":633},{},[634],{"type":562,"tag":582,"props":635,"children":638},{"alt":636,"src":637},"pathsum2","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/code_leetcode_No.112_pathsum2.png",[],{"type":562,"tag":588,"props":640,"children":642},{"className":590,"code":641,"language":567,"meta":555,"style":555},"输入：root = [1,2,3], targetSum = 5\n输出：false\n解释：树中存在两条根节点到叶子节点的路径：\n(1 --> 2): 和为 3\n(1 --> 3): 和为 4\n不存在 sum = 5 的根节点到叶子节点的路径。\n",[643],{"type":562,"tag":594,"props":644,"children":645},{"__ignoreMap":555},[646,654,662,670,679,688],{"type":562,"tag":598,"props":647,"children":648},{"class":600,"line":601},[649],{"type":562,"tag":598,"props":650,"children":651},{},[652],{"type":567,"value":653},"输入：root = [1,2,3], targetSum = 5\n",{"type":562,"tag":598,"props":655,"children":656},{"class":600,"line":610},[657],{"type":562,"tag":598,"props":658,"children":659},{},[660],{"type":567,"value":661},"输出：false\n",{"type":562,"tag":598,"props":663,"children":664},{"class":600,"line":619},[665],{"type":562,"tag":598,"props":666,"children":667},{},[668],{"type":567,"value":669},"解释：树中存在两条根节点到叶子节点的路径：\n",{"type":562,"tag":598,"props":671,"children":673},{"class":600,"line":672},4,[674],{"type":562,"tag":598,"props":675,"children":676},{},[677],{"type":567,"value":678},"(1 --> 2): 和为 3\n",{"type":562,"tag":598,"props":680,"children":682},{"class":600,"line":681},5,[683],{"type":562,"tag":598,"props":684,"children":685},{},[686],{"type":567,"value":687},"(1 --> 3): 和为 4\n",{"type":562,"tag":598,"props":689,"children":691},{"class":600,"line":690},6,[692],{"type":562,"tag":598,"props":693,"children":694},{},[695],{"type":567,"value":696},"不存在 sum = 5 的根节点到叶子节点的路径。\n",{"type":562,"tag":563,"props":698,"children":699},{},[700],{"type":567,"value":701},"示例 3：",{"type":562,"tag":588,"props":703,"children":705},{"className":590,"code":704,"language":567,"meta":555,"style":555},"输入：root = [], targetSum = 0\n输出：false\n解释：由于树是空的，所以不存在根节点到叶子节点的路径。\n",[706],{"type":562,"tag":594,"props":707,"children":708},{"__ignoreMap":555},[709,717,724],{"type":562,"tag":598,"props":710,"children":711},{"class":600,"line":601},[712],{"type":562,"tag":598,"props":713,"children":714},{},[715],{"type":567,"value":716},"输入：root = [], targetSum = 0\n",{"type":562,"tag":598,"props":718,"children":719},{"class":600,"line":610},[720],{"type":562,"tag":598,"props":721,"children":722},{},[723],{"type":567,"value":661},{"type":562,"tag":598,"props":725,"children":726},{"class":600,"line":619},[727],{"type":562,"tag":598,"props":728,"children":729},{},[730],{"type":567,"value":731},"解释：由于树是空的，所以不存在根节点到叶子节点的路径。\n",{"type":562,"tag":563,"props":733,"children":734},{},[735],{"type":567,"value":736},"提示：",{"type":562,"tag":738,"props":739,"children":740},"ul",{},[741,747,752],{"type":562,"tag":742,"props":743,"children":744},"li",{},[745],{"type":567,"value":746},"树中节点的数目在范围 [0, 5000] 内",{"type":562,"tag":742,"props":748,"children":749},{},[750],{"type":567,"value":751},"-1000 \u003C= Node.val \u003C= 1000",{"type":562,"tag":742,"props":753,"children":754},{},[755],{"type":567,"value":756},"-1000 \u003C= targetSum \u003C= 1000",{"type":562,"tag":758,"props":759,"children":761},"h2",{"id":760},"解题思路",[762],{"type":567,"value":760},{"type":562,"tag":758,"props":764,"children":766},{"id":765},"实现",[767],{"type":567,"value":765},{"type":562,"tag":769,"props":770,"children":772},"h3",{"id":771},"深度优先搜索-dfs",[773],{"type":567,"value":774},"深度优先搜索 - dfs",{"type":562,"tag":588,"props":776,"children":780},{"className":777,"code":778,"language":779,"meta":555,"style":555},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * Definition for a binary tree node.\n */\nfunction TreeNode(val, left, right) {\n  this.val = val === undefined ? 0 : val;\n  this.left = left === undefined ? null : left;\n  this.right = right === undefined ? null : right;\n}\n\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {boolean}\n */\nvar hasPathSum = function (root, targetSum) {\n  if (root === null) return false;\n  if (root.left === null && root.right === null) return root.val === targetSum;\n  return (\n    hasPathSum(root.left, targetSum - root.val) ||\n    hasPathSum(root.right, targetSum - root.val)\n  );\n};\n","js",[781],{"type":562,"tag":594,"props":782,"children":783},{"__ignoreMap":555},[784,793,801,809,865,928,981,1034,1043,1053,1061,1102,1136,1166,1174,1223,1266,1356,1370,1429,1482,1491],{"type":562,"tag":598,"props":785,"children":786},{"class":600,"line":601},[787],{"type":562,"tag":598,"props":788,"children":790},{"style":789},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[791],{"type":567,"value":792},"/**\n",{"type":562,"tag":598,"props":794,"children":795},{"class":600,"line":610},[796],{"type":562,"tag":598,"props":797,"children":798},{"style":789},[799],{"type":567,"value":800}," * Definition for a binary tree node.\n",{"type":562,"tag":598,"props":802,"children":803},{"class":600,"line":619},[804],{"type":562,"tag":598,"props":805,"children":806},{"style":789},[807],{"type":567,"value":808}," */\n",{"type":562,"tag":598,"props":810,"children":811},{"class":600,"line":672},[812,818,824,830,836,841,846,850,855,860],{"type":562,"tag":598,"props":813,"children":815},{"style":814},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[816],{"type":567,"value":817},"function",{"type":562,"tag":598,"props":819,"children":821},{"style":820},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[822],{"type":567,"value":823}," TreeNode",{"type":562,"tag":598,"props":825,"children":827},{"style":826},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[828],{"type":567,"value":829},"(",{"type":562,"tag":598,"props":831,"children":833},{"style":832},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[834],{"type":567,"value":835},"val",{"type":562,"tag":598,"props":837,"children":838},{"style":826},[839],{"type":567,"value":840},",",{"type":562,"tag":598,"props":842,"children":843},{"style":832},[844],{"type":567,"value":845}," left",{"type":562,"tag":598,"props":847,"children":848},{"style":826},[849],{"type":567,"value":840},{"type":562,"tag":598,"props":851,"children":852},{"style":832},[853],{"type":567,"value":854}," right",{"type":562,"tag":598,"props":856,"children":857},{"style":826},[858],{"type":567,"value":859},")",{"type":562,"tag":598,"props":861,"children":862},{"style":826},[863],{"type":567,"value":864}," {\n",{"type":562,"tag":598,"props":866,"children":867},{"class":600,"line":681},[868,874,879,883,888,893,898,903,908,914,919,923],{"type":562,"tag":598,"props":869,"children":871},{"style":870},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[872],{"type":567,"value":873},"  this",{"type":562,"tag":598,"props":875,"children":876},{"style":826},[877],{"type":567,"value":878},".",{"type":562,"tag":598,"props":880,"children":881},{"style":832},[882],{"type":567,"value":835},{"type":562,"tag":598,"props":884,"children":885},{"style":826},[886],{"type":567,"value":887}," =",{"type":562,"tag":598,"props":889,"children":890},{"style":832},[891],{"type":567,"value":892}," val",{"type":562,"tag":598,"props":894,"children":895},{"style":814},[896],{"type":567,"value":897}," ===",{"type":562,"tag":598,"props":899,"children":900},{"style":814},[901],{"type":567,"value":902}," undefined",{"type":562,"tag":598,"props":904,"children":905},{"style":814},[906],{"type":567,"value":907}," ?",{"type":562,"tag":598,"props":909,"children":911},{"style":910},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[912],{"type":567,"value":913}," 0",{"type":562,"tag":598,"props":915,"children":916},{"style":814},[917],{"type":567,"value":918}," :",{"type":562,"tag":598,"props":920,"children":921},{"style":832},[922],{"type":567,"value":892},{"type":562,"tag":598,"props":924,"children":925},{"style":826},[926],{"type":567,"value":927},";\n",{"type":562,"tag":598,"props":929,"children":930},{"class":600,"line":690},[931,935,939,944,948,952,956,960,964,969,973,977],{"type":562,"tag":598,"props":932,"children":933},{"style":870},[934],{"type":567,"value":873},{"type":562,"tag":598,"props":936,"children":937},{"style":826},[938],{"type":567,"value":878},{"type":562,"tag":598,"props":940,"children":941},{"style":832},[942],{"type":567,"value":943},"left",{"type":562,"tag":598,"props":945,"children":946},{"style":826},[947],{"type":567,"value":887},{"type":562,"tag":598,"props":949,"children":950},{"style":832},[951],{"type":567,"value":845},{"type":562,"tag":598,"props":953,"children":954},{"style":814},[955],{"type":567,"value":897},{"type":562,"tag":598,"props":957,"children":958},{"style":814},[959],{"type":567,"value":902},{"type":562,"tag":598,"props":961,"children":962},{"style":814},[963],{"type":567,"value":907},{"type":562,"tag":598,"props":965,"children":966},{"style":814},[967],{"type":567,"value":968}," null",{"type":562,"tag":598,"props":970,"children":971},{"style":814},[972],{"type":567,"value":918},{"type":562,"tag":598,"props":974,"children":975},{"style":832},[976],{"type":567,"value":845},{"type":562,"tag":598,"props":978,"children":979},{"style":826},[980],{"type":567,"value":927},{"type":562,"tag":598,"props":982,"children":984},{"class":600,"line":983},7,[985,989,993,998,1002,1006,1010,1014,1018,1022,1026,1030],{"type":562,"tag":598,"props":986,"children":987},{"style":870},[988],{"type":567,"value":873},{"type":562,"tag":598,"props":990,"children":991},{"style":826},[992],{"type":567,"value":878},{"type":562,"tag":598,"props":994,"children":995},{"style":832},[996],{"type":567,"value":997},"right",{"type":562,"tag":598,"props":999,"children":1000},{"style":826},[1001],{"type":567,"value":887},{"type":562,"tag":598,"props":1003,"children":1004},{"style":832},[1005],{"type":567,"value":854},{"type":562,"tag":598,"props":1007,"children":1008},{"style":814},[1009],{"type":567,"value":897},{"type":562,"tag":598,"props":1011,"children":1012},{"style":814},[1013],{"type":567,"value":902},{"type":562,"tag":598,"props":1015,"children":1016},{"style":814},[1017],{"type":567,"value":907},{"type":562,"tag":598,"props":1019,"children":1020},{"style":814},[1021],{"type":567,"value":968},{"type":562,"tag":598,"props":1023,"children":1024},{"style":814},[1025],{"type":567,"value":918},{"type":562,"tag":598,"props":1027,"children":1028},{"style":832},[1029],{"type":567,"value":854},{"type":562,"tag":598,"props":1031,"children":1032},{"style":826},[1033],{"type":567,"value":927},{"type":562,"tag":598,"props":1035,"children":1037},{"class":600,"line":1036},8,[1038],{"type":562,"tag":598,"props":1039,"children":1040},{"style":826},[1041],{"type":567,"value":1042},"}\n",{"type":562,"tag":598,"props":1044,"children":1046},{"class":600,"line":1045},9,[1047],{"type":562,"tag":598,"props":1048,"children":1050},{"emptyLinePlaceholder":1049},true,[1051],{"type":567,"value":1052},"\n",{"type":562,"tag":598,"props":1054,"children":1056},{"class":600,"line":1055},10,[1057],{"type":562,"tag":598,"props":1058,"children":1059},{"style":789},[1060],{"type":567,"value":792},{"type":562,"tag":598,"props":1062,"children":1064},{"class":600,"line":1063},11,[1065,1070,1075,1081,1086,1092,1097],{"type":562,"tag":598,"props":1066,"children":1067},{"style":789},[1068],{"type":567,"value":1069}," * ",{"type":562,"tag":598,"props":1071,"children":1072},{"style":826},[1073],{"type":567,"value":1074},"@",{"type":562,"tag":598,"props":1076,"children":1078},{"style":1077},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1079],{"type":567,"value":1080},"param",{"type":562,"tag":598,"props":1082,"children":1083},{"style":826},[1084],{"type":567,"value":1085}," {",{"type":562,"tag":598,"props":1087,"children":1089},{"style":1088},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[1090],{"type":567,"value":1091},"TreeNode",{"type":562,"tag":598,"props":1093,"children":1094},{"style":826},[1095],{"type":567,"value":1096},"}",{"type":562,"tag":598,"props":1098,"children":1099},{"style":832},[1100],{"type":567,"value":1101}," root\n",{"type":562,"tag":598,"props":1103,"children":1105},{"class":600,"line":1104},12,[1106,1110,1114,1118,1122,1127,1131],{"type":562,"tag":598,"props":1107,"children":1108},{"style":789},[1109],{"type":567,"value":1069},{"type":562,"tag":598,"props":1111,"children":1112},{"style":826},[1113],{"type":567,"value":1074},{"type":562,"tag":598,"props":1115,"children":1116},{"style":1077},[1117],{"type":567,"value":1080},{"type":562,"tag":598,"props":1119,"children":1120},{"style":826},[1121],{"type":567,"value":1085},{"type":562,"tag":598,"props":1123,"children":1124},{"style":1088},[1125],{"type":567,"value":1126},"number",{"type":562,"tag":598,"props":1128,"children":1129},{"style":826},[1130],{"type":567,"value":1096},{"type":562,"tag":598,"props":1132,"children":1133},{"style":832},[1134],{"type":567,"value":1135}," targetSum\n",{"type":562,"tag":598,"props":1137,"children":1139},{"class":600,"line":1138},13,[1140,1144,1148,1153,1157,1162],{"type":562,"tag":598,"props":1141,"children":1142},{"style":789},[1143],{"type":567,"value":1069},{"type":562,"tag":598,"props":1145,"children":1146},{"style":826},[1147],{"type":567,"value":1074},{"type":562,"tag":598,"props":1149,"children":1150},{"style":1077},[1151],{"type":567,"value":1152},"return",{"type":562,"tag":598,"props":1154,"children":1155},{"style":826},[1156],{"type":567,"value":1085},{"type":562,"tag":598,"props":1158,"children":1159},{"style":1088},[1160],{"type":567,"value":1161},"boolean",{"type":562,"tag":598,"props":1163,"children":1164},{"style":826},[1165],{"type":567,"value":1042},{"type":562,"tag":598,"props":1167,"children":1169},{"class":600,"line":1168},14,[1170],{"type":562,"tag":598,"props":1171,"children":1172},{"style":789},[1173],{"type":567,"value":808},{"type":562,"tag":598,"props":1175,"children":1177},{"class":600,"line":1176},15,[1178,1183,1188,1192,1197,1202,1206,1210,1215,1219],{"type":562,"tag":598,"props":1179,"children":1180},{"style":814},[1181],{"type":567,"value":1182},"var",{"type":562,"tag":598,"props":1184,"children":1185},{"style":820},[1186],{"type":567,"value":1187}," hasPathSum",{"type":562,"tag":598,"props":1189,"children":1190},{"style":826},[1191],{"type":567,"value":887},{"type":562,"tag":598,"props":1193,"children":1194},{"style":814},[1195],{"type":567,"value":1196}," function",{"type":562,"tag":598,"props":1198,"children":1199},{"style":826},[1200],{"type":567,"value":1201}," (",{"type":562,"tag":598,"props":1203,"children":1204},{"style":832},[1205],{"type":567,"value":559},{"type":562,"tag":598,"props":1207,"children":1208},{"style":826},[1209],{"type":567,"value":840},{"type":562,"tag":598,"props":1211,"children":1212},{"style":832},[1213],{"type":567,"value":1214}," targetSum",{"type":562,"tag":598,"props":1216,"children":1217},{"style":826},[1218],{"type":567,"value":859},{"type":562,"tag":598,"props":1220,"children":1221},{"style":826},[1222],{"type":567,"value":864},{"type":562,"tag":598,"props":1224,"children":1226},{"class":600,"line":1225},16,[1227,1232,1236,1240,1244,1248,1252,1257,1262],{"type":562,"tag":598,"props":1228,"children":1229},{"style":1077},[1230],{"type":567,"value":1231},"  if",{"type":562,"tag":598,"props":1233,"children":1234},{"style":826},[1235],{"type":567,"value":1201},{"type":562,"tag":598,"props":1237,"children":1238},{"style":832},[1239],{"type":567,"value":559},{"type":562,"tag":598,"props":1241,"children":1242},{"style":814},[1243],{"type":567,"value":897},{"type":562,"tag":598,"props":1245,"children":1246},{"style":814},[1247],{"type":567,"value":968},{"type":562,"tag":598,"props":1249,"children":1250},{"style":826},[1251],{"type":567,"value":859},{"type":562,"tag":598,"props":1253,"children":1254},{"style":1077},[1255],{"type":567,"value":1256}," return",{"type":562,"tag":598,"props":1258,"children":1259},{"style":1077},[1260],{"type":567,"value":1261}," false",{"type":562,"tag":598,"props":1263,"children":1264},{"style":826},[1265],{"type":567,"value":927},{"type":562,"tag":598,"props":1267,"children":1269},{"class":600,"line":1268},17,[1270,1274,1278,1282,1286,1290,1294,1298,1303,1308,1312,1316,1320,1324,1328,1332,1336,1340,1344,1348,1352],{"type":562,"tag":598,"props":1271,"children":1272},{"style":1077},[1273],{"type":567,"value":1231},{"type":562,"tag":598,"props":1275,"children":1276},{"style":826},[1277],{"type":567,"value":1201},{"type":562,"tag":598,"props":1279,"children":1280},{"style":832},[1281],{"type":567,"value":559},{"type":562,"tag":598,"props":1283,"children":1284},{"style":826},[1285],{"type":567,"value":878},{"type":562,"tag":598,"props":1287,"children":1288},{"style":832},[1289],{"type":567,"value":943},{"type":562,"tag":598,"props":1291,"children":1292},{"style":814},[1293],{"type":567,"value":897},{"type":562,"tag":598,"props":1295,"children":1296},{"style":814},[1297],{"type":567,"value":968},{"type":562,"tag":598,"props":1299,"children":1300},{"style":814},[1301],{"type":567,"value":1302}," &&",{"type":562,"tag":598,"props":1304,"children":1305},{"style":832},[1306],{"type":567,"value":1307}," root",{"type":562,"tag":598,"props":1309,"children":1310},{"style":826},[1311],{"type":567,"value":878},{"type":562,"tag":598,"props":1313,"children":1314},{"style":832},[1315],{"type":567,"value":997},{"type":562,"tag":598,"props":1317,"children":1318},{"style":814},[1319],{"type":567,"value":897},{"type":562,"tag":598,"props":1321,"children":1322},{"style":814},[1323],{"type":567,"value":968},{"type":562,"tag":598,"props":1325,"children":1326},{"style":826},[1327],{"type":567,"value":859},{"type":562,"tag":598,"props":1329,"children":1330},{"style":1077},[1331],{"type":567,"value":1256},{"type":562,"tag":598,"props":1333,"children":1334},{"style":832},[1335],{"type":567,"value":1307},{"type":562,"tag":598,"props":1337,"children":1338},{"style":826},[1339],{"type":567,"value":878},{"type":562,"tag":598,"props":1341,"children":1342},{"style":832},[1343],{"type":567,"value":835},{"type":562,"tag":598,"props":1345,"children":1346},{"style":814},[1347],{"type":567,"value":897},{"type":562,"tag":598,"props":1349,"children":1350},{"style":832},[1351],{"type":567,"value":1214},{"type":562,"tag":598,"props":1353,"children":1354},{"style":826},[1355],{"type":567,"value":927},{"type":562,"tag":598,"props":1357,"children":1359},{"class":600,"line":1358},18,[1360,1365],{"type":562,"tag":598,"props":1361,"children":1362},{"style":1077},[1363],{"type":567,"value":1364},"  return",{"type":562,"tag":598,"props":1366,"children":1367},{"style":826},[1368],{"type":567,"value":1369}," (\n",{"type":562,"tag":598,"props":1371,"children":1373},{"class":600,"line":1372},19,[1374,1379,1383,1387,1391,1395,1399,1403,1408,1412,1416,1420,1424],{"type":562,"tag":598,"props":1375,"children":1376},{"style":820},[1377],{"type":567,"value":1378},"    hasPathSum",{"type":562,"tag":598,"props":1380,"children":1381},{"style":826},[1382],{"type":567,"value":829},{"type":562,"tag":598,"props":1384,"children":1385},{"style":832},[1386],{"type":567,"value":559},{"type":562,"tag":598,"props":1388,"children":1389},{"style":826},[1390],{"type":567,"value":878},{"type":562,"tag":598,"props":1392,"children":1393},{"style":832},[1394],{"type":567,"value":943},{"type":562,"tag":598,"props":1396,"children":1397},{"style":826},[1398],{"type":567,"value":840},{"type":562,"tag":598,"props":1400,"children":1401},{"style":832},[1402],{"type":567,"value":1214},{"type":562,"tag":598,"props":1404,"children":1405},{"style":814},[1406],{"type":567,"value":1407}," -",{"type":562,"tag":598,"props":1409,"children":1410},{"style":832},[1411],{"type":567,"value":1307},{"type":562,"tag":598,"props":1413,"children":1414},{"style":826},[1415],{"type":567,"value":878},{"type":562,"tag":598,"props":1417,"children":1418},{"style":832},[1419],{"type":567,"value":835},{"type":562,"tag":598,"props":1421,"children":1422},{"style":826},[1423],{"type":567,"value":859},{"type":562,"tag":598,"props":1425,"children":1426},{"style":814},[1427],{"type":567,"value":1428}," ||\n",{"type":562,"tag":598,"props":1430,"children":1432},{"class":600,"line":1431},20,[1433,1437,1441,1445,1449,1453,1457,1461,1465,1469,1473,1477],{"type":562,"tag":598,"props":1434,"children":1435},{"style":820},[1436],{"type":567,"value":1378},{"type":562,"tag":598,"props":1438,"children":1439},{"style":826},[1440],{"type":567,"value":829},{"type":562,"tag":598,"props":1442,"children":1443},{"style":832},[1444],{"type":567,"value":559},{"type":562,"tag":598,"props":1446,"children":1447},{"style":826},[1448],{"type":567,"value":878},{"type":562,"tag":598,"props":1450,"children":1451},{"style":832},[1452],{"type":567,"value":997},{"type":562,"tag":598,"props":1454,"children":1455},{"style":826},[1456],{"type":567,"value":840},{"type":562,"tag":598,"props":1458,"children":1459},{"style":832},[1460],{"type":567,"value":1214},{"type":562,"tag":598,"props":1462,"children":1463},{"style":814},[1464],{"type":567,"value":1407},{"type":562,"tag":598,"props":1466,"children":1467},{"style":832},[1468],{"type":567,"value":1307},{"type":562,"tag":598,"props":1470,"children":1471},{"style":826},[1472],{"type":567,"value":878},{"type":562,"tag":598,"props":1474,"children":1475},{"style":832},[1476],{"type":567,"value":835},{"type":562,"tag":598,"props":1478,"children":1479},{"style":826},[1480],{"type":567,"value":1481},")\n",{"type":562,"tag":598,"props":1483,"children":1485},{"class":600,"line":1484},21,[1486],{"type":562,"tag":598,"props":1487,"children":1488},{"style":826},[1489],{"type":567,"value":1490},"  );\n",{"type":562,"tag":598,"props":1492,"children":1494},{"class":600,"line":1493},22,[1495],{"type":562,"tag":598,"props":1496,"children":1497},{"style":826},[1498],{"type":567,"value":1499},"};\n",{"type":562,"tag":1501,"props":1502,"children":1503},"style",{},[1504],{"type":567,"value":1505},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":555,"searchDepth":681,"depth":681,"links":1507},[1508,1509],{"id":760,"depth":610,"text":760},{"id":765,"depth":610,"text":765,"children":1510},[1511],{"id":771,"depth":619,"text":774},"markdown","content:1.algorithm:3.leetcode:3.major:112.path-sum.md","content","1.algorithm/3.leetcode/3.major/112.path-sum.md","md",[1518,1520],{"_path":159,"title":158,"description":1519},"给定一个二叉树，找出其最小深度。",{"_path":165,"title":164,"description":1521},"给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。",1716810725321]