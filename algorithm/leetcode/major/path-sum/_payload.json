[{"data":1,"prerenderedAt":1521},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/path-sum":551,"/algorithm/leetcode/major/path-sum-surround":1516},[4,272,301,519,527,536],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":300},"八股文","/endorsement",[276,287],{"title":277,"_path":278,"children":279},"构建工具","/endorsement/build-tools",[280],{"title":281,"_path":282,"children":283},"Webpack","/endorsement/build-tools/webpack",[284],{"title":285,"_path":286},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":288,"_path":289,"children":290},"Html","/endorsement/html",[291,294,297],{"title":292,"_path":293},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":295,"_path":296},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":298,"_path":299},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":302,"_path":303,"children":304,"icon":518},"代码考核","/code-assessment",[305,410,511],{"title":306,"_path":307,"children":308},"源码实现","/code-assessment/source",[309,343,359,387,394,401,404,407],{"title":310,"_path":311,"children":312},"原生 api","/code-assessment/source/native-api",[313,316,319,322,325,328,331,334,337,340],{"title":314,"_path":315},"polyfill","/code-assessment/source/native-api/polyfill",{"title":317,"_path":318},"ajax","/code-assessment/source/native-api/ajax",{"title":320,"_path":321},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":323,"_path":324},"new 操作符","/code-assessment/source/native-api/new",{"title":326,"_path":327},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":329,"_path":330},"定时器","/code-assessment/source/native-api/timer",{"title":332,"_path":333},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":335,"_path":336},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":338,"_path":339},"extends","/code-assessment/source/native-api/extends",{"title":341,"_path":342},"Promise","/code-assessment/source/native-api/promise",{"title":344,"_path":345,"children":346},"函数 Function","/code-assessment/source/function",[347,350,353,356],{"title":348,"_path":349},"函数防抖","/code-assessment/source/function/debounce",{"title":351,"_path":352},"函数节流","/code-assessment/source/function/throttle",{"title":354,"_path":355},"函数柯理化","/code-assessment/source/function/curry",{"title":357,"_path":358},"函数睡眠","/code-assessment/source/function/sleep",{"title":360,"_path":361,"children":362},"数组 Array","/code-assessment/source/array",[363,366,369,372,375,378,381,384],{"title":364,"_path":365},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":367,"_path":368},"数组扁平化","/code-assessment/source/array/flat",{"title":370,"_path":371},"原型方法","/code-assessment/source/array/prototype-method",{"title":373,"_path":374},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":376,"_path":377},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":379,"_path":380},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":382,"_path":383},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":385,"_path":386},"二维数组","/code-assessment/source/array/2d-array",{"title":388,"_path":389,"children":390},"字符串 String","/code-assessment/source/string",[391],{"title":392,"_path":393},"repeat()","/code-assessment/source/string/repeat",{"title":395,"_path":396,"children":397},"集合 Set","/code-assessment/source/set",[398],{"title":399,"_path":400},"遍历集合","/code-assessment/source/set/traverse",{"title":402,"_path":403},"获取通用类型","/code-assessment/source/get-generic-type",{"title":405,"_path":406},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":408,"_path":409},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":411,"_path":412,"children":413},"业务场景","/code-assessment/scene",[414,444,454,457,460,463,466,469,472,475,478,481,484,487,490,493,496,499,502,505,508],{"title":341,"_path":415,"children":416},"/code-assessment/scene/promise",[417,420,423,426,429,432,435,438,441],{"title":418,"_path":419},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":421,"_path":422},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":424,"_path":425},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":427,"_path":428},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":430,"_path":431},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":433,"_path":434},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":436,"_path":437},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":439,"_path":440},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":442,"_path":443},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":445,"_path":446,"children":447},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[448,451],{"title":449,"_path":450},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":452,"_path":453},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":455,"_path":456},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":458,"_path":459},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":461,"_path":462},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":464,"_path":465},"倒计时","/code-assessment/scene/countdown",{"title":467,"_path":468},"日期格式化","/code-assessment/scene/date-format",{"title":470,"_path":471},"实现前端路由","/code-assessment/scene/frontend-route",{"title":473,"_path":474},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":476,"_path":477},"lodash.get","/code-assessment/scene/lodash-get",{"title":479,"_path":480},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":482,"_path":483},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":485,"_path":486},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":488,"_path":489},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":491,"_path":492},"随机数","/code-assessment/scene/random-number",{"title":494,"_path":495},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":497,"_path":498},"sku 算法实现","/code-assessment/scene/sku",{"title":500,"_path":501},"整数分割","/code-assessment/scene/split-number",{"title":503,"_path":504},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":506,"_path":507},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":509,"_path":510},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":512,"_path":513,"children":514},"Ts 类型挑战","/code-assessment/type-challeges",[515],{"title":516,"_path":517},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":520,"_path":521,"children":522,"icon":526},"项目","/project",[523],{"title":524,"_path":525},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":528,"_path":529,"children":530,"icon":535},"设计模式","/design-mode",[531,532],{"title":528,"_path":529},{"title":533,"_path":534},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":537,"_path":538,"children":539,"icon":550},"后端语言","/backend-languages",[540],{"title":541,"_path":542,"children":543},"Python","/backend-languages/python",[544,547],{"title":545,"_path":546},"基础","/backend-languages/python/base",{"title":548,"_path":549},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":162,"_dir":552,"_draft":553,"_partial":553,"_locale":554,"title":161,"description":555,"url":556,"body":557,"_type":1511,"_id":1512,"_source":1513,"_file":1514,"_extension":1515},"major",false,"","给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。","https://leetcode.cn/problems/path-sum",{"type":558,"children":559,"toc":1505},"root",[560,567,572,577,586,625,630,638,696,701,731,736,756,762,767,774,1499],{"type":561,"tag":562,"props":563,"children":564},"element","p",{},[565],{"type":566,"value":555},"text",{"type":561,"tag":562,"props":568,"children":569},{},[570],{"type":566,"value":571},"叶子节点 是指没有子节点的节点。",{"type":561,"tag":562,"props":573,"children":574},{},[575],{"type":566,"value":576},"示例 1：",{"type":561,"tag":562,"props":578,"children":579},{},[580],{"type":561,"tag":581,"props":582,"children":585},"img",{"alt":583,"src":584},"pathsum1","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/code_leetcode_No.112_pathsum1.png",[],{"type":561,"tag":587,"props":588,"children":591},"pre",{"className":589,"code":590,"language":566,"meta":554,"style":554},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n输出：true\n解释：等于目标和的根节点到叶节点路径如上图所示。\n",[592],{"type":561,"tag":593,"props":594,"children":595},"code",{"__ignoreMap":554},[596,607,616],{"type":561,"tag":597,"props":598,"children":601},"span",{"class":599,"line":600},"line",1,[602],{"type":561,"tag":597,"props":603,"children":604},{},[605],{"type":566,"value":606},"输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n",{"type":561,"tag":597,"props":608,"children":610},{"class":599,"line":609},2,[611],{"type":561,"tag":597,"props":612,"children":613},{},[614],{"type":566,"value":615},"输出：true\n",{"type":561,"tag":597,"props":617,"children":619},{"class":599,"line":618},3,[620],{"type":561,"tag":597,"props":621,"children":622},{},[623],{"type":566,"value":624},"解释：等于目标和的根节点到叶节点路径如上图所示。\n",{"type":561,"tag":562,"props":626,"children":627},{},[628],{"type":566,"value":629},"示例 2：",{"type":561,"tag":562,"props":631,"children":632},{},[633],{"type":561,"tag":581,"props":634,"children":637},{"alt":635,"src":636},"pathsum2","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/code_leetcode_No.112_pathsum2.png",[],{"type":561,"tag":587,"props":639,"children":641},{"className":589,"code":640,"language":566,"meta":554,"style":554},"输入：root = [1,2,3], targetSum = 5\n输出：false\n解释：树中存在两条根节点到叶子节点的路径：\n(1 --> 2): 和为 3\n(1 --> 3): 和为 4\n不存在 sum = 5 的根节点到叶子节点的路径。\n",[642],{"type":561,"tag":593,"props":643,"children":644},{"__ignoreMap":554},[645,653,661,669,678,687],{"type":561,"tag":597,"props":646,"children":647},{"class":599,"line":600},[648],{"type":561,"tag":597,"props":649,"children":650},{},[651],{"type":566,"value":652},"输入：root = [1,2,3], targetSum = 5\n",{"type":561,"tag":597,"props":654,"children":655},{"class":599,"line":609},[656],{"type":561,"tag":597,"props":657,"children":658},{},[659],{"type":566,"value":660},"输出：false\n",{"type":561,"tag":597,"props":662,"children":663},{"class":599,"line":618},[664],{"type":561,"tag":597,"props":665,"children":666},{},[667],{"type":566,"value":668},"解释：树中存在两条根节点到叶子节点的路径：\n",{"type":561,"tag":597,"props":670,"children":672},{"class":599,"line":671},4,[673],{"type":561,"tag":597,"props":674,"children":675},{},[676],{"type":566,"value":677},"(1 --> 2): 和为 3\n",{"type":561,"tag":597,"props":679,"children":681},{"class":599,"line":680},5,[682],{"type":561,"tag":597,"props":683,"children":684},{},[685],{"type":566,"value":686},"(1 --> 3): 和为 4\n",{"type":561,"tag":597,"props":688,"children":690},{"class":599,"line":689},6,[691],{"type":561,"tag":597,"props":692,"children":693},{},[694],{"type":566,"value":695},"不存在 sum = 5 的根节点到叶子节点的路径。\n",{"type":561,"tag":562,"props":697,"children":698},{},[699],{"type":566,"value":700},"示例 3：",{"type":561,"tag":587,"props":702,"children":704},{"className":589,"code":703,"language":566,"meta":554,"style":554},"输入：root = [], targetSum = 0\n输出：false\n解释：由于树是空的，所以不存在根节点到叶子节点的路径。\n",[705],{"type":561,"tag":593,"props":706,"children":707},{"__ignoreMap":554},[708,716,723],{"type":561,"tag":597,"props":709,"children":710},{"class":599,"line":600},[711],{"type":561,"tag":597,"props":712,"children":713},{},[714],{"type":566,"value":715},"输入：root = [], targetSum = 0\n",{"type":561,"tag":597,"props":717,"children":718},{"class":599,"line":609},[719],{"type":561,"tag":597,"props":720,"children":721},{},[722],{"type":566,"value":660},{"type":561,"tag":597,"props":724,"children":725},{"class":599,"line":618},[726],{"type":561,"tag":597,"props":727,"children":728},{},[729],{"type":566,"value":730},"解释：由于树是空的，所以不存在根节点到叶子节点的路径。\n",{"type":561,"tag":562,"props":732,"children":733},{},[734],{"type":566,"value":735},"提示：",{"type":561,"tag":737,"props":738,"children":739},"ul",{},[740,746,751],{"type":561,"tag":741,"props":742,"children":743},"li",{},[744],{"type":566,"value":745},"树中节点的数目在范围 [0, 5000] 内",{"type":561,"tag":741,"props":747,"children":748},{},[749],{"type":566,"value":750},"-1000 \u003C= Node.val \u003C= 1000",{"type":561,"tag":741,"props":752,"children":753},{},[754],{"type":566,"value":755},"-1000 \u003C= targetSum \u003C= 1000",{"type":561,"tag":757,"props":758,"children":760},"h2",{"id":759},"解题思路",[761],{"type":566,"value":759},{"type":561,"tag":757,"props":763,"children":765},{"id":764},"实现",[766],{"type":566,"value":764},{"type":561,"tag":768,"props":769,"children":771},"h3",{"id":770},"深度优先搜索-dfs",[772],{"type":566,"value":773},"深度优先搜索 - dfs",{"type":561,"tag":587,"props":775,"children":779},{"className":776,"code":777,"language":778,"meta":554,"style":554},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * Definition for a binary tree node.\n */\nfunction TreeNode(val, left, right) {\n  this.val = val === undefined ? 0 : val;\n  this.left = left === undefined ? null : left;\n  this.right = right === undefined ? null : right;\n}\n\n/**\n * @param {TreeNode} root\n * @param {number} targetSum\n * @return {boolean}\n */\nvar hasPathSum = function (root, targetSum) {\n  if (root === null) return false;\n  if (root.left === null && root.right === null) return root.val === targetSum;\n  return (\n    hasPathSum(root.left, targetSum - root.val) ||\n    hasPathSum(root.right, targetSum - root.val)\n  );\n};\n","js",[780],{"type":561,"tag":593,"props":781,"children":782},{"__ignoreMap":554},[783,792,800,808,864,927,980,1033,1042,1052,1060,1101,1135,1165,1173,1222,1265,1355,1369,1428,1481,1490],{"type":561,"tag":597,"props":784,"children":785},{"class":599,"line":600},[786],{"type":561,"tag":597,"props":787,"children":789},{"style":788},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[790],{"type":566,"value":791},"/**\n",{"type":561,"tag":597,"props":793,"children":794},{"class":599,"line":609},[795],{"type":561,"tag":597,"props":796,"children":797},{"style":788},[798],{"type":566,"value":799}," * Definition for a binary tree node.\n",{"type":561,"tag":597,"props":801,"children":802},{"class":599,"line":618},[803],{"type":561,"tag":597,"props":804,"children":805},{"style":788},[806],{"type":566,"value":807}," */\n",{"type":561,"tag":597,"props":809,"children":810},{"class":599,"line":671},[811,817,823,829,835,840,845,849,854,859],{"type":561,"tag":597,"props":812,"children":814},{"style":813},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[815],{"type":566,"value":816},"function",{"type":561,"tag":597,"props":818,"children":820},{"style":819},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[821],{"type":566,"value":822}," TreeNode",{"type":561,"tag":597,"props":824,"children":826},{"style":825},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[827],{"type":566,"value":828},"(",{"type":561,"tag":597,"props":830,"children":832},{"style":831},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[833],{"type":566,"value":834},"val",{"type":561,"tag":597,"props":836,"children":837},{"style":825},[838],{"type":566,"value":839},",",{"type":561,"tag":597,"props":841,"children":842},{"style":831},[843],{"type":566,"value":844}," left",{"type":561,"tag":597,"props":846,"children":847},{"style":825},[848],{"type":566,"value":839},{"type":561,"tag":597,"props":850,"children":851},{"style":831},[852],{"type":566,"value":853}," right",{"type":561,"tag":597,"props":855,"children":856},{"style":825},[857],{"type":566,"value":858},")",{"type":561,"tag":597,"props":860,"children":861},{"style":825},[862],{"type":566,"value":863}," {\n",{"type":561,"tag":597,"props":865,"children":866},{"class":599,"line":680},[867,873,878,882,887,892,897,902,907,913,918,922],{"type":561,"tag":597,"props":868,"children":870},{"style":869},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[871],{"type":566,"value":872},"  this",{"type":561,"tag":597,"props":874,"children":875},{"style":825},[876],{"type":566,"value":877},".",{"type":561,"tag":597,"props":879,"children":880},{"style":831},[881],{"type":566,"value":834},{"type":561,"tag":597,"props":883,"children":884},{"style":825},[885],{"type":566,"value":886}," =",{"type":561,"tag":597,"props":888,"children":889},{"style":831},[890],{"type":566,"value":891}," val",{"type":561,"tag":597,"props":893,"children":894},{"style":813},[895],{"type":566,"value":896}," ===",{"type":561,"tag":597,"props":898,"children":899},{"style":813},[900],{"type":566,"value":901}," undefined",{"type":561,"tag":597,"props":903,"children":904},{"style":813},[905],{"type":566,"value":906}," ?",{"type":561,"tag":597,"props":908,"children":910},{"style":909},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[911],{"type":566,"value":912}," 0",{"type":561,"tag":597,"props":914,"children":915},{"style":813},[916],{"type":566,"value":917}," :",{"type":561,"tag":597,"props":919,"children":920},{"style":831},[921],{"type":566,"value":891},{"type":561,"tag":597,"props":923,"children":924},{"style":825},[925],{"type":566,"value":926},";\n",{"type":561,"tag":597,"props":928,"children":929},{"class":599,"line":689},[930,934,938,943,947,951,955,959,963,968,972,976],{"type":561,"tag":597,"props":931,"children":932},{"style":869},[933],{"type":566,"value":872},{"type":561,"tag":597,"props":935,"children":936},{"style":825},[937],{"type":566,"value":877},{"type":561,"tag":597,"props":939,"children":940},{"style":831},[941],{"type":566,"value":942},"left",{"type":561,"tag":597,"props":944,"children":945},{"style":825},[946],{"type":566,"value":886},{"type":561,"tag":597,"props":948,"children":949},{"style":831},[950],{"type":566,"value":844},{"type":561,"tag":597,"props":952,"children":953},{"style":813},[954],{"type":566,"value":896},{"type":561,"tag":597,"props":956,"children":957},{"style":813},[958],{"type":566,"value":901},{"type":561,"tag":597,"props":960,"children":961},{"style":813},[962],{"type":566,"value":906},{"type":561,"tag":597,"props":964,"children":965},{"style":813},[966],{"type":566,"value":967}," null",{"type":561,"tag":597,"props":969,"children":970},{"style":813},[971],{"type":566,"value":917},{"type":561,"tag":597,"props":973,"children":974},{"style":831},[975],{"type":566,"value":844},{"type":561,"tag":597,"props":977,"children":978},{"style":825},[979],{"type":566,"value":926},{"type":561,"tag":597,"props":981,"children":983},{"class":599,"line":982},7,[984,988,992,997,1001,1005,1009,1013,1017,1021,1025,1029],{"type":561,"tag":597,"props":985,"children":986},{"style":869},[987],{"type":566,"value":872},{"type":561,"tag":597,"props":989,"children":990},{"style":825},[991],{"type":566,"value":877},{"type":561,"tag":597,"props":993,"children":994},{"style":831},[995],{"type":566,"value":996},"right",{"type":561,"tag":597,"props":998,"children":999},{"style":825},[1000],{"type":566,"value":886},{"type":561,"tag":597,"props":1002,"children":1003},{"style":831},[1004],{"type":566,"value":853},{"type":561,"tag":597,"props":1006,"children":1007},{"style":813},[1008],{"type":566,"value":896},{"type":561,"tag":597,"props":1010,"children":1011},{"style":813},[1012],{"type":566,"value":901},{"type":561,"tag":597,"props":1014,"children":1015},{"style":813},[1016],{"type":566,"value":906},{"type":561,"tag":597,"props":1018,"children":1019},{"style":813},[1020],{"type":566,"value":967},{"type":561,"tag":597,"props":1022,"children":1023},{"style":813},[1024],{"type":566,"value":917},{"type":561,"tag":597,"props":1026,"children":1027},{"style":831},[1028],{"type":566,"value":853},{"type":561,"tag":597,"props":1030,"children":1031},{"style":825},[1032],{"type":566,"value":926},{"type":561,"tag":597,"props":1034,"children":1036},{"class":599,"line":1035},8,[1037],{"type":561,"tag":597,"props":1038,"children":1039},{"style":825},[1040],{"type":566,"value":1041},"}\n",{"type":561,"tag":597,"props":1043,"children":1045},{"class":599,"line":1044},9,[1046],{"type":561,"tag":597,"props":1047,"children":1049},{"emptyLinePlaceholder":1048},true,[1050],{"type":566,"value":1051},"\n",{"type":561,"tag":597,"props":1053,"children":1055},{"class":599,"line":1054},10,[1056],{"type":561,"tag":597,"props":1057,"children":1058},{"style":788},[1059],{"type":566,"value":791},{"type":561,"tag":597,"props":1061,"children":1063},{"class":599,"line":1062},11,[1064,1069,1074,1080,1085,1091,1096],{"type":561,"tag":597,"props":1065,"children":1066},{"style":788},[1067],{"type":566,"value":1068}," * ",{"type":561,"tag":597,"props":1070,"children":1071},{"style":825},[1072],{"type":566,"value":1073},"@",{"type":561,"tag":597,"props":1075,"children":1077},{"style":1076},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1078],{"type":566,"value":1079},"param",{"type":561,"tag":597,"props":1081,"children":1082},{"style":825},[1083],{"type":566,"value":1084}," {",{"type":561,"tag":597,"props":1086,"children":1088},{"style":1087},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[1089],{"type":566,"value":1090},"TreeNode",{"type":561,"tag":597,"props":1092,"children":1093},{"style":825},[1094],{"type":566,"value":1095},"}",{"type":561,"tag":597,"props":1097,"children":1098},{"style":831},[1099],{"type":566,"value":1100}," root\n",{"type":561,"tag":597,"props":1102,"children":1104},{"class":599,"line":1103},12,[1105,1109,1113,1117,1121,1126,1130],{"type":561,"tag":597,"props":1106,"children":1107},{"style":788},[1108],{"type":566,"value":1068},{"type":561,"tag":597,"props":1110,"children":1111},{"style":825},[1112],{"type":566,"value":1073},{"type":561,"tag":597,"props":1114,"children":1115},{"style":1076},[1116],{"type":566,"value":1079},{"type":561,"tag":597,"props":1118,"children":1119},{"style":825},[1120],{"type":566,"value":1084},{"type":561,"tag":597,"props":1122,"children":1123},{"style":1087},[1124],{"type":566,"value":1125},"number",{"type":561,"tag":597,"props":1127,"children":1128},{"style":825},[1129],{"type":566,"value":1095},{"type":561,"tag":597,"props":1131,"children":1132},{"style":831},[1133],{"type":566,"value":1134}," targetSum\n",{"type":561,"tag":597,"props":1136,"children":1138},{"class":599,"line":1137},13,[1139,1143,1147,1152,1156,1161],{"type":561,"tag":597,"props":1140,"children":1141},{"style":788},[1142],{"type":566,"value":1068},{"type":561,"tag":597,"props":1144,"children":1145},{"style":825},[1146],{"type":566,"value":1073},{"type":561,"tag":597,"props":1148,"children":1149},{"style":1076},[1150],{"type":566,"value":1151},"return",{"type":561,"tag":597,"props":1153,"children":1154},{"style":825},[1155],{"type":566,"value":1084},{"type":561,"tag":597,"props":1157,"children":1158},{"style":1087},[1159],{"type":566,"value":1160},"boolean",{"type":561,"tag":597,"props":1162,"children":1163},{"style":825},[1164],{"type":566,"value":1041},{"type":561,"tag":597,"props":1166,"children":1168},{"class":599,"line":1167},14,[1169],{"type":561,"tag":597,"props":1170,"children":1171},{"style":788},[1172],{"type":566,"value":807},{"type":561,"tag":597,"props":1174,"children":1176},{"class":599,"line":1175},15,[1177,1182,1187,1191,1196,1201,1205,1209,1214,1218],{"type":561,"tag":597,"props":1178,"children":1179},{"style":813},[1180],{"type":566,"value":1181},"var",{"type":561,"tag":597,"props":1183,"children":1184},{"style":819},[1185],{"type":566,"value":1186}," hasPathSum",{"type":561,"tag":597,"props":1188,"children":1189},{"style":825},[1190],{"type":566,"value":886},{"type":561,"tag":597,"props":1192,"children":1193},{"style":813},[1194],{"type":566,"value":1195}," function",{"type":561,"tag":597,"props":1197,"children":1198},{"style":825},[1199],{"type":566,"value":1200}," (",{"type":561,"tag":597,"props":1202,"children":1203},{"style":831},[1204],{"type":566,"value":558},{"type":561,"tag":597,"props":1206,"children":1207},{"style":825},[1208],{"type":566,"value":839},{"type":561,"tag":597,"props":1210,"children":1211},{"style":831},[1212],{"type":566,"value":1213}," targetSum",{"type":561,"tag":597,"props":1215,"children":1216},{"style":825},[1217],{"type":566,"value":858},{"type":561,"tag":597,"props":1219,"children":1220},{"style":825},[1221],{"type":566,"value":863},{"type":561,"tag":597,"props":1223,"children":1225},{"class":599,"line":1224},16,[1226,1231,1235,1239,1243,1247,1251,1256,1261],{"type":561,"tag":597,"props":1227,"children":1228},{"style":1076},[1229],{"type":566,"value":1230},"  if",{"type":561,"tag":597,"props":1232,"children":1233},{"style":825},[1234],{"type":566,"value":1200},{"type":561,"tag":597,"props":1236,"children":1237},{"style":831},[1238],{"type":566,"value":558},{"type":561,"tag":597,"props":1240,"children":1241},{"style":813},[1242],{"type":566,"value":896},{"type":561,"tag":597,"props":1244,"children":1245},{"style":813},[1246],{"type":566,"value":967},{"type":561,"tag":597,"props":1248,"children":1249},{"style":825},[1250],{"type":566,"value":858},{"type":561,"tag":597,"props":1252,"children":1253},{"style":1076},[1254],{"type":566,"value":1255}," return",{"type":561,"tag":597,"props":1257,"children":1258},{"style":1076},[1259],{"type":566,"value":1260}," false",{"type":561,"tag":597,"props":1262,"children":1263},{"style":825},[1264],{"type":566,"value":926},{"type":561,"tag":597,"props":1266,"children":1268},{"class":599,"line":1267},17,[1269,1273,1277,1281,1285,1289,1293,1297,1302,1307,1311,1315,1319,1323,1327,1331,1335,1339,1343,1347,1351],{"type":561,"tag":597,"props":1270,"children":1271},{"style":1076},[1272],{"type":566,"value":1230},{"type":561,"tag":597,"props":1274,"children":1275},{"style":825},[1276],{"type":566,"value":1200},{"type":561,"tag":597,"props":1278,"children":1279},{"style":831},[1280],{"type":566,"value":558},{"type":561,"tag":597,"props":1282,"children":1283},{"style":825},[1284],{"type":566,"value":877},{"type":561,"tag":597,"props":1286,"children":1287},{"style":831},[1288],{"type":566,"value":942},{"type":561,"tag":597,"props":1290,"children":1291},{"style":813},[1292],{"type":566,"value":896},{"type":561,"tag":597,"props":1294,"children":1295},{"style":813},[1296],{"type":566,"value":967},{"type":561,"tag":597,"props":1298,"children":1299},{"style":813},[1300],{"type":566,"value":1301}," &&",{"type":561,"tag":597,"props":1303,"children":1304},{"style":831},[1305],{"type":566,"value":1306}," root",{"type":561,"tag":597,"props":1308,"children":1309},{"style":825},[1310],{"type":566,"value":877},{"type":561,"tag":597,"props":1312,"children":1313},{"style":831},[1314],{"type":566,"value":996},{"type":561,"tag":597,"props":1316,"children":1317},{"style":813},[1318],{"type":566,"value":896},{"type":561,"tag":597,"props":1320,"children":1321},{"style":813},[1322],{"type":566,"value":967},{"type":561,"tag":597,"props":1324,"children":1325},{"style":825},[1326],{"type":566,"value":858},{"type":561,"tag":597,"props":1328,"children":1329},{"style":1076},[1330],{"type":566,"value":1255},{"type":561,"tag":597,"props":1332,"children":1333},{"style":831},[1334],{"type":566,"value":1306},{"type":561,"tag":597,"props":1336,"children":1337},{"style":825},[1338],{"type":566,"value":877},{"type":561,"tag":597,"props":1340,"children":1341},{"style":831},[1342],{"type":566,"value":834},{"type":561,"tag":597,"props":1344,"children":1345},{"style":813},[1346],{"type":566,"value":896},{"type":561,"tag":597,"props":1348,"children":1349},{"style":831},[1350],{"type":566,"value":1213},{"type":561,"tag":597,"props":1352,"children":1353},{"style":825},[1354],{"type":566,"value":926},{"type":561,"tag":597,"props":1356,"children":1358},{"class":599,"line":1357},18,[1359,1364],{"type":561,"tag":597,"props":1360,"children":1361},{"style":1076},[1362],{"type":566,"value":1363},"  return",{"type":561,"tag":597,"props":1365,"children":1366},{"style":825},[1367],{"type":566,"value":1368}," (\n",{"type":561,"tag":597,"props":1370,"children":1372},{"class":599,"line":1371},19,[1373,1378,1382,1386,1390,1394,1398,1402,1407,1411,1415,1419,1423],{"type":561,"tag":597,"props":1374,"children":1375},{"style":819},[1376],{"type":566,"value":1377},"    hasPathSum",{"type":561,"tag":597,"props":1379,"children":1380},{"style":825},[1381],{"type":566,"value":828},{"type":561,"tag":597,"props":1383,"children":1384},{"style":831},[1385],{"type":566,"value":558},{"type":561,"tag":597,"props":1387,"children":1388},{"style":825},[1389],{"type":566,"value":877},{"type":561,"tag":597,"props":1391,"children":1392},{"style":831},[1393],{"type":566,"value":942},{"type":561,"tag":597,"props":1395,"children":1396},{"style":825},[1397],{"type":566,"value":839},{"type":561,"tag":597,"props":1399,"children":1400},{"style":831},[1401],{"type":566,"value":1213},{"type":561,"tag":597,"props":1403,"children":1404},{"style":813},[1405],{"type":566,"value":1406}," -",{"type":561,"tag":597,"props":1408,"children":1409},{"style":831},[1410],{"type":566,"value":1306},{"type":561,"tag":597,"props":1412,"children":1413},{"style":825},[1414],{"type":566,"value":877},{"type":561,"tag":597,"props":1416,"children":1417},{"style":831},[1418],{"type":566,"value":834},{"type":561,"tag":597,"props":1420,"children":1421},{"style":825},[1422],{"type":566,"value":858},{"type":561,"tag":597,"props":1424,"children":1425},{"style":813},[1426],{"type":566,"value":1427}," ||\n",{"type":561,"tag":597,"props":1429,"children":1431},{"class":599,"line":1430},20,[1432,1436,1440,1444,1448,1452,1456,1460,1464,1468,1472,1476],{"type":561,"tag":597,"props":1433,"children":1434},{"style":819},[1435],{"type":566,"value":1377},{"type":561,"tag":597,"props":1437,"children":1438},{"style":825},[1439],{"type":566,"value":828},{"type":561,"tag":597,"props":1441,"children":1442},{"style":831},[1443],{"type":566,"value":558},{"type":561,"tag":597,"props":1445,"children":1446},{"style":825},[1447],{"type":566,"value":877},{"type":561,"tag":597,"props":1449,"children":1450},{"style":831},[1451],{"type":566,"value":996},{"type":561,"tag":597,"props":1453,"children":1454},{"style":825},[1455],{"type":566,"value":839},{"type":561,"tag":597,"props":1457,"children":1458},{"style":831},[1459],{"type":566,"value":1213},{"type":561,"tag":597,"props":1461,"children":1462},{"style":813},[1463],{"type":566,"value":1406},{"type":561,"tag":597,"props":1465,"children":1466},{"style":831},[1467],{"type":566,"value":1306},{"type":561,"tag":597,"props":1469,"children":1470},{"style":825},[1471],{"type":566,"value":877},{"type":561,"tag":597,"props":1473,"children":1474},{"style":831},[1475],{"type":566,"value":834},{"type":561,"tag":597,"props":1477,"children":1478},{"style":825},[1479],{"type":566,"value":1480},")\n",{"type":561,"tag":597,"props":1482,"children":1484},{"class":599,"line":1483},21,[1485],{"type":561,"tag":597,"props":1486,"children":1487},{"style":825},[1488],{"type":566,"value":1489},"  );\n",{"type":561,"tag":597,"props":1491,"children":1493},{"class":599,"line":1492},22,[1494],{"type":561,"tag":597,"props":1495,"children":1496},{"style":825},[1497],{"type":566,"value":1498},"};\n",{"type":561,"tag":1500,"props":1501,"children":1502},"style",{},[1503],{"type":566,"value":1504},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":554,"searchDepth":680,"depth":680,"links":1506},[1507,1508],{"id":759,"depth":609,"text":759},{"id":764,"depth":609,"text":764,"children":1509},[1510],{"id":770,"depth":618,"text":773},"markdown","content:1.algorithm:3.leetcode:3.major:112.path-sum.md","content","1.algorithm/3.leetcode/3.major/112.path-sum.md","md",[1517,1519],{"_path":159,"title":158,"description":1518},"给定一个二叉树，找出其最小深度。",{"_path":165,"title":164,"description":1520},"给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。",1715093635036]