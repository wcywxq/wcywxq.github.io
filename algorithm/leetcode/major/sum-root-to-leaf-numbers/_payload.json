[{"data":1,"prerenderedAt":1557},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/sum-root-to-leaf-numbers":559,"/algorithm/leetcode/major/sum-root-to-leaf-numbers-surround":1552},[4,272,318,536,544],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":317},"八股文","/endorsement",[276,286,293,304],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"JavaScript","/endorsement/javascript",[290],{"title":291,"_path":292},"语法和数据类型","/endorsement/javascript/grammar-data-types",{"title":294,"_path":295,"children":296},"构建工具","/endorsement/build-tools",[297],{"title":298,"_path":299,"children":300},"Webpack","/endorsement/build-tools/webpack",[301],{"title":302,"_path":303},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":305,"_path":306,"children":307},"Html","/endorsement/html",[308,311,314],{"title":309,"_path":310},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":312,"_path":313},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":315,"_path":316},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":319,"_path":320,"children":321,"icon":535},"代码考核","/code-assessment",[322,427,528],{"title":323,"_path":324,"children":325},"源码实现","/code-assessment/source",[326,360,376,404,411,418,421,424],{"title":327,"_path":328,"children":329},"原生 api","/code-assessment/source/native-api",[330,333,336,339,342,345,348,351,354,357],{"title":331,"_path":332},"polyfill","/code-assessment/source/native-api/polyfill",{"title":334,"_path":335},"ajax","/code-assessment/source/native-api/ajax",{"title":337,"_path":338},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":340,"_path":341},"new 操作符","/code-assessment/source/native-api/new",{"title":343,"_path":344},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":346,"_path":347},"定时器","/code-assessment/source/native-api/timer",{"title":349,"_path":350},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":352,"_path":353},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":355,"_path":356},"extends","/code-assessment/source/native-api/extends",{"title":358,"_path":359},"Promise","/code-assessment/source/native-api/promise",{"title":361,"_path":362,"children":363},"函数 Function","/code-assessment/source/function",[364,367,370,373],{"title":365,"_path":366},"函数防抖","/code-assessment/source/function/debounce",{"title":368,"_path":369},"函数节流","/code-assessment/source/function/throttle",{"title":371,"_path":372},"函数柯理化","/code-assessment/source/function/curry",{"title":374,"_path":375},"函数睡眠","/code-assessment/source/function/sleep",{"title":377,"_path":378,"children":379},"数组 Array","/code-assessment/source/array",[380,383,386,389,392,395,398,401],{"title":381,"_path":382},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":384,"_path":385},"数组扁平化","/code-assessment/source/array/flat",{"title":387,"_path":388},"原型方法","/code-assessment/source/array/prototype-method",{"title":390,"_path":391},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":393,"_path":394},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":396,"_path":397},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":399,"_path":400},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":402,"_path":403},"二维数组","/code-assessment/source/array/2d-array",{"title":405,"_path":406,"children":407},"字符串 String","/code-assessment/source/string",[408],{"title":409,"_path":410},"repeat()","/code-assessment/source/string/repeat",{"title":412,"_path":413,"children":414},"集合 Set","/code-assessment/source/set",[415],{"title":416,"_path":417},"遍历集合","/code-assessment/source/set/traverse",{"title":419,"_path":420},"获取通用类型","/code-assessment/source/get-generic-type",{"title":422,"_path":423},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":425,"_path":426},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":428,"_path":429,"children":430},"业务场景","/code-assessment/scene",[431,461,471,474,477,480,483,486,489,492,495,498,501,504,507,510,513,516,519,522,525],{"title":358,"_path":432,"children":433},"/code-assessment/scene/promise",[434,437,440,443,446,449,452,455,458],{"title":435,"_path":436},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":438,"_path":439},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":441,"_path":442},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":444,"_path":445},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":447,"_path":448},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":450,"_path":451},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":453,"_path":454},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":456,"_path":457},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":459,"_path":460},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":462,"_path":463,"children":464},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[465,468],{"title":466,"_path":467},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":469,"_path":470},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":472,"_path":473},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":475,"_path":476},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":478,"_path":479},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":481,"_path":482},"倒计时","/code-assessment/scene/countdown",{"title":484,"_path":485},"日期格式化","/code-assessment/scene/date-format",{"title":487,"_path":488},"实现前端路由","/code-assessment/scene/frontend-route",{"title":490,"_path":491},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":493,"_path":494},"lodash.get","/code-assessment/scene/lodash-get",{"title":496,"_path":497},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":499,"_path":500},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":502,"_path":503},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":505,"_path":506},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":508,"_path":509},"随机数","/code-assessment/scene/random-number",{"title":511,"_path":512},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":514,"_path":515},"sku 算法实现","/code-assessment/scene/sku",{"title":517,"_path":518},"整数分割","/code-assessment/scene/split-number",{"title":520,"_path":521},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":523,"_path":524},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":526,"_path":527},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":529,"_path":530,"children":531},"Ts 类型挑战","/code-assessment/type-challeges",[532],{"title":533,"_path":534},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":537,"_path":538,"children":539,"icon":543},"项目","/project",[540],{"title":541,"_path":542},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":545,"_path":546,"children":547,"icon":558},"后端语言","/backend-languages",[548],{"title":549,"_path":550,"children":551},"Python","/backend-languages/python",[552,555],{"title":553,"_path":554},"基础","/backend-languages/python/base",{"title":556,"_path":557},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":168,"_dir":560,"_draft":561,"_partial":561,"_locale":562,"title":167,"description":563,"url":564,"body":565,"_type":1547,"_id":1548,"_source":1549,"_file":1550,"_extension":1551},"major",false,"","给你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。\n每条从根节点到叶节点的路径都代表一个数字：","https://leetcode.cn/problems/sum-root-to-leaf-numbers",{"type":566,"children":567,"toc":1541},"root",[568,575,580,585,590,599,665,670,678,741,746,766,772,777,784,1535],{"type":569,"tag":570,"props":571,"children":572},"element","p",{},[573],{"type":574,"value":563},"text",{"type":569,"tag":570,"props":576,"children":577},{},[578],{"type":574,"value":579},"例如，从根节点到叶节点的路径 1 -> 2 -> 3 表示数字 123 。\n计算从根节点到叶节点生成的 所有数字之和 。",{"type":569,"tag":570,"props":581,"children":582},{},[583],{"type":574,"value":584},"叶节点 是指没有子节点的节点。",{"type":569,"tag":570,"props":586,"children":587},{},[588],{"type":574,"value":589},"示例 1：",{"type":569,"tag":570,"props":591,"children":592},{},[593],{"type":569,"tag":594,"props":595,"children":598},"img",{"alt":596,"src":597},"num1tree","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/code_leetcode_No.129_num1tree.png",[],{"type":569,"tag":600,"props":601,"children":604},"pre",{"className":602,"code":603,"language":574,"meta":562,"style":562},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：root = [1,2,3]\n输出：25\n解释：\n从根到叶子节点路径 1->2 代表数字 12\n从根到叶子节点路径 1->3 代表数字 13\n因此，数字总和 = 12 + 13 = 25\n",[605],{"type":569,"tag":606,"props":607,"children":608},"code",{"__ignoreMap":562},[609,620,629,638,647,656],{"type":569,"tag":610,"props":611,"children":614},"span",{"class":612,"line":613},"line",1,[615],{"type":569,"tag":610,"props":616,"children":617},{},[618],{"type":574,"value":619},"输入：root = [1,2,3]\n",{"type":569,"tag":610,"props":621,"children":623},{"class":612,"line":622},2,[624],{"type":569,"tag":610,"props":625,"children":626},{},[627],{"type":574,"value":628},"输出：25\n",{"type":569,"tag":610,"props":630,"children":632},{"class":612,"line":631},3,[633],{"type":569,"tag":610,"props":634,"children":635},{},[636],{"type":574,"value":637},"解释：\n",{"type":569,"tag":610,"props":639,"children":641},{"class":612,"line":640},4,[642],{"type":569,"tag":610,"props":643,"children":644},{},[645],{"type":574,"value":646},"从根到叶子节点路径 1->2 代表数字 12\n",{"type":569,"tag":610,"props":648,"children":650},{"class":612,"line":649},5,[651],{"type":569,"tag":610,"props":652,"children":653},{},[654],{"type":574,"value":655},"从根到叶子节点路径 1->3 代表数字 13\n",{"type":569,"tag":610,"props":657,"children":659},{"class":612,"line":658},6,[660],{"type":569,"tag":610,"props":661,"children":662},{},[663],{"type":574,"value":664},"因此，数字总和 = 12 + 13 = 25\n",{"type":569,"tag":570,"props":666,"children":667},{},[668],{"type":574,"value":669},"示例 2：",{"type":569,"tag":570,"props":671,"children":672},{},[673],{"type":569,"tag":594,"props":674,"children":677},{"alt":675,"src":676},"num2tree","https://raw.githubusercontent.com/wcywxq/image-store/master/ssg/code_leetcode_No.129_num2tree.png",[],{"type":569,"tag":600,"props":679,"children":681},{"className":602,"code":680,"language":574,"meta":562,"style":562},"输入：root = [4,9,0,5,1]\n输出：1026\n解释：\n从根到叶子节点路径 4->9->5 代表数字 495\n从根到叶子节点路径 4->9->1 代表数字 491\n从根到叶子节点路径 4->0 代表数字 40\n因此，数字总和 = 495 + 491 + 40 = 1026\n",[682],{"type":569,"tag":606,"props":683,"children":684},{"__ignoreMap":562},[685,693,701,708,716,724,732],{"type":569,"tag":610,"props":686,"children":687},{"class":612,"line":613},[688],{"type":569,"tag":610,"props":689,"children":690},{},[691],{"type":574,"value":692},"输入：root = [4,9,0,5,1]\n",{"type":569,"tag":610,"props":694,"children":695},{"class":612,"line":622},[696],{"type":569,"tag":610,"props":697,"children":698},{},[699],{"type":574,"value":700},"输出：1026\n",{"type":569,"tag":610,"props":702,"children":703},{"class":612,"line":631},[704],{"type":569,"tag":610,"props":705,"children":706},{},[707],{"type":574,"value":637},{"type":569,"tag":610,"props":709,"children":710},{"class":612,"line":640},[711],{"type":569,"tag":610,"props":712,"children":713},{},[714],{"type":574,"value":715},"从根到叶子节点路径 4->9->5 代表数字 495\n",{"type":569,"tag":610,"props":717,"children":718},{"class":612,"line":649},[719],{"type":569,"tag":610,"props":720,"children":721},{},[722],{"type":574,"value":723},"从根到叶子节点路径 4->9->1 代表数字 491\n",{"type":569,"tag":610,"props":725,"children":726},{"class":612,"line":658},[727],{"type":569,"tag":610,"props":728,"children":729},{},[730],{"type":574,"value":731},"从根到叶子节点路径 4->0 代表数字 40\n",{"type":569,"tag":610,"props":733,"children":735},{"class":612,"line":734},7,[736],{"type":569,"tag":610,"props":737,"children":738},{},[739],{"type":574,"value":740},"因此，数字总和 = 495 + 491 + 40 = 1026\n",{"type":569,"tag":570,"props":742,"children":743},{},[744],{"type":574,"value":745},"提示：",{"type":569,"tag":747,"props":748,"children":749},"ul",{},[750,756,761],{"type":569,"tag":751,"props":752,"children":753},"li",{},[754],{"type":574,"value":755},"树中节点的数目在范围 [1, 1000] 内",{"type":569,"tag":751,"props":757,"children":758},{},[759],{"type":574,"value":760},"0 \u003C= Node.val \u003C= 9",{"type":569,"tag":751,"props":762,"children":763},{},[764],{"type":574,"value":765},"树的深度不超过 10",{"type":569,"tag":767,"props":768,"children":770},"h2",{"id":769},"解题思路",[771],{"type":574,"value":769},{"type":569,"tag":767,"props":773,"children":775},{"id":774},"实现",[776],{"type":574,"value":774},{"type":569,"tag":778,"props":779,"children":781},"h3",{"id":780},"深度优先搜素-dfs",[782],{"type":574,"value":783},"深度优先搜素 - dfs",{"type":569,"tag":600,"props":785,"children":789},{"className":786,"code":787,"language":788,"meta":562,"style":562},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * Definition for a binary tree node.\n */\nfunction TreeNode(val, left, right) {\n  this.val = val === undefined ? 0 : val;\n  this.left = left === undefined ? null : left;\n  this.right = right === undefined ? null : right;\n}\n\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar sumNumbers = function (root) {\n  const dfs = (node, prev) => {\n    if (node === null) return 0;\n    let sum = prev * 10 + node.val;\n    if (node.left === null && node.right === null) return sum;\n    return dfs(node.left, sum) + dfs(node.right, sum);\n  };\n  return dfs(root, 0);\n};\n","js",[790],{"type":569,"tag":606,"props":791,"children":792},{"__ignoreMap":562},[793,802,810,818,874,937,990,1042,1051,1061,1069,1110,1140,1148,1188,1237,1279,1333,1406,1484,1493,1526],{"type":569,"tag":610,"props":794,"children":795},{"class":612,"line":613},[796],{"type":569,"tag":610,"props":797,"children":799},{"style":798},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[800],{"type":574,"value":801},"/**\n",{"type":569,"tag":610,"props":803,"children":804},{"class":612,"line":622},[805],{"type":569,"tag":610,"props":806,"children":807},{"style":798},[808],{"type":574,"value":809}," * Definition for a binary tree node.\n",{"type":569,"tag":610,"props":811,"children":812},{"class":612,"line":631},[813],{"type":569,"tag":610,"props":814,"children":815},{"style":798},[816],{"type":574,"value":817}," */\n",{"type":569,"tag":610,"props":819,"children":820},{"class":612,"line":640},[821,827,833,839,845,850,855,859,864,869],{"type":569,"tag":610,"props":822,"children":824},{"style":823},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[825],{"type":574,"value":826},"function",{"type":569,"tag":610,"props":828,"children":830},{"style":829},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[831],{"type":574,"value":832}," TreeNode",{"type":569,"tag":610,"props":834,"children":836},{"style":835},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[837],{"type":574,"value":838},"(",{"type":569,"tag":610,"props":840,"children":842},{"style":841},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[843],{"type":574,"value":844},"val",{"type":569,"tag":610,"props":846,"children":847},{"style":835},[848],{"type":574,"value":849},",",{"type":569,"tag":610,"props":851,"children":852},{"style":841},[853],{"type":574,"value":854}," left",{"type":569,"tag":610,"props":856,"children":857},{"style":835},[858],{"type":574,"value":849},{"type":569,"tag":610,"props":860,"children":861},{"style":841},[862],{"type":574,"value":863}," right",{"type":569,"tag":610,"props":865,"children":866},{"style":835},[867],{"type":574,"value":868},")",{"type":569,"tag":610,"props":870,"children":871},{"style":835},[872],{"type":574,"value":873}," {\n",{"type":569,"tag":610,"props":875,"children":876},{"class":612,"line":649},[877,883,888,892,897,902,907,912,917,923,928,932],{"type":569,"tag":610,"props":878,"children":880},{"style":879},"--shiki-light:#A65E2B;--shiki-default:#A65E2B;--shiki-dark:#C99076",[881],{"type":574,"value":882},"  this",{"type":569,"tag":610,"props":884,"children":885},{"style":835},[886],{"type":574,"value":887},".",{"type":569,"tag":610,"props":889,"children":890},{"style":841},[891],{"type":574,"value":844},{"type":569,"tag":610,"props":893,"children":894},{"style":835},[895],{"type":574,"value":896}," =",{"type":569,"tag":610,"props":898,"children":899},{"style":841},[900],{"type":574,"value":901}," val",{"type":569,"tag":610,"props":903,"children":904},{"style":823},[905],{"type":574,"value":906}," ===",{"type":569,"tag":610,"props":908,"children":909},{"style":823},[910],{"type":574,"value":911}," undefined",{"type":569,"tag":610,"props":913,"children":914},{"style":823},[915],{"type":574,"value":916}," ?",{"type":569,"tag":610,"props":918,"children":920},{"style":919},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[921],{"type":574,"value":922}," 0",{"type":569,"tag":610,"props":924,"children":925},{"style":823},[926],{"type":574,"value":927}," :",{"type":569,"tag":610,"props":929,"children":930},{"style":841},[931],{"type":574,"value":901},{"type":569,"tag":610,"props":933,"children":934},{"style":835},[935],{"type":574,"value":936},";\n",{"type":569,"tag":610,"props":938,"children":939},{"class":612,"line":658},[940,944,948,953,957,961,965,969,973,978,982,986],{"type":569,"tag":610,"props":941,"children":942},{"style":879},[943],{"type":574,"value":882},{"type":569,"tag":610,"props":945,"children":946},{"style":835},[947],{"type":574,"value":887},{"type":569,"tag":610,"props":949,"children":950},{"style":841},[951],{"type":574,"value":952},"left",{"type":569,"tag":610,"props":954,"children":955},{"style":835},[956],{"type":574,"value":896},{"type":569,"tag":610,"props":958,"children":959},{"style":841},[960],{"type":574,"value":854},{"type":569,"tag":610,"props":962,"children":963},{"style":823},[964],{"type":574,"value":906},{"type":569,"tag":610,"props":966,"children":967},{"style":823},[968],{"type":574,"value":911},{"type":569,"tag":610,"props":970,"children":971},{"style":823},[972],{"type":574,"value":916},{"type":569,"tag":610,"props":974,"children":975},{"style":823},[976],{"type":574,"value":977}," null",{"type":569,"tag":610,"props":979,"children":980},{"style":823},[981],{"type":574,"value":927},{"type":569,"tag":610,"props":983,"children":984},{"style":841},[985],{"type":574,"value":854},{"type":569,"tag":610,"props":987,"children":988},{"style":835},[989],{"type":574,"value":936},{"type":569,"tag":610,"props":991,"children":992},{"class":612,"line":734},[993,997,1001,1006,1010,1014,1018,1022,1026,1030,1034,1038],{"type":569,"tag":610,"props":994,"children":995},{"style":879},[996],{"type":574,"value":882},{"type":569,"tag":610,"props":998,"children":999},{"style":835},[1000],{"type":574,"value":887},{"type":569,"tag":610,"props":1002,"children":1003},{"style":841},[1004],{"type":574,"value":1005},"right",{"type":569,"tag":610,"props":1007,"children":1008},{"style":835},[1009],{"type":574,"value":896},{"type":569,"tag":610,"props":1011,"children":1012},{"style":841},[1013],{"type":574,"value":863},{"type":569,"tag":610,"props":1015,"children":1016},{"style":823},[1017],{"type":574,"value":906},{"type":569,"tag":610,"props":1019,"children":1020},{"style":823},[1021],{"type":574,"value":911},{"type":569,"tag":610,"props":1023,"children":1024},{"style":823},[1025],{"type":574,"value":916},{"type":569,"tag":610,"props":1027,"children":1028},{"style":823},[1029],{"type":574,"value":977},{"type":569,"tag":610,"props":1031,"children":1032},{"style":823},[1033],{"type":574,"value":927},{"type":569,"tag":610,"props":1035,"children":1036},{"style":841},[1037],{"type":574,"value":863},{"type":569,"tag":610,"props":1039,"children":1040},{"style":835},[1041],{"type":574,"value":936},{"type":569,"tag":610,"props":1043,"children":1045},{"class":612,"line":1044},8,[1046],{"type":569,"tag":610,"props":1047,"children":1048},{"style":835},[1049],{"type":574,"value":1050},"}\n",{"type":569,"tag":610,"props":1052,"children":1054},{"class":612,"line":1053},9,[1055],{"type":569,"tag":610,"props":1056,"children":1058},{"emptyLinePlaceholder":1057},true,[1059],{"type":574,"value":1060},"\n",{"type":569,"tag":610,"props":1062,"children":1064},{"class":612,"line":1063},10,[1065],{"type":569,"tag":610,"props":1066,"children":1067},{"style":798},[1068],{"type":574,"value":801},{"type":569,"tag":610,"props":1070,"children":1072},{"class":612,"line":1071},11,[1073,1078,1083,1089,1094,1100,1105],{"type":569,"tag":610,"props":1074,"children":1075},{"style":798},[1076],{"type":574,"value":1077}," * ",{"type":569,"tag":610,"props":1079,"children":1080},{"style":835},[1081],{"type":574,"value":1082},"@",{"type":569,"tag":610,"props":1084,"children":1086},{"style":1085},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[1087],{"type":574,"value":1088},"param",{"type":569,"tag":610,"props":1090,"children":1091},{"style":835},[1092],{"type":574,"value":1093}," {",{"type":569,"tag":610,"props":1095,"children":1097},{"style":1096},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[1098],{"type":574,"value":1099},"TreeNode",{"type":569,"tag":610,"props":1101,"children":1102},{"style":835},[1103],{"type":574,"value":1104},"}",{"type":569,"tag":610,"props":1106,"children":1107},{"style":841},[1108],{"type":574,"value":1109}," root\n",{"type":569,"tag":610,"props":1111,"children":1113},{"class":612,"line":1112},12,[1114,1118,1122,1127,1131,1136],{"type":569,"tag":610,"props":1115,"children":1116},{"style":798},[1117],{"type":574,"value":1077},{"type":569,"tag":610,"props":1119,"children":1120},{"style":835},[1121],{"type":574,"value":1082},{"type":569,"tag":610,"props":1123,"children":1124},{"style":1085},[1125],{"type":574,"value":1126},"return",{"type":569,"tag":610,"props":1128,"children":1129},{"style":835},[1130],{"type":574,"value":1093},{"type":569,"tag":610,"props":1132,"children":1133},{"style":1096},[1134],{"type":574,"value":1135},"number",{"type":569,"tag":610,"props":1137,"children":1138},{"style":835},[1139],{"type":574,"value":1050},{"type":569,"tag":610,"props":1141,"children":1143},{"class":612,"line":1142},13,[1144],{"type":569,"tag":610,"props":1145,"children":1146},{"style":798},[1147],{"type":574,"value":817},{"type":569,"tag":610,"props":1149,"children":1151},{"class":612,"line":1150},14,[1152,1157,1162,1166,1171,1176,1180,1184],{"type":569,"tag":610,"props":1153,"children":1154},{"style":823},[1155],{"type":574,"value":1156},"var",{"type":569,"tag":610,"props":1158,"children":1159},{"style":829},[1160],{"type":574,"value":1161}," sumNumbers",{"type":569,"tag":610,"props":1163,"children":1164},{"style":835},[1165],{"type":574,"value":896},{"type":569,"tag":610,"props":1167,"children":1168},{"style":823},[1169],{"type":574,"value":1170}," function",{"type":569,"tag":610,"props":1172,"children":1173},{"style":835},[1174],{"type":574,"value":1175}," (",{"type":569,"tag":610,"props":1177,"children":1178},{"style":841},[1179],{"type":574,"value":566},{"type":569,"tag":610,"props":1181,"children":1182},{"style":835},[1183],{"type":574,"value":868},{"type":569,"tag":610,"props":1185,"children":1186},{"style":835},[1187],{"type":574,"value":873},{"type":569,"tag":610,"props":1189,"children":1191},{"class":612,"line":1190},15,[1192,1197,1202,1206,1210,1215,1219,1224,1228,1233],{"type":569,"tag":610,"props":1193,"children":1194},{"style":823},[1195],{"type":574,"value":1196},"  const",{"type":569,"tag":610,"props":1198,"children":1199},{"style":829},[1200],{"type":574,"value":1201}," dfs",{"type":569,"tag":610,"props":1203,"children":1204},{"style":835},[1205],{"type":574,"value":896},{"type":569,"tag":610,"props":1207,"children":1208},{"style":835},[1209],{"type":574,"value":1175},{"type":569,"tag":610,"props":1211,"children":1212},{"style":841},[1213],{"type":574,"value":1214},"node",{"type":569,"tag":610,"props":1216,"children":1217},{"style":835},[1218],{"type":574,"value":849},{"type":569,"tag":610,"props":1220,"children":1221},{"style":841},[1222],{"type":574,"value":1223}," prev",{"type":569,"tag":610,"props":1225,"children":1226},{"style":835},[1227],{"type":574,"value":868},{"type":569,"tag":610,"props":1229,"children":1230},{"style":835},[1231],{"type":574,"value":1232}," =>",{"type":569,"tag":610,"props":1234,"children":1235},{"style":835},[1236],{"type":574,"value":873},{"type":569,"tag":610,"props":1238,"children":1240},{"class":612,"line":1239},16,[1241,1246,1250,1254,1258,1262,1266,1271,1275],{"type":569,"tag":610,"props":1242,"children":1243},{"style":1085},[1244],{"type":574,"value":1245},"    if",{"type":569,"tag":610,"props":1247,"children":1248},{"style":835},[1249],{"type":574,"value":1175},{"type":569,"tag":610,"props":1251,"children":1252},{"style":841},[1253],{"type":574,"value":1214},{"type":569,"tag":610,"props":1255,"children":1256},{"style":823},[1257],{"type":574,"value":906},{"type":569,"tag":610,"props":1259,"children":1260},{"style":823},[1261],{"type":574,"value":977},{"type":569,"tag":610,"props":1263,"children":1264},{"style":835},[1265],{"type":574,"value":868},{"type":569,"tag":610,"props":1267,"children":1268},{"style":1085},[1269],{"type":574,"value":1270}," return",{"type":569,"tag":610,"props":1272,"children":1273},{"style":919},[1274],{"type":574,"value":922},{"type":569,"tag":610,"props":1276,"children":1277},{"style":835},[1278],{"type":574,"value":936},{"type":569,"tag":610,"props":1280,"children":1282},{"class":612,"line":1281},17,[1283,1288,1293,1297,1301,1306,1311,1316,1321,1325,1329],{"type":569,"tag":610,"props":1284,"children":1285},{"style":823},[1286],{"type":574,"value":1287},"    let",{"type":569,"tag":610,"props":1289,"children":1290},{"style":841},[1291],{"type":574,"value":1292}," sum",{"type":569,"tag":610,"props":1294,"children":1295},{"style":835},[1296],{"type":574,"value":896},{"type":569,"tag":610,"props":1298,"children":1299},{"style":841},[1300],{"type":574,"value":1223},{"type":569,"tag":610,"props":1302,"children":1303},{"style":823},[1304],{"type":574,"value":1305}," *",{"type":569,"tag":610,"props":1307,"children":1308},{"style":919},[1309],{"type":574,"value":1310}," 10",{"type":569,"tag":610,"props":1312,"children":1313},{"style":823},[1314],{"type":574,"value":1315}," +",{"type":569,"tag":610,"props":1317,"children":1318},{"style":841},[1319],{"type":574,"value":1320}," node",{"type":569,"tag":610,"props":1322,"children":1323},{"style":835},[1324],{"type":574,"value":887},{"type":569,"tag":610,"props":1326,"children":1327},{"style":841},[1328],{"type":574,"value":844},{"type":569,"tag":610,"props":1330,"children":1331},{"style":835},[1332],{"type":574,"value":936},{"type":569,"tag":610,"props":1334,"children":1336},{"class":612,"line":1335},18,[1337,1341,1345,1349,1353,1357,1361,1365,1370,1374,1378,1382,1386,1390,1394,1398,1402],{"type":569,"tag":610,"props":1338,"children":1339},{"style":1085},[1340],{"type":574,"value":1245},{"type":569,"tag":610,"props":1342,"children":1343},{"style":835},[1344],{"type":574,"value":1175},{"type":569,"tag":610,"props":1346,"children":1347},{"style":841},[1348],{"type":574,"value":1214},{"type":569,"tag":610,"props":1350,"children":1351},{"style":835},[1352],{"type":574,"value":887},{"type":569,"tag":610,"props":1354,"children":1355},{"style":841},[1356],{"type":574,"value":952},{"type":569,"tag":610,"props":1358,"children":1359},{"style":823},[1360],{"type":574,"value":906},{"type":569,"tag":610,"props":1362,"children":1363},{"style":823},[1364],{"type":574,"value":977},{"type":569,"tag":610,"props":1366,"children":1367},{"style":823},[1368],{"type":574,"value":1369}," &&",{"type":569,"tag":610,"props":1371,"children":1372},{"style":841},[1373],{"type":574,"value":1320},{"type":569,"tag":610,"props":1375,"children":1376},{"style":835},[1377],{"type":574,"value":887},{"type":569,"tag":610,"props":1379,"children":1380},{"style":841},[1381],{"type":574,"value":1005},{"type":569,"tag":610,"props":1383,"children":1384},{"style":823},[1385],{"type":574,"value":906},{"type":569,"tag":610,"props":1387,"children":1388},{"style":823},[1389],{"type":574,"value":977},{"type":569,"tag":610,"props":1391,"children":1392},{"style":835},[1393],{"type":574,"value":868},{"type":569,"tag":610,"props":1395,"children":1396},{"style":1085},[1397],{"type":574,"value":1270},{"type":569,"tag":610,"props":1399,"children":1400},{"style":841},[1401],{"type":574,"value":1292},{"type":569,"tag":610,"props":1403,"children":1404},{"style":835},[1405],{"type":574,"value":936},{"type":569,"tag":610,"props":1407,"children":1409},{"class":612,"line":1408},19,[1410,1415,1419,1423,1427,1431,1435,1439,1443,1447,1451,1455,1459,1463,1467,1471,1475,1479],{"type":569,"tag":610,"props":1411,"children":1412},{"style":1085},[1413],{"type":574,"value":1414},"    return",{"type":569,"tag":610,"props":1416,"children":1417},{"style":829},[1418],{"type":574,"value":1201},{"type":569,"tag":610,"props":1420,"children":1421},{"style":835},[1422],{"type":574,"value":838},{"type":569,"tag":610,"props":1424,"children":1425},{"style":841},[1426],{"type":574,"value":1214},{"type":569,"tag":610,"props":1428,"children":1429},{"style":835},[1430],{"type":574,"value":887},{"type":569,"tag":610,"props":1432,"children":1433},{"style":841},[1434],{"type":574,"value":952},{"type":569,"tag":610,"props":1436,"children":1437},{"style":835},[1438],{"type":574,"value":849},{"type":569,"tag":610,"props":1440,"children":1441},{"style":841},[1442],{"type":574,"value":1292},{"type":569,"tag":610,"props":1444,"children":1445},{"style":835},[1446],{"type":574,"value":868},{"type":569,"tag":610,"props":1448,"children":1449},{"style":823},[1450],{"type":574,"value":1315},{"type":569,"tag":610,"props":1452,"children":1453},{"style":829},[1454],{"type":574,"value":1201},{"type":569,"tag":610,"props":1456,"children":1457},{"style":835},[1458],{"type":574,"value":838},{"type":569,"tag":610,"props":1460,"children":1461},{"style":841},[1462],{"type":574,"value":1214},{"type":569,"tag":610,"props":1464,"children":1465},{"style":835},[1466],{"type":574,"value":887},{"type":569,"tag":610,"props":1468,"children":1469},{"style":841},[1470],{"type":574,"value":1005},{"type":569,"tag":610,"props":1472,"children":1473},{"style":835},[1474],{"type":574,"value":849},{"type":569,"tag":610,"props":1476,"children":1477},{"style":841},[1478],{"type":574,"value":1292},{"type":569,"tag":610,"props":1480,"children":1481},{"style":835},[1482],{"type":574,"value":1483},");\n",{"type":569,"tag":610,"props":1485,"children":1487},{"class":612,"line":1486},20,[1488],{"type":569,"tag":610,"props":1489,"children":1490},{"style":835},[1491],{"type":574,"value":1492},"  };\n",{"type":569,"tag":610,"props":1494,"children":1496},{"class":612,"line":1495},21,[1497,1502,1506,1510,1514,1518,1522],{"type":569,"tag":610,"props":1498,"children":1499},{"style":1085},[1500],{"type":574,"value":1501},"  return",{"type":569,"tag":610,"props":1503,"children":1504},{"style":829},[1505],{"type":574,"value":1201},{"type":569,"tag":610,"props":1507,"children":1508},{"style":835},[1509],{"type":574,"value":838},{"type":569,"tag":610,"props":1511,"children":1512},{"style":841},[1513],{"type":574,"value":566},{"type":569,"tag":610,"props":1515,"children":1516},{"style":835},[1517],{"type":574,"value":849},{"type":569,"tag":610,"props":1519,"children":1520},{"style":919},[1521],{"type":574,"value":922},{"type":569,"tag":610,"props":1523,"children":1524},{"style":835},[1525],{"type":574,"value":1483},{"type":569,"tag":610,"props":1527,"children":1529},{"class":612,"line":1528},22,[1530],{"type":569,"tag":610,"props":1531,"children":1532},{"style":835},[1533],{"type":574,"value":1534},"};\n",{"type":569,"tag":1536,"props":1537,"children":1538},"style",{},[1539],{"type":574,"value":1540},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":562,"searchDepth":649,"depth":649,"links":1542},[1543,1544],{"id":769,"depth":622,"text":769},{"id":774,"depth":622,"text":774,"children":1545},[1546],{"id":780,"depth":631,"text":783},"markdown","content:1.algorithm:3.leetcode:3.major:129.sum-root-to-leaf-numbers.md","content","1.algorithm/3.leetcode/3.major/129.sum-root-to-leaf-numbers.md","md",[1553,1555],{"_path":165,"title":164,"description":1554},"给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。",{"_path":171,"title":170,"description":1556},"给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。",1717731139383]