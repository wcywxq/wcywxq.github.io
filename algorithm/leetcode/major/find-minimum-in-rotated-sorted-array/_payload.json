[{"data":1,"prerenderedAt":1228},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array":460,"/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array-surround":1223},[4,263,292,437,445],{"title":5,"_path":6,"children":7,"icon":262},"算法","/algorithm",[8,25],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27,"children":28},"Leetcode 力扣","/algorithm/leetcode",[29,35,48],{"title":30,"_path":31,"children":32},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[33],{"title":34,"_path":31},"刷题索引",{"title":36,"_path":37,"children":38},"剑指 offer","/algorithm/leetcode/sword-ofter",[39,42,45],{"title":40,"_path":41},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":43,"_path":44},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":46,"_path":47},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":49,"_path":50,"children":51},"主题单","/algorithm/leetcode/major",[52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259],{"title":53,"_path":54},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":56,"_path":57},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":59,"_path":60},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":62,"_path":63},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":65,"_path":66},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":68,"_path":69},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":71,"_path":72},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":74,"_path":75},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":77,"_path":78},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":80,"_path":81},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":83,"_path":84},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":86,"_path":87},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":89,"_path":90},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":92,"_path":93},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":95,"_path":96},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":98,"_path":99},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":101,"_path":102},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":104,"_path":105},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":107,"_path":108},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":110,"_path":111},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":113,"_path":114},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":116,"_path":117},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":119,"_path":120},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":122,"_path":123},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":125,"_path":126},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":128,"_path":129},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":131,"_path":132},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":134,"_path":135},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":137,"_path":138},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":140,"_path":141},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":143,"_path":144},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":146,"_path":147},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":149,"_path":150},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":152,"_path":153},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":155,"_path":156},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":158,"_path":159},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":161,"_path":162},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":164,"_path":165},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":167,"_path":168},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":170,"_path":171},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":173,"_path":174},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":176,"_path":177},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":179,"_path":180},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":182,"_path":183},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":185,"_path":186},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":188,"_path":189},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":191,"_path":192},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":194,"_path":195},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":197,"_path":198},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":200,"_path":201},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":203,"_path":204},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":206,"_path":207},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":209,"_path":210},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":212,"_path":213},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":215,"_path":216},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":218,"_path":219},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":221,"_path":222},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":224,"_path":225},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":227,"_path":228},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":230,"_path":231},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":233,"_path":234},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":236,"_path":237},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":239,"_path":240},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":242,"_path":243},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":245,"_path":246},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":248,"_path":249},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":251,"_path":252},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":254,"_path":255},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":257,"_path":258},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":260,"_path":261},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":264,"_path":265,"children":266,"icon":291},"前端八股文","/frontend-endorsement",[267,278],{"title":268,"_path":269,"children":270},"构建工具","/frontend-endorsement/build-tools",[271],{"title":272,"_path":273,"children":274},"Webpack","/frontend-endorsement/build-tools/webpack",[275],{"title":276,"_path":277},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":279,"_path":280,"children":281},"Html","/frontend-endorsement/html",[282,285,288],{"title":283,"_path":284},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":286,"_path":287},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":289,"_path":290},"离线存储","/frontend-endorsement/html/offline-storage","i-heroicons-newspaper",{"title":293,"_path":294,"children":295,"icon":436},"前端代码考核","/frontend-code-assessment",[296,345,429],{"title":297,"_path":298,"children":299},"源码实现","/frontend-code-assessment/source",[300,325,338],{"title":301,"_path":302,"children":303},"原生 api","/frontend-code-assessment/source/native-api",[304,307,310,313,316,319,322],{"title":305,"_path":306},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":308,"_path":309},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":311,"_path":312},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":314,"_path":315},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":317,"_path":318},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":320,"_path":321},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":323,"_path":324},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":326,"_path":327,"children":328},"数组 Array","/frontend-code-assessment/source/array",[329,332,335],{"title":330,"_path":331},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":333,"_path":334},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":336,"_path":337},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":339,"_path":340,"children":341},"字符串 String","/frontend-code-assessment/source/string",[342],{"title":343,"_path":344},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":346,"_path":347,"children":348},"业务场景","/frontend-code-assessment/scene",[349,371,378,381,384,387,390,393,396,399,402,405,408,411,414,417,420,423,426],{"title":350,"_path":351,"children":352},"Promise","/frontend-code-assessment/scene/promise",[353,356,359,362,365,368],{"title":354,"_path":355},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":357,"_path":358},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":360,"_path":361},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":363,"_path":364},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":366,"_path":367},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":369,"_path":370},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":372,"_path":373,"children":374},"框架和设计模式","/frontend-code-assessment/scene/framework-and-design-mode",[375],{"title":376,"_path":377},"event bus","/frontend-code-assessment/scene/framework-and-design-mode/event-bus",{"title":379,"_path":380},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":382,"_path":383},"倒计时","/frontend-code-assessment/scene/countdown",{"title":385,"_path":386},"日期格式化","/frontend-code-assessment/scene/date-format",{"title":388,"_path":389},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":391,"_path":392},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":394,"_path":395},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":397,"_path":398},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":400,"_path":401},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":403,"_path":404},"对象是否循环引用","/frontend-code-assessment/scene/object-is-or-not-circular-reference",{"title":406,"_path":407},"解析 url 参数","/frontend-code-assessment/scene/parse-url-query",{"title":409,"_path":410},"原型链输出","/frontend-code-assessment/scene/prototype-chain-output",{"title":412,"_path":413},"随机数","/frontend-code-assessment/scene/random-number",{"title":415,"_path":416},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":418,"_path":419},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":421,"_path":422},"千分位分隔数字字符串","/frontend-code-assessment/scene/thousandth-separated-number-string",{"title":424,"_path":425},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":427,"_path":428},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":430,"_path":431,"children":432},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[433],{"title":434,"_path":435},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":438,"_path":439,"children":440,"icon":444},"项目","/pro",[441],{"title":442,"_path":443},"Vue 如何对 Store 进行单元测试","/pro/unit-test-vue-store","i-heroicons-squares-plus",{"title":446,"_path":447,"children":448,"icon":459},"后端语言","/backend-languages",[449],{"title":450,"_path":451,"children":452},"Python","/backend-languages/python",[453,456],{"title":454,"_path":455},"基础","/backend-languages/python/base",{"title":457,"_path":458},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":177,"_dir":461,"_draft":462,"_partial":462,"_locale":463,"title":176,"description":464,"url":465,"body":466,"_type":1218,"_id":1219,"_source":1220,"_file":1221,"_extension":1222},"major",false,"","已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：","https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array",{"type":467,"children":468,"toc":1214},"root",[469,476,491,496,501,506,545,550,581,586,617,622,650,656,674,679,1208],{"type":470,"tag":471,"props":472,"children":473},"element","p",{},[474],{"type":475,"value":464},"text",{"type":470,"tag":477,"props":478,"children":479},"ul",{},[480,486],{"type":470,"tag":481,"props":482,"children":483},"li",{},[484],{"type":475,"value":485},"若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]",{"type":470,"tag":481,"props":487,"children":488},{},[489],{"type":475,"value":490},"若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]\n注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。",{"type":470,"tag":471,"props":492,"children":493},{},[494],{"type":475,"value":495},"给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。",{"type":470,"tag":471,"props":497,"children":498},{},[499],{"type":475,"value":500},"你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。",{"type":470,"tag":471,"props":502,"children":503},{},[504],{"type":475,"value":505},"示例 1：",{"type":470,"tag":507,"props":508,"children":511},"pre",{"className":509,"code":510,"language":475,"meta":463,"style":463},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：nums = [3,4,5,1,2]\n输出：1\n解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n",[512],{"type":470,"tag":513,"props":514,"children":515},"code",{"__ignoreMap":463},[516,527,536],{"type":470,"tag":517,"props":518,"children":521},"span",{"class":519,"line":520},"line",1,[522],{"type":470,"tag":517,"props":523,"children":524},{},[525],{"type":475,"value":526},"输入：nums = [3,4,5,1,2]\n",{"type":470,"tag":517,"props":528,"children":530},{"class":519,"line":529},2,[531],{"type":470,"tag":517,"props":532,"children":533},{},[534],{"type":475,"value":535},"输出：1\n",{"type":470,"tag":517,"props":537,"children":539},{"class":519,"line":538},3,[540],{"type":470,"tag":517,"props":541,"children":542},{},[543],{"type":475,"value":544},"解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n",{"type":470,"tag":471,"props":546,"children":547},{},[548],{"type":475,"value":549},"示例 2：",{"type":470,"tag":507,"props":551,"children":553},{"className":509,"code":552,"language":475,"meta":463,"style":463},"输入：nums = [4,5,6,7,0,1,2]\n输出：0\n解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。\n",[554],{"type":470,"tag":513,"props":555,"children":556},{"__ignoreMap":463},[557,565,573],{"type":470,"tag":517,"props":558,"children":559},{"class":519,"line":520},[560],{"type":470,"tag":517,"props":561,"children":562},{},[563],{"type":475,"value":564},"输入：nums = [4,5,6,7,0,1,2]\n",{"type":470,"tag":517,"props":566,"children":567},{"class":519,"line":529},[568],{"type":470,"tag":517,"props":569,"children":570},{},[571],{"type":475,"value":572},"输出：0\n",{"type":470,"tag":517,"props":574,"children":575},{"class":519,"line":538},[576],{"type":470,"tag":517,"props":577,"children":578},{},[579],{"type":475,"value":580},"解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。\n",{"type":470,"tag":471,"props":582,"children":583},{},[584],{"type":475,"value":585},"示例 3：",{"type":470,"tag":507,"props":587,"children":589},{"className":509,"code":588,"language":475,"meta":463,"style":463},"输入：nums = [11,13,15,17]\n输出：11\n解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n",[590],{"type":470,"tag":513,"props":591,"children":592},{"__ignoreMap":463},[593,601,609],{"type":470,"tag":517,"props":594,"children":595},{"class":519,"line":520},[596],{"type":470,"tag":517,"props":597,"children":598},{},[599],{"type":475,"value":600},"输入：nums = [11,13,15,17]\n",{"type":470,"tag":517,"props":602,"children":603},{"class":519,"line":529},[604],{"type":470,"tag":517,"props":605,"children":606},{},[607],{"type":475,"value":608},"输出：11\n",{"type":470,"tag":517,"props":610,"children":611},{"class":519,"line":538},[612],{"type":470,"tag":517,"props":613,"children":614},{},[615],{"type":475,"value":616},"解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n",{"type":470,"tag":471,"props":618,"children":619},{},[620],{"type":475,"value":621},"提示：",{"type":470,"tag":477,"props":623,"children":624},{},[625,630,635,640,645],{"type":470,"tag":481,"props":626,"children":627},{},[628],{"type":475,"value":629},"n == nums.length",{"type":470,"tag":481,"props":631,"children":632},{},[633],{"type":475,"value":634},"1 \u003C= n \u003C= 5000",{"type":470,"tag":481,"props":636,"children":637},{},[638],{"type":475,"value":639},"-5000 \u003C= nums[i] \u003C= 5000",{"type":470,"tag":481,"props":641,"children":642},{},[643],{"type":475,"value":644},"nums 中的所有整数 互不相同",{"type":470,"tag":481,"props":646,"children":647},{},[648],{"type":475,"value":649},"nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转",{"type":470,"tag":651,"props":652,"children":654},"h2",{"id":653},"解题思路",[655],{"type":475,"value":653},{"type":470,"tag":477,"props":657,"children":658},{},[659,664,669],{"type":470,"tag":481,"props":660,"children":661},{},[662],{"type":475,"value":663},"经过分析，红色即最小值左侧，蓝色即最小值及其右侧",{"type":470,"tag":481,"props":665,"children":666},{},[667],{"type":475,"value":668},"n - 1 一定是蓝色",{"type":470,"tag":481,"props":670,"children":671},{},[672],{"type":475,"value":673},"总结：小于最后一个数，就是蓝色，否则就是红色",{"type":470,"tag":651,"props":675,"children":677},{"id":676},"实现",[678],{"type":475,"value":676},{"type":470,"tag":507,"props":680,"children":684},{"className":681,"code":682,"language":683,"meta":463,"style":463},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  // [0, n - 2]\n  // (-1, n - 1) 开区间写法\n  let len = nums.length;\n  let l = -1;\n  let r = len - 1;\n  while (l + 1 \u003C r) {\n    let mid = (l + r) >> 1;\n    if (nums[mid] \u003C nums[len - 1]) {\n      r = mid; // 染蓝色\n    } else {\n      l = mid; // 染红色\n    }\n  }\n  return nums[r];\n};\n","js",[685],{"type":470,"tag":513,"props":686,"children":687},{"__ignoreMap":463},[688,697,723,740,749,793,802,811,852,884,918,959,1011,1074,1101,1120,1146,1155,1164,1195],{"type":470,"tag":517,"props":689,"children":690},{"class":519,"line":520},[691],{"type":470,"tag":517,"props":692,"children":694},{"style":693},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[695],{"type":475,"value":696},"/**\n",{"type":470,"tag":517,"props":698,"children":699},{"class":519,"line":529},[700,705,711,717],{"type":470,"tag":517,"props":701,"children":702},{"style":693},[703],{"type":475,"value":704}," * ",{"type":470,"tag":517,"props":706,"children":708},{"style":707},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[709],{"type":475,"value":710},"@param",{"type":470,"tag":517,"props":712,"children":714},{"style":713},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[715],{"type":475,"value":716}," {number[]}",{"type":470,"tag":517,"props":718,"children":720},{"style":719},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[721],{"type":475,"value":722}," nums\n",{"type":470,"tag":517,"props":724,"children":725},{"class":519,"line":538},[726,730,735],{"type":470,"tag":517,"props":727,"children":728},{"style":693},[729],{"type":475,"value":704},{"type":470,"tag":517,"props":731,"children":732},{"style":707},[733],{"type":475,"value":734},"@return",{"type":470,"tag":517,"props":736,"children":737},{"style":713},[738],{"type":475,"value":739}," {number}\n",{"type":470,"tag":517,"props":741,"children":743},{"class":519,"line":742},4,[744],{"type":470,"tag":517,"props":745,"children":746},{"style":693},[747],{"type":475,"value":748}," */\n",{"type":470,"tag":517,"props":750,"children":752},{"class":519,"line":751},5,[753,759,765,771,776,782,788],{"type":470,"tag":517,"props":754,"children":756},{"style":755},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[757],{"type":475,"value":758},"var",{"type":470,"tag":517,"props":760,"children":762},{"style":761},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[763],{"type":475,"value":764}," findMin",{"type":470,"tag":517,"props":766,"children":768},{"style":767},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[769],{"type":475,"value":770}," =",{"type":470,"tag":517,"props":772,"children":773},{"style":755},[774],{"type":475,"value":775}," function",{"type":470,"tag":517,"props":777,"children":779},{"style":778},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[780],{"type":475,"value":781}," (",{"type":470,"tag":517,"props":783,"children":785},{"style":784},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[786],{"type":475,"value":787},"nums",{"type":470,"tag":517,"props":789,"children":790},{"style":778},[791],{"type":475,"value":792},") {\n",{"type":470,"tag":517,"props":794,"children":796},{"class":519,"line":795},6,[797],{"type":470,"tag":517,"props":798,"children":799},{"style":693},[800],{"type":475,"value":801},"  // [0, n - 2]\n",{"type":470,"tag":517,"props":803,"children":805},{"class":519,"line":804},7,[806],{"type":470,"tag":517,"props":807,"children":808},{"style":693},[809],{"type":475,"value":810},"  // (-1, n - 1) 开区间写法\n",{"type":470,"tag":517,"props":812,"children":814},{"class":519,"line":813},8,[815,820,826,830,835,841,846],{"type":470,"tag":517,"props":816,"children":817},{"style":755},[818],{"type":475,"value":819},"  let",{"type":470,"tag":517,"props":821,"children":823},{"style":822},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[824],{"type":475,"value":825}," len",{"type":470,"tag":517,"props":827,"children":828},{"style":767},[829],{"type":475,"value":770},{"type":470,"tag":517,"props":831,"children":832},{"style":822},[833],{"type":475,"value":834}," nums",{"type":470,"tag":517,"props":836,"children":838},{"style":837},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[839],{"type":475,"value":840},".",{"type":470,"tag":517,"props":842,"children":843},{"style":778},[844],{"type":475,"value":845},"length",{"type":470,"tag":517,"props":847,"children":849},{"style":848},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[850],{"type":475,"value":851},";\n",{"type":470,"tag":517,"props":853,"children":855},{"class":519,"line":854},9,[856,860,865,869,874,880],{"type":470,"tag":517,"props":857,"children":858},{"style":755},[859],{"type":475,"value":819},{"type":470,"tag":517,"props":861,"children":862},{"style":822},[863],{"type":475,"value":864}," l",{"type":470,"tag":517,"props":866,"children":867},{"style":767},[868],{"type":475,"value":770},{"type":470,"tag":517,"props":870,"children":871},{"style":767},[872],{"type":475,"value":873}," -",{"type":470,"tag":517,"props":875,"children":877},{"style":876},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[878],{"type":475,"value":879},"1",{"type":470,"tag":517,"props":881,"children":882},{"style":848},[883],{"type":475,"value":851},{"type":470,"tag":517,"props":885,"children":887},{"class":519,"line":886},10,[888,892,897,901,905,909,914],{"type":470,"tag":517,"props":889,"children":890},{"style":755},[891],{"type":475,"value":819},{"type":470,"tag":517,"props":893,"children":894},{"style":822},[895],{"type":475,"value":896}," r",{"type":470,"tag":517,"props":898,"children":899},{"style":767},[900],{"type":475,"value":770},{"type":470,"tag":517,"props":902,"children":903},{"style":822},[904],{"type":475,"value":825},{"type":470,"tag":517,"props":906,"children":907},{"style":767},[908],{"type":475,"value":873},{"type":470,"tag":517,"props":910,"children":911},{"style":876},[912],{"type":475,"value":913}," 1",{"type":470,"tag":517,"props":915,"children":916},{"style":848},[917],{"type":475,"value":851},{"type":470,"tag":517,"props":919,"children":921},{"class":519,"line":920},11,[922,928,932,937,942,946,951,955],{"type":470,"tag":517,"props":923,"children":925},{"style":924},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[926],{"type":475,"value":927},"  while",{"type":470,"tag":517,"props":929,"children":930},{"style":778},[931],{"type":475,"value":781},{"type":470,"tag":517,"props":933,"children":934},{"style":822},[935],{"type":475,"value":936},"l",{"type":470,"tag":517,"props":938,"children":939},{"style":767},[940],{"type":475,"value":941}," +",{"type":470,"tag":517,"props":943,"children":944},{"style":876},[945],{"type":475,"value":913},{"type":470,"tag":517,"props":947,"children":948},{"style":767},[949],{"type":475,"value":950}," \u003C",{"type":470,"tag":517,"props":952,"children":953},{"style":822},[954],{"type":475,"value":896},{"type":470,"tag":517,"props":956,"children":957},{"style":778},[958],{"type":475,"value":792},{"type":470,"tag":517,"props":960,"children":962},{"class":519,"line":961},12,[963,968,973,977,981,985,989,993,998,1003,1007],{"type":470,"tag":517,"props":964,"children":965},{"style":755},[966],{"type":475,"value":967},"    let",{"type":470,"tag":517,"props":969,"children":970},{"style":822},[971],{"type":475,"value":972}," mid",{"type":470,"tag":517,"props":974,"children":975},{"style":767},[976],{"type":475,"value":770},{"type":470,"tag":517,"props":978,"children":979},{"style":778},[980],{"type":475,"value":781},{"type":470,"tag":517,"props":982,"children":983},{"style":822},[984],{"type":475,"value":936},{"type":470,"tag":517,"props":986,"children":987},{"style":767},[988],{"type":475,"value":941},{"type":470,"tag":517,"props":990,"children":991},{"style":822},[992],{"type":475,"value":896},{"type":470,"tag":517,"props":994,"children":995},{"style":778},[996],{"type":475,"value":997},") ",{"type":470,"tag":517,"props":999,"children":1000},{"style":767},[1001],{"type":475,"value":1002},">>",{"type":470,"tag":517,"props":1004,"children":1005},{"style":876},[1006],{"type":475,"value":913},{"type":470,"tag":517,"props":1008,"children":1009},{"style":848},[1010],{"type":475,"value":851},{"type":470,"tag":517,"props":1012,"children":1014},{"class":519,"line":1013},13,[1015,1020,1024,1028,1033,1038,1043,1048,1052,1056,1061,1065,1069],{"type":470,"tag":517,"props":1016,"children":1017},{"style":924},[1018],{"type":475,"value":1019},"    if",{"type":470,"tag":517,"props":1021,"children":1022},{"style":778},[1023],{"type":475,"value":781},{"type":470,"tag":517,"props":1025,"children":1026},{"style":822},[1027],{"type":475,"value":787},{"type":470,"tag":517,"props":1029,"children":1030},{"style":778},[1031],{"type":475,"value":1032},"[",{"type":470,"tag":517,"props":1034,"children":1035},{"style":822},[1036],{"type":475,"value":1037},"mid",{"type":470,"tag":517,"props":1039,"children":1040},{"style":778},[1041],{"type":475,"value":1042},"] ",{"type":470,"tag":517,"props":1044,"children":1045},{"style":767},[1046],{"type":475,"value":1047},"\u003C",{"type":470,"tag":517,"props":1049,"children":1050},{"style":822},[1051],{"type":475,"value":834},{"type":470,"tag":517,"props":1053,"children":1054},{"style":778},[1055],{"type":475,"value":1032},{"type":470,"tag":517,"props":1057,"children":1058},{"style":822},[1059],{"type":475,"value":1060},"len",{"type":470,"tag":517,"props":1062,"children":1063},{"style":767},[1064],{"type":475,"value":873},{"type":470,"tag":517,"props":1066,"children":1067},{"style":876},[1068],{"type":475,"value":913},{"type":470,"tag":517,"props":1070,"children":1071},{"style":778},[1072],{"type":475,"value":1073},"]) {\n",{"type":470,"tag":517,"props":1075,"children":1077},{"class":519,"line":1076},14,[1078,1083,1087,1091,1096],{"type":470,"tag":517,"props":1079,"children":1080},{"style":822},[1081],{"type":475,"value":1082},"      r",{"type":470,"tag":517,"props":1084,"children":1085},{"style":767},[1086],{"type":475,"value":770},{"type":470,"tag":517,"props":1088,"children":1089},{"style":822},[1090],{"type":475,"value":972},{"type":470,"tag":517,"props":1092,"children":1093},{"style":848},[1094],{"type":475,"value":1095},";",{"type":470,"tag":517,"props":1097,"children":1098},{"style":693},[1099],{"type":475,"value":1100}," // 染蓝色\n",{"type":470,"tag":517,"props":1102,"children":1104},{"class":519,"line":1103},15,[1105,1110,1115],{"type":470,"tag":517,"props":1106,"children":1107},{"style":778},[1108],{"type":475,"value":1109},"    } ",{"type":470,"tag":517,"props":1111,"children":1112},{"style":924},[1113],{"type":475,"value":1114},"else",{"type":470,"tag":517,"props":1116,"children":1117},{"style":778},[1118],{"type":475,"value":1119}," {\n",{"type":470,"tag":517,"props":1121,"children":1123},{"class":519,"line":1122},16,[1124,1129,1133,1137,1141],{"type":470,"tag":517,"props":1125,"children":1126},{"style":822},[1127],{"type":475,"value":1128},"      l",{"type":470,"tag":517,"props":1130,"children":1131},{"style":767},[1132],{"type":475,"value":770},{"type":470,"tag":517,"props":1134,"children":1135},{"style":822},[1136],{"type":475,"value":972},{"type":470,"tag":517,"props":1138,"children":1139},{"style":848},[1140],{"type":475,"value":1095},{"type":470,"tag":517,"props":1142,"children":1143},{"style":693},[1144],{"type":475,"value":1145}," // 染红色\n",{"type":470,"tag":517,"props":1147,"children":1149},{"class":519,"line":1148},17,[1150],{"type":470,"tag":517,"props":1151,"children":1152},{"style":778},[1153],{"type":475,"value":1154},"    }\n",{"type":470,"tag":517,"props":1156,"children":1158},{"class":519,"line":1157},18,[1159],{"type":470,"tag":517,"props":1160,"children":1161},{"style":778},[1162],{"type":475,"value":1163},"  }\n",{"type":470,"tag":517,"props":1165,"children":1167},{"class":519,"line":1166},19,[1168,1173,1177,1181,1186,1191],{"type":470,"tag":517,"props":1169,"children":1170},{"style":924},[1171],{"type":475,"value":1172},"  return",{"type":470,"tag":517,"props":1174,"children":1175},{"style":822},[1176],{"type":475,"value":834},{"type":470,"tag":517,"props":1178,"children":1179},{"style":778},[1180],{"type":475,"value":1032},{"type":470,"tag":517,"props":1182,"children":1183},{"style":822},[1184],{"type":475,"value":1185},"r",{"type":470,"tag":517,"props":1187,"children":1188},{"style":778},[1189],{"type":475,"value":1190},"]",{"type":470,"tag":517,"props":1192,"children":1193},{"style":848},[1194],{"type":475,"value":851},{"type":470,"tag":517,"props":1196,"children":1198},{"class":519,"line":1197},20,[1199,1204],{"type":470,"tag":517,"props":1200,"children":1201},{"style":778},[1202],{"type":475,"value":1203},"}",{"type":470,"tag":517,"props":1205,"children":1206},{"style":848},[1207],{"type":475,"value":851},{"type":470,"tag":1209,"props":1210,"children":1211},"style",{},[1212],{"type":475,"value":1213},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":463,"searchDepth":751,"depth":751,"links":1215},[1216,1217],{"id":653,"depth":529,"text":653},{"id":676,"depth":529,"text":676},"markdown","content:1.algorithm:3.leetcode:3.major:153.find-minimum-in-rotated-sorted-array.md","content","1.algorithm/3.leetcode/3.major/153.find-minimum-in-rotated-sorted-array.md","md",[1224,1226],{"_path":174,"title":173,"description":1225},"给你一个字符串 s ，请你反转字符串中 单词 的顺序。",{"_path":180,"title":179,"description":1227},"设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。",1713626054323]