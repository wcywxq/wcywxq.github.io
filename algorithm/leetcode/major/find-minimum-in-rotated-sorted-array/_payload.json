[{"data":1,"prerenderedAt":1345},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array":552,"/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array-surround":1340},[4,272,311,529,537],{"title":5,"_path":6,"children":7,"icon":271},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265,268],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.300 最长递增子序列","/algorithm/leetcode/major/longest-increasing-subsequence",{"title":221,"_path":222},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":224,"_path":225},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":227,"_path":228},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":230,"_path":231},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":233,"_path":234},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":236,"_path":237},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":239,"_path":240},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":242,"_path":243},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":245,"_path":246},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":248,"_path":249},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":251,"_path":252},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":254,"_path":255},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":257,"_path":258},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":260,"_path":261},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":263,"_path":264},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":266,"_path":267},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":269,"_path":270},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":273,"_path":274,"children":275,"icon":310},"八股文","/endorsement",[276,286,297],{"title":277,"_path":278,"children":279},"面向对象","/endorsement/oop",[280,283],{"title":281,"_path":282},"面向对象基本概念","/endorsement/oop/oop-basic-concept",{"title":284,"_path":285},"设计模式","/endorsement/oop/design-mode",{"title":287,"_path":288,"children":289},"构建工具","/endorsement/build-tools",[290],{"title":291,"_path":292,"children":293},"Webpack","/endorsement/build-tools/webpack",[294],{"title":295,"_path":296},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":298,"_path":299,"children":300},"Html","/endorsement/html",[301,304,307],{"title":302,"_path":303},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":305,"_path":306},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":308,"_path":309},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":312,"_path":313,"children":314,"icon":528},"代码考核","/code-assessment",[315,420,521],{"title":316,"_path":317,"children":318},"源码实现","/code-assessment/source",[319,353,369,397,404,411,414,417],{"title":320,"_path":321,"children":322},"原生 api","/code-assessment/source/native-api",[323,326,329,332,335,338,341,344,347,350],{"title":324,"_path":325},"polyfill","/code-assessment/source/native-api/polyfill",{"title":327,"_path":328},"ajax","/code-assessment/source/native-api/ajax",{"title":330,"_path":331},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":333,"_path":334},"new 操作符","/code-assessment/source/native-api/new",{"title":336,"_path":337},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":339,"_path":340},"定时器","/code-assessment/source/native-api/timer",{"title":342,"_path":343},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":345,"_path":346},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":348,"_path":349},"extends","/code-assessment/source/native-api/extends",{"title":351,"_path":352},"Promise","/code-assessment/source/native-api/promise",{"title":354,"_path":355,"children":356},"函数 Function","/code-assessment/source/function",[357,360,363,366],{"title":358,"_path":359},"函数防抖","/code-assessment/source/function/debounce",{"title":361,"_path":362},"函数节流","/code-assessment/source/function/throttle",{"title":364,"_path":365},"函数柯理化","/code-assessment/source/function/curry",{"title":367,"_path":368},"函数睡眠","/code-assessment/source/function/sleep",{"title":370,"_path":371,"children":372},"数组 Array","/code-assessment/source/array",[373,376,379,382,385,388,391,394],{"title":374,"_path":375},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":377,"_path":378},"数组扁平化","/code-assessment/source/array/flat",{"title":380,"_path":381},"原型方法","/code-assessment/source/array/prototype-method",{"title":383,"_path":384},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":386,"_path":387},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":389,"_path":390},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":392,"_path":393},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":395,"_path":396},"二维数组","/code-assessment/source/array/2d-array",{"title":398,"_path":399,"children":400},"字符串 String","/code-assessment/source/string",[401],{"title":402,"_path":403},"repeat()","/code-assessment/source/string/repeat",{"title":405,"_path":406,"children":407},"集合 Set","/code-assessment/source/set",[408],{"title":409,"_path":410},"遍历集合","/code-assessment/source/set/traverse",{"title":412,"_path":413},"获取通用类型","/code-assessment/source/get-generic-type",{"title":415,"_path":416},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":418,"_path":419},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":421,"_path":422,"children":423},"业务场景","/code-assessment/scene",[424,454,464,467,470,473,476,479,482,485,488,491,494,497,500,503,506,509,512,515,518],{"title":351,"_path":425,"children":426},"/code-assessment/scene/promise",[427,430,433,436,439,442,445,448,451],{"title":428,"_path":429},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":431,"_path":432},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":434,"_path":435},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":437,"_path":438},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":440,"_path":441},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":443,"_path":444},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":446,"_path":447},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":449,"_path":450},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":452,"_path":453},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":455,"_path":456,"children":457},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[458,461],{"title":459,"_path":460},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":462,"_path":463},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":465,"_path":466},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":468,"_path":469},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":471,"_path":472},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":474,"_path":475},"倒计时","/code-assessment/scene/countdown",{"title":477,"_path":478},"日期格式化","/code-assessment/scene/date-format",{"title":480,"_path":481},"实现前端路由","/code-assessment/scene/frontend-route",{"title":483,"_path":484},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":486,"_path":487},"lodash.get","/code-assessment/scene/lodash-get",{"title":489,"_path":490},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":492,"_path":493},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":495,"_path":496},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":498,"_path":499},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":501,"_path":502},"随机数","/code-assessment/scene/random-number",{"title":504,"_path":505},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":507,"_path":508},"sku 算法实现","/code-assessment/scene/sku",{"title":510,"_path":511},"整数分割","/code-assessment/scene/split-number",{"title":513,"_path":514},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":516,"_path":517},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":519,"_path":520},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":522,"_path":523,"children":524},"Ts 类型挑战","/code-assessment/type-challeges",[525],{"title":526,"_path":527},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":530,"_path":531,"children":532,"icon":536},"项目","/project",[533],{"title":534,"_path":535},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":538,"_path":539,"children":540,"icon":551},"后端语言","/backend-languages",[541],{"title":542,"_path":543,"children":544},"Python","/backend-languages/python",[545,548],{"title":546,"_path":547},"基础","/backend-languages/python/base",{"title":549,"_path":550},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":183,"_dir":553,"_draft":554,"_partial":554,"_locale":555,"title":182,"description":556,"url":557,"body":558,"_type":1335,"_id":1336,"_source":1337,"_file":1338,"_extension":1339},"major",false,"","已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：","https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array",{"type":559,"children":560,"toc":1331},"root",[561,568,583,588,593,598,637,642,673,678,709,714,742,748,766,771,1325],{"type":562,"tag":563,"props":564,"children":565},"element","p",{},[566],{"type":567,"value":556},"text",{"type":562,"tag":569,"props":570,"children":571},"ul",{},[572,578],{"type":562,"tag":573,"props":574,"children":575},"li",{},[576],{"type":567,"value":577},"若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]",{"type":562,"tag":573,"props":579,"children":580},{},[581],{"type":567,"value":582},"若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]\n注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。",{"type":562,"tag":563,"props":584,"children":585},{},[586],{"type":567,"value":587},"给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。",{"type":562,"tag":563,"props":589,"children":590},{},[591],{"type":567,"value":592},"你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。",{"type":562,"tag":563,"props":594,"children":595},{},[596],{"type":567,"value":597},"示例 1：",{"type":562,"tag":599,"props":600,"children":603},"pre",{"className":601,"code":602,"language":567,"meta":555,"style":555},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：nums = [3,4,5,1,2]\n输出：1\n解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n",[604],{"type":562,"tag":605,"props":606,"children":607},"code",{"__ignoreMap":555},[608,619,628],{"type":562,"tag":609,"props":610,"children":613},"span",{"class":611,"line":612},"line",1,[614],{"type":562,"tag":609,"props":615,"children":616},{},[617],{"type":567,"value":618},"输入：nums = [3,4,5,1,2]\n",{"type":562,"tag":609,"props":620,"children":622},{"class":611,"line":621},2,[623],{"type":562,"tag":609,"props":624,"children":625},{},[626],{"type":567,"value":627},"输出：1\n",{"type":562,"tag":609,"props":629,"children":631},{"class":611,"line":630},3,[632],{"type":562,"tag":609,"props":633,"children":634},{},[635],{"type":567,"value":636},"解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n",{"type":562,"tag":563,"props":638,"children":639},{},[640],{"type":567,"value":641},"示例 2：",{"type":562,"tag":599,"props":643,"children":645},{"className":601,"code":644,"language":567,"meta":555,"style":555},"输入：nums = [4,5,6,7,0,1,2]\n输出：0\n解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。\n",[646],{"type":562,"tag":605,"props":647,"children":648},{"__ignoreMap":555},[649,657,665],{"type":562,"tag":609,"props":650,"children":651},{"class":611,"line":612},[652],{"type":562,"tag":609,"props":653,"children":654},{},[655],{"type":567,"value":656},"输入：nums = [4,5,6,7,0,1,2]\n",{"type":562,"tag":609,"props":658,"children":659},{"class":611,"line":621},[660],{"type":562,"tag":609,"props":661,"children":662},{},[663],{"type":567,"value":664},"输出：0\n",{"type":562,"tag":609,"props":666,"children":667},{"class":611,"line":630},[668],{"type":562,"tag":609,"props":669,"children":670},{},[671],{"type":567,"value":672},"解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。\n",{"type":562,"tag":563,"props":674,"children":675},{},[676],{"type":567,"value":677},"示例 3：",{"type":562,"tag":599,"props":679,"children":681},{"className":601,"code":680,"language":567,"meta":555,"style":555},"输入：nums = [11,13,15,17]\n输出：11\n解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n",[682],{"type":562,"tag":605,"props":683,"children":684},{"__ignoreMap":555},[685,693,701],{"type":562,"tag":609,"props":686,"children":687},{"class":611,"line":612},[688],{"type":562,"tag":609,"props":689,"children":690},{},[691],{"type":567,"value":692},"输入：nums = [11,13,15,17]\n",{"type":562,"tag":609,"props":694,"children":695},{"class":611,"line":621},[696],{"type":562,"tag":609,"props":697,"children":698},{},[699],{"type":567,"value":700},"输出：11\n",{"type":562,"tag":609,"props":702,"children":703},{"class":611,"line":630},[704],{"type":562,"tag":609,"props":705,"children":706},{},[707],{"type":567,"value":708},"解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n",{"type":562,"tag":563,"props":710,"children":711},{},[712],{"type":567,"value":713},"提示：",{"type":562,"tag":569,"props":715,"children":716},{},[717,722,727,732,737],{"type":562,"tag":573,"props":718,"children":719},{},[720],{"type":567,"value":721},"n == nums.length",{"type":562,"tag":573,"props":723,"children":724},{},[725],{"type":567,"value":726},"1 \u003C= n \u003C= 5000",{"type":562,"tag":573,"props":728,"children":729},{},[730],{"type":567,"value":731},"-5000 \u003C= nums[i] \u003C= 5000",{"type":562,"tag":573,"props":733,"children":734},{},[735],{"type":567,"value":736},"nums 中的所有整数 互不相同",{"type":562,"tag":573,"props":738,"children":739},{},[740],{"type":567,"value":741},"nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转",{"type":562,"tag":743,"props":744,"children":746},"h2",{"id":745},"解题思路",[747],{"type":567,"value":745},{"type":562,"tag":569,"props":749,"children":750},{},[751,756,761],{"type":562,"tag":573,"props":752,"children":753},{},[754],{"type":567,"value":755},"经过分析，红色即最小值左侧，蓝色即最小值及其右侧",{"type":562,"tag":573,"props":757,"children":758},{},[759],{"type":567,"value":760},"n - 1 一定是蓝色",{"type":562,"tag":573,"props":762,"children":763},{},[764],{"type":567,"value":765},"总结：小于最后一个数，就是蓝色，否则就是红色",{"type":562,"tag":743,"props":767,"children":769},{"id":768},"实现",[770],{"type":567,"value":768},{"type":562,"tag":599,"props":772,"children":776},{"className":773,"code":774,"language":775,"meta":555,"style":555},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  // [0, n - 2]\n  // (-1, n - 1) 开区间写法\n  let len = nums.length;\n  let l = -1;\n  let r = len - 1;\n  while (l + 1 \u003C r) {\n    let mid = (l + r) >> 1;\n    if (nums[mid] \u003C nums[len - 1]) {\n      r = mid; // 染蓝色\n    } else {\n      l = mid; // 染红色\n    }\n  }\n  return nums[r];\n};\n","js",[777],{"type":562,"tag":605,"props":778,"children":779},{"__ignoreMap":555},[780,789,831,861,870,916,925,934,973,1005,1039,1083,1134,1200,1227,1245,1271,1280,1289,1316],{"type":562,"tag":609,"props":781,"children":782},{"class":611,"line":612},[783],{"type":562,"tag":609,"props":784,"children":786},{"style":785},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[787],{"type":567,"value":788},"/**\n",{"type":562,"tag":609,"props":790,"children":791},{"class":611,"line":621},[792,797,803,809,814,820,825],{"type":562,"tag":609,"props":793,"children":794},{"style":785},[795],{"type":567,"value":796}," * ",{"type":562,"tag":609,"props":798,"children":800},{"style":799},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[801],{"type":567,"value":802},"@",{"type":562,"tag":609,"props":804,"children":806},{"style":805},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[807],{"type":567,"value":808},"param",{"type":562,"tag":609,"props":810,"children":811},{"style":799},[812],{"type":567,"value":813}," {",{"type":562,"tag":609,"props":815,"children":817},{"style":816},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[818],{"type":567,"value":819},"number[]",{"type":562,"tag":609,"props":821,"children":822},{"style":799},[823],{"type":567,"value":824},"}",{"type":562,"tag":609,"props":826,"children":828},{"style":827},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[829],{"type":567,"value":830}," nums\n",{"type":562,"tag":609,"props":832,"children":833},{"class":611,"line":630},[834,838,842,847,851,856],{"type":562,"tag":609,"props":835,"children":836},{"style":785},[837],{"type":567,"value":796},{"type":562,"tag":609,"props":839,"children":840},{"style":799},[841],{"type":567,"value":802},{"type":562,"tag":609,"props":843,"children":844},{"style":805},[845],{"type":567,"value":846},"return",{"type":562,"tag":609,"props":848,"children":849},{"style":799},[850],{"type":567,"value":813},{"type":562,"tag":609,"props":852,"children":853},{"style":816},[854],{"type":567,"value":855},"number",{"type":562,"tag":609,"props":857,"children":858},{"style":799},[859],{"type":567,"value":860},"}\n",{"type":562,"tag":609,"props":862,"children":864},{"class":611,"line":863},4,[865],{"type":562,"tag":609,"props":866,"children":867},{"style":785},[868],{"type":567,"value":869}," */\n",{"type":562,"tag":609,"props":871,"children":873},{"class":611,"line":872},5,[874,880,886,891,896,901,906,911],{"type":562,"tag":609,"props":875,"children":877},{"style":876},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[878],{"type":567,"value":879},"var",{"type":562,"tag":609,"props":881,"children":883},{"style":882},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[884],{"type":567,"value":885}," findMin",{"type":562,"tag":609,"props":887,"children":888},{"style":799},[889],{"type":567,"value":890}," =",{"type":562,"tag":609,"props":892,"children":893},{"style":876},[894],{"type":567,"value":895}," function",{"type":562,"tag":609,"props":897,"children":898},{"style":799},[899],{"type":567,"value":900}," (",{"type":562,"tag":609,"props":902,"children":903},{"style":827},[904],{"type":567,"value":905},"nums",{"type":562,"tag":609,"props":907,"children":908},{"style":799},[909],{"type":567,"value":910},")",{"type":562,"tag":609,"props":912,"children":913},{"style":799},[914],{"type":567,"value":915}," {\n",{"type":562,"tag":609,"props":917,"children":919},{"class":611,"line":918},6,[920],{"type":562,"tag":609,"props":921,"children":922},{"style":785},[923],{"type":567,"value":924},"  // [0, n - 2]\n",{"type":562,"tag":609,"props":926,"children":928},{"class":611,"line":927},7,[929],{"type":562,"tag":609,"props":930,"children":931},{"style":785},[932],{"type":567,"value":933},"  // (-1, n - 1) 开区间写法\n",{"type":562,"tag":609,"props":935,"children":937},{"class":611,"line":936},8,[938,943,948,952,957,962,968],{"type":562,"tag":609,"props":939,"children":940},{"style":876},[941],{"type":567,"value":942},"  let",{"type":562,"tag":609,"props":944,"children":945},{"style":827},[946],{"type":567,"value":947}," len",{"type":562,"tag":609,"props":949,"children":950},{"style":799},[951],{"type":567,"value":890},{"type":562,"tag":609,"props":953,"children":954},{"style":827},[955],{"type":567,"value":956}," nums",{"type":562,"tag":609,"props":958,"children":959},{"style":799},[960],{"type":567,"value":961},".",{"type":562,"tag":609,"props":963,"children":965},{"style":964},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[966],{"type":567,"value":967},"length",{"type":562,"tag":609,"props":969,"children":970},{"style":799},[971],{"type":567,"value":972},";\n",{"type":562,"tag":609,"props":974,"children":976},{"class":611,"line":975},9,[977,981,986,990,995,1001],{"type":562,"tag":609,"props":978,"children":979},{"style":876},[980],{"type":567,"value":942},{"type":562,"tag":609,"props":982,"children":983},{"style":827},[984],{"type":567,"value":985}," l",{"type":562,"tag":609,"props":987,"children":988},{"style":799},[989],{"type":567,"value":890},{"type":562,"tag":609,"props":991,"children":992},{"style":876},[993],{"type":567,"value":994}," -",{"type":562,"tag":609,"props":996,"children":998},{"style":997},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[999],{"type":567,"value":1000},"1",{"type":562,"tag":609,"props":1002,"children":1003},{"style":799},[1004],{"type":567,"value":972},{"type":562,"tag":609,"props":1006,"children":1008},{"class":611,"line":1007},10,[1009,1013,1018,1022,1026,1030,1035],{"type":562,"tag":609,"props":1010,"children":1011},{"style":876},[1012],{"type":567,"value":942},{"type":562,"tag":609,"props":1014,"children":1015},{"style":827},[1016],{"type":567,"value":1017}," r",{"type":562,"tag":609,"props":1019,"children":1020},{"style":799},[1021],{"type":567,"value":890},{"type":562,"tag":609,"props":1023,"children":1024},{"style":827},[1025],{"type":567,"value":947},{"type":562,"tag":609,"props":1027,"children":1028},{"style":876},[1029],{"type":567,"value":994},{"type":562,"tag":609,"props":1031,"children":1032},{"style":997},[1033],{"type":567,"value":1034}," 1",{"type":562,"tag":609,"props":1036,"children":1037},{"style":799},[1038],{"type":567,"value":972},{"type":562,"tag":609,"props":1040,"children":1042},{"class":611,"line":1041},11,[1043,1048,1052,1057,1062,1066,1071,1075,1079],{"type":562,"tag":609,"props":1044,"children":1045},{"style":805},[1046],{"type":567,"value":1047},"  while",{"type":562,"tag":609,"props":1049,"children":1050},{"style":799},[1051],{"type":567,"value":900},{"type":562,"tag":609,"props":1053,"children":1054},{"style":827},[1055],{"type":567,"value":1056},"l",{"type":562,"tag":609,"props":1058,"children":1059},{"style":876},[1060],{"type":567,"value":1061}," +",{"type":562,"tag":609,"props":1063,"children":1064},{"style":997},[1065],{"type":567,"value":1034},{"type":562,"tag":609,"props":1067,"children":1068},{"style":799},[1069],{"type":567,"value":1070}," \u003C",{"type":562,"tag":609,"props":1072,"children":1073},{"style":827},[1074],{"type":567,"value":1017},{"type":562,"tag":609,"props":1076,"children":1077},{"style":799},[1078],{"type":567,"value":910},{"type":562,"tag":609,"props":1080,"children":1081},{"style":799},[1082],{"type":567,"value":915},{"type":562,"tag":609,"props":1084,"children":1086},{"class":611,"line":1085},12,[1087,1092,1097,1101,1105,1109,1113,1117,1121,1126,1130],{"type":562,"tag":609,"props":1088,"children":1089},{"style":876},[1090],{"type":567,"value":1091},"    let",{"type":562,"tag":609,"props":1093,"children":1094},{"style":827},[1095],{"type":567,"value":1096}," mid",{"type":562,"tag":609,"props":1098,"children":1099},{"style":799},[1100],{"type":567,"value":890},{"type":562,"tag":609,"props":1102,"children":1103},{"style":799},[1104],{"type":567,"value":900},{"type":562,"tag":609,"props":1106,"children":1107},{"style":827},[1108],{"type":567,"value":1056},{"type":562,"tag":609,"props":1110,"children":1111},{"style":876},[1112],{"type":567,"value":1061},{"type":562,"tag":609,"props":1114,"children":1115},{"style":827},[1116],{"type":567,"value":1017},{"type":562,"tag":609,"props":1118,"children":1119},{"style":799},[1120],{"type":567,"value":910},{"type":562,"tag":609,"props":1122,"children":1123},{"style":876},[1124],{"type":567,"value":1125}," >>",{"type":562,"tag":609,"props":1127,"children":1128},{"style":997},[1129],{"type":567,"value":1034},{"type":562,"tag":609,"props":1131,"children":1132},{"style":799},[1133],{"type":567,"value":972},{"type":562,"tag":609,"props":1135,"children":1137},{"class":611,"line":1136},13,[1138,1143,1147,1151,1156,1161,1166,1170,1174,1178,1183,1187,1191,1196],{"type":562,"tag":609,"props":1139,"children":1140},{"style":805},[1141],{"type":567,"value":1142},"    if",{"type":562,"tag":609,"props":1144,"children":1145},{"style":799},[1146],{"type":567,"value":900},{"type":562,"tag":609,"props":1148,"children":1149},{"style":827},[1150],{"type":567,"value":905},{"type":562,"tag":609,"props":1152,"children":1153},{"style":799},[1154],{"type":567,"value":1155},"[",{"type":562,"tag":609,"props":1157,"children":1158},{"style":827},[1159],{"type":567,"value":1160},"mid",{"type":562,"tag":609,"props":1162,"children":1163},{"style":799},[1164],{"type":567,"value":1165},"]",{"type":562,"tag":609,"props":1167,"children":1168},{"style":799},[1169],{"type":567,"value":1070},{"type":562,"tag":609,"props":1171,"children":1172},{"style":827},[1173],{"type":567,"value":956},{"type":562,"tag":609,"props":1175,"children":1176},{"style":799},[1177],{"type":567,"value":1155},{"type":562,"tag":609,"props":1179,"children":1180},{"style":827},[1181],{"type":567,"value":1182},"len",{"type":562,"tag":609,"props":1184,"children":1185},{"style":876},[1186],{"type":567,"value":994},{"type":562,"tag":609,"props":1188,"children":1189},{"style":997},[1190],{"type":567,"value":1034},{"type":562,"tag":609,"props":1192,"children":1193},{"style":799},[1194],{"type":567,"value":1195},"])",{"type":562,"tag":609,"props":1197,"children":1198},{"style":799},[1199],{"type":567,"value":915},{"type":562,"tag":609,"props":1201,"children":1203},{"class":611,"line":1202},14,[1204,1209,1213,1217,1222],{"type":562,"tag":609,"props":1205,"children":1206},{"style":827},[1207],{"type":567,"value":1208},"      r",{"type":562,"tag":609,"props":1210,"children":1211},{"style":799},[1212],{"type":567,"value":890},{"type":562,"tag":609,"props":1214,"children":1215},{"style":827},[1216],{"type":567,"value":1096},{"type":562,"tag":609,"props":1218,"children":1219},{"style":799},[1220],{"type":567,"value":1221},";",{"type":562,"tag":609,"props":1223,"children":1224},{"style":785},[1225],{"type":567,"value":1226}," // 染蓝色\n",{"type":562,"tag":609,"props":1228,"children":1230},{"class":611,"line":1229},15,[1231,1236,1241],{"type":562,"tag":609,"props":1232,"children":1233},{"style":799},[1234],{"type":567,"value":1235},"    }",{"type":562,"tag":609,"props":1237,"children":1238},{"style":805},[1239],{"type":567,"value":1240}," else",{"type":562,"tag":609,"props":1242,"children":1243},{"style":799},[1244],{"type":567,"value":915},{"type":562,"tag":609,"props":1246,"children":1248},{"class":611,"line":1247},16,[1249,1254,1258,1262,1266],{"type":562,"tag":609,"props":1250,"children":1251},{"style":827},[1252],{"type":567,"value":1253},"      l",{"type":562,"tag":609,"props":1255,"children":1256},{"style":799},[1257],{"type":567,"value":890},{"type":562,"tag":609,"props":1259,"children":1260},{"style":827},[1261],{"type":567,"value":1096},{"type":562,"tag":609,"props":1263,"children":1264},{"style":799},[1265],{"type":567,"value":1221},{"type":562,"tag":609,"props":1267,"children":1268},{"style":785},[1269],{"type":567,"value":1270}," // 染红色\n",{"type":562,"tag":609,"props":1272,"children":1274},{"class":611,"line":1273},17,[1275],{"type":562,"tag":609,"props":1276,"children":1277},{"style":799},[1278],{"type":567,"value":1279},"    }\n",{"type":562,"tag":609,"props":1281,"children":1283},{"class":611,"line":1282},18,[1284],{"type":562,"tag":609,"props":1285,"children":1286},{"style":799},[1287],{"type":567,"value":1288},"  }\n",{"type":562,"tag":609,"props":1290,"children":1292},{"class":611,"line":1291},19,[1293,1298,1302,1306,1311],{"type":562,"tag":609,"props":1294,"children":1295},{"style":805},[1296],{"type":567,"value":1297},"  return",{"type":562,"tag":609,"props":1299,"children":1300},{"style":827},[1301],{"type":567,"value":956},{"type":562,"tag":609,"props":1303,"children":1304},{"style":799},[1305],{"type":567,"value":1155},{"type":562,"tag":609,"props":1307,"children":1308},{"style":827},[1309],{"type":567,"value":1310},"r",{"type":562,"tag":609,"props":1312,"children":1313},{"style":799},[1314],{"type":567,"value":1315},"];\n",{"type":562,"tag":609,"props":1317,"children":1319},{"class":611,"line":1318},20,[1320],{"type":562,"tag":609,"props":1321,"children":1322},{"style":799},[1323],{"type":567,"value":1324},"};\n",{"type":562,"tag":1326,"props":1327,"children":1328},"style",{},[1329],{"type":567,"value":1330},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":555,"searchDepth":872,"depth":872,"links":1332},[1333,1334],{"id":745,"depth":621,"text":745},{"id":768,"depth":621,"text":768},"markdown","content:1.algorithm:3.leetcode:3.major:153.find-minimum-in-rotated-sorted-array.md","content","1.algorithm/3.leetcode/3.major/153.find-minimum-in-rotated-sorted-array.md","md",[1341,1343],{"_path":180,"title":179,"description":1342},"给你一个字符串 s ，请你反转字符串中 单词 的顺序。",{"_path":186,"title":185,"description":1344},"设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。",1715137600021]