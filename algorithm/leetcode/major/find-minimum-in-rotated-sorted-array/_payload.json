[{"data":1,"prerenderedAt":1225},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array":457,"/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array-surround":1220},[4,260,289,434,442],{"title":5,"_path":6,"children":7,"icon":259},"算法","/algorithm",[8,22],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24,"children":25},"Leetcode 力扣","/algorithm/leetcode",[26,32,45],{"title":27,"_path":28,"children":29},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[30],{"title":31,"_path":28},"刷题索引",{"title":33,"_path":34,"children":35},"剑指 offer","/algorithm/leetcode/sword-ofter",[36,39,42],{"title":37,"_path":38},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":40,"_path":41},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":43,"_path":44},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":46,"_path":47,"children":48},"主题单","/algorithm/leetcode/major",[49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256],{"title":50,"_path":51},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":53,"_path":54},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":56,"_path":57},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":59,"_path":60},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":62,"_path":63},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":65,"_path":66},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":68,"_path":69},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":71,"_path":72},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":74,"_path":75},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":77,"_path":78},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":80,"_path":81},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":83,"_path":84},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":86,"_path":87},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":89,"_path":90},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":92,"_path":93},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":95,"_path":96},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":98,"_path":99},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":101,"_path":102},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":104,"_path":105},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":107,"_path":108},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":110,"_path":111},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":113,"_path":114},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":116,"_path":117},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":119,"_path":120},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":122,"_path":123},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":125,"_path":126},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":128,"_path":129},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":131,"_path":132},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":134,"_path":135},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":137,"_path":138},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":140,"_path":141},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":143,"_path":144},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":146,"_path":147},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":149,"_path":150},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":152,"_path":153},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":155,"_path":156},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":158,"_path":159},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":161,"_path":162},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":164,"_path":165},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":167,"_path":168},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":170,"_path":171},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":173,"_path":174},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":176,"_path":177},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":179,"_path":180},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":182,"_path":183},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":185,"_path":186},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":188,"_path":189},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":191,"_path":192},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":194,"_path":195},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":197,"_path":198},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":200,"_path":201},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":203,"_path":204},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":206,"_path":207},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":209,"_path":210},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":212,"_path":213},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":215,"_path":216},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":218,"_path":219},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":221,"_path":222},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":224,"_path":225},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":227,"_path":228},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":230,"_path":231},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":233,"_path":234},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":236,"_path":237},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":239,"_path":240},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":242,"_path":243},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":245,"_path":246},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":248,"_path":249},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":251,"_path":252},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":254,"_path":255},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":257,"_path":258},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":261,"_path":262,"children":263,"icon":288},"前端八股文","/frontend-endorsement",[264,275],{"title":265,"_path":266,"children":267},"构建工具","/frontend-endorsement/build-tools",[268],{"title":269,"_path":270,"children":271},"Webpack","/frontend-endorsement/build-tools/webpack",[272],{"title":273,"_path":274},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":276,"_path":277,"children":278},"Html","/frontend-endorsement/html",[279,282,285],{"title":280,"_path":281},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":283,"_path":284},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":286,"_path":287},"离线存储","/frontend-endorsement/html/offline-storage","i-heroicons-newspaper",{"title":290,"_path":291,"children":292,"icon":433},"前端代码考核","/frontend-code-assessment",[293,342,426],{"title":294,"_path":295,"children":296},"源码实现","/frontend-code-assessment/source",[297,322,335],{"title":298,"_path":299,"children":300},"原生 api","/frontend-code-assessment/source/native-api",[301,304,307,310,313,316,319],{"title":302,"_path":303},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":305,"_path":306},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":308,"_path":309},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":311,"_path":312},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":314,"_path":315},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":317,"_path":318},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":320,"_path":321},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":323,"_path":324,"children":325},"数组 Array","/frontend-code-assessment/source/array",[326,329,332],{"title":327,"_path":328},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":330,"_path":331},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":333,"_path":334},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":336,"_path":337,"children":338},"字符串 String","/frontend-code-assessment/source/string",[339],{"title":340,"_path":341},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":343,"_path":344,"children":345},"业务场景","/frontend-code-assessment/scene",[346,368,375,378,381,384,387,390,393,396,399,402,405,408,411,414,417,420,423],{"title":347,"_path":348,"children":349},"Promise","/frontend-code-assessment/scene/promise",[350,353,356,359,362,365],{"title":351,"_path":352},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":354,"_path":355},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":357,"_path":358},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":360,"_path":361},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":363,"_path":364},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":366,"_path":367},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":369,"_path":370,"children":371},"框架和设计模式","/frontend-code-assessment/scene/framework-and-design-mode",[372],{"title":373,"_path":374},"event bus","/frontend-code-assessment/scene/framework-and-design-mode/event-bus",{"title":376,"_path":377},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":379,"_path":380},"倒计时","/frontend-code-assessment/scene/countdown",{"title":382,"_path":383},"日期格式化","/frontend-code-assessment/scene/date-format",{"title":385,"_path":386},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":388,"_path":389},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":391,"_path":392},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":394,"_path":395},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":397,"_path":398},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":400,"_path":401},"对象是否循环引用","/frontend-code-assessment/scene/object-is-or-not-circular-reference",{"title":403,"_path":404},"解析 url 参数","/frontend-code-assessment/scene/parse-url-query",{"title":406,"_path":407},"原型链输出","/frontend-code-assessment/scene/prototype-chain-output",{"title":409,"_path":410},"随机数","/frontend-code-assessment/scene/random-number",{"title":412,"_path":413},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":415,"_path":416},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":418,"_path":419},"千分位分隔数字字符串","/frontend-code-assessment/scene/thousandth-separated-number-string",{"title":421,"_path":422},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":424,"_path":425},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":427,"_path":428,"children":429},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[430],{"title":431,"_path":432},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":435,"_path":436,"children":437,"icon":441},"项目","/pro",[438],{"title":439,"_path":440},"Vue 如何对 Store 进行单元测试","/pro/unit-test-vue-store","i-heroicons-squares-plus",{"title":443,"_path":444,"children":445,"icon":456},"后端语言","/backend-languages",[446],{"title":447,"_path":448,"children":449},"Python","/backend-languages/python",[450,453],{"title":451,"_path":452},"基础","/backend-languages/python/base",{"title":454,"_path":455},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":174,"_dir":458,"_draft":459,"_partial":459,"_locale":460,"title":173,"description":461,"url":462,"body":463,"_type":1215,"_id":1216,"_source":1217,"_file":1218,"_extension":1219},"major",false,"","已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：","https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array",{"type":464,"children":465,"toc":1211},"root",[466,473,488,493,498,503,542,547,578,583,614,619,647,653,671,676,1205],{"type":467,"tag":468,"props":469,"children":470},"element","p",{},[471],{"type":472,"value":461},"text",{"type":467,"tag":474,"props":475,"children":476},"ul",{},[477,483],{"type":467,"tag":478,"props":479,"children":480},"li",{},[481],{"type":472,"value":482},"若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]",{"type":467,"tag":478,"props":484,"children":485},{},[486],{"type":472,"value":487},"若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]\n注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。",{"type":467,"tag":468,"props":489,"children":490},{},[491],{"type":472,"value":492},"给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。",{"type":467,"tag":468,"props":494,"children":495},{},[496],{"type":472,"value":497},"你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。",{"type":467,"tag":468,"props":499,"children":500},{},[501],{"type":472,"value":502},"示例 1：",{"type":467,"tag":504,"props":505,"children":508},"pre",{"className":506,"code":507,"language":472,"meta":460,"style":460},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：nums = [3,4,5,1,2]\n输出：1\n解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n",[509],{"type":467,"tag":510,"props":511,"children":512},"code",{"__ignoreMap":460},[513,524,533],{"type":467,"tag":514,"props":515,"children":518},"span",{"class":516,"line":517},"line",1,[519],{"type":467,"tag":514,"props":520,"children":521},{},[522],{"type":472,"value":523},"输入：nums = [3,4,5,1,2]\n",{"type":467,"tag":514,"props":525,"children":527},{"class":516,"line":526},2,[528],{"type":467,"tag":514,"props":529,"children":530},{},[531],{"type":472,"value":532},"输出：1\n",{"type":467,"tag":514,"props":534,"children":536},{"class":516,"line":535},3,[537],{"type":467,"tag":514,"props":538,"children":539},{},[540],{"type":472,"value":541},"解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n",{"type":467,"tag":468,"props":543,"children":544},{},[545],{"type":472,"value":546},"示例 2：",{"type":467,"tag":504,"props":548,"children":550},{"className":506,"code":549,"language":472,"meta":460,"style":460},"输入：nums = [4,5,6,7,0,1,2]\n输出：0\n解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。\n",[551],{"type":467,"tag":510,"props":552,"children":553},{"__ignoreMap":460},[554,562,570],{"type":467,"tag":514,"props":555,"children":556},{"class":516,"line":517},[557],{"type":467,"tag":514,"props":558,"children":559},{},[560],{"type":472,"value":561},"输入：nums = [4,5,6,7,0,1,2]\n",{"type":467,"tag":514,"props":563,"children":564},{"class":516,"line":526},[565],{"type":467,"tag":514,"props":566,"children":567},{},[568],{"type":472,"value":569},"输出：0\n",{"type":467,"tag":514,"props":571,"children":572},{"class":516,"line":535},[573],{"type":467,"tag":514,"props":574,"children":575},{},[576],{"type":472,"value":577},"解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。\n",{"type":467,"tag":468,"props":579,"children":580},{},[581],{"type":472,"value":582},"示例 3：",{"type":467,"tag":504,"props":584,"children":586},{"className":506,"code":585,"language":472,"meta":460,"style":460},"输入：nums = [11,13,15,17]\n输出：11\n解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n",[587],{"type":467,"tag":510,"props":588,"children":589},{"__ignoreMap":460},[590,598,606],{"type":467,"tag":514,"props":591,"children":592},{"class":516,"line":517},[593],{"type":467,"tag":514,"props":594,"children":595},{},[596],{"type":472,"value":597},"输入：nums = [11,13,15,17]\n",{"type":467,"tag":514,"props":599,"children":600},{"class":516,"line":526},[601],{"type":467,"tag":514,"props":602,"children":603},{},[604],{"type":472,"value":605},"输出：11\n",{"type":467,"tag":514,"props":607,"children":608},{"class":516,"line":535},[609],{"type":467,"tag":514,"props":610,"children":611},{},[612],{"type":472,"value":613},"解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n",{"type":467,"tag":468,"props":615,"children":616},{},[617],{"type":472,"value":618},"提示：",{"type":467,"tag":474,"props":620,"children":621},{},[622,627,632,637,642],{"type":467,"tag":478,"props":623,"children":624},{},[625],{"type":472,"value":626},"n == nums.length",{"type":467,"tag":478,"props":628,"children":629},{},[630],{"type":472,"value":631},"1 \u003C= n \u003C= 5000",{"type":467,"tag":478,"props":633,"children":634},{},[635],{"type":472,"value":636},"-5000 \u003C= nums[i] \u003C= 5000",{"type":467,"tag":478,"props":638,"children":639},{},[640],{"type":472,"value":641},"nums 中的所有整数 互不相同",{"type":467,"tag":478,"props":643,"children":644},{},[645],{"type":472,"value":646},"nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转",{"type":467,"tag":648,"props":649,"children":651},"h2",{"id":650},"解题思路",[652],{"type":472,"value":650},{"type":467,"tag":474,"props":654,"children":655},{},[656,661,666],{"type":467,"tag":478,"props":657,"children":658},{},[659],{"type":472,"value":660},"经过分析，红色即最小值左侧，蓝色即最小值及其右侧",{"type":467,"tag":478,"props":662,"children":663},{},[664],{"type":472,"value":665},"n - 1 一定是蓝色",{"type":467,"tag":478,"props":667,"children":668},{},[669],{"type":472,"value":670},"总结：小于最后一个数，就是蓝色，否则就是红色",{"type":467,"tag":648,"props":672,"children":674},{"id":673},"实现",[675],{"type":472,"value":673},{"type":467,"tag":504,"props":677,"children":681},{"className":678,"code":679,"language":680,"meta":460,"style":460},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  // [0, n - 2]\n  // (-1, n - 1) 开区间写法\n  let len = nums.length;\n  let l = -1;\n  let r = len - 1;\n  while (l + 1 \u003C r) {\n    let mid = (l + r) >> 1;\n    if (nums[mid] \u003C nums[len - 1]) {\n      r = mid; // 染蓝色\n    } else {\n      l = mid; // 染红色\n    }\n  }\n  return nums[r];\n};\n","js",[682],{"type":467,"tag":510,"props":683,"children":684},{"__ignoreMap":460},[685,694,720,737,746,790,799,808,849,881,915,956,1008,1071,1098,1117,1143,1152,1161,1192],{"type":467,"tag":514,"props":686,"children":687},{"class":516,"line":517},[688],{"type":467,"tag":514,"props":689,"children":691},{"style":690},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[692],{"type":472,"value":693},"/**\n",{"type":467,"tag":514,"props":695,"children":696},{"class":516,"line":526},[697,702,708,714],{"type":467,"tag":514,"props":698,"children":699},{"style":690},[700],{"type":472,"value":701}," * ",{"type":467,"tag":514,"props":703,"children":705},{"style":704},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[706],{"type":472,"value":707},"@param",{"type":467,"tag":514,"props":709,"children":711},{"style":710},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[712],{"type":472,"value":713}," {number[]}",{"type":467,"tag":514,"props":715,"children":717},{"style":716},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[718],{"type":472,"value":719}," nums\n",{"type":467,"tag":514,"props":721,"children":722},{"class":516,"line":535},[723,727,732],{"type":467,"tag":514,"props":724,"children":725},{"style":690},[726],{"type":472,"value":701},{"type":467,"tag":514,"props":728,"children":729},{"style":704},[730],{"type":472,"value":731},"@return",{"type":467,"tag":514,"props":733,"children":734},{"style":710},[735],{"type":472,"value":736}," {number}\n",{"type":467,"tag":514,"props":738,"children":740},{"class":516,"line":739},4,[741],{"type":467,"tag":514,"props":742,"children":743},{"style":690},[744],{"type":472,"value":745}," */\n",{"type":467,"tag":514,"props":747,"children":749},{"class":516,"line":748},5,[750,756,762,768,773,779,785],{"type":467,"tag":514,"props":751,"children":753},{"style":752},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[754],{"type":472,"value":755},"var",{"type":467,"tag":514,"props":757,"children":759},{"style":758},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[760],{"type":472,"value":761}," findMin",{"type":467,"tag":514,"props":763,"children":765},{"style":764},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[766],{"type":472,"value":767}," =",{"type":467,"tag":514,"props":769,"children":770},{"style":752},[771],{"type":472,"value":772}," function",{"type":467,"tag":514,"props":774,"children":776},{"style":775},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[777],{"type":472,"value":778}," (",{"type":467,"tag":514,"props":780,"children":782},{"style":781},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[783],{"type":472,"value":784},"nums",{"type":467,"tag":514,"props":786,"children":787},{"style":775},[788],{"type":472,"value":789},") {\n",{"type":467,"tag":514,"props":791,"children":793},{"class":516,"line":792},6,[794],{"type":467,"tag":514,"props":795,"children":796},{"style":690},[797],{"type":472,"value":798},"  // [0, n - 2]\n",{"type":467,"tag":514,"props":800,"children":802},{"class":516,"line":801},7,[803],{"type":467,"tag":514,"props":804,"children":805},{"style":690},[806],{"type":472,"value":807},"  // (-1, n - 1) 开区间写法\n",{"type":467,"tag":514,"props":809,"children":811},{"class":516,"line":810},8,[812,817,823,827,832,838,843],{"type":467,"tag":514,"props":813,"children":814},{"style":752},[815],{"type":472,"value":816},"  let",{"type":467,"tag":514,"props":818,"children":820},{"style":819},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[821],{"type":472,"value":822}," len",{"type":467,"tag":514,"props":824,"children":825},{"style":764},[826],{"type":472,"value":767},{"type":467,"tag":514,"props":828,"children":829},{"style":819},[830],{"type":472,"value":831}," nums",{"type":467,"tag":514,"props":833,"children":835},{"style":834},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[836],{"type":472,"value":837},".",{"type":467,"tag":514,"props":839,"children":840},{"style":775},[841],{"type":472,"value":842},"length",{"type":467,"tag":514,"props":844,"children":846},{"style":845},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[847],{"type":472,"value":848},";\n",{"type":467,"tag":514,"props":850,"children":852},{"class":516,"line":851},9,[853,857,862,866,871,877],{"type":467,"tag":514,"props":854,"children":855},{"style":752},[856],{"type":472,"value":816},{"type":467,"tag":514,"props":858,"children":859},{"style":819},[860],{"type":472,"value":861}," l",{"type":467,"tag":514,"props":863,"children":864},{"style":764},[865],{"type":472,"value":767},{"type":467,"tag":514,"props":867,"children":868},{"style":764},[869],{"type":472,"value":870}," -",{"type":467,"tag":514,"props":872,"children":874},{"style":873},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[875],{"type":472,"value":876},"1",{"type":467,"tag":514,"props":878,"children":879},{"style":845},[880],{"type":472,"value":848},{"type":467,"tag":514,"props":882,"children":884},{"class":516,"line":883},10,[885,889,894,898,902,906,911],{"type":467,"tag":514,"props":886,"children":887},{"style":752},[888],{"type":472,"value":816},{"type":467,"tag":514,"props":890,"children":891},{"style":819},[892],{"type":472,"value":893}," r",{"type":467,"tag":514,"props":895,"children":896},{"style":764},[897],{"type":472,"value":767},{"type":467,"tag":514,"props":899,"children":900},{"style":819},[901],{"type":472,"value":822},{"type":467,"tag":514,"props":903,"children":904},{"style":764},[905],{"type":472,"value":870},{"type":467,"tag":514,"props":907,"children":908},{"style":873},[909],{"type":472,"value":910}," 1",{"type":467,"tag":514,"props":912,"children":913},{"style":845},[914],{"type":472,"value":848},{"type":467,"tag":514,"props":916,"children":918},{"class":516,"line":917},11,[919,925,929,934,939,943,948,952],{"type":467,"tag":514,"props":920,"children":922},{"style":921},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[923],{"type":472,"value":924},"  while",{"type":467,"tag":514,"props":926,"children":927},{"style":775},[928],{"type":472,"value":778},{"type":467,"tag":514,"props":930,"children":931},{"style":819},[932],{"type":472,"value":933},"l",{"type":467,"tag":514,"props":935,"children":936},{"style":764},[937],{"type":472,"value":938}," +",{"type":467,"tag":514,"props":940,"children":941},{"style":873},[942],{"type":472,"value":910},{"type":467,"tag":514,"props":944,"children":945},{"style":764},[946],{"type":472,"value":947}," \u003C",{"type":467,"tag":514,"props":949,"children":950},{"style":819},[951],{"type":472,"value":893},{"type":467,"tag":514,"props":953,"children":954},{"style":775},[955],{"type":472,"value":789},{"type":467,"tag":514,"props":957,"children":959},{"class":516,"line":958},12,[960,965,970,974,978,982,986,990,995,1000,1004],{"type":467,"tag":514,"props":961,"children":962},{"style":752},[963],{"type":472,"value":964},"    let",{"type":467,"tag":514,"props":966,"children":967},{"style":819},[968],{"type":472,"value":969}," mid",{"type":467,"tag":514,"props":971,"children":972},{"style":764},[973],{"type":472,"value":767},{"type":467,"tag":514,"props":975,"children":976},{"style":775},[977],{"type":472,"value":778},{"type":467,"tag":514,"props":979,"children":980},{"style":819},[981],{"type":472,"value":933},{"type":467,"tag":514,"props":983,"children":984},{"style":764},[985],{"type":472,"value":938},{"type":467,"tag":514,"props":987,"children":988},{"style":819},[989],{"type":472,"value":893},{"type":467,"tag":514,"props":991,"children":992},{"style":775},[993],{"type":472,"value":994},") ",{"type":467,"tag":514,"props":996,"children":997},{"style":764},[998],{"type":472,"value":999},">>",{"type":467,"tag":514,"props":1001,"children":1002},{"style":873},[1003],{"type":472,"value":910},{"type":467,"tag":514,"props":1005,"children":1006},{"style":845},[1007],{"type":472,"value":848},{"type":467,"tag":514,"props":1009,"children":1011},{"class":516,"line":1010},13,[1012,1017,1021,1025,1030,1035,1040,1045,1049,1053,1058,1062,1066],{"type":467,"tag":514,"props":1013,"children":1014},{"style":921},[1015],{"type":472,"value":1016},"    if",{"type":467,"tag":514,"props":1018,"children":1019},{"style":775},[1020],{"type":472,"value":778},{"type":467,"tag":514,"props":1022,"children":1023},{"style":819},[1024],{"type":472,"value":784},{"type":467,"tag":514,"props":1026,"children":1027},{"style":775},[1028],{"type":472,"value":1029},"[",{"type":467,"tag":514,"props":1031,"children":1032},{"style":819},[1033],{"type":472,"value":1034},"mid",{"type":467,"tag":514,"props":1036,"children":1037},{"style":775},[1038],{"type":472,"value":1039},"] ",{"type":467,"tag":514,"props":1041,"children":1042},{"style":764},[1043],{"type":472,"value":1044},"\u003C",{"type":467,"tag":514,"props":1046,"children":1047},{"style":819},[1048],{"type":472,"value":831},{"type":467,"tag":514,"props":1050,"children":1051},{"style":775},[1052],{"type":472,"value":1029},{"type":467,"tag":514,"props":1054,"children":1055},{"style":819},[1056],{"type":472,"value":1057},"len",{"type":467,"tag":514,"props":1059,"children":1060},{"style":764},[1061],{"type":472,"value":870},{"type":467,"tag":514,"props":1063,"children":1064},{"style":873},[1065],{"type":472,"value":910},{"type":467,"tag":514,"props":1067,"children":1068},{"style":775},[1069],{"type":472,"value":1070},"]) {\n",{"type":467,"tag":514,"props":1072,"children":1074},{"class":516,"line":1073},14,[1075,1080,1084,1088,1093],{"type":467,"tag":514,"props":1076,"children":1077},{"style":819},[1078],{"type":472,"value":1079},"      r",{"type":467,"tag":514,"props":1081,"children":1082},{"style":764},[1083],{"type":472,"value":767},{"type":467,"tag":514,"props":1085,"children":1086},{"style":819},[1087],{"type":472,"value":969},{"type":467,"tag":514,"props":1089,"children":1090},{"style":845},[1091],{"type":472,"value":1092},";",{"type":467,"tag":514,"props":1094,"children":1095},{"style":690},[1096],{"type":472,"value":1097}," // 染蓝色\n",{"type":467,"tag":514,"props":1099,"children":1101},{"class":516,"line":1100},15,[1102,1107,1112],{"type":467,"tag":514,"props":1103,"children":1104},{"style":775},[1105],{"type":472,"value":1106},"    } ",{"type":467,"tag":514,"props":1108,"children":1109},{"style":921},[1110],{"type":472,"value":1111},"else",{"type":467,"tag":514,"props":1113,"children":1114},{"style":775},[1115],{"type":472,"value":1116}," {\n",{"type":467,"tag":514,"props":1118,"children":1120},{"class":516,"line":1119},16,[1121,1126,1130,1134,1138],{"type":467,"tag":514,"props":1122,"children":1123},{"style":819},[1124],{"type":472,"value":1125},"      l",{"type":467,"tag":514,"props":1127,"children":1128},{"style":764},[1129],{"type":472,"value":767},{"type":467,"tag":514,"props":1131,"children":1132},{"style":819},[1133],{"type":472,"value":969},{"type":467,"tag":514,"props":1135,"children":1136},{"style":845},[1137],{"type":472,"value":1092},{"type":467,"tag":514,"props":1139,"children":1140},{"style":690},[1141],{"type":472,"value":1142}," // 染红色\n",{"type":467,"tag":514,"props":1144,"children":1146},{"class":516,"line":1145},17,[1147],{"type":467,"tag":514,"props":1148,"children":1149},{"style":775},[1150],{"type":472,"value":1151},"    }\n",{"type":467,"tag":514,"props":1153,"children":1155},{"class":516,"line":1154},18,[1156],{"type":467,"tag":514,"props":1157,"children":1158},{"style":775},[1159],{"type":472,"value":1160},"  }\n",{"type":467,"tag":514,"props":1162,"children":1164},{"class":516,"line":1163},19,[1165,1170,1174,1178,1183,1188],{"type":467,"tag":514,"props":1166,"children":1167},{"style":921},[1168],{"type":472,"value":1169},"  return",{"type":467,"tag":514,"props":1171,"children":1172},{"style":819},[1173],{"type":472,"value":831},{"type":467,"tag":514,"props":1175,"children":1176},{"style":775},[1177],{"type":472,"value":1029},{"type":467,"tag":514,"props":1179,"children":1180},{"style":819},[1181],{"type":472,"value":1182},"r",{"type":467,"tag":514,"props":1184,"children":1185},{"style":775},[1186],{"type":472,"value":1187},"]",{"type":467,"tag":514,"props":1189,"children":1190},{"style":845},[1191],{"type":472,"value":848},{"type":467,"tag":514,"props":1193,"children":1195},{"class":516,"line":1194},20,[1196,1201],{"type":467,"tag":514,"props":1197,"children":1198},{"style":775},[1199],{"type":472,"value":1200},"}",{"type":467,"tag":514,"props":1202,"children":1203},{"style":845},[1204],{"type":472,"value":848},{"type":467,"tag":1206,"props":1207,"children":1208},"style",{},[1209],{"type":472,"value":1210},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":460,"searchDepth":748,"depth":748,"links":1212},[1213,1214],{"id":650,"depth":526,"text":650},{"id":673,"depth":526,"text":673},"markdown","content:1.algorithm:3.leetcode:3.major:153.find-minimum-in-rotated-sorted-array.md","content","1.algorithm/3.leetcode/3.major/153.find-minimum-in-rotated-sorted-array.md","md",[1221,1223],{"_path":171,"title":170,"description":1222},"给你一个字符串 s ，请你反转字符串中 单词 的顺序。",{"_path":177,"title":176,"description":1224},"设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。",1713599622797]