[{"data":1,"prerenderedAt":1339},["Reactive",2],{"navigation":3,"/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array":546,"/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array-surround":1334},[4,269,298,514,522,531],{"title":5,"_path":6,"children":7,"icon":268},"算法","/algorithm",[8,31],{"title":9,"_path":10,"children":11},"解题方法","/algorithm/solution-methods",[12],{"title":13,"_path":14,"children":15},"排序","/algorithm/solution-methods/sort",[16,19,22,25,28],{"title":17,"_path":18},"选择排序","/algorithm/solution-methods/sort/selection-sort",{"title":20,"_path":21},"冒泡排序","/algorithm/solution-methods/sort/bubble-sort",{"title":23,"_path":24},"插入排序","/algorithm/solution-methods/sort/insertion-sort",{"title":26,"_path":27},"归并排序","/algorithm/solution-methods/sort/merge-sort",{"title":29,"_path":30},"桶排序","/algorithm/solution-methods/sort/bucket-sort",{"title":32,"_path":33,"children":34},"Leetcode 力扣","/algorithm/leetcode",[35,41,54],{"title":36,"_path":37,"children":38},"题单和标签","/algorithm/leetcode/question-lists-and-labels",[39],{"title":40,"_path":37},"刷题索引",{"title":42,"_path":43,"children":44},"剑指 offer","/algorithm/leetcode/sword-ofter",[45,48,51],{"title":46,"_path":47},"LCR.140 训练计划 II","/algorithm/leetcode/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":49,"_path":50},"LCR.169 招式拆解 II","/algorithm/leetcode/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":52,"_path":53},"LCR.187 破冰游戏","/algorithm/leetcode/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":55,"_path":56,"children":57},"主题单","/algorithm/leetcode/major",[58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232,235,238,241,244,247,250,253,256,259,262,265],{"title":59,"_path":60},"No.1 两数之和","/algorithm/leetcode/major/two-sum",{"title":62,"_path":63},"No.2 两数相加","/algorithm/leetcode/major/add-two-numbers",{"title":65,"_path":66},"No.3 无重复字符的最长子串","/algorithm/leetcode/major/longest-substring-without-repeating-characters",{"title":68,"_path":69},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/major/median-of-two-sorted-arrays",{"title":71,"_path":72},"No.5 最长回文子串","/algorithm/leetcode/major/longest-palindromic-substring",{"title":74,"_path":75},"No.7 整数反转","/algorithm/leetcode/major/reverse-integer",{"title":77,"_path":78},"No.9 回文数","/algorithm/leetcode/major/palindrome-number",{"title":80,"_path":81},"No.14 最长公共前缀","/algorithm/leetcode/major/longest-common-prefix",{"title":83,"_path":84},"No.15 三数之和","/algorithm/leetcode/major/3sum",{"title":86,"_path":87},"No.20 有效的括号","/algorithm/leetcode/major/valid-parentheses",{"title":89,"_path":90},"No.21 合并两个有序链表","/algorithm/leetcode/major/merge-two-sorted-lists",{"title":92,"_path":93},"No.22 括号生成","/algorithm/leetcode/major/generate-parentheses",{"title":95,"_path":96},"No.23 合并 K 个升序链表","/algorithm/leetcode/major/merge-k-sorted-lists",{"title":98,"_path":99},"No.24 两两交换链表中的节点","/algorithm/leetcode/major/swap-nodes-in-pairs",{"title":101,"_path":102},"No.25 K 个一组翻转链表","/algorithm/leetcode/major/reverse-nodes-in-k-group",{"title":104,"_path":105},"No.31 下一个排列","/algorithm/leetcode/major/next-permutation",{"title":107,"_path":108},"No.32 最长有效括号","/algorithm/leetcode/major/longest-valid-parentheses",{"title":110,"_path":111},"No.33 搜索旋转排序数组","/algorithm/leetcode/major/search-in-rotated-sorted-array",{"title":113,"_path":114},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/major/find-first-and-last-position-of-element-in-sorted-array",{"title":116,"_path":117},"No.39 组合求和","/algorithm/leetcode/major/combination-sum",{"title":119,"_path":120},"No.42 接雨水","/algorithm/leetcode/major/trapping-rain-water",{"title":122,"_path":123},"No.46 全排列","/algorithm/leetcode/major/permutations",{"title":125,"_path":126},"No.53 最大子序和","/algorithm/leetcode/major/maximum-subarray",{"title":128,"_path":129},"No.56 合并区间","/algorithm/leetcode/major/merge-intervals",{"title":131,"_path":132},"No.67 二进制求和","/algorithm/leetcode/major/add-binary",{"title":134,"_path":135},"No.69 x 的平方根","/algorithm/leetcode/major/sqrtx",{"title":137,"_path":138},"No.70 爬楼梯","/algorithm/leetcode/major/climbing-stairs",{"title":140,"_path":141},"No.88 合并两个有序数组","/algorithm/leetcode/major/merge-sorted-array",{"title":143,"_path":144},"No.92 反转链表 II","/algorithm/leetcode/major/reverse-linked-list-ii",{"title":146,"_path":147},"No.94 二叉树的中序遍历","/algorithm/leetcode/major/binary-tree-inorder-traversal",{"title":149,"_path":150},"No.101 对称二叉树","/algorithm/leetcode/major/symmetric-tree",{"title":152,"_path":153},"No.102 二叉树的层序遍历","/algorithm/leetcode/major/binary-tree-level-order-traversal",{"title":155,"_path":156},"No.104 二叉树的最大深度","/algorithm/leetcode/major/maximum-depth-of-binary-tree",{"title":158,"_path":159},"No.111 二叉树的最小深度","/algorithm/leetcode/major/minimum-depth-of-binary-tree",{"title":161,"_path":162},"No.112 路径总和","/algorithm/leetcode/major/path-sum",{"title":164,"_path":165},"No.121 买股票的最佳时机","/algorithm/leetcode/major/best-time-to-buy-and-sell-stock",{"title":167,"_path":168},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/major/sum-root-to-leaf-numbers",{"title":170,"_path":171},"No.136 只出现一次的数字","/algorithm/leetcode/major/single-number",{"title":173,"_path":174},"No.141 环型链表","/algorithm/leetcode/major/linked-list-cycle",{"title":176,"_path":177},"No.146 LRU 缓存","/algorithm/leetcode/major/lru-cache",{"title":179,"_path":180},"No.151 反转字符串中的单词","/algorithm/leetcode/major/reverse-words-in-a-string",{"title":182,"_path":183},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/major/find-minimum-in-rotated-sorted-array",{"title":185,"_path":186},"No.155 最小栈","/algorithm/leetcode/major/min-stack",{"title":188,"_path":189},"No.160 相交链表","/algorithm/leetcode/major/intersection-of-two-linked-lists",{"title":191,"_path":192},"No.162 寻找峰值","/algorithm/leetcode/major/find-peak-element",{"title":194,"_path":195},"No.165 比较版本号","/algorithm/leetcode/major/compare-version-numbers",{"title":197,"_path":198},"No.169 多数元素","/algorithm/leetcode/major/majority-element",{"title":200,"_path":201},"No.200 岛屿数量","/algorithm/leetcode/major/number-of-islands",{"title":203,"_path":204},"No.206 反转链表","/algorithm/leetcode/major/reverse-linked-list",{"title":206,"_path":207},"No.209 长度最小的子数组","/algorithm/leetcode/major/minimum-size-subarray-sum",{"title":209,"_path":210},"No.215 数组中的第K个最大元素","/algorithm/leetcode/major/kth-largest-element-in-an-array",{"title":212,"_path":213},"No.226 翻转二叉树","/algorithm/leetcode/major/invert-binary-tree",{"title":215,"_path":216},"No.238 除自身以外数组的乘积","/algorithm/leetcode/major/product-of-array-except-self",{"title":218,"_path":219},"No.322 零钱兑换","/algorithm/leetcode/major/coin-change",{"title":221,"_path":222},"No.334 递增的三元子序列","/algorithm/leetcode/major/increasing-triplet-subsequence",{"title":224,"_path":225},"No.344 反转字符串","/algorithm/leetcode/major/reverse-string",{"title":227,"_path":228},"No.345 反转字符串中的元音字母","/algorithm/leetcode/major/reverse-vowels-of-a-string",{"title":230,"_path":231},"No.384 打乱数组","/algorithm/leetcode/major/shuffle-an-array",{"title":233,"_path":234},"No.415 字符串相加","/algorithm/leetcode/major/add-strings",{"title":236,"_path":237},"No.443 压缩字符串","/algorithm/leetcode/major/string-compression",{"title":239,"_path":240},"No.509 斐波那契数","/algorithm/leetcode/major/fibonacci-number",{"title":242,"_path":243},"No.605 种花问题","/algorithm/leetcode/major/can-place-flowers",{"title":245,"_path":246},"No.617 合并二叉树","/algorithm/leetcode/major/merge-two-binary-trees",{"title":248,"_path":249},"No.678 有效的括号字符串","/algorithm/leetcode/major/valid-parenthesis-string",{"title":251,"_path":252},"No.704 二分查找","/algorithm/leetcode/major/binary-search",{"title":254,"_path":255},"No.912 排序数组","/algorithm/leetcode/major/sort-an-array",{"title":257,"_path":258},"No.1071 字符串的最大公因子","/algorithm/leetcode/major/greatest-common-divisor-of-strings",{"title":260,"_path":261},"No.1143 最长公共子序列","/algorithm/leetcode/major/longest-common-subsequence",{"title":263,"_path":264},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/major/kids-with-the-greatest-number-of-candies",{"title":266,"_path":267},"No.1768 交替合并字符串","/algorithm/leetcode/major/merge-strings-alternately","i-carbon-calculation",{"title":270,"_path":271,"children":272,"icon":297},"八股文","/endorsement",[273,284],{"title":274,"_path":275,"children":276},"构建工具","/endorsement/build-tools",[277],{"title":278,"_path":279,"children":280},"Webpack","/endorsement/build-tools/webpack",[281],{"title":282,"_path":283},"构建流程","/endorsement/build-tools/webpack/build-process",{"title":285,"_path":286,"children":287},"Html","/endorsement/html",[288,291,294],{"title":289,"_path":290},"Canvas 和 Svg","/endorsement/html/canvas-svg",{"title":292,"_path":293},"DOCTYPE 文档类型","/endorsement/html/doc-type",{"title":295,"_path":296},"离线存储","/endorsement/html/offline-storage","i-heroicons-newspaper",{"title":299,"_path":300,"children":301,"icon":513},"代码考核","/code-assessment",[302,404,506],{"title":303,"_path":304,"children":305},"源码实现","/code-assessment/source",[306,337,353,381,388,395,398,401],{"title":307,"_path":308,"children":309},"原生 api","/code-assessment/source/native-api",[310,313,316,319,322,325,328,331,334],{"title":311,"_path":312},"polyfill","/code-assessment/source/native-api/polyfill",{"title":314,"_path":315},"ajax","/code-assessment/source/native-api/ajax",{"title":317,"_path":318},"call & apply & bind","/code-assessment/source/native-api/call-apply-bind",{"title":320,"_path":321},"new 操作符","/code-assessment/source/native-api/new",{"title":323,"_path":324},"instanceof 关键字","/code-assessment/source/native-api/instanceof",{"title":326,"_path":327},"定时器","/code-assessment/source/native-api/timer",{"title":329,"_path":330},"JSON.stringify","/code-assessment/source/native-api/json-stringify",{"title":332,"_path":333},"Iterator 迭代器","/code-assessment/source/native-api/iterator",{"title":335,"_path":336},"extends","/code-assessment/source/native-api/extends",{"title":338,"_path":339,"children":340},"函数 Function","/code-assessment/source/function",[341,344,347,350],{"title":342,"_path":343},"函数防抖","/code-assessment/source/function/debounce",{"title":345,"_path":346},"函数节流","/code-assessment/source/function/throttle",{"title":348,"_path":349},"函数柯理化","/code-assessment/source/function/curry",{"title":351,"_path":352},"函数睡眠","/code-assessment/source/function/sleep",{"title":354,"_path":355,"children":356},"数组 Array","/code-assessment/source/array",[357,360,363,366,369,372,375,378],{"title":358,"_path":359},"数组去重","/code-assessment/source/array/remove-duplicate",{"title":361,"_path":362},"数组扁平化","/code-assessment/source/array/flat",{"title":364,"_path":365},"原型方法","/code-assessment/source/array/prototype-method",{"title":367,"_path":368},"交集、差集、并集、补集","/code-assessment/source/array/intersect-minus-union-complement",{"title":370,"_path":371},"数组和树互转","/code-assessment/source/array/arrays-and-trees-swap-each-other",{"title":373,"_path":374},"类数组转换","/code-assessment/source/array/array-like-convert",{"title":376,"_path":377},"数组乱序","/code-assessment/source/array/array-out-of-order",{"title":379,"_path":380},"二维数组","/code-assessment/source/array/2d-array",{"title":382,"_path":383,"children":384},"字符串 String","/code-assessment/source/string",[385],{"title":386,"_path":387},"repeat()","/code-assessment/source/string/repeat",{"title":389,"_path":390,"children":391},"集合 Set","/code-assessment/source/set",[392],{"title":393,"_path":394},"遍历集合","/code-assessment/source/set/traverse",{"title":396,"_path":397},"获取通用类型","/code-assessment/source/get-generic-type",{"title":399,"_path":400},"判断朴素对象","/code-assessment/source/is-plain-object",{"title":402,"_path":403},"深浅拷贝","/code-assessment/source/shallow-and-deep-copy",{"title":405,"_path":406,"children":407},"业务场景","/code-assessment/scene",[408,439,449,452,455,458,461,464,467,470,473,476,479,482,485,488,491,494,497,500,503],{"title":409,"_path":410,"children":411},"Promise","/code-assessment/scene/promise",[412,415,418,421,424,427,430,433,436],{"title":413,"_path":414},"保证 url 打印顺序并支持 retry","/code-assessment/scene/promise/order-print-url-and-support-retry",{"title":416,"_path":417},"异步串行","/code-assessment/scene/promise/async-serial-port",{"title":419,"_path":420},"实现 Promise 并发","/code-assessment/scene/promise/promise-concurrent",{"title":422,"_path":423},"并发限制图片加载数量","/code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":425,"_path":426},"实现并发调度器","/code-assessment/scene/promise/concurrent-scheduler",{"title":428,"_path":429},"实现 mergePromise 函数","/code-assessment/scene/promise/implement-merge-promise-function",{"title":431,"_path":432},"使用 addRemote 实现 add","/code-assessment/scene/promise/use-addremote-to-implement-add",{"title":434,"_path":435},"Promise 缓存","/code-assessment/scene/promise/promise-cache",{"title":437,"_path":438},"循环打印红-黄-绿","/code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":440,"_path":441,"children":442},"框架核心功能实现","/code-assessment/scene/framework-core-implement",[443,446],{"title":444,"_path":445},"event bus","/code-assessment/scene/framework-core-implement/event-bus",{"title":447,"_path":448},"极简 vue 实现","/code-assessment/scene/framework-core-implement/simple-vue",{"title":450,"_path":451},"原型链输出","/code-assessment/scene/prototype-chain-output",{"title":453,"_path":454},"阿拉伯数字和中文互转","/code-assessment/scene/arabic-numerals-and-chinese-converted",{"title":456,"_path":457},"计算对象占用字节数","/code-assessment/scene/calcuate-object-bytes",{"title":459,"_path":460},"倒计时","/code-assessment/scene/countdown",{"title":462,"_path":463},"日期格式化","/code-assessment/scene/date-format",{"title":465,"_path":466},"实现前端路由","/code-assessment/scene/frontend-route",{"title":468,"_path":469},"图片格式转换","/code-assessment/scene/image-format-conversion",{"title":471,"_path":472},"lodash.get","/code-assessment/scene/lodash-get",{"title":474,"_path":475},"记忆化请求函数 - 可缓存请求函数","/code-assessment/scene/memorize-request",{"title":477,"_path":478},"内容中出现频率最高的字符","/code-assessment/scene/most-frequent-characters-in-content",{"title":480,"_path":481},"对象是否循环引用","/code-assessment/scene/object-is-or-not-circular-reference",{"title":483,"_path":484},"解析 url 参数","/code-assessment/scene/parse-url-query",{"title":486,"_path":487},"随机数","/code-assessment/scene/random-number",{"title":489,"_path":490},"富文本内容转换","/code-assessment/scene/rich-text-content-conversion",{"title":492,"_path":493},"sku 算法实现","/code-assessment/scene/sku",{"title":495,"_path":496},"整数分割","/code-assessment/scene/split-number",{"title":498,"_path":499},"千分位分隔数字字符串","/code-assessment/scene/thousandth-separated-number-string",{"title":501,"_path":502},"长列表虚拟滚动","/code-assessment/scene/vitrual-scroll-list",{"title":504,"_path":505},"xhr hook 实现打印日志","/code-assessment/scene/xhr-hook-to-log",{"title":507,"_path":508,"children":509},"Ts 类型挑战","/code-assessment/type-challeges",[510],{"title":511,"_path":512},"No.10 元组转合集(联合类型)","/code-assessment/type-challeges/medium-tuple-to-union","i-heroicons-command-line",{"title":515,"_path":516,"children":517,"icon":521},"项目","/project",[518],{"title":519,"_path":520},"Vue 如何对 Store 进行单元测试","/project/unit-test-vue-store","i-heroicons-squares-plus",{"title":523,"_path":524,"children":525,"icon":530},"设计模式","/design-mode",[526,527],{"title":523,"_path":524},{"title":528,"_path":529},"设计思想与原则","/design-mode/thoughts-principles","i-carbon-paint-brush",{"title":532,"_path":533,"children":534,"icon":545},"后端语言","/backend-languages",[535],{"title":536,"_path":537,"children":538},"Python","/backend-languages/python",[539,542],{"title":540,"_path":541},"基础","/backend-languages/python/base",{"title":543,"_path":544},"函数","/backend-languages/python/function","i-heroicons-globe-alt",{"_path":183,"_dir":547,"_draft":548,"_partial":548,"_locale":549,"title":182,"description":550,"url":551,"body":552,"_type":1329,"_id":1330,"_source":1331,"_file":1332,"_extension":1333},"major",false,"","已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：","https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array",{"type":553,"children":554,"toc":1325},"root",[555,562,577,582,587,592,631,636,667,672,703,708,736,742,760,765,1319],{"type":556,"tag":557,"props":558,"children":559},"element","p",{},[560],{"type":561,"value":550},"text",{"type":556,"tag":563,"props":564,"children":565},"ul",{},[566,572],{"type":556,"tag":567,"props":568,"children":569},"li",{},[570],{"type":561,"value":571},"若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]",{"type":556,"tag":567,"props":573,"children":574},{},[575],{"type":561,"value":576},"若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]\n注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。",{"type":556,"tag":557,"props":578,"children":579},{},[580],{"type":561,"value":581},"给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。",{"type":556,"tag":557,"props":583,"children":584},{},[585],{"type":561,"value":586},"你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。",{"type":556,"tag":557,"props":588,"children":589},{},[590],{"type":561,"value":591},"示例 1：",{"type":556,"tag":593,"props":594,"children":597},"pre",{"className":595,"code":596,"language":561,"meta":549,"style":549},"language-text shiki shiki-themes vitesse-light vitesse-light vitesse-dark","输入：nums = [3,4,5,1,2]\n输出：1\n解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n",[598],{"type":556,"tag":599,"props":600,"children":601},"code",{"__ignoreMap":549},[602,613,622],{"type":556,"tag":603,"props":604,"children":607},"span",{"class":605,"line":606},"line",1,[608],{"type":556,"tag":603,"props":609,"children":610},{},[611],{"type":561,"value":612},"输入：nums = [3,4,5,1,2]\n",{"type":556,"tag":603,"props":614,"children":616},{"class":605,"line":615},2,[617],{"type":556,"tag":603,"props":618,"children":619},{},[620],{"type":561,"value":621},"输出：1\n",{"type":556,"tag":603,"props":623,"children":625},{"class":605,"line":624},3,[626],{"type":556,"tag":603,"props":627,"children":628},{},[629],{"type":561,"value":630},"解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n",{"type":556,"tag":557,"props":632,"children":633},{},[634],{"type":561,"value":635},"示例 2：",{"type":556,"tag":593,"props":637,"children":639},{"className":595,"code":638,"language":561,"meta":549,"style":549},"输入：nums = [4,5,6,7,0,1,2]\n输出：0\n解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。\n",[640],{"type":556,"tag":599,"props":641,"children":642},{"__ignoreMap":549},[643,651,659],{"type":556,"tag":603,"props":644,"children":645},{"class":605,"line":606},[646],{"type":556,"tag":603,"props":647,"children":648},{},[649],{"type":561,"value":650},"输入：nums = [4,5,6,7,0,1,2]\n",{"type":556,"tag":603,"props":652,"children":653},{"class":605,"line":615},[654],{"type":556,"tag":603,"props":655,"children":656},{},[657],{"type":561,"value":658},"输出：0\n",{"type":556,"tag":603,"props":660,"children":661},{"class":605,"line":624},[662],{"type":556,"tag":603,"props":663,"children":664},{},[665],{"type":561,"value":666},"解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。\n",{"type":556,"tag":557,"props":668,"children":669},{},[670],{"type":561,"value":671},"示例 3：",{"type":556,"tag":593,"props":673,"children":675},{"className":595,"code":674,"language":561,"meta":549,"style":549},"输入：nums = [11,13,15,17]\n输出：11\n解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n",[676],{"type":556,"tag":599,"props":677,"children":678},{"__ignoreMap":549},[679,687,695],{"type":556,"tag":603,"props":680,"children":681},{"class":605,"line":606},[682],{"type":556,"tag":603,"props":683,"children":684},{},[685],{"type":561,"value":686},"输入：nums = [11,13,15,17]\n",{"type":556,"tag":603,"props":688,"children":689},{"class":605,"line":615},[690],{"type":556,"tag":603,"props":691,"children":692},{},[693],{"type":561,"value":694},"输出：11\n",{"type":556,"tag":603,"props":696,"children":697},{"class":605,"line":624},[698],{"type":556,"tag":603,"props":699,"children":700},{},[701],{"type":561,"value":702},"解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。\n",{"type":556,"tag":557,"props":704,"children":705},{},[706],{"type":561,"value":707},"提示：",{"type":556,"tag":563,"props":709,"children":710},{},[711,716,721,726,731],{"type":556,"tag":567,"props":712,"children":713},{},[714],{"type":561,"value":715},"n == nums.length",{"type":556,"tag":567,"props":717,"children":718},{},[719],{"type":561,"value":720},"1 \u003C= n \u003C= 5000",{"type":556,"tag":567,"props":722,"children":723},{},[724],{"type":561,"value":725},"-5000 \u003C= nums[i] \u003C= 5000",{"type":556,"tag":567,"props":727,"children":728},{},[729],{"type":561,"value":730},"nums 中的所有整数 互不相同",{"type":556,"tag":567,"props":732,"children":733},{},[734],{"type":561,"value":735},"nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转",{"type":556,"tag":737,"props":738,"children":740},"h2",{"id":739},"解题思路",[741],{"type":561,"value":739},{"type":556,"tag":563,"props":743,"children":744},{},[745,750,755],{"type":556,"tag":567,"props":746,"children":747},{},[748],{"type":561,"value":749},"经过分析，红色即最小值左侧，蓝色即最小值及其右侧",{"type":556,"tag":567,"props":751,"children":752},{},[753],{"type":561,"value":754},"n - 1 一定是蓝色",{"type":556,"tag":567,"props":756,"children":757},{},[758],{"type":561,"value":759},"总结：小于最后一个数，就是蓝色，否则就是红色",{"type":556,"tag":737,"props":761,"children":763},{"id":762},"实现",[764],{"type":561,"value":762},{"type":556,"tag":593,"props":766,"children":770},{"className":767,"code":768,"language":769,"meta":549,"style":549},"language-js shiki shiki-themes vitesse-light vitesse-light vitesse-dark","/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  // [0, n - 2]\n  // (-1, n - 1) 开区间写法\n  let len = nums.length;\n  let l = -1;\n  let r = len - 1;\n  while (l + 1 \u003C r) {\n    let mid = (l + r) >> 1;\n    if (nums[mid] \u003C nums[len - 1]) {\n      r = mid; // 染蓝色\n    } else {\n      l = mid; // 染红色\n    }\n  }\n  return nums[r];\n};\n","js",[771],{"type":556,"tag":599,"props":772,"children":773},{"__ignoreMap":549},[774,783,825,855,864,910,919,928,967,999,1033,1077,1128,1194,1221,1239,1265,1274,1283,1310],{"type":556,"tag":603,"props":775,"children":776},{"class":605,"line":606},[777],{"type":556,"tag":603,"props":778,"children":780},{"style":779},"--shiki-light:#A0ADA0;--shiki-default:#A0ADA0;--shiki-dark:#758575DD",[781],{"type":561,"value":782},"/**\n",{"type":556,"tag":603,"props":784,"children":785},{"class":605,"line":615},[786,791,797,803,808,814,819],{"type":556,"tag":603,"props":787,"children":788},{"style":779},[789],{"type":561,"value":790}," * ",{"type":556,"tag":603,"props":792,"children":794},{"style":793},"--shiki-light:#999999;--shiki-default:#999999;--shiki-dark:#666666",[795],{"type":561,"value":796},"@",{"type":556,"tag":603,"props":798,"children":800},{"style":799},"--shiki-light:#1E754F;--shiki-default:#1E754F;--shiki-dark:#4D9375",[801],{"type":561,"value":802},"param",{"type":556,"tag":603,"props":804,"children":805},{"style":793},[806],{"type":561,"value":807}," {",{"type":556,"tag":603,"props":809,"children":811},{"style":810},"--shiki-light:#2E8F82;--shiki-default:#2E8F82;--shiki-dark:#5DA994",[812],{"type":561,"value":813},"number[]",{"type":556,"tag":603,"props":815,"children":816},{"style":793},[817],{"type":561,"value":818},"}",{"type":556,"tag":603,"props":820,"children":822},{"style":821},"--shiki-light:#B07D48;--shiki-default:#B07D48;--shiki-dark:#BD976A",[823],{"type":561,"value":824}," nums\n",{"type":556,"tag":603,"props":826,"children":827},{"class":605,"line":624},[828,832,836,841,845,850],{"type":556,"tag":603,"props":829,"children":830},{"style":779},[831],{"type":561,"value":790},{"type":556,"tag":603,"props":833,"children":834},{"style":793},[835],{"type":561,"value":796},{"type":556,"tag":603,"props":837,"children":838},{"style":799},[839],{"type":561,"value":840},"return",{"type":556,"tag":603,"props":842,"children":843},{"style":793},[844],{"type":561,"value":807},{"type":556,"tag":603,"props":846,"children":847},{"style":810},[848],{"type":561,"value":849},"number",{"type":556,"tag":603,"props":851,"children":852},{"style":793},[853],{"type":561,"value":854},"}\n",{"type":556,"tag":603,"props":856,"children":858},{"class":605,"line":857},4,[859],{"type":556,"tag":603,"props":860,"children":861},{"style":779},[862],{"type":561,"value":863}," */\n",{"type":556,"tag":603,"props":865,"children":867},{"class":605,"line":866},5,[868,874,880,885,890,895,900,905],{"type":556,"tag":603,"props":869,"children":871},{"style":870},"--shiki-light:#AB5959;--shiki-default:#AB5959;--shiki-dark:#CB7676",[872],{"type":561,"value":873},"var",{"type":556,"tag":603,"props":875,"children":877},{"style":876},"--shiki-light:#59873A;--shiki-default:#59873A;--shiki-dark:#80A665",[878],{"type":561,"value":879}," findMin",{"type":556,"tag":603,"props":881,"children":882},{"style":793},[883],{"type":561,"value":884}," =",{"type":556,"tag":603,"props":886,"children":887},{"style":870},[888],{"type":561,"value":889}," function",{"type":556,"tag":603,"props":891,"children":892},{"style":793},[893],{"type":561,"value":894}," (",{"type":556,"tag":603,"props":896,"children":897},{"style":821},[898],{"type":561,"value":899},"nums",{"type":556,"tag":603,"props":901,"children":902},{"style":793},[903],{"type":561,"value":904},")",{"type":556,"tag":603,"props":906,"children":907},{"style":793},[908],{"type":561,"value":909}," {\n",{"type":556,"tag":603,"props":911,"children":913},{"class":605,"line":912},6,[914],{"type":556,"tag":603,"props":915,"children":916},{"style":779},[917],{"type":561,"value":918},"  // [0, n - 2]\n",{"type":556,"tag":603,"props":920,"children":922},{"class":605,"line":921},7,[923],{"type":556,"tag":603,"props":924,"children":925},{"style":779},[926],{"type":561,"value":927},"  // (-1, n - 1) 开区间写法\n",{"type":556,"tag":603,"props":929,"children":931},{"class":605,"line":930},8,[932,937,942,946,951,956,962],{"type":556,"tag":603,"props":933,"children":934},{"style":870},[935],{"type":561,"value":936},"  let",{"type":556,"tag":603,"props":938,"children":939},{"style":821},[940],{"type":561,"value":941}," len",{"type":556,"tag":603,"props":943,"children":944},{"style":793},[945],{"type":561,"value":884},{"type":556,"tag":603,"props":947,"children":948},{"style":821},[949],{"type":561,"value":950}," nums",{"type":556,"tag":603,"props":952,"children":953},{"style":793},[954],{"type":561,"value":955},".",{"type":556,"tag":603,"props":957,"children":959},{"style":958},"--shiki-light:#998418;--shiki-default:#998418;--shiki-dark:#B8A965",[960],{"type":561,"value":961},"length",{"type":556,"tag":603,"props":963,"children":964},{"style":793},[965],{"type":561,"value":966},";\n",{"type":556,"tag":603,"props":968,"children":970},{"class":605,"line":969},9,[971,975,980,984,989,995],{"type":556,"tag":603,"props":972,"children":973},{"style":870},[974],{"type":561,"value":936},{"type":556,"tag":603,"props":976,"children":977},{"style":821},[978],{"type":561,"value":979}," l",{"type":556,"tag":603,"props":981,"children":982},{"style":793},[983],{"type":561,"value":884},{"type":556,"tag":603,"props":985,"children":986},{"style":870},[987],{"type":561,"value":988}," -",{"type":556,"tag":603,"props":990,"children":992},{"style":991},"--shiki-light:#2F798A;--shiki-default:#2F798A;--shiki-dark:#4C9A91",[993],{"type":561,"value":994},"1",{"type":556,"tag":603,"props":996,"children":997},{"style":793},[998],{"type":561,"value":966},{"type":556,"tag":603,"props":1000,"children":1002},{"class":605,"line":1001},10,[1003,1007,1012,1016,1020,1024,1029],{"type":556,"tag":603,"props":1004,"children":1005},{"style":870},[1006],{"type":561,"value":936},{"type":556,"tag":603,"props":1008,"children":1009},{"style":821},[1010],{"type":561,"value":1011}," r",{"type":556,"tag":603,"props":1013,"children":1014},{"style":793},[1015],{"type":561,"value":884},{"type":556,"tag":603,"props":1017,"children":1018},{"style":821},[1019],{"type":561,"value":941},{"type":556,"tag":603,"props":1021,"children":1022},{"style":870},[1023],{"type":561,"value":988},{"type":556,"tag":603,"props":1025,"children":1026},{"style":991},[1027],{"type":561,"value":1028}," 1",{"type":556,"tag":603,"props":1030,"children":1031},{"style":793},[1032],{"type":561,"value":966},{"type":556,"tag":603,"props":1034,"children":1036},{"class":605,"line":1035},11,[1037,1042,1046,1051,1056,1060,1065,1069,1073],{"type":556,"tag":603,"props":1038,"children":1039},{"style":799},[1040],{"type":561,"value":1041},"  while",{"type":556,"tag":603,"props":1043,"children":1044},{"style":793},[1045],{"type":561,"value":894},{"type":556,"tag":603,"props":1047,"children":1048},{"style":821},[1049],{"type":561,"value":1050},"l",{"type":556,"tag":603,"props":1052,"children":1053},{"style":870},[1054],{"type":561,"value":1055}," +",{"type":556,"tag":603,"props":1057,"children":1058},{"style":991},[1059],{"type":561,"value":1028},{"type":556,"tag":603,"props":1061,"children":1062},{"style":793},[1063],{"type":561,"value":1064}," \u003C",{"type":556,"tag":603,"props":1066,"children":1067},{"style":821},[1068],{"type":561,"value":1011},{"type":556,"tag":603,"props":1070,"children":1071},{"style":793},[1072],{"type":561,"value":904},{"type":556,"tag":603,"props":1074,"children":1075},{"style":793},[1076],{"type":561,"value":909},{"type":556,"tag":603,"props":1078,"children":1080},{"class":605,"line":1079},12,[1081,1086,1091,1095,1099,1103,1107,1111,1115,1120,1124],{"type":556,"tag":603,"props":1082,"children":1083},{"style":870},[1084],{"type":561,"value":1085},"    let",{"type":556,"tag":603,"props":1087,"children":1088},{"style":821},[1089],{"type":561,"value":1090}," mid",{"type":556,"tag":603,"props":1092,"children":1093},{"style":793},[1094],{"type":561,"value":884},{"type":556,"tag":603,"props":1096,"children":1097},{"style":793},[1098],{"type":561,"value":894},{"type":556,"tag":603,"props":1100,"children":1101},{"style":821},[1102],{"type":561,"value":1050},{"type":556,"tag":603,"props":1104,"children":1105},{"style":870},[1106],{"type":561,"value":1055},{"type":556,"tag":603,"props":1108,"children":1109},{"style":821},[1110],{"type":561,"value":1011},{"type":556,"tag":603,"props":1112,"children":1113},{"style":793},[1114],{"type":561,"value":904},{"type":556,"tag":603,"props":1116,"children":1117},{"style":870},[1118],{"type":561,"value":1119}," >>",{"type":556,"tag":603,"props":1121,"children":1122},{"style":991},[1123],{"type":561,"value":1028},{"type":556,"tag":603,"props":1125,"children":1126},{"style":793},[1127],{"type":561,"value":966},{"type":556,"tag":603,"props":1129,"children":1131},{"class":605,"line":1130},13,[1132,1137,1141,1145,1150,1155,1160,1164,1168,1172,1177,1181,1185,1190],{"type":556,"tag":603,"props":1133,"children":1134},{"style":799},[1135],{"type":561,"value":1136},"    if",{"type":556,"tag":603,"props":1138,"children":1139},{"style":793},[1140],{"type":561,"value":894},{"type":556,"tag":603,"props":1142,"children":1143},{"style":821},[1144],{"type":561,"value":899},{"type":556,"tag":603,"props":1146,"children":1147},{"style":793},[1148],{"type":561,"value":1149},"[",{"type":556,"tag":603,"props":1151,"children":1152},{"style":821},[1153],{"type":561,"value":1154},"mid",{"type":556,"tag":603,"props":1156,"children":1157},{"style":793},[1158],{"type":561,"value":1159},"]",{"type":556,"tag":603,"props":1161,"children":1162},{"style":793},[1163],{"type":561,"value":1064},{"type":556,"tag":603,"props":1165,"children":1166},{"style":821},[1167],{"type":561,"value":950},{"type":556,"tag":603,"props":1169,"children":1170},{"style":793},[1171],{"type":561,"value":1149},{"type":556,"tag":603,"props":1173,"children":1174},{"style":821},[1175],{"type":561,"value":1176},"len",{"type":556,"tag":603,"props":1178,"children":1179},{"style":870},[1180],{"type":561,"value":988},{"type":556,"tag":603,"props":1182,"children":1183},{"style":991},[1184],{"type":561,"value":1028},{"type":556,"tag":603,"props":1186,"children":1187},{"style":793},[1188],{"type":561,"value":1189},"])",{"type":556,"tag":603,"props":1191,"children":1192},{"style":793},[1193],{"type":561,"value":909},{"type":556,"tag":603,"props":1195,"children":1197},{"class":605,"line":1196},14,[1198,1203,1207,1211,1216],{"type":556,"tag":603,"props":1199,"children":1200},{"style":821},[1201],{"type":561,"value":1202},"      r",{"type":556,"tag":603,"props":1204,"children":1205},{"style":793},[1206],{"type":561,"value":884},{"type":556,"tag":603,"props":1208,"children":1209},{"style":821},[1210],{"type":561,"value":1090},{"type":556,"tag":603,"props":1212,"children":1213},{"style":793},[1214],{"type":561,"value":1215},";",{"type":556,"tag":603,"props":1217,"children":1218},{"style":779},[1219],{"type":561,"value":1220}," // 染蓝色\n",{"type":556,"tag":603,"props":1222,"children":1224},{"class":605,"line":1223},15,[1225,1230,1235],{"type":556,"tag":603,"props":1226,"children":1227},{"style":793},[1228],{"type":561,"value":1229},"    }",{"type":556,"tag":603,"props":1231,"children":1232},{"style":799},[1233],{"type":561,"value":1234}," else",{"type":556,"tag":603,"props":1236,"children":1237},{"style":793},[1238],{"type":561,"value":909},{"type":556,"tag":603,"props":1240,"children":1242},{"class":605,"line":1241},16,[1243,1248,1252,1256,1260],{"type":556,"tag":603,"props":1244,"children":1245},{"style":821},[1246],{"type":561,"value":1247},"      l",{"type":556,"tag":603,"props":1249,"children":1250},{"style":793},[1251],{"type":561,"value":884},{"type":556,"tag":603,"props":1253,"children":1254},{"style":821},[1255],{"type":561,"value":1090},{"type":556,"tag":603,"props":1257,"children":1258},{"style":793},[1259],{"type":561,"value":1215},{"type":556,"tag":603,"props":1261,"children":1262},{"style":779},[1263],{"type":561,"value":1264}," // 染红色\n",{"type":556,"tag":603,"props":1266,"children":1268},{"class":605,"line":1267},17,[1269],{"type":556,"tag":603,"props":1270,"children":1271},{"style":793},[1272],{"type":561,"value":1273},"    }\n",{"type":556,"tag":603,"props":1275,"children":1277},{"class":605,"line":1276},18,[1278],{"type":556,"tag":603,"props":1279,"children":1280},{"style":793},[1281],{"type":561,"value":1282},"  }\n",{"type":556,"tag":603,"props":1284,"children":1286},{"class":605,"line":1285},19,[1287,1292,1296,1300,1305],{"type":556,"tag":603,"props":1288,"children":1289},{"style":799},[1290],{"type":561,"value":1291},"  return",{"type":556,"tag":603,"props":1293,"children":1294},{"style":821},[1295],{"type":561,"value":950},{"type":556,"tag":603,"props":1297,"children":1298},{"style":793},[1299],{"type":561,"value":1149},{"type":556,"tag":603,"props":1301,"children":1302},{"style":821},[1303],{"type":561,"value":1304},"r",{"type":556,"tag":603,"props":1306,"children":1307},{"style":793},[1308],{"type":561,"value":1309},"];\n",{"type":556,"tag":603,"props":1311,"children":1313},{"class":605,"line":1312},20,[1314],{"type":556,"tag":603,"props":1315,"children":1316},{"style":793},[1317],{"type":561,"value":1318},"};\n",{"type":556,"tag":1320,"props":1321,"children":1322},"style",{},[1323],{"type":561,"value":1324},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":549,"searchDepth":866,"depth":866,"links":1326},[1327,1328],{"id":739,"depth":615,"text":739},{"id":762,"depth":615,"text":762},"markdown","content:1.algorithm:3.leetcode:3.major:153.find-minimum-in-rotated-sorted-array.md","content","1.algorithm/3.leetcode/3.major/153.find-minimum-in-rotated-sorted-array.md","md",[1335,1337],{"_path":180,"title":179,"description":1336},"给你一个字符串 s ，请你反转字符串中 单词 的顺序。",{"_path":186,"title":185,"description":1338},"设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。",1715002844424]