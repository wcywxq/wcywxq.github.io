[{"data":1,"prerenderedAt":1470},["Reactive",2],{"navigation":3,"/algorithm/leetcode/reverse-words-in-a-string":430,"/algorithm/leetcode/reverse-words-in-a-string-surround":1465},[4,237,265,409,416],{"title":5,"_path":6,"children":7},"算法","/algorithm",[8,10,23],{"title":9,"_path":6},"刷题索引",{"title":11,"_path":12,"children":13},"剑指 offer","/algorithm/sword-ofter",[14,17,20],{"title":15,"_path":16},"LCR.140 训练计划 II","/algorithm/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":18,"_path":19},"LCR.169 招式拆解 II","/algorithm/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":21,"_path":22},"LCR.187 破冰游戏","/algorithm/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":24,"_path":25,"children":26},"力扣 leetCode","/algorithm/leetcode",[27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234],{"title":28,"_path":29},"No.1 两数之和","/algorithm/leetcode/two-sum",{"title":31,"_path":32},"No.2 两数相加","/algorithm/leetcode/add-two-numbers",{"title":34,"_path":35},"No.3 无重复字符的最长子串","/algorithm/leetcode/longest-substring-without-repeating-characters",{"title":37,"_path":38},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/median-of-two-sorted-arrays",{"title":40,"_path":41},"No.5 最长回文子串","/algorithm/leetcode/longest-palindromic-substring",{"title":43,"_path":44},"No.7 整数反转","/algorithm/leetcode/reverse-integer",{"title":46,"_path":47},"No.9 回文数","/algorithm/leetcode/palindrome-number",{"title":49,"_path":50},"No.14 最长公共前缀","/algorithm/leetcode/longest-common-prefix",{"title":52,"_path":53},"No.15 三数之和","/algorithm/leetcode/3sum",{"title":55,"_path":56},"No.20 有效的括号","/algorithm/leetcode/valid-parentheses",{"title":58,"_path":59},"No.21 合并两个有序链表","/algorithm/leetcode/merge-two-sorted-lists",{"title":61,"_path":62},"No.22 括号生成","/algorithm/leetcode/generate-parentheses",{"title":64,"_path":65},"No.23 合并 K 个升序链表","/algorithm/leetcode/merge-k-sorted-lists",{"title":67,"_path":68},"No.24 两两交换链表中的节点","/algorithm/leetcode/swap-nodes-in-pairs",{"title":70,"_path":71},"No.25 K 个一组翻转链表","/algorithm/leetcode/reverse-nodes-in-k-group",{"title":73,"_path":74},"No.31 下一个排列","/algorithm/leetcode/next-permutation",{"title":76,"_path":77},"No.32 最长有效括号","/algorithm/leetcode/longest-valid-parentheses",{"title":79,"_path":80},"No.33 搜索旋转排序数组","/algorithm/leetcode/search-in-rotated-sorted-array",{"title":82,"_path":83},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/find-first-and-last-position-of-element-in-sorted-array",{"title":85,"_path":86},"No.39 组合求和","/algorithm/leetcode/combination-sum",{"title":88,"_path":89},"No.42 接雨水","/algorithm/leetcode/trapping-rain-water",{"title":91,"_path":92},"No.46 全排列","/algorithm/leetcode/permutations",{"title":94,"_path":95},"No.53 最大子序和","/algorithm/leetcode/maximum-subarray",{"title":97,"_path":98},"No.56 合并区间","/algorithm/leetcode/merge-intervals",{"title":100,"_path":101},"No.67 二进制求和","/algorithm/leetcode/add-binary",{"title":103,"_path":104},"No.69 x 的平方根","/algorithm/leetcode/sqrtx",{"title":106,"_path":107},"No.70 爬楼梯","/algorithm/leetcode/climbing-stairs",{"title":109,"_path":110},"No.88 合并两个有序数组","/algorithm/leetcode/merge-sorted-array",{"title":112,"_path":113},"No.92 反转链表 II","/algorithm/leetcode/reverse-linked-list-ii",{"title":115,"_path":116},"No.94 二叉树的中序遍历","/algorithm/leetcode/binary-tree-inorder-traversal",{"title":118,"_path":119},"No.101 对称二叉树","/algorithm/leetcode/symmetric-tree",{"title":121,"_path":122},"No.102 二叉树的层序遍历","/algorithm/leetcode/binary-tree-level-order-traversal",{"title":124,"_path":125},"No.104 二叉树的最大深度","/algorithm/leetcode/maximum-depth-of-binary-tree",{"title":127,"_path":128},"No.111 二叉树的最小深度","/algorithm/leetcode/minimum-depth-of-binary-tree",{"title":130,"_path":131},"No.112 路径总和","/algorithm/leetcode/path-sum",{"title":133,"_path":134},"No.121 买股票的最佳时机","/algorithm/leetcode/best-time-to-buy-and-sell-stock",{"title":136,"_path":137},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/sum-root-to-leaf-numbers",{"title":139,"_path":140},"No.136 只出现一次的数字","/algorithm/leetcode/single-number",{"title":142,"_path":143},"No.141 环型链表","/algorithm/leetcode/linked-list-cycle",{"title":145,"_path":146},"No.146 LRU 缓存","/algorithm/leetcode/lru-cache",{"title":148,"_path":149},"No.151 反转字符串中的单词","/algorithm/leetcode/reverse-words-in-a-string",{"title":151,"_path":152},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/find-minimum-in-rotated-sorted-array",{"title":154,"_path":155},"No.155 最小栈","/algorithm/leetcode/min-stack",{"title":157,"_path":158},"No.160 相交链表","/algorithm/leetcode/intersection-of-two-linked-lists",{"title":160,"_path":161},"No.162 寻找峰值","/algorithm/leetcode/find-peak-element",{"title":163,"_path":164},"No.165 比较版本号","/algorithm/leetcode/compare-version-numbers",{"title":166,"_path":167},"No.169 多数元素","/algorithm/leetcode/majority-element",{"title":169,"_path":170},"No.200 岛屿数量","/algorithm/leetcode/number-of-islands",{"title":172,"_path":173},"No.206 反转链表","/algorithm/leetcode/reverse-linked-list",{"title":175,"_path":176},"No.209 长度最小的子数组","/algorithm/leetcode/minimum-size-subarray-sum",{"title":178,"_path":179},"No.215 数组中的第K个最大元素","/algorithm/leetcode/kth-largest-element-in-an-array",{"title":181,"_path":182},"No.226 翻转二叉树","/algorithm/leetcode/invert-binary-tree",{"title":184,"_path":185},"No.238 除自身以外数组的乘积","/algorithm/leetcode/product-of-array-except-self",{"title":187,"_path":188},"No.322 零钱兑换","/algorithm/leetcode/coin-change",{"title":190,"_path":191},"No.334 递增的三元子序列","/algorithm/leetcode/increasing-triplet-subsequence",{"title":193,"_path":194},"No.344 反转字符串","/algorithm/leetcode/reverse-string",{"title":196,"_path":197},"No.345 反转字符串中的元音字母","/algorithm/leetcode/reverse-vowels-of-a-string",{"title":199,"_path":200},"No.384 打乱数组","/algorithm/leetcode/shuffle-an-array",{"title":202,"_path":203},"No.415 字符串相加","/algorithm/leetcode/add-strings",{"title":205,"_path":206},"No.443 压缩字符串","/algorithm/leetcode/string-compression",{"title":208,"_path":209},"No.509 斐波那契数","/algorithm/leetcode/fibonacci-number",{"title":211,"_path":212},"No.605 种花问题","/algorithm/leetcode/can-place-flowers",{"title":214,"_path":215},"No.617 合并二叉树","/algorithm/leetcode/merge-two-binary-trees",{"title":217,"_path":218},"No.678 有效的括号字符串","/algorithm/leetcode/valid-parenthesis-string",{"title":220,"_path":221},"No.704 二分查找","/algorithm/leetcode/binary-search",{"title":223,"_path":224},"No.912 排序数组","/algorithm/leetcode/sort-an-array",{"title":226,"_path":227},"No.1071 字符串的最大公因子","/algorithm/leetcode/greatest-common-divisor-of-strings",{"title":229,"_path":230},"No.1143 最长公共子序列","/algorithm/leetcode/longest-common-subsequence",{"title":232,"_path":233},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/kids-with-the-greatest-number-of-candies",{"title":235,"_path":236},"No.1768 交替合并字符串","/algorithm/leetcode/merge-strings-alternately",{"title":238,"_path":239,"children":240},"前端八股文","/frontend-endorsement",[241,252],{"title":242,"_path":243,"children":244},"构建工具","/frontend-endorsement/build-tools",[245],{"title":246,"_path":247,"children":248},"Webpack","/frontend-endorsement/build-tools/webpack",[249],{"title":250,"_path":251},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":253,"_path":254,"children":255},"Html","/frontend-endorsement/html",[256,259,262],{"title":257,"_path":258},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":260,"_path":261},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":263,"_path":264},"离线存储","/frontend-endorsement/html/offline-storage",{"title":266,"_path":267,"children":268},"前端代码考核","/frontend-code-assessment",[269,318,402],{"title":270,"_path":271,"children":272},"源码实现","/frontend-code-assessment/source",[273,298,311],{"title":274,"_path":275,"children":276},"原生 api","/frontend-code-assessment/source/native-api",[277,280,283,286,289,292,295],{"title":278,"_path":279},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":281,"_path":282},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":284,"_path":285},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":287,"_path":288},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":290,"_path":291},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":293,"_path":294},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":296,"_path":297},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":299,"_path":300,"children":301},"数组 Array","/frontend-code-assessment/source/array",[302,305,308],{"title":303,"_path":304},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":306,"_path":307},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":309,"_path":310},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":312,"_path":313,"children":314},"字符串 String","/frontend-code-assessment/source/string",[315],{"title":316,"_path":317},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":319,"_path":320,"children":321},"业务场景","/frontend-code-assessment/scene",[322,344,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396,399],{"title":323,"_path":324,"children":325},"Promise","/frontend-code-assessment/scene/promise",[326,329,332,335,338,341],{"title":327,"_path":328},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":330,"_path":331},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":333,"_path":334},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":336,"_path":337},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":339,"_path":340},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":342,"_path":343},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":345,"_path":346,"children":347},"框架和设计模式","/frontend-code-assessment/scene/framework-and-design-mode",[348],{"title":349,"_path":350},"event bus","/frontend-code-assessment/scene/framework-and-design-mode/event-bus",{"title":352,"_path":353},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":355,"_path":356},"倒计时","/frontend-code-assessment/scene/countdown",{"title":358,"_path":359},"日期格式化","/frontend-code-assessment/scene/date-format",{"title":361,"_path":362},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":364,"_path":365},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":367,"_path":368},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":370,"_path":371},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":373,"_path":374},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":376,"_path":377},"对象是否循环引用","/frontend-code-assessment/scene/object-is-or-not-circular-reference",{"title":379,"_path":380},"解析 url 参数","/frontend-code-assessment/scene/parse-url-query",{"title":382,"_path":383},"原型链输出","/frontend-code-assessment/scene/prototype-chain-output",{"title":385,"_path":386},"随机数","/frontend-code-assessment/scene/random-number",{"title":388,"_path":389},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":391,"_path":392},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":394,"_path":395},"千分位分隔数字字符串","/frontend-code-assessment/scene/thousandth-separated-number-string",{"title":397,"_path":398},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":400,"_path":401},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":403,"_path":404,"children":405},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[406],{"title":407,"_path":408},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union",{"title":410,"_path":411,"children":412},"项目","/pro",[413],{"title":414,"_path":415},"Vue 如何对 Store 进行单元测试","/pro/unit-test-vue-store",{"title":417,"_path":418,"children":419},"后端语言","/backend-languages",[420],{"title":421,"_path":422,"children":423},"Python","/backend-languages/python",[424,427],{"title":425,"_path":426},"基础","/backend-languages/python/base",{"title":428,"_path":429},"函数","/backend-languages/python/function",{"_path":149,"_dir":431,"_draft":432,"_partial":432,"_locale":433,"title":148,"description":434,"url":435,"body":436,"_type":1460,"_id":1461,"_source":1462,"_file":1463,"_extension":1464},"leetcode",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":437,"children":438,"toc":1453},"root",[439,446,451,456,461,466,496,501,533,538,569,574,594,599,605,610,616,849,854,1447],{"type":440,"tag":441,"props":442,"children":443},"element","p",{},[444],{"type":445,"value":434},"text",{"type":440,"tag":441,"props":447,"children":448},{},[449],{"type":445,"value":450},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":440,"tag":441,"props":452,"children":453},{},[454],{"type":445,"value":455},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":440,"tag":441,"props":457,"children":458},{},[459],{"type":445,"value":460},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":440,"tag":441,"props":462,"children":463},{},[464],{"type":445,"value":465},"示例 1：",{"type":440,"tag":467,"props":468,"children":471},"pre",{"className":469,"code":470,"language":445,"meta":433,"style":433},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[472],{"type":440,"tag":473,"props":474,"children":475},"code",{"__ignoreMap":433},[476,487],{"type":440,"tag":477,"props":478,"children":481},"span",{"class":479,"line":480},"line",1,[482],{"type":440,"tag":477,"props":483,"children":484},{},[485],{"type":445,"value":486},"输入：s = \"the sky is blue\"\n",{"type":440,"tag":477,"props":488,"children":490},{"class":479,"line":489},2,[491],{"type":440,"tag":477,"props":492,"children":493},{},[494],{"type":445,"value":495},"输出：\"blue is sky the\"\n",{"type":440,"tag":441,"props":497,"children":498},{},[499],{"type":445,"value":500},"示例 2：",{"type":440,"tag":467,"props":502,"children":504},{"className":469,"code":503,"language":445,"meta":433,"style":433},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[505],{"type":440,"tag":473,"props":506,"children":507},{"__ignoreMap":433},[508,516,524],{"type":440,"tag":477,"props":509,"children":510},{"class":479,"line":480},[511],{"type":440,"tag":477,"props":512,"children":513},{},[514],{"type":445,"value":515},"输入：s = \" hello world \"\n",{"type":440,"tag":477,"props":517,"children":518},{"class":479,"line":489},[519],{"type":440,"tag":477,"props":520,"children":521},{},[522],{"type":445,"value":523},"输出：\"world hello\"\n",{"type":440,"tag":477,"props":525,"children":527},{"class":479,"line":526},3,[528],{"type":440,"tag":477,"props":529,"children":530},{},[531],{"type":445,"value":532},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":440,"tag":441,"props":534,"children":535},{},[536],{"type":445,"value":537},"示例 3：",{"type":440,"tag":467,"props":539,"children":541},{"className":469,"code":540,"language":445,"meta":433,"style":433},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[542],{"type":440,"tag":473,"props":543,"children":544},{"__ignoreMap":433},[545,553,561],{"type":440,"tag":477,"props":546,"children":547},{"class":479,"line":480},[548],{"type":440,"tag":477,"props":549,"children":550},{},[551],{"type":445,"value":552},"输入：s = \"a good example\"\n",{"type":440,"tag":477,"props":554,"children":555},{"class":479,"line":489},[556],{"type":440,"tag":477,"props":557,"children":558},{},[559],{"type":445,"value":560},"输出：\"example good a\"\n",{"type":440,"tag":477,"props":562,"children":563},{"class":479,"line":526},[564],{"type":440,"tag":477,"props":565,"children":566},{},[567],{"type":445,"value":568},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":440,"tag":441,"props":570,"children":571},{},[572],{"type":445,"value":573},"提示：",{"type":440,"tag":575,"props":576,"children":577},"ul",{},[578,584,589],{"type":440,"tag":579,"props":580,"children":581},"li",{},[582],{"type":445,"value":583},"1 \u003C= s.length \u003C= 10^4",{"type":440,"tag":579,"props":585,"children":586},{},[587],{"type":445,"value":588},"s 包含英文大小写字母、数字和空格 ' '",{"type":440,"tag":579,"props":590,"children":591},{},[592],{"type":445,"value":593},"s 中 至少存在一个 单词",{"type":440,"tag":441,"props":595,"children":596},{},[597],{"type":445,"value":598},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":440,"tag":600,"props":601,"children":603},"h2",{"id":602},"解题思路",[604],{"type":445,"value":602},{"type":440,"tag":600,"props":606,"children":608},{"id":607},"实现",[609],{"type":445,"value":607},{"type":440,"tag":611,"props":612,"children":614},"h3",{"id":613},"语言特性",[615],{"type":445,"value":613},{"type":440,"tag":467,"props":617,"children":621},{"className":618,"code":619,"language":620,"meta":433,"style":433},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[622],{"type":440,"tag":473,"props":623,"children":624},{"__ignoreMap":433},[625,634,660,677,686,730,836],{"type":440,"tag":477,"props":626,"children":627},{"class":479,"line":480},[628],{"type":440,"tag":477,"props":629,"children":631},{"style":630},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[632],{"type":445,"value":633},"/**\n",{"type":440,"tag":477,"props":635,"children":636},{"class":479,"line":489},[637,642,648,654],{"type":440,"tag":477,"props":638,"children":639},{"style":630},[640],{"type":445,"value":641}," * ",{"type":440,"tag":477,"props":643,"children":645},{"style":644},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[646],{"type":445,"value":647},"@param",{"type":440,"tag":477,"props":649,"children":651},{"style":650},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[652],{"type":445,"value":653}," {string}",{"type":440,"tag":477,"props":655,"children":657},{"style":656},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[658],{"type":445,"value":659}," s\n",{"type":440,"tag":477,"props":661,"children":662},{"class":479,"line":526},[663,667,672],{"type":440,"tag":477,"props":664,"children":665},{"style":630},[666],{"type":445,"value":641},{"type":440,"tag":477,"props":668,"children":669},{"style":644},[670],{"type":445,"value":671},"@return",{"type":440,"tag":477,"props":673,"children":674},{"style":650},[675],{"type":445,"value":676}," {string}\n",{"type":440,"tag":477,"props":678,"children":680},{"class":479,"line":679},4,[681],{"type":440,"tag":477,"props":682,"children":683},{"style":630},[684],{"type":445,"value":685}," */\n",{"type":440,"tag":477,"props":687,"children":689},{"class":479,"line":688},5,[690,696,702,708,713,719,725],{"type":440,"tag":477,"props":691,"children":693},{"style":692},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[694],{"type":445,"value":695},"var",{"type":440,"tag":477,"props":697,"children":699},{"style":698},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[700],{"type":445,"value":701}," reverseWords",{"type":440,"tag":477,"props":703,"children":705},{"style":704},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[706],{"type":445,"value":707}," =",{"type":440,"tag":477,"props":709,"children":710},{"style":692},[711],{"type":445,"value":712}," function",{"type":440,"tag":477,"props":714,"children":716},{"style":715},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[717],{"type":445,"value":718}," (",{"type":440,"tag":477,"props":720,"children":722},{"style":721},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[723],{"type":445,"value":724},"s",{"type":440,"tag":477,"props":726,"children":727},{"style":715},[728],{"type":445,"value":729},") {\n",{"type":440,"tag":477,"props":731,"children":733},{"class":479,"line":732},6,[734,740,746,752,757,762,768,773,777,782,786,791,795,799,804,809,813,818,822,826,830],{"type":440,"tag":477,"props":735,"children":737},{"style":736},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[738],{"type":445,"value":739},"  return",{"type":440,"tag":477,"props":741,"children":743},{"style":742},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[744],{"type":445,"value":745}," s",{"type":440,"tag":477,"props":747,"children":749},{"style":748},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[750],{"type":445,"value":751},".",{"type":440,"tag":477,"props":753,"children":754},{"style":698},[755],{"type":445,"value":756},"split",{"type":440,"tag":477,"props":758,"children":759},{"style":715},[760],{"type":445,"value":761},"(",{"type":440,"tag":477,"props":763,"children":765},{"style":764},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[766],{"type":445,"value":767},"\" \"",{"type":440,"tag":477,"props":769,"children":770},{"style":715},[771],{"type":445,"value":772},")",{"type":440,"tag":477,"props":774,"children":775},{"style":748},[776],{"type":445,"value":751},{"type":440,"tag":477,"props":778,"children":779},{"style":698},[780],{"type":445,"value":781},"filter",{"type":440,"tag":477,"props":783,"children":784},{"style":715},[785],{"type":445,"value":761},{"type":440,"tag":477,"props":787,"children":788},{"style":742},[789],{"type":445,"value":790},"Boolean",{"type":440,"tag":477,"props":792,"children":793},{"style":715},[794],{"type":445,"value":772},{"type":440,"tag":477,"props":796,"children":797},{"style":748},[798],{"type":445,"value":751},{"type":440,"tag":477,"props":800,"children":801},{"style":698},[802],{"type":445,"value":803},"reverse",{"type":440,"tag":477,"props":805,"children":806},{"style":715},[807],{"type":445,"value":808},"()",{"type":440,"tag":477,"props":810,"children":811},{"style":748},[812],{"type":445,"value":751},{"type":440,"tag":477,"props":814,"children":815},{"style":698},[816],{"type":445,"value":817},"join",{"type":440,"tag":477,"props":819,"children":820},{"style":715},[821],{"type":445,"value":761},{"type":440,"tag":477,"props":823,"children":824},{"style":764},[825],{"type":445,"value":767},{"type":440,"tag":477,"props":827,"children":828},{"style":715},[829],{"type":445,"value":772},{"type":440,"tag":477,"props":831,"children":833},{"style":832},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[834],{"type":445,"value":835},";\n",{"type":440,"tag":477,"props":837,"children":839},{"class":479,"line":838},7,[840,845],{"type":440,"tag":477,"props":841,"children":842},{"style":715},[843],{"type":445,"value":844},"}",{"type":440,"tag":477,"props":846,"children":847},{"style":832},[848],{"type":445,"value":835},{"type":440,"tag":611,"props":850,"children":852},{"id":851},"双指针",[853],{"type":445,"value":851},{"type":440,"tag":467,"props":855,"children":857},{"className":618,"code":856,"language":620,"meta":433,"style":433},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[858],{"type":440,"tag":473,"props":859,"children":860},{"__ignoreMap":433},[861,868,887,902,909,940,948,956,965,974,983,1010,1055,1080,1112,1194,1277,1351,1377,1386,1435],{"type":440,"tag":477,"props":862,"children":863},{"class":479,"line":480},[864],{"type":440,"tag":477,"props":865,"children":866},{"style":630},[867],{"type":445,"value":633},{"type":440,"tag":477,"props":869,"children":870},{"class":479,"line":489},[871,875,879,883],{"type":440,"tag":477,"props":872,"children":873},{"style":630},[874],{"type":445,"value":641},{"type":440,"tag":477,"props":876,"children":877},{"style":644},[878],{"type":445,"value":647},{"type":440,"tag":477,"props":880,"children":881},{"style":650},[882],{"type":445,"value":653},{"type":440,"tag":477,"props":884,"children":885},{"style":656},[886],{"type":445,"value":659},{"type":440,"tag":477,"props":888,"children":889},{"class":479,"line":526},[890,894,898],{"type":440,"tag":477,"props":891,"children":892},{"style":630},[893],{"type":445,"value":641},{"type":440,"tag":477,"props":895,"children":896},{"style":644},[897],{"type":445,"value":671},{"type":440,"tag":477,"props":899,"children":900},{"style":650},[901],{"type":445,"value":676},{"type":440,"tag":477,"props":903,"children":904},{"class":479,"line":679},[905],{"type":440,"tag":477,"props":906,"children":907},{"style":630},[908],{"type":445,"value":685},{"type":440,"tag":477,"props":910,"children":911},{"class":479,"line":688},[912,916,920,924,928,932,936],{"type":440,"tag":477,"props":913,"children":914},{"style":692},[915],{"type":445,"value":695},{"type":440,"tag":477,"props":917,"children":918},{"style":698},[919],{"type":445,"value":701},{"type":440,"tag":477,"props":921,"children":922},{"style":704},[923],{"type":445,"value":707},{"type":440,"tag":477,"props":925,"children":926},{"style":692},[927],{"type":445,"value":712},{"type":440,"tag":477,"props":929,"children":930},{"style":715},[931],{"type":445,"value":718},{"type":440,"tag":477,"props":933,"children":934},{"style":721},[935],{"type":445,"value":724},{"type":440,"tag":477,"props":937,"children":938},{"style":715},[939],{"type":445,"value":729},{"type":440,"tag":477,"props":941,"children":942},{"class":479,"line":732},[943],{"type":440,"tag":477,"props":944,"children":945},{"style":630},[946],{"type":445,"value":947},"  // 倒序遍历字符串\n",{"type":440,"tag":477,"props":949,"children":950},{"class":479,"line":838},[951],{"type":440,"tag":477,"props":952,"children":953},{"style":630},[954],{"type":445,"value":955},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":440,"tag":477,"props":957,"children":959},{"class":479,"line":958},8,[960],{"type":440,"tag":477,"props":961,"children":962},{"style":630},[963],{"type":445,"value":964},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":440,"tag":477,"props":966,"children":968},{"class":479,"line":967},9,[969],{"type":440,"tag":477,"props":970,"children":971},{"style":630},[972],{"type":445,"value":973},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":440,"tag":477,"props":975,"children":977},{"class":479,"line":976},10,[978],{"type":440,"tag":477,"props":979,"children":980},{"style":630},[981],{"type":445,"value":982},"  // 4. 执行 j = i\n",{"type":440,"tag":477,"props":984,"children":986},{"class":479,"line":985},11,[987,992,997,1001,1006],{"type":440,"tag":477,"props":988,"children":989},{"style":692},[990],{"type":445,"value":991},"  let",{"type":440,"tag":477,"props":993,"children":994},{"style":742},[995],{"type":445,"value":996}," res",{"type":440,"tag":477,"props":998,"children":999},{"style":704},[1000],{"type":445,"value":707},{"type":440,"tag":477,"props":1002,"children":1003},{"style":715},[1004],{"type":445,"value":1005}," []",{"type":440,"tag":477,"props":1007,"children":1008},{"style":832},[1009],{"type":445,"value":835},{"type":440,"tag":477,"props":1011,"children":1013},{"class":479,"line":1012},12,[1014,1018,1023,1027,1031,1035,1040,1045,1051],{"type":440,"tag":477,"props":1015,"children":1016},{"style":692},[1017],{"type":445,"value":991},{"type":440,"tag":477,"props":1019,"children":1020},{"style":742},[1021],{"type":445,"value":1022}," i",{"type":440,"tag":477,"props":1024,"children":1025},{"style":704},[1026],{"type":445,"value":707},{"type":440,"tag":477,"props":1028,"children":1029},{"style":742},[1030],{"type":445,"value":745},{"type":440,"tag":477,"props":1032,"children":1033},{"style":748},[1034],{"type":445,"value":751},{"type":440,"tag":477,"props":1036,"children":1037},{"style":715},[1038],{"type":445,"value":1039},"length ",{"type":440,"tag":477,"props":1041,"children":1042},{"style":704},[1043],{"type":445,"value":1044},"-",{"type":440,"tag":477,"props":1046,"children":1048},{"style":1047},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[1049],{"type":445,"value":1050}," 1",{"type":440,"tag":477,"props":1052,"children":1053},{"style":832},[1054],{"type":445,"value":835},{"type":440,"tag":477,"props":1056,"children":1058},{"class":479,"line":1057},13,[1059,1063,1068,1072,1076],{"type":440,"tag":477,"props":1060,"children":1061},{"style":692},[1062],{"type":445,"value":991},{"type":440,"tag":477,"props":1064,"children":1065},{"style":742},[1066],{"type":445,"value":1067}," j",{"type":440,"tag":477,"props":1069,"children":1070},{"style":704},[1071],{"type":445,"value":707},{"type":440,"tag":477,"props":1073,"children":1074},{"style":742},[1075],{"type":445,"value":1022},{"type":440,"tag":477,"props":1077,"children":1078},{"style":832},[1079],{"type":445,"value":835},{"type":440,"tag":477,"props":1081,"children":1083},{"class":479,"line":1082},14,[1084,1089,1093,1098,1103,1108],{"type":440,"tag":477,"props":1085,"children":1086},{"style":736},[1087],{"type":445,"value":1088},"  while",{"type":440,"tag":477,"props":1090,"children":1091},{"style":715},[1092],{"type":445,"value":718},{"type":440,"tag":477,"props":1094,"children":1095},{"style":742},[1096],{"type":445,"value":1097},"i",{"type":440,"tag":477,"props":1099,"children":1100},{"style":704},[1101],{"type":445,"value":1102}," >=",{"type":440,"tag":477,"props":1104,"children":1105},{"style":1047},[1106],{"type":445,"value":1107}," 0",{"type":440,"tag":477,"props":1109,"children":1110},{"style":715},[1111],{"type":445,"value":729},{"type":440,"tag":477,"props":1113,"children":1115},{"class":479,"line":1114},15,[1116,1121,1125,1129,1133,1137,1142,1146,1151,1155,1160,1165,1170,1175,1179,1184,1189],{"type":440,"tag":477,"props":1117,"children":1118},{"style":736},[1119],{"type":445,"value":1120},"    while",{"type":440,"tag":477,"props":1122,"children":1123},{"style":715},[1124],{"type":445,"value":718},{"type":440,"tag":477,"props":1126,"children":1127},{"style":742},[1128],{"type":445,"value":1097},{"type":440,"tag":477,"props":1130,"children":1131},{"style":704},[1132],{"type":445,"value":1102},{"type":440,"tag":477,"props":1134,"children":1135},{"style":1047},[1136],{"type":445,"value":1107},{"type":440,"tag":477,"props":1138,"children":1139},{"style":704},[1140],{"type":445,"value":1141}," &&",{"type":440,"tag":477,"props":1143,"children":1144},{"style":742},[1145],{"type":445,"value":745},{"type":440,"tag":477,"props":1147,"children":1148},{"style":715},[1149],{"type":445,"value":1150},"[",{"type":440,"tag":477,"props":1152,"children":1153},{"style":742},[1154],{"type":445,"value":1097},{"type":440,"tag":477,"props":1156,"children":1157},{"style":715},[1158],{"type":445,"value":1159},"] ",{"type":440,"tag":477,"props":1161,"children":1162},{"style":704},[1163],{"type":445,"value":1164},"!==",{"type":440,"tag":477,"props":1166,"children":1167},{"style":764},[1168],{"type":445,"value":1169}," \" \"",{"type":440,"tag":477,"props":1171,"children":1172},{"style":715},[1173],{"type":445,"value":1174},") ",{"type":440,"tag":477,"props":1176,"children":1177},{"style":742},[1178],{"type":445,"value":1097},{"type":440,"tag":477,"props":1180,"children":1181},{"style":704},[1182],{"type":445,"value":1183},"--",{"type":440,"tag":477,"props":1185,"children":1186},{"style":832},[1187],{"type":445,"value":1188},";",{"type":440,"tag":477,"props":1190,"children":1191},{"style":630},[1192],{"type":445,"value":1193}," // 搜索首个空格\n",{"type":440,"tag":477,"props":1195,"children":1197},{"class":479,"line":1196},16,[1198,1203,1207,1212,1216,1220,1224,1229,1233,1237,1242,1246,1251,1255,1259,1263,1268,1272],{"type":440,"tag":477,"props":1199,"children":1200},{"style":742},[1201],{"type":445,"value":1202},"    res",{"type":440,"tag":477,"props":1204,"children":1205},{"style":748},[1206],{"type":445,"value":751},{"type":440,"tag":477,"props":1208,"children":1209},{"style":698},[1210],{"type":445,"value":1211},"push",{"type":440,"tag":477,"props":1213,"children":1214},{"style":715},[1215],{"type":445,"value":761},{"type":440,"tag":477,"props":1217,"children":1218},{"style":742},[1219],{"type":445,"value":724},{"type":440,"tag":477,"props":1221,"children":1222},{"style":748},[1223],{"type":445,"value":751},{"type":440,"tag":477,"props":1225,"children":1226},{"style":698},[1227],{"type":445,"value":1228},"substring",{"type":440,"tag":477,"props":1230,"children":1231},{"style":715},[1232],{"type":445,"value":761},{"type":440,"tag":477,"props":1234,"children":1235},{"style":742},[1236],{"type":445,"value":1097},{"type":440,"tag":477,"props":1238,"children":1239},{"style":704},[1240],{"type":445,"value":1241}," +",{"type":440,"tag":477,"props":1243,"children":1244},{"style":1047},[1245],{"type":445,"value":1050},{"type":440,"tag":477,"props":1247,"children":1248},{"style":832},[1249],{"type":445,"value":1250},",",{"type":440,"tag":477,"props":1252,"children":1253},{"style":742},[1254],{"type":445,"value":1067},{"type":440,"tag":477,"props":1256,"children":1257},{"style":704},[1258],{"type":445,"value":1241},{"type":440,"tag":477,"props":1260,"children":1261},{"style":1047},[1262],{"type":445,"value":1050},{"type":440,"tag":477,"props":1264,"children":1265},{"style":715},[1266],{"type":445,"value":1267},"))",{"type":440,"tag":477,"props":1269,"children":1270},{"style":832},[1271],{"type":445,"value":1188},{"type":440,"tag":477,"props":1273,"children":1274},{"style":630},[1275],{"type":445,"value":1276}," // 添加单词\n",{"type":440,"tag":477,"props":1278,"children":1280},{"class":479,"line":1279},17,[1281,1285,1289,1293,1297,1301,1305,1309,1313,1317,1321,1326,1330,1334,1338,1342,1346],{"type":440,"tag":477,"props":1282,"children":1283},{"style":736},[1284],{"type":445,"value":1120},{"type":440,"tag":477,"props":1286,"children":1287},{"style":715},[1288],{"type":445,"value":718},{"type":440,"tag":477,"props":1290,"children":1291},{"style":742},[1292],{"type":445,"value":1097},{"type":440,"tag":477,"props":1294,"children":1295},{"style":704},[1296],{"type":445,"value":1102},{"type":440,"tag":477,"props":1298,"children":1299},{"style":1047},[1300],{"type":445,"value":1107},{"type":440,"tag":477,"props":1302,"children":1303},{"style":704},[1304],{"type":445,"value":1141},{"type":440,"tag":477,"props":1306,"children":1307},{"style":742},[1308],{"type":445,"value":745},{"type":440,"tag":477,"props":1310,"children":1311},{"style":715},[1312],{"type":445,"value":1150},{"type":440,"tag":477,"props":1314,"children":1315},{"style":742},[1316],{"type":445,"value":1097},{"type":440,"tag":477,"props":1318,"children":1319},{"style":715},[1320],{"type":445,"value":1159},{"type":440,"tag":477,"props":1322,"children":1323},{"style":704},[1324],{"type":445,"value":1325},"===",{"type":440,"tag":477,"props":1327,"children":1328},{"style":764},[1329],{"type":445,"value":1169},{"type":440,"tag":477,"props":1331,"children":1332},{"style":715},[1333],{"type":445,"value":1174},{"type":440,"tag":477,"props":1335,"children":1336},{"style":742},[1337],{"type":445,"value":1097},{"type":440,"tag":477,"props":1339,"children":1340},{"style":704},[1341],{"type":445,"value":1183},{"type":440,"tag":477,"props":1343,"children":1344},{"style":832},[1345],{"type":445,"value":1188},{"type":440,"tag":477,"props":1347,"children":1348},{"style":630},[1349],{"type":445,"value":1350}," // 跳过单词间空格\n",{"type":440,"tag":477,"props":1352,"children":1354},{"class":479,"line":1353},18,[1355,1360,1364,1368,1372],{"type":440,"tag":477,"props":1356,"children":1357},{"style":742},[1358],{"type":445,"value":1359},"    j",{"type":440,"tag":477,"props":1361,"children":1362},{"style":704},[1363],{"type":445,"value":707},{"type":440,"tag":477,"props":1365,"children":1366},{"style":742},[1367],{"type":445,"value":1022},{"type":440,"tag":477,"props":1369,"children":1370},{"style":832},[1371],{"type":445,"value":1188},{"type":440,"tag":477,"props":1373,"children":1374},{"style":630},[1375],{"type":445,"value":1376}," // 指针移动，指向下个单词的尾字符\n",{"type":440,"tag":477,"props":1378,"children":1380},{"class":479,"line":1379},19,[1381],{"type":440,"tag":477,"props":1382,"children":1383},{"style":715},[1384],{"type":445,"value":1385},"  }\n",{"type":440,"tag":477,"props":1387,"children":1389},{"class":479,"line":1388},20,[1390,1394,1398,1402,1406,1410,1414,1418,1422,1427,1431],{"type":440,"tag":477,"props":1391,"children":1392},{"style":736},[1393],{"type":445,"value":739},{"type":440,"tag":477,"props":1395,"children":1396},{"style":742},[1397],{"type":445,"value":996},{"type":440,"tag":477,"props":1399,"children":1400},{"style":748},[1401],{"type":445,"value":751},{"type":440,"tag":477,"props":1403,"children":1404},{"style":698},[1405],{"type":445,"value":817},{"type":440,"tag":477,"props":1407,"children":1408},{"style":715},[1409],{"type":445,"value":761},{"type":440,"tag":477,"props":1411,"children":1412},{"style":764},[1413],{"type":445,"value":767},{"type":440,"tag":477,"props":1415,"children":1416},{"style":715},[1417],{"type":445,"value":772},{"type":440,"tag":477,"props":1419,"children":1420},{"style":748},[1421],{"type":445,"value":751},{"type":440,"tag":477,"props":1423,"children":1424},{"style":698},[1425],{"type":445,"value":1426},"trim",{"type":440,"tag":477,"props":1428,"children":1429},{"style":715},[1430],{"type":445,"value":808},{"type":440,"tag":477,"props":1432,"children":1433},{"style":832},[1434],{"type":445,"value":835},{"type":440,"tag":477,"props":1436,"children":1438},{"class":479,"line":1437},21,[1439,1443],{"type":440,"tag":477,"props":1440,"children":1441},{"style":715},[1442],{"type":445,"value":844},{"type":440,"tag":477,"props":1444,"children":1445},{"style":832},[1446],{"type":445,"value":835},{"type":440,"tag":1448,"props":1449,"children":1450},"style",{},[1451],{"type":445,"value":1452},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":433,"searchDepth":688,"depth":688,"links":1454},[1455,1456],{"id":602,"depth":489,"text":602},{"id":607,"depth":489,"text":607,"children":1457},[1458,1459],{"id":613,"depth":526,"text":613},{"id":851,"depth":526,"text":851},"markdown","content:1.algorithm:3.leetcode:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/151.reverse-words-in-a-string.md","md",[1466,1468],{"_path":146,"title":145,"description":1467},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":152,"title":151,"description":1469},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1713426812197]