[{"data":1,"prerenderedAt":1467},["Reactive",2],{"navigation":3,"/algorithm/leetcode/reverse-words-in-a-string":427,"/algorithm/leetcode/reverse-words-in-a-string-surround":1462},[4,237,265,406,413],{"title":5,"_path":6,"children":7},"算法","/algorithm",[8,10,23],{"title":9,"_path":6},"刷题索引",{"title":11,"_path":12,"children":13},"剑指 offer","/algorithm/sword-ofter",[14,17,20],{"title":15,"_path":16},"LCR.140 训练计划 II","/algorithm/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":18,"_path":19},"LCR.169 招式拆解 II","/algorithm/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":21,"_path":22},"LCR.187 破冰游戏","/algorithm/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":24,"_path":25,"children":26},"力扣 leetCode","/algorithm/leetcode",[27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234],{"title":28,"_path":29},"No.1 两数之和","/algorithm/leetcode/two-sum",{"title":31,"_path":32},"No.2 两数相加","/algorithm/leetcode/add-two-numbers",{"title":34,"_path":35},"No.3 无重复字符的最长子串","/algorithm/leetcode/longest-substring-without-repeating-characters",{"title":37,"_path":38},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/median-of-two-sorted-arrays",{"title":40,"_path":41},"No.5 最长回文子串","/algorithm/leetcode/longest-palindromic-substring",{"title":43,"_path":44},"No.7 整数反转","/algorithm/leetcode/reverse-integer",{"title":46,"_path":47},"No.9 回文数","/algorithm/leetcode/palindrome-number",{"title":49,"_path":50},"No.14 最长公共前缀","/algorithm/leetcode/longest-common-prefix",{"title":52,"_path":53},"No.15 三数之和","/algorithm/leetcode/3sum",{"title":55,"_path":56},"No.20 有效的括号","/algorithm/leetcode/valid-parentheses",{"title":58,"_path":59},"No.21 合并两个有序链表","/algorithm/leetcode/merge-two-sorted-lists",{"title":61,"_path":62},"No.22 括号生成","/algorithm/leetcode/generate-parentheses",{"title":64,"_path":65},"No.23 合并 K 个升序链表","/algorithm/leetcode/merge-k-sorted-lists",{"title":67,"_path":68},"No.24 两两交换链表中的节点","/algorithm/leetcode/swap-nodes-in-pairs",{"title":70,"_path":71},"No.25 K 个一组翻转链表","/algorithm/leetcode/reverse-nodes-in-k-group",{"title":73,"_path":74},"No.31 下一个排列","/algorithm/leetcode/next-permutation",{"title":76,"_path":77},"No.32 最长有效括号","/algorithm/leetcode/longest-valid-parentheses",{"title":79,"_path":80},"No.33 搜索旋转排序数组","/algorithm/leetcode/search-in-rotated-sorted-array",{"title":82,"_path":83},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/find-first-and-last-position-of-element-in-sorted-array",{"title":85,"_path":86},"No.39 组合求和","/algorithm/leetcode/combination-sum",{"title":88,"_path":89},"No.42 接雨水","/algorithm/leetcode/trapping-rain-water",{"title":91,"_path":92},"No.46 全排列","/algorithm/leetcode/permutations",{"title":94,"_path":95},"No.53 最大子序和","/algorithm/leetcode/maximum-subarray",{"title":97,"_path":98},"No.56 合并区间","/algorithm/leetcode/merge-intervals",{"title":100,"_path":101},"No.67 二进制求和","/algorithm/leetcode/add-binary",{"title":103,"_path":104},"No.69 x 的平方根","/algorithm/leetcode/sqrtx",{"title":106,"_path":107},"No.70 爬楼梯","/algorithm/leetcode/climbing-stairs",{"title":109,"_path":110},"No.88 合并两个有序数组","/algorithm/leetcode/merge-sorted-array",{"title":112,"_path":113},"No.92 反转链表 II","/algorithm/leetcode/reverse-linked-list-ii",{"title":115,"_path":116},"No.94 二叉树的中序遍历","/algorithm/leetcode/binary-tree-inorder-traversal",{"title":118,"_path":119},"No.101 对称二叉树","/algorithm/leetcode/symmetric-tree",{"title":121,"_path":122},"No.102 二叉树的层序遍历","/algorithm/leetcode/binary-tree-level-order-traversal",{"title":124,"_path":125},"No.104 二叉树的最大深度","/algorithm/leetcode/maximum-depth-of-binary-tree",{"title":127,"_path":128},"No.111 二叉树的最小深度","/algorithm/leetcode/minimum-depth-of-binary-tree",{"title":130,"_path":131},"No.112 路径总和","/algorithm/leetcode/path-sum",{"title":133,"_path":134},"No.121 买股票的最佳时机","/algorithm/leetcode/best-time-to-buy-and-sell-stock",{"title":136,"_path":137},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/sum-root-to-leaf-numbers",{"title":139,"_path":140},"No.136 只出现一次的数字","/algorithm/leetcode/single-number",{"title":142,"_path":143},"No.141 环型链表","/algorithm/leetcode/linked-list-cycle",{"title":145,"_path":146},"No.146 LRU 缓存","/algorithm/leetcode/lru-cache",{"title":148,"_path":149},"No.151 反转字符串中的单词","/algorithm/leetcode/reverse-words-in-a-string",{"title":151,"_path":152},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/find-minimum-in-rotated-sorted-array",{"title":154,"_path":155},"No.155 最小栈","/algorithm/leetcode/min-stack",{"title":157,"_path":158},"No.160 相交链表","/algorithm/leetcode/intersection-of-two-linked-lists",{"title":160,"_path":161},"No.162 寻找峰值","/algorithm/leetcode/find-peak-element",{"title":163,"_path":164},"No.165 比较版本号","/algorithm/leetcode/compare-version-numbers",{"title":166,"_path":167},"No.169 多数元素","/algorithm/leetcode/majority-element",{"title":169,"_path":170},"No.200 岛屿数量","/algorithm/leetcode/number-of-islands",{"title":172,"_path":173},"No.206 反转链表","/algorithm/leetcode/reverse-linked-list",{"title":175,"_path":176},"No.209 长度最小的子数组","/algorithm/leetcode/minimum-size-subarray-sum",{"title":178,"_path":179},"No.215 数组中的第K个最大元素","/algorithm/leetcode/kth-largest-element-in-an-array",{"title":181,"_path":182},"No.226 翻转二叉树","/algorithm/leetcode/invert-binary-tree",{"title":184,"_path":185},"No.238 除自身以外数组的乘积","/algorithm/leetcode/product-of-array-except-self",{"title":187,"_path":188},"No.322 零钱兑换","/algorithm/leetcode/coin-change",{"title":190,"_path":191},"No.334 递增的三元子序列","/algorithm/leetcode/increasing-triplet-subsequence",{"title":193,"_path":194},"No.344 反转字符串","/algorithm/leetcode/reverse-string",{"title":196,"_path":197},"No.345 反转字符串中的元音字母","/algorithm/leetcode/reverse-vowels-of-a-string",{"title":199,"_path":200},"No.384 打乱数组","/algorithm/leetcode/shuffle-an-array",{"title":202,"_path":203},"No.415 字符串相加","/algorithm/leetcode/add-strings",{"title":205,"_path":206},"No.443 压缩字符串","/algorithm/leetcode/string-compression",{"title":208,"_path":209},"No.509 斐波那契数","/algorithm/leetcode/fibonacci-number",{"title":211,"_path":212},"No.605 种花问题","/algorithm/leetcode/can-place-flowers",{"title":214,"_path":215},"No.617 合并二叉树","/algorithm/leetcode/merge-two-binary-trees",{"title":217,"_path":218},"No.678 有效的括号字符串","/algorithm/leetcode/valid-parenthesis-string",{"title":220,"_path":221},"No.704 二分查找","/algorithm/leetcode/binary-search",{"title":223,"_path":224},"No.912 排序数组","/algorithm/leetcode/sort-an-array",{"title":226,"_path":227},"No.1071 字符串的最大公因子","/algorithm/leetcode/greatest-common-divisor-of-strings",{"title":229,"_path":230},"No.1143 最长公共子序列","/algorithm/leetcode/longest-common-subsequence",{"title":232,"_path":233},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/kids-with-the-greatest-number-of-candies",{"title":235,"_path":236},"No.1768 交替合并字符串","/algorithm/leetcode/merge-strings-alternately",{"title":238,"_path":239,"children":240},"前端八股文","/frontend-endorsement",[241,252],{"title":242,"_path":243,"children":244},"构建工具","/frontend-endorsement/build-tools",[245],{"title":246,"_path":247,"children":248},"Webpack","/frontend-endorsement/build-tools/webpack",[249],{"title":250,"_path":251},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":253,"_path":254,"children":255},"Html","/frontend-endorsement/html",[256,259,262],{"title":257,"_path":258},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":260,"_path":261},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":263,"_path":264},"离线存储","/frontend-endorsement/html/offline-storage",{"title":266,"_path":267,"children":268},"前端代码考核","/frontend-code-assessment",[269,318,399],{"title":270,"_path":271,"children":272},"源码实现","/frontend-code-assessment/source",[273,298,311],{"title":274,"_path":275,"children":276},"原生 api","/frontend-code-assessment/source/native-api",[277,280,283,286,289,292,295],{"title":278,"_path":279},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":281,"_path":282},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":284,"_path":285},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":287,"_path":288},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":290,"_path":291},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":293,"_path":294},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":296,"_path":297},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":299,"_path":300,"children":301},"数组 Array","/frontend-code-assessment/source/array",[302,305,308],{"title":303,"_path":304},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":306,"_path":307},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":309,"_path":310},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":312,"_path":313,"children":314},"字符串 String","/frontend-code-assessment/source/string",[315],{"title":316,"_path":317},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":319,"_path":320,"children":321},"业务场景","/frontend-code-assessment/scene",[322,344,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396],{"title":323,"_path":324,"children":325},"Promise","/frontend-code-assessment/scene/promise",[326,329,332,335,338,341],{"title":327,"_path":328},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":330,"_path":331},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":333,"_path":334},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":336,"_path":337},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":339,"_path":340},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":342,"_path":343},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":345,"_path":346,"children":347},"框架和设计模式","/frontend-code-assessment/scene/framework-and-design-mode",[348],{"title":349,"_path":350},"event bus","/frontend-code-assessment/scene/framework-and-design-mode/event-bus",{"title":352,"_path":353},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":355,"_path":356},"倒计时","/frontend-code-assessment/scene/countdown",{"title":358,"_path":359},"日期格式化","/frontend-code-assessment/scene/date-format",{"title":361,"_path":362},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":364,"_path":365},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":367,"_path":368},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":370,"_path":371},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":373,"_path":374},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":376,"_path":377},"解析 url 参数","/frontend-code-assessment/scene/parse-url-query",{"title":379,"_path":380},"原型链输出","/frontend-code-assessment/scene/prototype-chain-output",{"title":382,"_path":383},"随机数","/frontend-code-assessment/scene/random-number",{"title":385,"_path":386},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":388,"_path":389},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":391,"_path":392},"千分位分隔数字字符串","/frontend-code-assessment/scene/thousandth-separated-number-string",{"title":394,"_path":395},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":397,"_path":398},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":400,"_path":401,"children":402},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[403],{"title":404,"_path":405},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union",{"title":407,"_path":408,"children":409},"项目","/pro",[410],{"title":411,"_path":412},"Vue 如何对 Store 进行单元测试","/pro/unit-test-vue-store",{"title":414,"_path":415,"children":416},"后端语言","/backend-languages",[417],{"title":418,"_path":419,"children":420},"Python","/backend-languages/python",[421,424],{"title":422,"_path":423},"基础","/backend-languages/python/base",{"title":425,"_path":426},"函数","/backend-languages/python/function",{"_path":149,"_dir":428,"_draft":429,"_partial":429,"_locale":430,"title":148,"description":431,"url":432,"body":433,"_type":1457,"_id":1458,"_source":1459,"_file":1460,"_extension":1461},"leetcode",false,"","给你一个字符串 s ，请你反转字符串中 单词 的顺序。","https://leetcode.cn/problems/reverse-words-in-a-string",{"type":434,"children":435,"toc":1450},"root",[436,443,448,453,458,463,493,498,530,535,566,571,591,596,602,607,613,846,851,1444],{"type":437,"tag":438,"props":439,"children":440},"element","p",{},[441],{"type":442,"value":431},"text",{"type":437,"tag":438,"props":444,"children":445},{},[446],{"type":442,"value":447},"单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。",{"type":437,"tag":438,"props":449,"children":450},{},[451],{"type":442,"value":452},"返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。",{"type":437,"tag":438,"props":454,"children":455},{},[456],{"type":442,"value":457},"注意：输入字符串 s 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。",{"type":437,"tag":438,"props":459,"children":460},{},[461],{"type":442,"value":462},"示例 1：",{"type":437,"tag":464,"props":465,"children":468},"pre",{"className":466,"code":467,"language":442,"meta":430,"style":430},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：s = \"the sky is blue\"\n输出：\"blue is sky the\"\n",[469],{"type":437,"tag":470,"props":471,"children":472},"code",{"__ignoreMap":430},[473,484],{"type":437,"tag":474,"props":475,"children":478},"span",{"class":476,"line":477},"line",1,[479],{"type":437,"tag":474,"props":480,"children":481},{},[482],{"type":442,"value":483},"输入：s = \"the sky is blue\"\n",{"type":437,"tag":474,"props":485,"children":487},{"class":476,"line":486},2,[488],{"type":437,"tag":474,"props":489,"children":490},{},[491],{"type":442,"value":492},"输出：\"blue is sky the\"\n",{"type":437,"tag":438,"props":494,"children":495},{},[496],{"type":442,"value":497},"示例 2：",{"type":437,"tag":464,"props":499,"children":501},{"className":466,"code":500,"language":442,"meta":430,"style":430},"输入：s = \" hello world \"\n输出：\"world hello\"\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n",[502],{"type":437,"tag":470,"props":503,"children":504},{"__ignoreMap":430},[505,513,521],{"type":437,"tag":474,"props":506,"children":507},{"class":476,"line":477},[508],{"type":437,"tag":474,"props":509,"children":510},{},[511],{"type":442,"value":512},"输入：s = \" hello world \"\n",{"type":437,"tag":474,"props":514,"children":515},{"class":476,"line":486},[516],{"type":437,"tag":474,"props":517,"children":518},{},[519],{"type":442,"value":520},"输出：\"world hello\"\n",{"type":437,"tag":474,"props":522,"children":524},{"class":476,"line":523},3,[525],{"type":437,"tag":474,"props":526,"children":527},{},[528],{"type":442,"value":529},"解释：反转后的字符串中不能存在前导空格和尾随空格。\n",{"type":437,"tag":438,"props":531,"children":532},{},[533],{"type":442,"value":534},"示例 3：",{"type":437,"tag":464,"props":536,"children":538},{"className":466,"code":537,"language":442,"meta":430,"style":430},"输入：s = \"a good example\"\n输出：\"example good a\"\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",[539],{"type":437,"tag":470,"props":540,"children":541},{"__ignoreMap":430},[542,550,558],{"type":437,"tag":474,"props":543,"children":544},{"class":476,"line":477},[545],{"type":437,"tag":474,"props":546,"children":547},{},[548],{"type":442,"value":549},"输入：s = \"a good example\"\n",{"type":437,"tag":474,"props":551,"children":552},{"class":476,"line":486},[553],{"type":437,"tag":474,"props":554,"children":555},{},[556],{"type":442,"value":557},"输出：\"example good a\"\n",{"type":437,"tag":474,"props":559,"children":560},{"class":476,"line":523},[561],{"type":437,"tag":474,"props":562,"children":563},{},[564],{"type":442,"value":565},"解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n",{"type":437,"tag":438,"props":567,"children":568},{},[569],{"type":442,"value":570},"提示：",{"type":437,"tag":572,"props":573,"children":574},"ul",{},[575,581,586],{"type":437,"tag":576,"props":577,"children":578},"li",{},[579],{"type":442,"value":580},"1 \u003C= s.length \u003C= 10^4",{"type":437,"tag":576,"props":582,"children":583},{},[584],{"type":442,"value":585},"s 包含英文大小写字母、数字和空格 ' '",{"type":437,"tag":576,"props":587,"children":588},{},[589],{"type":442,"value":590},"s 中 至少存在一个 单词",{"type":437,"tag":438,"props":592,"children":593},{},[594],{"type":442,"value":595},"进阶：如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 O(1) 额外空间复杂度的 原地 解法。",{"type":437,"tag":597,"props":598,"children":600},"h2",{"id":599},"解题思路",[601],{"type":442,"value":599},{"type":437,"tag":597,"props":603,"children":605},{"id":604},"实现",[606],{"type":442,"value":604},{"type":437,"tag":608,"props":609,"children":611},"h3",{"id":610},"语言特性",[612],{"type":442,"value":610},{"type":437,"tag":464,"props":614,"children":618},{"className":615,"code":616,"language":617,"meta":430,"style":430},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  return s.split(\" \").filter(Boolean).reverse().join(\" \");\n};\n","js",[619],{"type":437,"tag":470,"props":620,"children":621},{"__ignoreMap":430},[622,631,657,674,683,727,833],{"type":437,"tag":474,"props":623,"children":624},{"class":476,"line":477},[625],{"type":437,"tag":474,"props":626,"children":628},{"style":627},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[629],{"type":442,"value":630},"/**\n",{"type":437,"tag":474,"props":632,"children":633},{"class":476,"line":486},[634,639,645,651],{"type":437,"tag":474,"props":635,"children":636},{"style":627},[637],{"type":442,"value":638}," * ",{"type":437,"tag":474,"props":640,"children":642},{"style":641},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[643],{"type":442,"value":644},"@param",{"type":437,"tag":474,"props":646,"children":648},{"style":647},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[649],{"type":442,"value":650}," {string}",{"type":437,"tag":474,"props":652,"children":654},{"style":653},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[655],{"type":442,"value":656}," s\n",{"type":437,"tag":474,"props":658,"children":659},{"class":476,"line":523},[660,664,669],{"type":437,"tag":474,"props":661,"children":662},{"style":627},[663],{"type":442,"value":638},{"type":437,"tag":474,"props":665,"children":666},{"style":641},[667],{"type":442,"value":668},"@return",{"type":437,"tag":474,"props":670,"children":671},{"style":647},[672],{"type":442,"value":673}," {string}\n",{"type":437,"tag":474,"props":675,"children":677},{"class":476,"line":676},4,[678],{"type":437,"tag":474,"props":679,"children":680},{"style":627},[681],{"type":442,"value":682}," */\n",{"type":437,"tag":474,"props":684,"children":686},{"class":476,"line":685},5,[687,693,699,705,710,716,722],{"type":437,"tag":474,"props":688,"children":690},{"style":689},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[691],{"type":442,"value":692},"var",{"type":437,"tag":474,"props":694,"children":696},{"style":695},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[697],{"type":442,"value":698}," reverseWords",{"type":437,"tag":474,"props":700,"children":702},{"style":701},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[703],{"type":442,"value":704}," =",{"type":437,"tag":474,"props":706,"children":707},{"style":689},[708],{"type":442,"value":709}," function",{"type":437,"tag":474,"props":711,"children":713},{"style":712},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[714],{"type":442,"value":715}," (",{"type":437,"tag":474,"props":717,"children":719},{"style":718},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[720],{"type":442,"value":721},"s",{"type":437,"tag":474,"props":723,"children":724},{"style":712},[725],{"type":442,"value":726},") {\n",{"type":437,"tag":474,"props":728,"children":730},{"class":476,"line":729},6,[731,737,743,749,754,759,765,770,774,779,783,788,792,796,801,806,810,815,819,823,827],{"type":437,"tag":474,"props":732,"children":734},{"style":733},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[735],{"type":442,"value":736},"  return",{"type":437,"tag":474,"props":738,"children":740},{"style":739},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[741],{"type":442,"value":742}," s",{"type":437,"tag":474,"props":744,"children":746},{"style":745},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[747],{"type":442,"value":748},".",{"type":437,"tag":474,"props":750,"children":751},{"style":695},[752],{"type":442,"value":753},"split",{"type":437,"tag":474,"props":755,"children":756},{"style":712},[757],{"type":442,"value":758},"(",{"type":437,"tag":474,"props":760,"children":762},{"style":761},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[763],{"type":442,"value":764},"\" \"",{"type":437,"tag":474,"props":766,"children":767},{"style":712},[768],{"type":442,"value":769},")",{"type":437,"tag":474,"props":771,"children":772},{"style":745},[773],{"type":442,"value":748},{"type":437,"tag":474,"props":775,"children":776},{"style":695},[777],{"type":442,"value":778},"filter",{"type":437,"tag":474,"props":780,"children":781},{"style":712},[782],{"type":442,"value":758},{"type":437,"tag":474,"props":784,"children":785},{"style":739},[786],{"type":442,"value":787},"Boolean",{"type":437,"tag":474,"props":789,"children":790},{"style":712},[791],{"type":442,"value":769},{"type":437,"tag":474,"props":793,"children":794},{"style":745},[795],{"type":442,"value":748},{"type":437,"tag":474,"props":797,"children":798},{"style":695},[799],{"type":442,"value":800},"reverse",{"type":437,"tag":474,"props":802,"children":803},{"style":712},[804],{"type":442,"value":805},"()",{"type":437,"tag":474,"props":807,"children":808},{"style":745},[809],{"type":442,"value":748},{"type":437,"tag":474,"props":811,"children":812},{"style":695},[813],{"type":442,"value":814},"join",{"type":437,"tag":474,"props":816,"children":817},{"style":712},[818],{"type":442,"value":758},{"type":437,"tag":474,"props":820,"children":821},{"style":761},[822],{"type":442,"value":764},{"type":437,"tag":474,"props":824,"children":825},{"style":712},[826],{"type":442,"value":769},{"type":437,"tag":474,"props":828,"children":830},{"style":829},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[831],{"type":442,"value":832},";\n",{"type":437,"tag":474,"props":834,"children":836},{"class":476,"line":835},7,[837,842],{"type":437,"tag":474,"props":838,"children":839},{"style":712},[840],{"type":442,"value":841},"}",{"type":437,"tag":474,"props":843,"children":844},{"style":829},[845],{"type":442,"value":832},{"type":437,"tag":608,"props":847,"children":849},{"id":848},"双指针",[850],{"type":442,"value":848},{"type":437,"tag":464,"props":852,"children":854},{"className":615,"code":853,"language":617,"meta":430,"style":430},"/**\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function (s) {\n  // 倒序遍历字符串\n  // 1. 索引 i 从右向左搜索首个空格\n  // 2. 添加单词 s[i + 1, j + 1] 到 res\n  // 3. 索引 i 绕过两个单词间所有空格\n  // 4. 执行 j = i\n  let res = [];\n  let i = s.length - 1;\n  let j = i;\n  while (i >= 0) {\n    while (i >= 0 && s[i] !== \" \") i--; // 搜索首个空格\n    res.push(s.substring(i + 1, j + 1)); // 添加单词\n    while (i >= 0 && s[i] === \" \") i--; // 跳过单词间空格\n    j = i; // 指针移动，指向下个单词的尾字符\n  }\n  return res.join(\" \").trim();\n};\n",[855],{"type":437,"tag":470,"props":856,"children":857},{"__ignoreMap":430},[858,865,884,899,906,937,945,953,962,971,980,1007,1052,1077,1109,1191,1274,1348,1374,1383,1432],{"type":437,"tag":474,"props":859,"children":860},{"class":476,"line":477},[861],{"type":437,"tag":474,"props":862,"children":863},{"style":627},[864],{"type":442,"value":630},{"type":437,"tag":474,"props":866,"children":867},{"class":476,"line":486},[868,872,876,880],{"type":437,"tag":474,"props":869,"children":870},{"style":627},[871],{"type":442,"value":638},{"type":437,"tag":474,"props":873,"children":874},{"style":641},[875],{"type":442,"value":644},{"type":437,"tag":474,"props":877,"children":878},{"style":647},[879],{"type":442,"value":650},{"type":437,"tag":474,"props":881,"children":882},{"style":653},[883],{"type":442,"value":656},{"type":437,"tag":474,"props":885,"children":886},{"class":476,"line":523},[887,891,895],{"type":437,"tag":474,"props":888,"children":889},{"style":627},[890],{"type":442,"value":638},{"type":437,"tag":474,"props":892,"children":893},{"style":641},[894],{"type":442,"value":668},{"type":437,"tag":474,"props":896,"children":897},{"style":647},[898],{"type":442,"value":673},{"type":437,"tag":474,"props":900,"children":901},{"class":476,"line":676},[902],{"type":437,"tag":474,"props":903,"children":904},{"style":627},[905],{"type":442,"value":682},{"type":437,"tag":474,"props":907,"children":908},{"class":476,"line":685},[909,913,917,921,925,929,933],{"type":437,"tag":474,"props":910,"children":911},{"style":689},[912],{"type":442,"value":692},{"type":437,"tag":474,"props":914,"children":915},{"style":695},[916],{"type":442,"value":698},{"type":437,"tag":474,"props":918,"children":919},{"style":701},[920],{"type":442,"value":704},{"type":437,"tag":474,"props":922,"children":923},{"style":689},[924],{"type":442,"value":709},{"type":437,"tag":474,"props":926,"children":927},{"style":712},[928],{"type":442,"value":715},{"type":437,"tag":474,"props":930,"children":931},{"style":718},[932],{"type":442,"value":721},{"type":437,"tag":474,"props":934,"children":935},{"style":712},[936],{"type":442,"value":726},{"type":437,"tag":474,"props":938,"children":939},{"class":476,"line":729},[940],{"type":437,"tag":474,"props":941,"children":942},{"style":627},[943],{"type":442,"value":944},"  // 倒序遍历字符串\n",{"type":437,"tag":474,"props":946,"children":947},{"class":476,"line":835},[948],{"type":437,"tag":474,"props":949,"children":950},{"style":627},[951],{"type":442,"value":952},"  // 1. 索引 i 从右向左搜索首个空格\n",{"type":437,"tag":474,"props":954,"children":956},{"class":476,"line":955},8,[957],{"type":437,"tag":474,"props":958,"children":959},{"style":627},[960],{"type":442,"value":961},"  // 2. 添加单词 s[i + 1, j + 1] 到 res\n",{"type":437,"tag":474,"props":963,"children":965},{"class":476,"line":964},9,[966],{"type":437,"tag":474,"props":967,"children":968},{"style":627},[969],{"type":442,"value":970},"  // 3. 索引 i 绕过两个单词间所有空格\n",{"type":437,"tag":474,"props":972,"children":974},{"class":476,"line":973},10,[975],{"type":437,"tag":474,"props":976,"children":977},{"style":627},[978],{"type":442,"value":979},"  // 4. 执行 j = i\n",{"type":437,"tag":474,"props":981,"children":983},{"class":476,"line":982},11,[984,989,994,998,1003],{"type":437,"tag":474,"props":985,"children":986},{"style":689},[987],{"type":442,"value":988},"  let",{"type":437,"tag":474,"props":990,"children":991},{"style":739},[992],{"type":442,"value":993}," res",{"type":437,"tag":474,"props":995,"children":996},{"style":701},[997],{"type":442,"value":704},{"type":437,"tag":474,"props":999,"children":1000},{"style":712},[1001],{"type":442,"value":1002}," []",{"type":437,"tag":474,"props":1004,"children":1005},{"style":829},[1006],{"type":442,"value":832},{"type":437,"tag":474,"props":1008,"children":1010},{"class":476,"line":1009},12,[1011,1015,1020,1024,1028,1032,1037,1042,1048],{"type":437,"tag":474,"props":1012,"children":1013},{"style":689},[1014],{"type":442,"value":988},{"type":437,"tag":474,"props":1016,"children":1017},{"style":739},[1018],{"type":442,"value":1019}," i",{"type":437,"tag":474,"props":1021,"children":1022},{"style":701},[1023],{"type":442,"value":704},{"type":437,"tag":474,"props":1025,"children":1026},{"style":739},[1027],{"type":442,"value":742},{"type":437,"tag":474,"props":1029,"children":1030},{"style":745},[1031],{"type":442,"value":748},{"type":437,"tag":474,"props":1033,"children":1034},{"style":712},[1035],{"type":442,"value":1036},"length ",{"type":437,"tag":474,"props":1038,"children":1039},{"style":701},[1040],{"type":442,"value":1041},"-",{"type":437,"tag":474,"props":1043,"children":1045},{"style":1044},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[1046],{"type":442,"value":1047}," 1",{"type":437,"tag":474,"props":1049,"children":1050},{"style":829},[1051],{"type":442,"value":832},{"type":437,"tag":474,"props":1053,"children":1055},{"class":476,"line":1054},13,[1056,1060,1065,1069,1073],{"type":437,"tag":474,"props":1057,"children":1058},{"style":689},[1059],{"type":442,"value":988},{"type":437,"tag":474,"props":1061,"children":1062},{"style":739},[1063],{"type":442,"value":1064}," j",{"type":437,"tag":474,"props":1066,"children":1067},{"style":701},[1068],{"type":442,"value":704},{"type":437,"tag":474,"props":1070,"children":1071},{"style":739},[1072],{"type":442,"value":1019},{"type":437,"tag":474,"props":1074,"children":1075},{"style":829},[1076],{"type":442,"value":832},{"type":437,"tag":474,"props":1078,"children":1080},{"class":476,"line":1079},14,[1081,1086,1090,1095,1100,1105],{"type":437,"tag":474,"props":1082,"children":1083},{"style":733},[1084],{"type":442,"value":1085},"  while",{"type":437,"tag":474,"props":1087,"children":1088},{"style":712},[1089],{"type":442,"value":715},{"type":437,"tag":474,"props":1091,"children":1092},{"style":739},[1093],{"type":442,"value":1094},"i",{"type":437,"tag":474,"props":1096,"children":1097},{"style":701},[1098],{"type":442,"value":1099}," >=",{"type":437,"tag":474,"props":1101,"children":1102},{"style":1044},[1103],{"type":442,"value":1104}," 0",{"type":437,"tag":474,"props":1106,"children":1107},{"style":712},[1108],{"type":442,"value":726},{"type":437,"tag":474,"props":1110,"children":1112},{"class":476,"line":1111},15,[1113,1118,1122,1126,1130,1134,1139,1143,1148,1152,1157,1162,1167,1172,1176,1181,1186],{"type":437,"tag":474,"props":1114,"children":1115},{"style":733},[1116],{"type":442,"value":1117},"    while",{"type":437,"tag":474,"props":1119,"children":1120},{"style":712},[1121],{"type":442,"value":715},{"type":437,"tag":474,"props":1123,"children":1124},{"style":739},[1125],{"type":442,"value":1094},{"type":437,"tag":474,"props":1127,"children":1128},{"style":701},[1129],{"type":442,"value":1099},{"type":437,"tag":474,"props":1131,"children":1132},{"style":1044},[1133],{"type":442,"value":1104},{"type":437,"tag":474,"props":1135,"children":1136},{"style":701},[1137],{"type":442,"value":1138}," &&",{"type":437,"tag":474,"props":1140,"children":1141},{"style":739},[1142],{"type":442,"value":742},{"type":437,"tag":474,"props":1144,"children":1145},{"style":712},[1146],{"type":442,"value":1147},"[",{"type":437,"tag":474,"props":1149,"children":1150},{"style":739},[1151],{"type":442,"value":1094},{"type":437,"tag":474,"props":1153,"children":1154},{"style":712},[1155],{"type":442,"value":1156},"] ",{"type":437,"tag":474,"props":1158,"children":1159},{"style":701},[1160],{"type":442,"value":1161},"!==",{"type":437,"tag":474,"props":1163,"children":1164},{"style":761},[1165],{"type":442,"value":1166}," \" \"",{"type":437,"tag":474,"props":1168,"children":1169},{"style":712},[1170],{"type":442,"value":1171},") ",{"type":437,"tag":474,"props":1173,"children":1174},{"style":739},[1175],{"type":442,"value":1094},{"type":437,"tag":474,"props":1177,"children":1178},{"style":701},[1179],{"type":442,"value":1180},"--",{"type":437,"tag":474,"props":1182,"children":1183},{"style":829},[1184],{"type":442,"value":1185},";",{"type":437,"tag":474,"props":1187,"children":1188},{"style":627},[1189],{"type":442,"value":1190}," // 搜索首个空格\n",{"type":437,"tag":474,"props":1192,"children":1194},{"class":476,"line":1193},16,[1195,1200,1204,1209,1213,1217,1221,1226,1230,1234,1239,1243,1248,1252,1256,1260,1265,1269],{"type":437,"tag":474,"props":1196,"children":1197},{"style":739},[1198],{"type":442,"value":1199},"    res",{"type":437,"tag":474,"props":1201,"children":1202},{"style":745},[1203],{"type":442,"value":748},{"type":437,"tag":474,"props":1205,"children":1206},{"style":695},[1207],{"type":442,"value":1208},"push",{"type":437,"tag":474,"props":1210,"children":1211},{"style":712},[1212],{"type":442,"value":758},{"type":437,"tag":474,"props":1214,"children":1215},{"style":739},[1216],{"type":442,"value":721},{"type":437,"tag":474,"props":1218,"children":1219},{"style":745},[1220],{"type":442,"value":748},{"type":437,"tag":474,"props":1222,"children":1223},{"style":695},[1224],{"type":442,"value":1225},"substring",{"type":437,"tag":474,"props":1227,"children":1228},{"style":712},[1229],{"type":442,"value":758},{"type":437,"tag":474,"props":1231,"children":1232},{"style":739},[1233],{"type":442,"value":1094},{"type":437,"tag":474,"props":1235,"children":1236},{"style":701},[1237],{"type":442,"value":1238}," +",{"type":437,"tag":474,"props":1240,"children":1241},{"style":1044},[1242],{"type":442,"value":1047},{"type":437,"tag":474,"props":1244,"children":1245},{"style":829},[1246],{"type":442,"value":1247},",",{"type":437,"tag":474,"props":1249,"children":1250},{"style":739},[1251],{"type":442,"value":1064},{"type":437,"tag":474,"props":1253,"children":1254},{"style":701},[1255],{"type":442,"value":1238},{"type":437,"tag":474,"props":1257,"children":1258},{"style":1044},[1259],{"type":442,"value":1047},{"type":437,"tag":474,"props":1261,"children":1262},{"style":712},[1263],{"type":442,"value":1264},"))",{"type":437,"tag":474,"props":1266,"children":1267},{"style":829},[1268],{"type":442,"value":1185},{"type":437,"tag":474,"props":1270,"children":1271},{"style":627},[1272],{"type":442,"value":1273}," // 添加单词\n",{"type":437,"tag":474,"props":1275,"children":1277},{"class":476,"line":1276},17,[1278,1282,1286,1290,1294,1298,1302,1306,1310,1314,1318,1323,1327,1331,1335,1339,1343],{"type":437,"tag":474,"props":1279,"children":1280},{"style":733},[1281],{"type":442,"value":1117},{"type":437,"tag":474,"props":1283,"children":1284},{"style":712},[1285],{"type":442,"value":715},{"type":437,"tag":474,"props":1287,"children":1288},{"style":739},[1289],{"type":442,"value":1094},{"type":437,"tag":474,"props":1291,"children":1292},{"style":701},[1293],{"type":442,"value":1099},{"type":437,"tag":474,"props":1295,"children":1296},{"style":1044},[1297],{"type":442,"value":1104},{"type":437,"tag":474,"props":1299,"children":1300},{"style":701},[1301],{"type":442,"value":1138},{"type":437,"tag":474,"props":1303,"children":1304},{"style":739},[1305],{"type":442,"value":742},{"type":437,"tag":474,"props":1307,"children":1308},{"style":712},[1309],{"type":442,"value":1147},{"type":437,"tag":474,"props":1311,"children":1312},{"style":739},[1313],{"type":442,"value":1094},{"type":437,"tag":474,"props":1315,"children":1316},{"style":712},[1317],{"type":442,"value":1156},{"type":437,"tag":474,"props":1319,"children":1320},{"style":701},[1321],{"type":442,"value":1322},"===",{"type":437,"tag":474,"props":1324,"children":1325},{"style":761},[1326],{"type":442,"value":1166},{"type":437,"tag":474,"props":1328,"children":1329},{"style":712},[1330],{"type":442,"value":1171},{"type":437,"tag":474,"props":1332,"children":1333},{"style":739},[1334],{"type":442,"value":1094},{"type":437,"tag":474,"props":1336,"children":1337},{"style":701},[1338],{"type":442,"value":1180},{"type":437,"tag":474,"props":1340,"children":1341},{"style":829},[1342],{"type":442,"value":1185},{"type":437,"tag":474,"props":1344,"children":1345},{"style":627},[1346],{"type":442,"value":1347}," // 跳过单词间空格\n",{"type":437,"tag":474,"props":1349,"children":1351},{"class":476,"line":1350},18,[1352,1357,1361,1365,1369],{"type":437,"tag":474,"props":1353,"children":1354},{"style":739},[1355],{"type":442,"value":1356},"    j",{"type":437,"tag":474,"props":1358,"children":1359},{"style":701},[1360],{"type":442,"value":704},{"type":437,"tag":474,"props":1362,"children":1363},{"style":739},[1364],{"type":442,"value":1019},{"type":437,"tag":474,"props":1366,"children":1367},{"style":829},[1368],{"type":442,"value":1185},{"type":437,"tag":474,"props":1370,"children":1371},{"style":627},[1372],{"type":442,"value":1373}," // 指针移动，指向下个单词的尾字符\n",{"type":437,"tag":474,"props":1375,"children":1377},{"class":476,"line":1376},19,[1378],{"type":437,"tag":474,"props":1379,"children":1380},{"style":712},[1381],{"type":442,"value":1382},"  }\n",{"type":437,"tag":474,"props":1384,"children":1386},{"class":476,"line":1385},20,[1387,1391,1395,1399,1403,1407,1411,1415,1419,1424,1428],{"type":437,"tag":474,"props":1388,"children":1389},{"style":733},[1390],{"type":442,"value":736},{"type":437,"tag":474,"props":1392,"children":1393},{"style":739},[1394],{"type":442,"value":993},{"type":437,"tag":474,"props":1396,"children":1397},{"style":745},[1398],{"type":442,"value":748},{"type":437,"tag":474,"props":1400,"children":1401},{"style":695},[1402],{"type":442,"value":814},{"type":437,"tag":474,"props":1404,"children":1405},{"style":712},[1406],{"type":442,"value":758},{"type":437,"tag":474,"props":1408,"children":1409},{"style":761},[1410],{"type":442,"value":764},{"type":437,"tag":474,"props":1412,"children":1413},{"style":712},[1414],{"type":442,"value":769},{"type":437,"tag":474,"props":1416,"children":1417},{"style":745},[1418],{"type":442,"value":748},{"type":437,"tag":474,"props":1420,"children":1421},{"style":695},[1422],{"type":442,"value":1423},"trim",{"type":437,"tag":474,"props":1425,"children":1426},{"style":712},[1427],{"type":442,"value":805},{"type":437,"tag":474,"props":1429,"children":1430},{"style":829},[1431],{"type":442,"value":832},{"type":437,"tag":474,"props":1433,"children":1435},{"class":476,"line":1434},21,[1436,1440],{"type":437,"tag":474,"props":1437,"children":1438},{"style":712},[1439],{"type":442,"value":841},{"type":437,"tag":474,"props":1441,"children":1442},{"style":829},[1443],{"type":442,"value":832},{"type":437,"tag":1445,"props":1446,"children":1447},"style",{},[1448],{"type":442,"value":1449},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":430,"searchDepth":685,"depth":685,"links":1451},[1452,1453],{"id":599,"depth":486,"text":599},{"id":604,"depth":486,"text":604,"children":1454},[1455,1456],{"id":610,"depth":523,"text":610},{"id":848,"depth":523,"text":848},"markdown","content:1.algorithm:3.leetcode:151.reverse-words-in-a-string.md","content","1.algorithm/3.leetcode/151.reverse-words-in-a-string.md","md",[1463,1465],{"_path":146,"title":145,"description":1464},"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。\n实现 LRUCache 类：",{"_path":152,"title":151,"description":1466},"已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：",1713426450583]