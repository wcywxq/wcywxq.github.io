[{"data":1,"prerenderedAt":1291},["Reactive",2],{"navigation":3,"/algorithm/leetcode/generate-parentheses":398,"/algorithm/leetcode/generate-parentheses-surround":1286},[4,237,265,384],{"title":5,"_path":6,"children":7},"算法","/algorithm",[8,10,23],{"title":9,"_path":6},"刷题索引",{"title":11,"_path":12,"children":13},"剑指 offer","/algorithm/sword-ofter",[14,17,20],{"title":15,"_path":16},"LCR.140 训练计划 II","/algorithm/sword-ofter/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof",{"title":18,"_path":19},"LCR 169. 招式拆解 II","/algorithm/sword-ofter/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",{"title":21,"_path":22},"LCR 187. 破冰游戏","/algorithm/sword-ofter/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",{"title":24,"_path":25,"children":26},"力扣 leetCode","/algorithm/leetcode",[27,30,33,36,39,42,45,48,51,54,57,60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234],{"title":28,"_path":29},"No.1 两数相加","/algorithm/leetcode/two-sum",{"title":31,"_path":32},"No.2 两数相加","/algorithm/leetcode/add-two-numbers",{"title":34,"_path":35},"No.3 无重复字符的最长子串","/algorithm/leetcode/longest-substring-without-repeating-characters",{"title":37,"_path":38},"No.4 寻找两个正序数组的中位数","/algorithm/leetcode/median-of-two-sorted-arrays",{"title":40,"_path":41},"No.5 最长回文子串","/algorithm/leetcode/longest-palindromic-substring",{"title":43,"_path":44},"No.7 整数反转","/algorithm/leetcode/reverse-integer",{"title":46,"_path":47},"No.9 回文数","/algorithm/leetcode/palindrome-number",{"title":49,"_path":50},"No.14 最长公共前缀","/algorithm/leetcode/longest-common-prefix",{"title":52,"_path":53},"No.15 三数之和","/algorithm/leetcode/3sum",{"title":55,"_path":56},"No.20 有效的括号","/algorithm/leetcode/valid-parentheses",{"title":58,"_path":59},"No.21 合并两个有序链表","/algorithm/leetcode/merge-two-sorted-lists",{"title":61,"_path":62},"No.22 括号生成","/algorithm/leetcode/generate-parentheses",{"title":64,"_path":65},"No.23 合并 K 个升序链表","/algorithm/leetcode/merge-k-sorted-lists",{"title":67,"_path":68},"No.24 两两交换链表中的节点","/algorithm/leetcode/swap-nodes-in-pairs",{"title":70,"_path":71},"No.25 K 个一组翻转链表","/algorithm/leetcode/reverse-nodes-in-k-group",{"title":73,"_path":74},"No.31 下一个排列","/algorithm/leetcode/next-permutation",{"title":76,"_path":77},"No.32 最长有效括号","/algorithm/leetcode/longest-valid-parentheses",{"title":79,"_path":80},"No.33 搜索旋转排序数组","/algorithm/leetcode/search-in-rotated-sorted-array",{"title":82,"_path":83},"No.34 在排序数组中查找元素的第一个和最后一个位置","/algorithm/leetcode/find-first-and-last-position-of-element-in-sorted-array",{"title":85,"_path":86},"No.39 组合求和","/algorithm/leetcode/combination-sum",{"title":88,"_path":89},"No.42 接雨水","/algorithm/leetcode/trapping-rain-water",{"title":91,"_path":92},"No.46 全排列","/algorithm/leetcode/permutations",{"title":94,"_path":95},"No.53 最大子序和","/algorithm/leetcode/maximum-subarray",{"title":97,"_path":98},"No.56 合并区间","/algorithm/leetcode/merge-intervals",{"title":100,"_path":101},"No.67 二进制求和","/algorithm/leetcode/add-binary",{"title":103,"_path":104},"No.69 x 的平方根","/algorithm/leetcode/sqrtx",{"title":106,"_path":107},"No.70 爬楼梯","/algorithm/leetcode/climbing-stairs",{"title":109,"_path":110},"No.88 合并两个有序数组","/algorithm/leetcode/merge-sorted-array",{"title":112,"_path":113},"No.92 反转链表 II","/algorithm/leetcode/reverse-linked-list-ii",{"title":115,"_path":116},"No.94 二叉树的中序遍历","/algorithm/leetcode/binary-tree-inorder-traversal",{"title":118,"_path":119},"No.101 对称二叉树","/algorithm/leetcode/symmetric-tree",{"title":121,"_path":122},"No.102 二叉树的层序遍历","/algorithm/leetcode/binary-tree-level-order-traversal",{"title":124,"_path":125},"No.104 二叉树的最大深度","/algorithm/leetcode/maximum-depth-of-binary-tree",{"title":127,"_path":128},"No.111 二叉树的最小深度","/algorithm/leetcode/minimum-depth-of-binary-tree",{"title":130,"_path":131},"No.112 路径总和","/algorithm/leetcode/path-sum",{"title":133,"_path":134},"No.121 买股票的最佳时机","/algorithm/leetcode/best-time-to-buy-and-sell-stock",{"title":136,"_path":137},"No.129 求根到叶子节点数字之和","/algorithm/leetcode/sum-root-to-leaf-numbers",{"title":139,"_path":140},"No.136 只出现一次的数字","/algorithm/leetcode/single-number",{"title":142,"_path":143},"No.141 环型链表","/algorithm/leetcode/linked-list-cycle",{"title":145,"_path":146},"No.146 LRU 缓存","/algorithm/leetcode/lru-cache",{"title":148,"_path":149},"No.151 反转字符串中的单词","/algorithm/leetcode/reverse-words-in-a-string",{"title":151,"_path":152},"No.153 寻找旋转排序数组中的最小值","/algorithm/leetcode/find-minimum-in-rotated-sorted-array",{"title":154,"_path":155},"No.155 最小栈","/algorithm/leetcode/min-stack",{"title":157,"_path":158},"No.160 相交链表","/algorithm/leetcode/intersection-of-two-linked-lists",{"title":160,"_path":161},"No.162 寻找峰值","/algorithm/leetcode/find-peak-element",{"title":163,"_path":164},"No.165 比较版本号","/algorithm/leetcode/compare-version-numbers",{"title":166,"_path":167},"No.169 多数元素","/algorithm/leetcode/majority-element",{"title":169,"_path":170},"No.200 岛屿数量","/algorithm/leetcode/number-of-islands",{"title":172,"_path":173},"No.206 反转链表","/algorithm/leetcode/reverse-linked-list",{"title":175,"_path":176},"No.209 长度最小的子数组","/algorithm/leetcode/minimum-size-subarray-sum",{"title":178,"_path":179},"No.215 数组中的第K个最大元素","/algorithm/leetcode/kth-largest-element-in-an-array",{"title":181,"_path":182},"No.226 翻转二叉树","/algorithm/leetcode/invert-binary-tree",{"title":184,"_path":185},"No.238 除自身以外数组的乘积","/algorithm/leetcode/product-of-array-except-self",{"title":187,"_path":188},"No.322 零钱兑换","/algorithm/leetcode/coin-change",{"title":190,"_path":191},"No.334 递增的三元子序列","/algorithm/leetcode/increasing-triplet-subsequence",{"title":193,"_path":194},"No.344 反转字符串","/algorithm/leetcode/reverse-string",{"title":196,"_path":197},"No.345 反转字符串中的元音字母","/algorithm/leetcode/reverse-vowels-of-a-string",{"title":199,"_path":200},"No.384 打乱数组","/algorithm/leetcode/shuffle-an-array",{"title":202,"_path":203},"No.415 字符串相加","/algorithm/leetcode/add-strings",{"title":205,"_path":206},"No.443 压缩字符串","/algorithm/leetcode/string-compression",{"title":208,"_path":209},"No.509 斐波那契数","/algorithm/leetcode/fibonacci-number",{"title":211,"_path":212},"No.605 种花问题","/algorithm/leetcode/can-place-flowers",{"title":214,"_path":215},"No.617 合并二叉树","/algorithm/leetcode/merge-two-binary-trees",{"title":217,"_path":218},"No.678 有效的括号字符串","/algorithm/leetcode/valid-parenthesis-string",{"title":220,"_path":221},"No.704 二分查找","/algorithm/leetcode/binary-search",{"title":223,"_path":224},"No.912 排序数组","/algorithm/leetcode/sort-an-array",{"title":226,"_path":227},"No.1071 字符串的最大公因子","/algorithm/leetcode/greatest-common-divisor-of-strings",{"title":229,"_path":230},"No.1143 最长公共子序列","/algorithm/leetcode/longest-common-subsequence",{"title":232,"_path":233},"No.1431 拥有最多糖果的孩子","/algorithm/leetcode/kids-with-the-greatest-number-of-candies",{"title":235,"_path":236},"No.1768 交替合并字符串","/algorithm/leetcode/merge-strings-alternately",{"title":238,"_path":239,"children":240},"前端八股文","/frontend-endorsement",[241,252],{"title":242,"_path":243,"children":244},"构建工具","/frontend-endorsement/build-tools",[245],{"title":246,"_path":247,"children":248},"Webpack","/frontend-endorsement/build-tools/webpack",[249],{"title":250,"_path":251},"构建流程","/frontend-endorsement/build-tools/webpack/build-process",{"title":253,"_path":254,"children":255},"Html","/frontend-endorsement/html",[256,259,262],{"title":257,"_path":258},"Canvas 和 Svg","/frontend-endorsement/html/canvas-svg",{"title":260,"_path":261},"DOCTYPE 文档类型","/frontend-endorsement/html/doc-type",{"title":263,"_path":264},"离线存储","/frontend-endorsement/html/offline-storage",{"title":266,"_path":267,"children":268},"前端代码考核","/frontend-code-assessment",[269,318,377],{"title":270,"_path":271,"children":272},"源码实现","/frontend-code-assessment/source",[273,298,311],{"title":274,"_path":275,"children":276},"原生 api","/frontend-code-assessment/source/native-api",[277,280,283,286,289,292,295],{"title":278,"_path":279},"ajax","/frontend-code-assessment/source/native-api/ajax",{"title":281,"_path":282},"call & apply & bind","/frontend-code-assessment/source/native-api/call-apply-bind",{"title":284,"_path":285},"new 操作符","/frontend-code-assessment/source/native-api/new",{"title":287,"_path":288},"instanceof 关键字","/frontend-code-assessment/source/native-api/instanceof",{"title":290,"_path":291},"定时器","/frontend-code-assessment/source/native-api/timer",{"title":293,"_path":294},"JSON.stringify","/frontend-code-assessment/source/native-api/json-stringify",{"title":296,"_path":297},"Iterator 迭代器","/frontend-code-assessment/source/native-api/iterator",{"title":299,"_path":300,"children":301},"数组 Array","/frontend-code-assessment/source/array",[302,305,308],{"title":303,"_path":304},"数组去重","/frontend-code-assessment/source/array/remove-duplicate",{"title":306,"_path":307},"数组扁平化","/frontend-code-assessment/source/array/flat",{"title":309,"_path":310},"交集、差集、并集、补集","/frontend-code-assessment/source/array/intersect-minus-union-complement",{"title":312,"_path":313,"children":314},"字符串 String","/frontend-code-assessment/source/string",[315],{"title":316,"_path":317},"repeat()","/frontend-code-assessment/source/string/repeat",{"title":319,"_path":320,"children":321},"业务场景","/frontend-code-assessment/scene",[322,344,347,350,353,356,359,362,365,368,371,374],{"title":323,"_path":324,"children":325},"Promise","/frontend-code-assessment/scene/promise",[326,329,332,335,338,341],{"title":327,"_path":328},"保证 url 打印顺序并支持 retry","/frontend-code-assessment/scene/promise/order-print-url-and-support-retry",{"title":330,"_path":331},"并发限制图片加载数量","/frontend-code-assessment/scene/promise/concurrent-limit-image-load-count",{"title":333,"_path":334},"使用 addRemote 实现 add","/frontend-code-assessment/scene/promise/use-addremote-to-implement-add",{"title":336,"_path":337},"实现 mergePromise 函数","/frontend-code-assessment/scene/promise/implement-merge-promise-function",{"title":339,"_path":340},"循环打印红-黄-绿","/frontend-code-assessment/scene/promise/cycle-printing-red-yellow-green",{"title":342,"_path":343},"promise 每隔 1s 输出","/frontend-code-assessment/scene/promise/promise-output-every-1s",{"title":345,"_path":346},"计算对象占用字节数","/frontend-code-assessment/scene/calcuate-object-bytes",{"title":348,"_path":349},"倒计时","/frontend-code-assessment/scene/countdown",{"title":351,"_path":352},"实现前端路由","/frontend-code-assessment/scene/frontend-route",{"title":354,"_path":355},"图片格式转换","/frontend-code-assessment/scene/image-format-conversion",{"title":357,"_path":358},"lodash.get","/frontend-code-assessment/scene/lodash-get",{"title":360,"_path":361},"记忆化请求函数 - 可缓存请求函数","/frontend-code-assessment/scene/memorize-request",{"title":363,"_path":364},"内容中出现频率最高的字符","/frontend-code-assessment/scene/most-frequent-characters-in-content",{"title":366,"_path":367},"富文本内容转换","/frontend-code-assessment/scene/rich-text-content-conversion",{"title":369,"_path":370},"sku 算法实现","/frontend-code-assessment/scene/sku",{"title":372,"_path":373},"长列表虚拟滚动","/frontend-code-assessment/scene/vitrual-scroll-list",{"title":375,"_path":376},"xhr hook 实现打印日志","/frontend-code-assessment/scene/xhr-hook-to-log",{"title":378,"_path":379,"children":380},"Ts 类型挑战","/frontend-code-assessment/type-challeges",[381],{"title":382,"_path":383},"No.10 元组转合集(联合类型)","/frontend-code-assessment/type-challeges/medium-tuple-to-union",{"title":385,"_path":386,"children":387},"后端语言","/backend-languages",[388],{"title":389,"_path":390,"children":391},"Python","/backend-languages/python",[392,395],{"title":393,"_path":394},"基础","/backend-languages/python/base",{"title":396,"_path":397},"函数","/backend-languages/python/function",{"_path":62,"_dir":399,"_draft":400,"_partial":400,"_locale":401,"title":61,"description":402,"url":403,"body":404,"_type":1281,"_id":1282,"_source":1283,"_file":1284,"_extension":1285},"leetcode",false,"","数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。","https://leetcode.cn/problems/generate-parentheses",{"type":405,"children":406,"toc":1275},"root",[407,414,419,449,454,477,482,492,498,503,516,521,527,1269],{"type":408,"tag":409,"props":410,"children":411},"element","p",{},[412],{"type":413,"value":402},"text",{"type":408,"tag":409,"props":415,"children":416},{},[417],{"type":413,"value":418},"示例 1：",{"type":408,"tag":420,"props":421,"children":424},"pre",{"className":422,"code":423,"language":413,"meta":401,"style":401},"language-text shiki shiki-themes slack-ochin slack-ochin ayu-dark","输入：n = 3\n输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",[425],{"type":408,"tag":426,"props":427,"children":428},"code",{"__ignoreMap":401},[429,440],{"type":408,"tag":430,"props":431,"children":434},"span",{"class":432,"line":433},"line",1,[435],{"type":408,"tag":430,"props":436,"children":437},{},[438],{"type":413,"value":439},"输入：n = 3\n",{"type":408,"tag":430,"props":441,"children":443},{"class":432,"line":442},2,[444],{"type":408,"tag":430,"props":445,"children":446},{},[447],{"type":413,"value":448},"输出：[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n",{"type":408,"tag":409,"props":450,"children":451},{},[452],{"type":413,"value":453},"示例 2：",{"type":408,"tag":420,"props":455,"children":457},{"className":422,"code":456,"language":413,"meta":401,"style":401},"输入：n = 1\n输出：[\"()\"]\n",[458],{"type":408,"tag":426,"props":459,"children":460},{"__ignoreMap":401},[461,469],{"type":408,"tag":430,"props":462,"children":463},{"class":432,"line":433},[464],{"type":408,"tag":430,"props":465,"children":466},{},[467],{"type":413,"value":468},"输入：n = 1\n",{"type":408,"tag":430,"props":470,"children":471},{"class":432,"line":442},[472],{"type":408,"tag":430,"props":473,"children":474},{},[475],{"type":413,"value":476},"输出：[\"()\"]\n",{"type":408,"tag":409,"props":478,"children":479},{},[480],{"type":413,"value":481},"提示：",{"type":408,"tag":483,"props":484,"children":485},"ul",{},[486],{"type":408,"tag":487,"props":488,"children":489},"li",{},[490],{"type":413,"value":491},"1 \u003C= n \u003C= 8",{"type":408,"tag":493,"props":494,"children":496},"h2",{"id":495},"解题思路",[497],{"type":413,"value":495},{"type":408,"tag":409,"props":499,"children":500},{},[501],{"type":413,"value":502},"由于需要求解所有的可能，因此回溯就不难想到，回溯的思路和写法相对比较固定，并且回溯的优化手段大多是剪枝。\n不难想到，如果左括号的数据小于右括号，我们可以提前退出，这就是这道题的剪枝。例如：())...，后面就不用看了，直接退出即可。回溯的退出条件也不难想到：",{"type":408,"tag":483,"props":504,"children":505},{},[506,511],{"type":408,"tag":487,"props":507,"children":508},{},[509],{"type":413,"value":510},"左括号数目 = 右括号数目",{"type":408,"tag":487,"props":512,"children":513},{},[514],{"type":413,"value":515},"左括号数据 + 右括号数据 = 2 * n\n因此这道题可以使用深度优先搜索（回溯思想），从空字符串开始构造，做加法，即 dfs(左括号数目，右括号数据，路径)，我们从 dfs(0, 0, \"\") 开始",{"type":408,"tag":493,"props":517,"children":519},{"id":518},"实现",[520],{"type":413,"value":518},{"type":408,"tag":522,"props":523,"children":525},"h3",{"id":524},"回溯",[526],{"type":413,"value":524},{"type":408,"tag":420,"props":528,"children":532},{"className":529,"code":530,"language":531,"meta":401,"style":401},"language-js shiki shiki-themes slack-ochin slack-ochin ayu-dark","/**\n * @param {number} n\n * @return {string[]}\n */\nvar generateParenthesis = function (n) {\n  const res = [];\n\n  /**\n   * @param l 左侧括号已经用了几个\n   * @param r 右侧括号已经用了几个\n   * @param str 当前递归得到的拼接字符串结果\n   */\n  function dfs(l, r, str) {\n    if (l === n && r === n) {\n      return res.push(str);\n    }\n    // l \u003C r 时不满足条件，剪枝\n    if (l \u003C r) return;\n    // l \u003C n 时可插入左括号，最多可以插入 n 个\n    if (l \u003C n) {\n      dfs(l + 1, r, str + \"(\");\n    }\n    // r \u003C l 时，可以插入右括号\n    if (r \u003C l) {\n      dfs(l, r + 1, str + \")\");\n    }\n  }\n\n  dfs(0, 0, \"\");\n\n  return res;\n};\n","js",[533],{"type":408,"tag":426,"props":534,"children":535},{"__ignoreMap":401},[536,545,571,589,598,642,672,682,691,714,736,758,767,812,861,903,912,921,960,969,997,1059,1067,1076,1105,1162,1170,1179,1187,1231,1239,1256],{"type":408,"tag":430,"props":537,"children":538},{"class":432,"line":433},[539],{"type":408,"tag":430,"props":540,"children":542},{"style":541},"--shiki-light:#357B42;--shiki-default:#357B42;--shiki-dark:#ACB6BF8C;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[543],{"type":413,"value":544},"/**\n",{"type":408,"tag":430,"props":546,"children":547},{"class":432,"line":442},[548,553,559,565],{"type":408,"tag":430,"props":549,"children":550},{"style":541},[551],{"type":413,"value":552}," * ",{"type":408,"tag":430,"props":554,"children":556},{"style":555},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[557],{"type":413,"value":558},"@param",{"type":408,"tag":430,"props":560,"children":562},{"style":561},"--shiki-light:#0444AC;--shiki-default:#0444AC;--shiki-dark:#59C2FF;--shiki-light-font-style:italic;--shiki-default-font-style:italic;--shiki-dark-font-style:italic",[563],{"type":413,"value":564}," {number}",{"type":408,"tag":430,"props":566,"children":568},{"style":567},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6;--shiki-light-font-style:inherit;--shiki-default-font-style:inherit;--shiki-dark-font-style:italic",[569],{"type":413,"value":570}," n\n",{"type":408,"tag":430,"props":572,"children":574},{"class":432,"line":573},3,[575,579,584],{"type":408,"tag":430,"props":576,"children":577},{"style":541},[578],{"type":413,"value":552},{"type":408,"tag":430,"props":580,"children":581},{"style":555},[582],{"type":413,"value":583},"@return",{"type":408,"tag":430,"props":585,"children":586},{"style":561},[587],{"type":413,"value":588}," {string[]}\n",{"type":408,"tag":430,"props":590,"children":592},{"class":432,"line":591},4,[593],{"type":408,"tag":430,"props":594,"children":595},{"style":541},[596],{"type":413,"value":597}," */\n",{"type":408,"tag":430,"props":599,"children":601},{"class":432,"line":600},5,[602,608,614,620,625,631,637],{"type":408,"tag":430,"props":603,"children":605},{"style":604},"--shiki-light:#0991B6;--shiki-default:#0991B6;--shiki-dark:#FF8F40",[606],{"type":413,"value":607},"var",{"type":408,"tag":430,"props":609,"children":611},{"style":610},"--shiki-light:#7EB233;--shiki-default:#7EB233;--shiki-dark:#FFB454",[612],{"type":413,"value":613}," generateParenthesis",{"type":408,"tag":430,"props":615,"children":617},{"style":616},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#F29668",[618],{"type":413,"value":619}," =",{"type":408,"tag":430,"props":621,"children":622},{"style":604},[623],{"type":413,"value":624}," function",{"type":408,"tag":430,"props":626,"children":628},{"style":627},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6",[629],{"type":413,"value":630}," (",{"type":408,"tag":430,"props":632,"children":634},{"style":633},"--shiki-light:#B1108E;--shiki-default:#B1108E;--shiki-dark:#D2A6FF",[635],{"type":413,"value":636},"n",{"type":408,"tag":430,"props":638,"children":639},{"style":627},[640],{"type":413,"value":641},") {\n",{"type":408,"tag":430,"props":643,"children":645},{"class":432,"line":644},6,[646,651,657,661,666],{"type":408,"tag":430,"props":647,"children":648},{"style":604},[649],{"type":413,"value":650},"  const",{"type":408,"tag":430,"props":652,"children":654},{"style":653},"--shiki-light:#2F86D2;--shiki-default:#2F86D2;--shiki-dark:#BFBDB6",[655],{"type":413,"value":656}," res",{"type":408,"tag":430,"props":658,"children":659},{"style":616},[660],{"type":413,"value":619},{"type":408,"tag":430,"props":662,"children":663},{"style":627},[664],{"type":413,"value":665}," []",{"type":408,"tag":430,"props":667,"children":669},{"style":668},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#BFBDB6B3",[670],{"type":413,"value":671},";\n",{"type":408,"tag":430,"props":673,"children":675},{"class":432,"line":674},7,[676],{"type":408,"tag":430,"props":677,"children":679},{"emptyLinePlaceholder":678},true,[680],{"type":413,"value":681},"\n",{"type":408,"tag":430,"props":683,"children":685},{"class":432,"line":684},8,[686],{"type":408,"tag":430,"props":687,"children":688},{"style":541},[689],{"type":413,"value":690},"  /**\n",{"type":408,"tag":430,"props":692,"children":694},{"class":432,"line":693},9,[695,700,704,709],{"type":408,"tag":430,"props":696,"children":697},{"style":541},[698],{"type":413,"value":699},"   * ",{"type":408,"tag":430,"props":701,"children":702},{"style":555},[703],{"type":413,"value":558},{"type":408,"tag":430,"props":705,"children":706},{"style":567},[707],{"type":413,"value":708}," l",{"type":408,"tag":430,"props":710,"children":711},{"style":541},[712],{"type":413,"value":713}," 左侧括号已经用了几个\n",{"type":408,"tag":430,"props":715,"children":717},{"class":432,"line":716},10,[718,722,726,731],{"type":408,"tag":430,"props":719,"children":720},{"style":541},[721],{"type":413,"value":699},{"type":408,"tag":430,"props":723,"children":724},{"style":555},[725],{"type":413,"value":558},{"type":408,"tag":430,"props":727,"children":728},{"style":567},[729],{"type":413,"value":730}," r",{"type":408,"tag":430,"props":732,"children":733},{"style":541},[734],{"type":413,"value":735}," 右侧括号已经用了几个\n",{"type":408,"tag":430,"props":737,"children":739},{"class":432,"line":738},11,[740,744,748,753],{"type":408,"tag":430,"props":741,"children":742},{"style":541},[743],{"type":413,"value":699},{"type":408,"tag":430,"props":745,"children":746},{"style":555},[747],{"type":413,"value":558},{"type":408,"tag":430,"props":749,"children":750},{"style":567},[751],{"type":413,"value":752}," str",{"type":408,"tag":430,"props":754,"children":755},{"style":541},[756],{"type":413,"value":757}," 当前递归得到的拼接字符串结果\n",{"type":408,"tag":430,"props":759,"children":761},{"class":432,"line":760},12,[762],{"type":408,"tag":430,"props":763,"children":764},{"style":541},[765],{"type":413,"value":766},"   */\n",{"type":408,"tag":430,"props":768,"children":770},{"class":432,"line":769},13,[771,776,781,786,791,796,800,804,808],{"type":408,"tag":430,"props":772,"children":773},{"style":604},[774],{"type":413,"value":775},"  function",{"type":408,"tag":430,"props":777,"children":778},{"style":610},[779],{"type":413,"value":780}," dfs",{"type":408,"tag":430,"props":782,"children":783},{"style":627},[784],{"type":413,"value":785},"(",{"type":408,"tag":430,"props":787,"children":788},{"style":633},[789],{"type":413,"value":790},"l",{"type":408,"tag":430,"props":792,"children":793},{"style":668},[794],{"type":413,"value":795},",",{"type":408,"tag":430,"props":797,"children":798},{"style":633},[799],{"type":413,"value":730},{"type":408,"tag":430,"props":801,"children":802},{"style":668},[803],{"type":413,"value":795},{"type":408,"tag":430,"props":805,"children":806},{"style":633},[807],{"type":413,"value":752},{"type":408,"tag":430,"props":809,"children":810},{"style":627},[811],{"type":413,"value":641},{"type":408,"tag":430,"props":813,"children":815},{"class":432,"line":814},14,[816,822,826,830,835,840,845,849,853,857],{"type":408,"tag":430,"props":817,"children":819},{"style":818},"--shiki-light:#7B30D0;--shiki-default:#7B30D0;--shiki-dark:#FF8F40",[820],{"type":413,"value":821},"    if",{"type":408,"tag":430,"props":823,"children":824},{"style":627},[825],{"type":413,"value":630},{"type":408,"tag":430,"props":827,"children":828},{"style":653},[829],{"type":413,"value":790},{"type":408,"tag":430,"props":831,"children":832},{"style":616},[833],{"type":413,"value":834}," ===",{"type":408,"tag":430,"props":836,"children":837},{"style":653},[838],{"type":413,"value":839}," n",{"type":408,"tag":430,"props":841,"children":842},{"style":616},[843],{"type":413,"value":844}," &&",{"type":408,"tag":430,"props":846,"children":847},{"style":653},[848],{"type":413,"value":730},{"type":408,"tag":430,"props":850,"children":851},{"style":616},[852],{"type":413,"value":834},{"type":408,"tag":430,"props":854,"children":855},{"style":653},[856],{"type":413,"value":839},{"type":408,"tag":430,"props":858,"children":859},{"style":627},[860],{"type":413,"value":641},{"type":408,"tag":430,"props":862,"children":864},{"class":432,"line":863},15,[865,870,874,880,885,889,894,899],{"type":408,"tag":430,"props":866,"children":867},{"style":818},[868],{"type":413,"value":869},"      return",{"type":408,"tag":430,"props":871,"children":872},{"style":653},[873],{"type":413,"value":656},{"type":408,"tag":430,"props":875,"children":877},{"style":876},"--shiki-light:#002339;--shiki-default:#002339;--shiki-dark:#F29668",[878],{"type":413,"value":879},".",{"type":408,"tag":430,"props":881,"children":882},{"style":610},[883],{"type":413,"value":884},"push",{"type":408,"tag":430,"props":886,"children":887},{"style":627},[888],{"type":413,"value":785},{"type":408,"tag":430,"props":890,"children":891},{"style":653},[892],{"type":413,"value":893},"str",{"type":408,"tag":430,"props":895,"children":896},{"style":627},[897],{"type":413,"value":898},")",{"type":408,"tag":430,"props":900,"children":901},{"style":668},[902],{"type":413,"value":671},{"type":408,"tag":430,"props":904,"children":906},{"class":432,"line":905},16,[907],{"type":408,"tag":430,"props":908,"children":909},{"style":627},[910],{"type":413,"value":911},"    }\n",{"type":408,"tag":430,"props":913,"children":915},{"class":432,"line":914},17,[916],{"type":408,"tag":430,"props":917,"children":918},{"style":541},[919],{"type":413,"value":920},"    // l \u003C r 时不满足条件，剪枝\n",{"type":408,"tag":430,"props":922,"children":924},{"class":432,"line":923},18,[925,929,933,937,942,946,951,956],{"type":408,"tag":430,"props":926,"children":927},{"style":818},[928],{"type":413,"value":821},{"type":408,"tag":430,"props":930,"children":931},{"style":627},[932],{"type":413,"value":630},{"type":408,"tag":430,"props":934,"children":935},{"style":653},[936],{"type":413,"value":790},{"type":408,"tag":430,"props":938,"children":939},{"style":616},[940],{"type":413,"value":941}," \u003C",{"type":408,"tag":430,"props":943,"children":944},{"style":653},[945],{"type":413,"value":730},{"type":408,"tag":430,"props":947,"children":948},{"style":627},[949],{"type":413,"value":950},") ",{"type":408,"tag":430,"props":952,"children":953},{"style":818},[954],{"type":413,"value":955},"return",{"type":408,"tag":430,"props":957,"children":958},{"style":668},[959],{"type":413,"value":671},{"type":408,"tag":430,"props":961,"children":963},{"class":432,"line":962},19,[964],{"type":408,"tag":430,"props":965,"children":966},{"style":541},[967],{"type":413,"value":968},"    // l \u003C n 时可插入左括号，最多可以插入 n 个\n",{"type":408,"tag":430,"props":970,"children":972},{"class":432,"line":971},20,[973,977,981,985,989,993],{"type":408,"tag":430,"props":974,"children":975},{"style":818},[976],{"type":413,"value":821},{"type":408,"tag":430,"props":978,"children":979},{"style":627},[980],{"type":413,"value":630},{"type":408,"tag":430,"props":982,"children":983},{"style":653},[984],{"type":413,"value":790},{"type":408,"tag":430,"props":986,"children":987},{"style":616},[988],{"type":413,"value":941},{"type":408,"tag":430,"props":990,"children":991},{"style":653},[992],{"type":413,"value":839},{"type":408,"tag":430,"props":994,"children":995},{"style":627},[996],{"type":413,"value":641},{"type":408,"tag":430,"props":998,"children":1000},{"class":432,"line":999},21,[1001,1006,1010,1014,1019,1025,1029,1033,1037,1041,1045,1051,1055],{"type":408,"tag":430,"props":1002,"children":1003},{"style":610},[1004],{"type":413,"value":1005},"      dfs",{"type":408,"tag":430,"props":1007,"children":1008},{"style":627},[1009],{"type":413,"value":785},{"type":408,"tag":430,"props":1011,"children":1012},{"style":653},[1013],{"type":413,"value":790},{"type":408,"tag":430,"props":1015,"children":1016},{"style":616},[1017],{"type":413,"value":1018}," +",{"type":408,"tag":430,"props":1020,"children":1022},{"style":1021},"--shiki-light:#174781;--shiki-default:#174781;--shiki-dark:#D2A6FF",[1023],{"type":413,"value":1024}," 1",{"type":408,"tag":430,"props":1026,"children":1027},{"style":668},[1028],{"type":413,"value":795},{"type":408,"tag":430,"props":1030,"children":1031},{"style":653},[1032],{"type":413,"value":730},{"type":408,"tag":430,"props":1034,"children":1035},{"style":668},[1036],{"type":413,"value":795},{"type":408,"tag":430,"props":1038,"children":1039},{"style":653},[1040],{"type":413,"value":752},{"type":408,"tag":430,"props":1042,"children":1043},{"style":616},[1044],{"type":413,"value":1018},{"type":408,"tag":430,"props":1046,"children":1048},{"style":1047},"--shiki-light:#A44185;--shiki-default:#A44185;--shiki-dark:#AAD94C",[1049],{"type":413,"value":1050}," \"(\"",{"type":408,"tag":430,"props":1052,"children":1053},{"style":627},[1054],{"type":413,"value":898},{"type":408,"tag":430,"props":1056,"children":1057},{"style":668},[1058],{"type":413,"value":671},{"type":408,"tag":430,"props":1060,"children":1062},{"class":432,"line":1061},22,[1063],{"type":408,"tag":430,"props":1064,"children":1065},{"style":627},[1066],{"type":413,"value":911},{"type":408,"tag":430,"props":1068,"children":1070},{"class":432,"line":1069},23,[1071],{"type":408,"tag":430,"props":1072,"children":1073},{"style":541},[1074],{"type":413,"value":1075},"    // r \u003C l 时，可以插入右括号\n",{"type":408,"tag":430,"props":1077,"children":1079},{"class":432,"line":1078},24,[1080,1084,1088,1093,1097,1101],{"type":408,"tag":430,"props":1081,"children":1082},{"style":818},[1083],{"type":413,"value":821},{"type":408,"tag":430,"props":1085,"children":1086},{"style":627},[1087],{"type":413,"value":630},{"type":408,"tag":430,"props":1089,"children":1090},{"style":653},[1091],{"type":413,"value":1092},"r",{"type":408,"tag":430,"props":1094,"children":1095},{"style":616},[1096],{"type":413,"value":941},{"type":408,"tag":430,"props":1098,"children":1099},{"style":653},[1100],{"type":413,"value":708},{"type":408,"tag":430,"props":1102,"children":1103},{"style":627},[1104],{"type":413,"value":641},{"type":408,"tag":430,"props":1106,"children":1108},{"class":432,"line":1107},25,[1109,1113,1117,1121,1125,1129,1133,1137,1141,1145,1149,1154,1158],{"type":408,"tag":430,"props":1110,"children":1111},{"style":610},[1112],{"type":413,"value":1005},{"type":408,"tag":430,"props":1114,"children":1115},{"style":627},[1116],{"type":413,"value":785},{"type":408,"tag":430,"props":1118,"children":1119},{"style":653},[1120],{"type":413,"value":790},{"type":408,"tag":430,"props":1122,"children":1123},{"style":668},[1124],{"type":413,"value":795},{"type":408,"tag":430,"props":1126,"children":1127},{"style":653},[1128],{"type":413,"value":730},{"type":408,"tag":430,"props":1130,"children":1131},{"style":616},[1132],{"type":413,"value":1018},{"type":408,"tag":430,"props":1134,"children":1135},{"style":1021},[1136],{"type":413,"value":1024},{"type":408,"tag":430,"props":1138,"children":1139},{"style":668},[1140],{"type":413,"value":795},{"type":408,"tag":430,"props":1142,"children":1143},{"style":653},[1144],{"type":413,"value":752},{"type":408,"tag":430,"props":1146,"children":1147},{"style":616},[1148],{"type":413,"value":1018},{"type":408,"tag":430,"props":1150,"children":1151},{"style":1047},[1152],{"type":413,"value":1153}," \")\"",{"type":408,"tag":430,"props":1155,"children":1156},{"style":627},[1157],{"type":413,"value":898},{"type":408,"tag":430,"props":1159,"children":1160},{"style":668},[1161],{"type":413,"value":671},{"type":408,"tag":430,"props":1163,"children":1165},{"class":432,"line":1164},26,[1166],{"type":408,"tag":430,"props":1167,"children":1168},{"style":627},[1169],{"type":413,"value":911},{"type":408,"tag":430,"props":1171,"children":1173},{"class":432,"line":1172},27,[1174],{"type":408,"tag":430,"props":1175,"children":1176},{"style":627},[1177],{"type":413,"value":1178},"  }\n",{"type":408,"tag":430,"props":1180,"children":1182},{"class":432,"line":1181},28,[1183],{"type":408,"tag":430,"props":1184,"children":1185},{"emptyLinePlaceholder":678},[1186],{"type":413,"value":681},{"type":408,"tag":430,"props":1188,"children":1190},{"class":432,"line":1189},29,[1191,1196,1200,1205,1209,1214,1218,1223,1227],{"type":408,"tag":430,"props":1192,"children":1193},{"style":610},[1194],{"type":413,"value":1195},"  dfs",{"type":408,"tag":430,"props":1197,"children":1198},{"style":627},[1199],{"type":413,"value":785},{"type":408,"tag":430,"props":1201,"children":1202},{"style":1021},[1203],{"type":413,"value":1204},"0",{"type":408,"tag":430,"props":1206,"children":1207},{"style":668},[1208],{"type":413,"value":795},{"type":408,"tag":430,"props":1210,"children":1211},{"style":1021},[1212],{"type":413,"value":1213}," 0",{"type":408,"tag":430,"props":1215,"children":1216},{"style":668},[1217],{"type":413,"value":795},{"type":408,"tag":430,"props":1219,"children":1220},{"style":1047},[1221],{"type":413,"value":1222}," \"\"",{"type":408,"tag":430,"props":1224,"children":1225},{"style":627},[1226],{"type":413,"value":898},{"type":408,"tag":430,"props":1228,"children":1229},{"style":668},[1230],{"type":413,"value":671},{"type":408,"tag":430,"props":1232,"children":1234},{"class":432,"line":1233},30,[1235],{"type":408,"tag":430,"props":1236,"children":1237},{"emptyLinePlaceholder":678},[1238],{"type":413,"value":681},{"type":408,"tag":430,"props":1240,"children":1242},{"class":432,"line":1241},31,[1243,1248,1252],{"type":408,"tag":430,"props":1244,"children":1245},{"style":818},[1246],{"type":413,"value":1247},"  return",{"type":408,"tag":430,"props":1249,"children":1250},{"style":653},[1251],{"type":413,"value":656},{"type":408,"tag":430,"props":1253,"children":1254},{"style":668},[1255],{"type":413,"value":671},{"type":408,"tag":430,"props":1257,"children":1259},{"class":432,"line":1258},32,[1260,1265],{"type":408,"tag":430,"props":1261,"children":1262},{"style":627},[1263],{"type":413,"value":1264},"}",{"type":408,"tag":430,"props":1266,"children":1267},{"style":668},[1268],{"type":413,"value":671},{"type":408,"tag":1270,"props":1271,"children":1272},"style",{},[1273],{"type":413,"value":1274},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":401,"searchDepth":600,"depth":600,"links":1276},[1277,1278],{"id":495,"depth":442,"text":495},{"id":518,"depth":442,"text":518,"children":1279},[1280],{"id":524,"depth":573,"text":524},"markdown","content:1.algorithm:3.leetcode:22.generate-parentheses.md","content","1.algorithm/3.leetcode/22.generate-parentheses.md","md",[1287,1289],{"_path":59,"title":58,"description":1288},"将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。",{"_path":65,"title":64,"description":1290},"给你一个链表数组，每个链表都已经按升序排列。",1713153290692]